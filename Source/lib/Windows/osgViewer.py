# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _osgViewer
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgViewer.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _osgViewer.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _osgViewer.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _osgViewer.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _osgViewer.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _osgViewer.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _osgViewer.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _osgViewer.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _osgViewer.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgViewer.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _osgViewer.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _osgViewer.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgViewer.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgViewer.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgViewer.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _osgViewer.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _osgViewer.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import osg
import osgGA
OSGVIEWER_VERSION = _osgViewer.OSGVIEWER_VERSION

def osgViewerGetVersion(*args):
  """osgViewerGetVersion() -> char"""
  return _osgViewer.osgViewerGetVersion(*args)

def osgViewerGetLibraryName(*args):
  """osgViewerGetLibraryName() -> char"""
  return _osgViewer.osgViewerGetLibraryName(*args)
OSGVIEWER_VIEW = _osgViewer.OSGVIEWER_VIEW
class View(osg.View,osgGA.GUIActionAdapter):
    """Proxy of C++ View class"""
    __swig_setmethods__ = {}
    for _s in [osg.View,osgGA.GUIActionAdapter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, View, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.View,osgGA.GUIActionAdapter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, View, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> View
        __init__(self, View view, CopyOp copyop=SHALLOW_COPY) -> View
        __init__(self, View view) -> View
        """
        this = _osgViewer.new_View(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgViewer.View_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgViewer.View_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgViewer.View_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgViewer.View_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgViewer.View_className(*args)

    def asView(*args):
        """asView(self) -> View"""
        return _osgViewer.View_asView(*args)

    def getViewerBase(*args):
        """getViewerBase(self) -> ViewerBase"""
        return _osgViewer.View_getViewerBase(*args)

    def take(*args):
        """take(self, View rhs)"""
        return _osgViewer.View_take(*args)

    def setStartTick(*args):
        """setStartTick(self, Timer_t tick)"""
        return _osgViewer.View_setStartTick(*args)

    def getStartTick(*args):
        """getStartTick(self) -> Timer_t"""
        return _osgViewer.View_getStartTick(*args)

    def getScene(*args):
        """
        getScene(self) -> Scene
        getScene(self) -> Scene
        """
        return _osgViewer.View_getScene(*args)

    def setSceneData(*args):
        """
        setSceneData(self, Node node)
        setSceneData(self, NodeRef node)
        """
        return _osgViewer.View_setSceneData(*args)

    def getSceneData(*args):
        """
        getSceneData(self) -> Node
        getSceneData(self) -> Node
        """
        return _osgViewer.View_getSceneData(*args)

    def setDatabasePager(*args):
        """setDatabasePager(self, osgDB::DatabasePager dp)"""
        return _osgViewer.View_setDatabasePager(*args)

    def getDatabasePager(*args):
        """
        getDatabasePager(self) -> osgDB::DatabasePager
        getDatabasePager(self) -> osgDB::DatabasePager
        """
        return _osgViewer.View_getDatabasePager(*args)

    def setImagePager(*args):
        """setImagePager(self, osgDB::ImagePager ip)"""
        return _osgViewer.View_setImagePager(*args)

    def getImagePager(*args):
        """
        getImagePager(self) -> osgDB::ImagePager
        getImagePager(self) -> osgDB::ImagePager
        """
        return _osgViewer.View_getImagePager(*args)

    def setEventQueue(*args):
        """setEventQueue(self, EventQueue eventQueue)"""
        return _osgViewer.View_setEventQueue(*args)

    def getEventQueue(*args):
        """
        getEventQueue(self) -> EventQueue
        getEventQueue(self) -> EventQueue
        """
        return _osgViewer.View_getEventQueue(*args)

    def setCameraManipulator(*args):
        """setCameraManipulator(self, MatrixManipulator manipulator)"""
        return _osgViewer.View_setCameraManipulator(*args)

    def getCameraManipulator(*args):
        """
        getCameraManipulator(self) -> MatrixManipulator
        getCameraManipulator(self) -> MatrixManipulator
        """
        return _osgViewer.View_getCameraManipulator(*args)

    def home(*args):
        """home(self)"""
        return _osgViewer.View_home(*args)

    def addEventHandler(*args):
        """addEventHandler(self, GUIEventHandler eventHandler)"""
        return _osgViewer.View_addEventHandler(*args)

    def getEventHandlers(*args):
        """
        getEventHandlers(self) -> EventHandlers
        getEventHandlers(self) -> EventHandlers
        """
        return _osgViewer.View_getEventHandlers(*args)

    def setCoordinateSystemNodePath(*args):
        """setCoordinateSystemNodePath(self, NodePath nodePath)"""
        return _osgViewer.View_setCoordinateSystemNodePath(*args)

    def getCoordinateSystemNodePath(*args):
        """getCoordinateSystemNodePath(self) -> NodePath"""
        return _osgViewer.View_getCoordinateSystemNodePath(*args)

    def computeActiveCoordinateSystemNodePath(*args):
        """computeActiveCoordinateSystemNodePath(self)"""
        return _osgViewer.View_computeActiveCoordinateSystemNodePath(*args)

    def setDisplaySettings(*args):
        """setDisplaySettings(self, DisplaySettings ds)"""
        return _osgViewer.View_setDisplaySettings(*args)

    def getDisplaySettings(*args):
        """
        getDisplaySettings(self) -> DisplaySettings
        getDisplaySettings(self) -> DisplaySettings
        """
        return _osgViewer.View_getDisplaySettings(*args)

    def setFusionDistance(*args):
        """
        setFusionDistance(self, osgUtil::SceneView::FusionDistanceMode mode, float value=1.0)
        setFusionDistance(self, osgUtil::SceneView::FusionDistanceMode mode)
        """
        return _osgViewer.View_setFusionDistance(*args)

    def getFusionDistanceMode(*args):
        """getFusionDistanceMode(self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgViewer.View_getFusionDistanceMode(*args)

    def getFusionDistanceValue(*args):
        """getFusionDistanceValue(self) -> float"""
        return _osgViewer.View_getFusionDistanceValue(*args)

    def setUpViewAcrossAllScreens(*args):
        """setUpViewAcrossAllScreens(self)"""
        return _osgViewer.View_setUpViewAcrossAllScreens(*args)

    def setUpViewInWindow(*args):
        """
        setUpViewInWindow(self, int x, int y, int width, int height, unsigned int screenNum=0)
        setUpViewInWindow(self, int x, int y, int width, int height)
        """
        return _osgViewer.View_setUpViewInWindow(*args)

    def setUpViewOnSingleScreen(*args):
        """
        setUpViewOnSingleScreen(self, unsigned int screenNum=0)
        setUpViewOnSingleScreen(self)
        """
        return _osgViewer.View_setUpViewOnSingleScreen(*args)

    def setUpViewFor3DSphericalDisplay(*args):
        """
        setUpViewFor3DSphericalDisplay(self, double radius=1.0, double collar=0.45, unsigned int screenNum=0, 
            Image intensityMap=0, Matrixd projectorMatrix=osg::Matrixd())
        setUpViewFor3DSphericalDisplay(self, double radius=1.0, double collar=0.45, unsigned int screenNum=0, 
            Image intensityMap=0)
        setUpViewFor3DSphericalDisplay(self, double radius=1.0, double collar=0.45, unsigned int screenNum=0)
        setUpViewFor3DSphericalDisplay(self, double radius=1.0, double collar=0.45)
        setUpViewFor3DSphericalDisplay(self, double radius=1.0)
        setUpViewFor3DSphericalDisplay(self)
        """
        return _osgViewer.View_setUpViewFor3DSphericalDisplay(*args)

    def setUpViewForPanoramicSphericalDisplay(*args):
        """
        setUpViewForPanoramicSphericalDisplay(self, double radius=1.0, double collar=0.45, unsigned int screenNum=0, 
            Image intensityMap=0, Matrixd projectorMatrix=osg::Matrixd())
        setUpViewForPanoramicSphericalDisplay(self, double radius=1.0, double collar=0.45, unsigned int screenNum=0, 
            Image intensityMap=0)
        setUpViewForPanoramicSphericalDisplay(self, double radius=1.0, double collar=0.45, unsigned int screenNum=0)
        setUpViewForPanoramicSphericalDisplay(self, double radius=1.0, double collar=0.45)
        setUpViewForPanoramicSphericalDisplay(self, double radius=1.0)
        setUpViewForPanoramicSphericalDisplay(self)
        """
        return _osgViewer.View_setUpViewForPanoramicSphericalDisplay(*args)

    def setUpViewForWoWVxDisplay(*args):
        """
        setUpViewForWoWVxDisplay(self, unsigned int screenNum, unsigned char wow_content, 
            unsigned char wow_factor, unsigned char wow_offset, 
            float wow_disparity_Zd, float wow_disparity_vz, 
            float wow_disparity_M, float wow_disparity_C)
        """
        return _osgViewer.View_setUpViewForWoWVxDisplay(*args)

    def containsCamera(*args):
        """containsCamera(self, Camera camera) -> bool"""
        return _osgViewer.View_containsCamera(*args)

    def getCameraContainingPosition(*args):
        """getCameraContainingPosition(self, float x, float y, float local_x, float local_y) -> Camera"""
        return _osgViewer.View_getCameraContainingPosition(*args)

    def computeIntersections(*args):
        """
        computeIntersections(self, float x, float y, osgUtil::LineSegmentIntersector::Intersections intersections, 
            NodeMask traversalMask=0xffffffff) -> bool
        computeIntersections(self, float x, float y, osgUtil::LineSegmentIntersector::Intersections intersections) -> bool
        computeIntersections(self, float x, float y, NodePath nodePath, osgUtil::LineSegmentIntersector::Intersections intersections, 
            NodeMask traversalMask=0xffffffff) -> bool
        computeIntersections(self, float x, float y, NodePath nodePath, osgUtil::LineSegmentIntersector::Intersections intersections) -> bool
        """
        return _osgViewer.View_computeIntersections(*args)

    def requestRedraw(*args):
        """requestRedraw(self)"""
        return _osgViewer.View_requestRedraw(*args)

    def requestContinuousUpdate(*args):
        """
        requestContinuousUpdate(self, bool needed=True)
        requestContinuousUpdate(self)
        """
        return _osgViewer.View_requestContinuousUpdate(*args)

    def requestWarpPointer(*args):
        """requestWarpPointer(self, float x, float y)"""
        return _osgViewer.View_requestWarpPointer(*args)

    def assignSceneDataToCameras(*args):
        """assignSceneDataToCameras(self)"""
        return _osgViewer.View_assignSceneDataToCameras(*args)

    def init(*args):
        """init(self)"""
        return _osgViewer.View_init(*args)

View_swigregister = _osgViewer.View_swigregister
View_swigregister(View)

OSGVIEWER_GRAPHICWINDOW = _osgViewer.OSGVIEWER_GRAPHICWINDOW
class GraphicsWindow(osg.GraphicsContext,osgGA.GUIActionAdapter):
    """Proxy of C++ GraphicsWindow class"""
    __swig_setmethods__ = {}
    for _s in [osg.GraphicsContext,osgGA.GUIActionAdapter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.GraphicsContext,osgGA.GUIActionAdapter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsWindow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> GraphicsWindow"""
        this = _osgViewer.new_GraphicsWindow(*args)
        try: self.this.append(this)
        except: self.this = this
    def isSameKindAs(*args):
        """isSameKindAs(self, Object object) -> bool"""
        return _osgViewer.GraphicsWindow_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgViewer.GraphicsWindow_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgViewer.GraphicsWindow_className(*args)

    def setEventQueue(*args):
        """setEventQueue(self, EventQueue eventQueue)"""
        return _osgViewer.GraphicsWindow_setEventQueue(*args)

    def getEventQueue(*args):
        """
        getEventQueue(self) -> EventQueue
        getEventQueue(self) -> EventQueue
        """
        return _osgViewer.GraphicsWindow_getEventQueue(*args)

    def checkEvents(*args):
        """checkEvents(self)"""
        return _osgViewer.GraphicsWindow_checkEvents(*args)

    def setWindowRectangle(*args):
        """setWindowRectangle(self, int x, int y, int width, int height)"""
        return _osgViewer.GraphicsWindow_setWindowRectangle(*args)

    def setWindowRectangleImplementation(*args):
        """setWindowRectangleImplementation(self, int ?, int ?, int ?, int ?) -> bool"""
        return _osgViewer.GraphicsWindow_setWindowRectangleImplementation(*args)

    def getWindowRectangle(*args):
        """getWindowRectangle(self, int x, int y, int width, int height)"""
        return _osgViewer.GraphicsWindow_getWindowRectangle(*args)

    def setWindowDecoration(*args):
        """setWindowDecoration(self, bool flag)"""
        return _osgViewer.GraphicsWindow_setWindowDecoration(*args)

    def setWindowDecorationImplementation(*args):
        """setWindowDecorationImplementation(self, bool ?) -> bool"""
        return _osgViewer.GraphicsWindow_setWindowDecorationImplementation(*args)

    def getWindowDecoration(*args):
        """getWindowDecoration(self) -> bool"""
        return _osgViewer.GraphicsWindow_getWindowDecoration(*args)

    def grabFocus(*args):
        """grabFocus(self)"""
        return _osgViewer.GraphicsWindow_grabFocus(*args)

    def grabFocusIfPointerInWindow(*args):
        """grabFocusIfPointerInWindow(self)"""
        return _osgViewer.GraphicsWindow_grabFocusIfPointerInWindow(*args)

    InheritCursor = _osgViewer.GraphicsWindow_InheritCursor
    NoCursor = _osgViewer.GraphicsWindow_NoCursor
    RightArrowCursor = _osgViewer.GraphicsWindow_RightArrowCursor
    LeftArrowCursor = _osgViewer.GraphicsWindow_LeftArrowCursor
    InfoCursor = _osgViewer.GraphicsWindow_InfoCursor
    DestroyCursor = _osgViewer.GraphicsWindow_DestroyCursor
    HelpCursor = _osgViewer.GraphicsWindow_HelpCursor
    CycleCursor = _osgViewer.GraphicsWindow_CycleCursor
    SprayCursor = _osgViewer.GraphicsWindow_SprayCursor
    WaitCursor = _osgViewer.GraphicsWindow_WaitCursor
    TextCursor = _osgViewer.GraphicsWindow_TextCursor
    CrosshairCursor = _osgViewer.GraphicsWindow_CrosshairCursor
    UpDownCursor = _osgViewer.GraphicsWindow_UpDownCursor
    LeftRightCursor = _osgViewer.GraphicsWindow_LeftRightCursor
    TopSideCursor = _osgViewer.GraphicsWindow_TopSideCursor
    BottomSideCursor = _osgViewer.GraphicsWindow_BottomSideCursor
    LeftSideCursor = _osgViewer.GraphicsWindow_LeftSideCursor
    RightSideCursor = _osgViewer.GraphicsWindow_RightSideCursor
    TopLeftCorner = _osgViewer.GraphicsWindow_TopLeftCorner
    TopRightCorner = _osgViewer.GraphicsWindow_TopRightCorner
    BottomRightCorner = _osgViewer.GraphicsWindow_BottomRightCorner
    BottomLeftCorner = _osgViewer.GraphicsWindow_BottomLeftCorner
    def setWindowName(*args):
        """setWindowName(self, string ?)"""
        return _osgViewer.GraphicsWindow_setWindowName(*args)

    def getWindowName(*args):
        """getWindowName(self) -> string"""
        return _osgViewer.GraphicsWindow_getWindowName(*args)

    def useCursor(*args):
        """useCursor(self, bool cursorOn)"""
        return _osgViewer.GraphicsWindow_useCursor(*args)

    def setCursor(*args):
        """setCursor(self, MouseCursor ?)"""
        return _osgViewer.GraphicsWindow_setCursor(*args)

    def valid(*args):
        """valid(self) -> bool"""
        return _osgViewer.GraphicsWindow_valid(*args)

    def realizeImplementation(*args):
        """realizeImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindow_realizeImplementation(*args)

    def isRealizedImplementation(*args):
        """isRealizedImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindow_isRealizedImplementation(*args)

    def closeImplementation(*args):
        """closeImplementation(self)"""
        return _osgViewer.GraphicsWindow_closeImplementation(*args)

    def makeCurrentImplementation(*args):
        """makeCurrentImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindow_makeCurrentImplementation(*args)

    def makeContextCurrentImplementation(*args):
        """makeContextCurrentImplementation(self, GraphicsContext ?) -> bool"""
        return _osgViewer.GraphicsWindow_makeContextCurrentImplementation(*args)

    def releaseContextImplementation(*args):
        """releaseContextImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindow_releaseContextImplementation(*args)

    def bindPBufferToTextureImplementation(*args):
        """bindPBufferToTextureImplementation(self, GLenum ?)"""
        return _osgViewer.GraphicsWindow_bindPBufferToTextureImplementation(*args)

    def swapBuffersImplementation(*args):
        """swapBuffersImplementation(self)"""
        return _osgViewer.GraphicsWindow_swapBuffersImplementation(*args)

    def requestRedraw(*args):
        """requestRedraw(self)"""
        return _osgViewer.GraphicsWindow_requestRedraw(*args)

    def requestContinuousUpdate(*args):
        """
        requestContinuousUpdate(self, bool ?=True)
        requestContinuousUpdate(self)
        """
        return _osgViewer.GraphicsWindow_requestContinuousUpdate(*args)

    def requestWarpPointer(*args):
        """requestWarpPointer(self, float ?, float ?)"""
        return _osgViewer.GraphicsWindow_requestWarpPointer(*args)

    __swig_destroy__ = _osgViewer.delete_GraphicsWindow
    __del__ = lambda self : None;
GraphicsWindow_swigregister = _osgViewer.GraphicsWindow_swigregister
GraphicsWindow_swigregister(GraphicsWindow)

class GraphicsWindowEmbedded(GraphicsWindow):
    """Proxy of C++ GraphicsWindowEmbedded class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsWindow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsWindowEmbedded, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsWindow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsWindowEmbedded, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, osg::GraphicsContext::Traits traits=0) -> GraphicsWindowEmbedded
        __init__(self) -> GraphicsWindowEmbedded
        __init__(self, int x, int y, int width, int height) -> GraphicsWindowEmbedded
        """
        this = _osgViewer.new_GraphicsWindowEmbedded(*args)
        try: self.this.append(this)
        except: self.this = this
    def isSameKindAs(*args):
        """isSameKindAs(self, Object object) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgViewer.GraphicsWindowEmbedded_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgViewer.GraphicsWindowEmbedded_className(*args)

    def init(*args):
        """init(self)"""
        return _osgViewer.GraphicsWindowEmbedded_init(*args)

    def valid(*args):
        """valid(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_valid(*args)

    def realizeImplementation(*args):
        """realizeImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_realizeImplementation(*args)

    def isRealizedImplementation(*args):
        """isRealizedImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_isRealizedImplementation(*args)

    def closeImplementation(*args):
        """closeImplementation(self)"""
        return _osgViewer.GraphicsWindowEmbedded_closeImplementation(*args)

    def makeCurrentImplementation(*args):
        """makeCurrentImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_makeCurrentImplementation(*args)

    def releaseContextImplementation(*args):
        """releaseContextImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_releaseContextImplementation(*args)

    def swapBuffersImplementation(*args):
        """swapBuffersImplementation(self)"""
        return _osgViewer.GraphicsWindowEmbedded_swapBuffersImplementation(*args)

    def grabFocus(*args):
        """grabFocus(self)"""
        return _osgViewer.GraphicsWindowEmbedded_grabFocus(*args)

    def grabFocusIfPointerInWindow(*args):
        """grabFocusIfPointerInWindow(self)"""
        return _osgViewer.GraphicsWindowEmbedded_grabFocusIfPointerInWindow(*args)

    __swig_destroy__ = _osgViewer.delete_GraphicsWindowEmbedded
    __del__ = lambda self : None;
GraphicsWindowEmbedded_swigregister = _osgViewer.GraphicsWindowEmbedded_swigregister
GraphicsWindowEmbedded_swigregister(GraphicsWindowEmbedded)

class GraphicsWindowFunctionProxy(_object):
    """Proxy of C++ GraphicsWindowFunctionProxy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsWindowFunctionProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsWindowFunctionProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CGraphicsWindowFunction function) -> GraphicsWindowFunctionProxy"""
        this = _osgViewer.new_GraphicsWindowFunctionProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgViewer.delete_GraphicsWindowFunctionProxy
    __del__ = lambda self : None;
GraphicsWindowFunctionProxy_swigregister = _osgViewer.GraphicsWindowFunctionProxy_swigregister
GraphicsWindowFunctionProxy_swigregister(GraphicsWindowFunctionProxy)

OSGVIEWER_SCENE = _osgViewer.OSGVIEWER_SCENE
class Scene(osg.Referenced):
    """Proxy of C++ Scene class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scene, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scene, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setSceneData(*args):
        """setSceneData(self, Node node)"""
        return _osgViewer.Scene_setSceneData(*args)

    def getSceneData(*args):
        """
        getSceneData(self) -> Node
        getSceneData(self) -> Node
        """
        return _osgViewer.Scene_getSceneData(*args)

    def setDatabasePager(*args):
        """setDatabasePager(self, osgDB::DatabasePager dp)"""
        return _osgViewer.Scene_setDatabasePager(*args)

    def getDatabasePager(*args):
        """
        getDatabasePager(self) -> osgDB::DatabasePager
        getDatabasePager(self) -> osgDB::DatabasePager
        """
        return _osgViewer.Scene_getDatabasePager(*args)

    def setImagePager(*args):
        """setImagePager(self, osgDB::ImagePager ip)"""
        return _osgViewer.Scene_setImagePager(*args)

    def getImagePager(*args):
        """
        getImagePager(self) -> osgDB::ImagePager
        getImagePager(self) -> osgDB::ImagePager
        """
        return _osgViewer.Scene_getImagePager(*args)

    def getScene(*args):
        """getScene(Node node) -> Scene"""
        return _osgViewer.Scene_getScene(*args)

    if _newclass:getScene = staticmethod(getScene)
    __swig_getmethods__["getScene"] = lambda x: getScene
Scene_swigregister = _osgViewer.Scene_swigregister
Scene_swigregister(Scene)

def Scene_getScene(*args):
  """Scene_getScene(Node node) -> Scene"""
  return _osgViewer.Scene_getScene(*args)

class Windows(_object):
    """Proxy of C++ Windows class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Windows, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Windows, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _osgViewer.Windows_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Windows___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _osgViewer.Windows___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _osgViewer.Windows_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> Windows"""
        return _osgViewer.Windows___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, Windows v)"""
        return _osgViewer.Windows___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Windows___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _osgViewer.Windows___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _osgViewer.Windows___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _osgViewer.Windows___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _osgViewer.Windows_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _osgViewer.Windows_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _osgViewer.Windows_size(*args)

    def clear(*args):
        """clear(self)"""
        return _osgViewer.Windows_clear(*args)

    def swap(*args):
        """swap(self, Windows v)"""
        return _osgViewer.Windows_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Windows_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _osgViewer.Windows_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _osgViewer.Windows_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Windows_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Windows_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _osgViewer.Windows_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Windows_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> Windows
        __init__(self, Windows ?) -> Windows
        __init__(self, size_type size) -> Windows
        __init__(self, size_type size, value_type value) -> Windows
        """
        this = _osgViewer.new_Windows(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _osgViewer.Windows_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _osgViewer.Windows_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _osgViewer.Windows_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Windows_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Windows_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Windows_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _osgViewer.Windows_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _osgViewer.Windows_capacity(*args)

    __swig_destroy__ = _osgViewer.delete_Windows
    __del__ = lambda self : None;
Windows_swigregister = _osgViewer.Windows_swigregister
Windows_swigregister(Windows)

class Contexts(_object):
    """Proxy of C++ Contexts class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contexts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contexts, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _osgViewer.Contexts_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Contexts___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _osgViewer.Contexts___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _osgViewer.Contexts_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> Contexts"""
        return _osgViewer.Contexts___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, Contexts v)"""
        return _osgViewer.Contexts___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Contexts___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _osgViewer.Contexts___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _osgViewer.Contexts___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _osgViewer.Contexts___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _osgViewer.Contexts_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _osgViewer.Contexts_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _osgViewer.Contexts_size(*args)

    def clear(*args):
        """clear(self)"""
        return _osgViewer.Contexts_clear(*args)

    def swap(*args):
        """swap(self, Contexts v)"""
        return _osgViewer.Contexts_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Contexts_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _osgViewer.Contexts_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _osgViewer.Contexts_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Contexts_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Contexts_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _osgViewer.Contexts_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Contexts_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> Contexts
        __init__(self, Contexts ?) -> Contexts
        __init__(self, size_type size) -> Contexts
        __init__(self, size_type size, value_type value) -> Contexts
        """
        this = _osgViewer.new_Contexts(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _osgViewer.Contexts_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _osgViewer.Contexts_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _osgViewer.Contexts_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Contexts_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Contexts_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Contexts_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _osgViewer.Contexts_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _osgViewer.Contexts_capacity(*args)

    __swig_destroy__ = _osgViewer.delete_Contexts
    __del__ = lambda self : None;
Contexts_swigregister = _osgViewer.Contexts_swigregister
Contexts_swigregister(Contexts)

class Cameras(_object):
    """Proxy of C++ Cameras class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cameras, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cameras, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _osgViewer.Cameras_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Cameras___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _osgViewer.Cameras___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _osgViewer.Cameras_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> Cameras"""
        return _osgViewer.Cameras___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, Cameras v)"""
        return _osgViewer.Cameras___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Cameras___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _osgViewer.Cameras___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _osgViewer.Cameras___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _osgViewer.Cameras___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _osgViewer.Cameras_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _osgViewer.Cameras_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _osgViewer.Cameras_size(*args)

    def clear(*args):
        """clear(self)"""
        return _osgViewer.Cameras_clear(*args)

    def swap(*args):
        """swap(self, Cameras v)"""
        return _osgViewer.Cameras_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Cameras_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _osgViewer.Cameras_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _osgViewer.Cameras_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Cameras_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Cameras_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _osgViewer.Cameras_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Cameras_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> Cameras
        __init__(self, Cameras ?) -> Cameras
        __init__(self, size_type size) -> Cameras
        __init__(self, size_type size, value_type value) -> Cameras
        """
        this = _osgViewer.new_Cameras(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _osgViewer.Cameras_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _osgViewer.Cameras_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _osgViewer.Cameras_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Cameras_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Cameras_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Cameras_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _osgViewer.Cameras_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _osgViewer.Cameras_capacity(*args)

    __swig_destroy__ = _osgViewer.delete_Cameras
    __del__ = lambda self : None;
Cameras_swigregister = _osgViewer.Cameras_swigregister
Cameras_swigregister(Cameras)

class Scenes(_object):
    """Proxy of C++ Scenes class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scenes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scenes, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _osgViewer.Scenes_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Scenes___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _osgViewer.Scenes___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _osgViewer.Scenes_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> Scenes"""
        return _osgViewer.Scenes___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, Scenes v)"""
        return _osgViewer.Scenes___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Scenes___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _osgViewer.Scenes___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _osgViewer.Scenes___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _osgViewer.Scenes___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _osgViewer.Scenes_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _osgViewer.Scenes_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _osgViewer.Scenes_size(*args)

    def clear(*args):
        """clear(self)"""
        return _osgViewer.Scenes_clear(*args)

    def swap(*args):
        """swap(self, Scenes v)"""
        return _osgViewer.Scenes_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Scenes_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _osgViewer.Scenes_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _osgViewer.Scenes_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Scenes_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Scenes_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _osgViewer.Scenes_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Scenes_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> Scenes
        __init__(self, Scenes ?) -> Scenes
        __init__(self, size_type size) -> Scenes
        __init__(self, size_type size, value_type value) -> Scenes
        """
        this = _osgViewer.new_Scenes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _osgViewer.Scenes_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _osgViewer.Scenes_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _osgViewer.Scenes_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Scenes_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Scenes_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Scenes_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _osgViewer.Scenes_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _osgViewer.Scenes_capacity(*args)

    __swig_destroy__ = _osgViewer.delete_Scenes
    __del__ = lambda self : None;
Scenes_swigregister = _osgViewer.Scenes_swigregister
Scenes_swigregister(Scenes)

class Views(_object):
    """Proxy of C++ Views class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Views, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Views, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _osgViewer.Views_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Views___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _osgViewer.Views___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _osgViewer.Views_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> Views"""
        return _osgViewer.Views___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, Views v)"""
        return _osgViewer.Views___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Views___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _osgViewer.Views___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _osgViewer.Views___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _osgViewer.Views___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _osgViewer.Views_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _osgViewer.Views_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _osgViewer.Views_size(*args)

    def clear(*args):
        """clear(self)"""
        return _osgViewer.Views_clear(*args)

    def swap(*args):
        """swap(self, Views v)"""
        return _osgViewer.Views_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Views_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _osgViewer.Views_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _osgViewer.Views_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Views_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Views_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _osgViewer.Views_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Views_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> Views
        __init__(self, Views ?) -> Views
        __init__(self, size_type size) -> Views
        __init__(self, size_type size, value_type value) -> Views
        """
        this = _osgViewer.new_Views(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _osgViewer.Views_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _osgViewer.Views_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _osgViewer.Views_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Views_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Views_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Views_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _osgViewer.Views_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _osgViewer.Views_capacity(*args)

    __swig_destroy__ = _osgViewer.delete_Views
    __del__ = lambda self : None;
Views_swigregister = _osgViewer.Views_swigregister
Views_swigregister(Views)

OSGVIEWER_VIEWERBASE = _osgViewer.OSGVIEWER_VIEWERBASE
class ViewerBase(osg.Object):
    """Proxy of C++ ViewerBase class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerBase, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setStats(*args):
        """setStats(self, osg::Stats stats)"""
        return _osgViewer.ViewerBase_setStats(*args)

    def getStats(*args):
        """
        getStats(self) -> osg::Stats
        getStats(self) -> osg::Stats
        """
        return _osgViewer.ViewerBase_getStats(*args)

    def readConfiguration(*args):
        """readConfiguration(self, string filename) -> bool"""
        return _osgViewer.ViewerBase_readConfiguration(*args)

    def isRealized(*args):
        """isRealized(self) -> bool"""
        return _osgViewer.ViewerBase_isRealized(*args)

    def realize(*args):
        """realize(self)"""
        return _osgViewer.ViewerBase_realize(*args)

    SingleThreaded = _osgViewer.ViewerBase_SingleThreaded
    CullDrawThreadPerContext = _osgViewer.ViewerBase_CullDrawThreadPerContext
    ThreadPerContext = _osgViewer.ViewerBase_ThreadPerContext
    DrawThreadPerContext = _osgViewer.ViewerBase_DrawThreadPerContext
    CullThreadPerCameraDrawThreadPerContext = _osgViewer.ViewerBase_CullThreadPerCameraDrawThreadPerContext
    ThreadPerCamera = _osgViewer.ViewerBase_ThreadPerCamera
    AutomaticSelection = _osgViewer.ViewerBase_AutomaticSelection
    def setThreadingModel(*args):
        """setThreadingModel(self, ThreadingModel threadingModel)"""
        return _osgViewer.ViewerBase_setThreadingModel(*args)

    def getThreadingModel(*args):
        """getThreadingModel(self) -> ThreadingModel"""
        return _osgViewer.ViewerBase_getThreadingModel(*args)

    def suggestBestThreadingModel(*args):
        """suggestBestThreadingModel(self) -> ThreadingModel"""
        return _osgViewer.ViewerBase_suggestBestThreadingModel(*args)

    def setUpThreading(*args):
        """setUpThreading(self)"""
        return _osgViewer.ViewerBase_setUpThreading(*args)

    def areThreadsRunning(*args):
        """areThreadsRunning(self) -> bool"""
        return _osgViewer.ViewerBase_areThreadsRunning(*args)

    def stopThreading(*args):
        """stopThreading(self)"""
        return _osgViewer.ViewerBase_stopThreading(*args)

    def startThreading(*args):
        """startThreading(self)"""
        return _osgViewer.ViewerBase_startThreading(*args)

    BeforeSwapBuffers = _osgViewer.ViewerBase_BeforeSwapBuffers
    AfterSwapBuffers = _osgViewer.ViewerBase_AfterSwapBuffers
    def setEndBarrierPosition(*args):
        """setEndBarrierPosition(self, BarrierPosition bp)"""
        return _osgViewer.ViewerBase_setEndBarrierPosition(*args)

    def getEndBarrierPosition(*args):
        """getEndBarrierPosition(self) -> BarrierPosition"""
        return _osgViewer.ViewerBase_getEndBarrierPosition(*args)

    def setDone(*args):
        """setDone(self, bool done)"""
        return _osgViewer.ViewerBase_setDone(*args)

    def done(*args):
        """done(self) -> bool"""
        return _osgViewer.ViewerBase_done(*args)

    def setEventVisitor(*args):
        """setEventVisitor(self, EventVisitor eventVisitor)"""
        return _osgViewer.ViewerBase_setEventVisitor(*args)

    def getEventVisitor(*args):
        """
        getEventVisitor(self) -> EventVisitor
        getEventVisitor(self) -> EventVisitor
        """
        return _osgViewer.ViewerBase_getEventVisitor(*args)

    def setKeyEventSetsDone(*args):
        """setKeyEventSetsDone(self, int key)"""
        return _osgViewer.ViewerBase_setKeyEventSetsDone(*args)

    def getKeyEventSetsDone(*args):
        """getKeyEventSetsDone(self) -> int"""
        return _osgViewer.ViewerBase_getKeyEventSetsDone(*args)

    def setQuitEventSetsDone(*args):
        """setQuitEventSetsDone(self, bool flag)"""
        return _osgViewer.ViewerBase_setQuitEventSetsDone(*args)

    def getQuitEventSetsDone(*args):
        """getQuitEventSetsDone(self) -> bool"""
        return _osgViewer.ViewerBase_getQuitEventSetsDone(*args)

    def setReleaseContextAtEndOfFrameHint(*args):
        """setReleaseContextAtEndOfFrameHint(self, bool hint)"""
        return _osgViewer.ViewerBase_setReleaseContextAtEndOfFrameHint(*args)

    def getReleaseContextAtEndOfFrameHint(*args):
        """getReleaseContextAtEndOfFrameHint(self) -> bool"""
        return _osgViewer.ViewerBase_getReleaseContextAtEndOfFrameHint(*args)

    def setUpdateVisitor(*args):
        """setUpdateVisitor(self, osgUtil::UpdateVisitor updateVisitor)"""
        return _osgViewer.ViewerBase_setUpdateVisitor(*args)

    def getUpdateVisitor(*args):
        """
        getUpdateVisitor(self) -> osgUtil::UpdateVisitor
        getUpdateVisitor(self) -> osgUtil::UpdateVisitor
        """
        return _osgViewer.ViewerBase_getUpdateVisitor(*args)

    def setUpdateOperations(*args):
        """setUpdateOperations(self, OperationQueue operations)"""
        return _osgViewer.ViewerBase_setUpdateOperations(*args)

    def getUpdateOperations(*args):
        """
        getUpdateOperations(self) -> OperationQueue
        getUpdateOperations(self) -> OperationQueue
        """
        return _osgViewer.ViewerBase_getUpdateOperations(*args)

    def addUpdateOperation(*args):
        """addUpdateOperation(self, Operation operation)"""
        return _osgViewer.ViewerBase_addUpdateOperation(*args)

    def removeUpdateOperation(*args):
        """removeUpdateOperation(self, Operation operation)"""
        return _osgViewer.ViewerBase_removeUpdateOperation(*args)

    def setRealizeOperation(*args):
        """setRealizeOperation(self, Operation op)"""
        return _osgViewer.ViewerBase_setRealizeOperation(*args)

    def getRealizeOperation(*args):
        """getRealizeOperation(self) -> Operation"""
        return _osgViewer.ViewerBase_getRealizeOperation(*args)

    def checkWindowStatus(*args):
        """checkWindowStatus(self)"""
        return _osgViewer.ViewerBase_checkWindowStatus(*args)

    def run(*args):
        """run(self) -> int"""
        return _osgViewer.ViewerBase_run(*args)

    def frame(*args):
        """
        frame(self, double simulationTime=DBL_MAX)
        frame(self)
        """
        return _osgViewer.ViewerBase_frame(*args)

    def advance(*args):
        """
        advance(self, double simulationTime=DBL_MAX)
        advance(self)
        """
        return _osgViewer.ViewerBase_advance(*args)

    def eventTraversal(*args):
        """eventTraversal(self)"""
        return _osgViewer.ViewerBase_eventTraversal(*args)

    def updateTraversal(*args):
        """updateTraversal(self)"""
        return _osgViewer.ViewerBase_updateTraversal(*args)

    def renderingTraversals(*args):
        """renderingTraversals(self)"""
        return _osgViewer.ViewerBase_renderingTraversals(*args)

    def getCameras(*args):
        """
        getCameras(self, Cameras cameras, bool onlyActive=True)
        getCameras(self, Cameras cameras)
        """
        return _osgViewer.ViewerBase_getCameras(*args)

    def getContexts(*args):
        """
        getContexts(self, Contexts contexts, bool onlyValid=True)
        getContexts(self, Contexts contexts)
        """
        return _osgViewer.ViewerBase_getContexts(*args)

    def getWindows(*args):
        """
        getWindows(self, Windows windows, bool onlyValid=True)
        getWindows(self, Windows windows)
        """
        return _osgViewer.ViewerBase_getWindows(*args)

    def getAllThreads(*args):
        """
        getAllThreads(self, Threads threads, bool onlyActive=True)
        getAllThreads(self, Threads threads)
        """
        return _osgViewer.ViewerBase_getAllThreads(*args)

    def getOperationThreads(*args):
        """
        getOperationThreads(self, OperationThreads threads, bool onlyActive=True)
        getOperationThreads(self, OperationThreads threads)
        """
        return _osgViewer.ViewerBase_getOperationThreads(*args)

    def getScenes(*args):
        """
        getScenes(self, Scenes scenes, bool onlyValid=True)
        getScenes(self, Scenes scenes)
        """
        return _osgViewer.ViewerBase_getScenes(*args)

    def getViews(*args):
        """
        getViews(self, Views views, bool onlyValid=True)
        getViews(self, Views views)
        """
        return _osgViewer.ViewerBase_getViews(*args)

    def elapsedTime(*args):
        """elapsedTime(self) -> double"""
        return _osgViewer.ViewerBase_elapsedTime(*args)

    def getViewerFrameStamp(*args):
        """getViewerFrameStamp(self) -> FrameStamp"""
        return _osgViewer.ViewerBase_getViewerFrameStamp(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.ViewerBase_getUsage(*args)

    __swig_destroy__ = _osgViewer.delete_ViewerBase
    __del__ = lambda self : None;
ViewerBase_swigregister = _osgViewer.ViewerBase_swigregister
ViewerBase_swigregister(ViewerBase)

OSGVIEWER_Viewer = _osgViewer.OSGVIEWER_Viewer
class Viewer(ViewerBase,View):
    """Proxy of C++ Viewer class"""
    __swig_setmethods__ = {}
    for _s in [ViewerBase,View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Viewer, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewerBase,View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Viewer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Viewer
        __init__(self, ArgumentParser arguments) -> Viewer
        __init__(self, Viewer viewer, CopyOp copyop=SHALLOW_COPY) -> Viewer
        __init__(self, Viewer viewer) -> Viewer
        """
        this = _osgViewer.new_Viewer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgViewer.delete_Viewer
    __del__ = lambda self : None;
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgViewer.Viewer_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgViewer.Viewer_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgViewer.Viewer_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgViewer.Viewer_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgViewer.Viewer_className(*args)

    def take(*args):
        """take(self, View rhs)"""
        return _osgViewer.Viewer_take(*args)

    def readConfiguration(*args):
        """readConfiguration(self, string filename) -> bool"""
        return _osgViewer.Viewer_readConfiguration(*args)

    def isRealized(*args):
        """isRealized(self) -> bool"""
        return _osgViewer.Viewer_isRealized(*args)

    def realize(*args):
        """realize(self)"""
        return _osgViewer.Viewer_realize(*args)

    def setStartTick(*args):
        """setStartTick(self, Timer_t tick)"""
        return _osgViewer.Viewer_setStartTick(*args)

    def setReferenceTime(*args):
        """
        setReferenceTime(self, double time=0.0)
        setReferenceTime(self)
        """
        return _osgViewer.Viewer_setReferenceTime(*args)

    def setSceneData(*args):
        """setSceneData(self, Node node)"""
        return _osgViewer.Viewer_setSceneData(*args)

    def setUpViewerAsEmbeddedInWindow(*args):
        """setUpViewerAsEmbeddedInWindow(self, int x, int y, int width, int height) -> GraphicsWindowEmbedded"""
        return _osgViewer.Viewer_setUpViewerAsEmbeddedInWindow(*args)

    def elapsedTime(*args):
        """elapsedTime(self) -> double"""
        return _osgViewer.Viewer_elapsedTime(*args)

    def getViewerFrameStamp(*args):
        """getViewerFrameStamp(self) -> FrameStamp"""
        return _osgViewer.Viewer_getViewerFrameStamp(*args)

    def run(*args):
        """run(self) -> int"""
        return _osgViewer.Viewer_run(*args)

    def advance(*args):
        """
        advance(self, double simulationTime=DBL_MAX)
        advance(self)
        """
        return _osgViewer.Viewer_advance(*args)

    def eventTraversal(*args):
        """eventTraversal(self)"""
        return _osgViewer.Viewer_eventTraversal(*args)

    def updateTraversal(*args):
        """updateTraversal(self)"""
        return _osgViewer.Viewer_updateTraversal(*args)

    def setCameraWithFocus(*args):
        """setCameraWithFocus(self, Camera camera)"""
        return _osgViewer.Viewer_setCameraWithFocus(*args)

    def getCameraWithFocus(*args):
        """
        getCameraWithFocus(self) -> Camera
        getCameraWithFocus(self) -> Camera
        """
        return _osgViewer.Viewer_getCameraWithFocus(*args)

    def getCameras(*args):
        """
        getCameras(self, Cameras cameras, bool onlyActive=True)
        getCameras(self, Cameras cameras)
        """
        return _osgViewer.Viewer_getCameras(*args)

    def getContexts(*args):
        """
        getContexts(self, Contexts contexts, bool onlyValid=True)
        getContexts(self, Contexts contexts)
        """
        return _osgViewer.Viewer_getContexts(*args)

    def getWindows(*args):
        """
        getWindows(self, Windows windows, bool onlyValid=True)
        getWindows(self, Windows windows)
        """
        return _osgViewer.Viewer_getWindows(*args)

    def getAllThreads(*args):
        """
        getAllThreads(self, Threads threads, bool onlyActive=True)
        getAllThreads(self, Threads threads)
        """
        return _osgViewer.Viewer_getAllThreads(*args)

    def getOperationThreads(*args):
        """
        getOperationThreads(self, OperationThreads threads, bool onlyActive=True)
        getOperationThreads(self, OperationThreads threads)
        """
        return _osgViewer.Viewer_getOperationThreads(*args)

    def getScenes(*args):
        """
        getScenes(self, Scenes scenes, bool onlyValid=True)
        getScenes(self, Scenes scenes)
        """
        return _osgViewer.Viewer_getScenes(*args)

    def getViews(*args):
        """
        getViews(self, Views views, bool onlyValid=True)
        getViews(self, Views views)
        """
        return _osgViewer.Viewer_getViews(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.Viewer_getUsage(*args)

Viewer_swigregister = _osgViewer.Viewer_swigregister
Viewer_swigregister(Viewer)

OSGVIEWER_CompositeViewer = _osgViewer.OSGVIEWER_CompositeViewer
class CompositeViewer(ViewerBase,osg.Object):
    """Proxy of C++ CompositeViewer class"""
    __swig_setmethods__ = {}
    for _s in [ViewerBase,osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeViewer, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewerBase,osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeViewer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CompositeViewer
        __init__(self, CompositeViewer ?, CopyOp copyop=SHALLOW_COPY) -> CompositeViewer
        __init__(self, CompositeViewer ?) -> CompositeViewer
        __init__(self, ArgumentParser arguments) -> CompositeViewer
        """
        this = _osgViewer.new_CompositeViewer(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgViewer.CompositeViewer_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgViewer.CompositeViewer_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgViewer.CompositeViewer_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgViewer.CompositeViewer_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgViewer.CompositeViewer_className(*args)

    __swig_destroy__ = _osgViewer.delete_CompositeViewer
    __del__ = lambda self : None;
    def readConfiguration(*args):
        """readConfiguration(self, string filename) -> bool"""
        return _osgViewer.CompositeViewer_readConfiguration(*args)

    def addView(*args):
        """addView(self, View view)"""
        return _osgViewer.CompositeViewer_addView(*args)

    def removeView(*args):
        """removeView(self, View view)"""
        return _osgViewer.CompositeViewer_removeView(*args)

    def getView(*args):
        """
        getView(self, unsigned int i) -> View
        getView(self, unsigned int i) -> View
        """
        return _osgViewer.CompositeViewer_getView(*args)

    def getNumViews(*args):
        """getNumViews(self) -> unsigned int"""
        return _osgViewer.CompositeViewer_getNumViews(*args)

    def isRealized(*args):
        """isRealized(self) -> bool"""
        return _osgViewer.CompositeViewer_isRealized(*args)

    def realize(*args):
        """realize(self)"""
        return _osgViewer.CompositeViewer_realize(*args)

    def setStartTick(*args):
        """setStartTick(self, Timer_t tick)"""
        return _osgViewer.CompositeViewer_setStartTick(*args)

    def setReferenceTime(*args):
        """
        setReferenceTime(self, double time=0.0)
        setReferenceTime(self)
        """
        return _osgViewer.CompositeViewer_setReferenceTime(*args)

    def getFrameStamp(*args):
        """
        getFrameStamp(self) -> FrameStamp
        getFrameStamp(self) -> FrameStamp
        """
        return _osgViewer.CompositeViewer_getFrameStamp(*args)

    def elapsedTime(*args):
        """elapsedTime(self) -> double"""
        return _osgViewer.CompositeViewer_elapsedTime(*args)

    def getViewerFrameStamp(*args):
        """getViewerFrameStamp(self) -> FrameStamp"""
        return _osgViewer.CompositeViewer_getViewerFrameStamp(*args)

    def setEventQueue(*args):
        """setEventQueue(self, EventQueue eventQueue)"""
        return _osgViewer.CompositeViewer_setEventQueue(*args)

    def getEventQueue(*args):
        """
        getEventQueue(self) -> EventQueue
        getEventQueue(self) -> EventQueue
        """
        return _osgViewer.CompositeViewer_getEventQueue(*args)

    def run(*args):
        """run(self) -> int"""
        return _osgViewer.CompositeViewer_run(*args)

    def advance(*args):
        """
        advance(self, double simulationTime=DBL_MAX)
        advance(self)
        """
        return _osgViewer.CompositeViewer_advance(*args)

    def eventTraversal(*args):
        """eventTraversal(self)"""
        return _osgViewer.CompositeViewer_eventTraversal(*args)

    def updateTraversal(*args):
        """updateTraversal(self)"""
        return _osgViewer.CompositeViewer_updateTraversal(*args)

    def setCameraWithFocus(*args):
        """setCameraWithFocus(self, Camera camera)"""
        return _osgViewer.CompositeViewer_setCameraWithFocus(*args)

    def getCameraWithFocus(*args):
        """
        getCameraWithFocus(self) -> Camera
        getCameraWithFocus(self) -> Camera
        """
        return _osgViewer.CompositeViewer_getCameraWithFocus(*args)

    def getViewWithFocus(*args):
        """
        getViewWithFocus(self) -> View
        getViewWithFocus(self) -> View
        """
        return _osgViewer.CompositeViewer_getViewWithFocus(*args)

    def getCameras(*args):
        """
        getCameras(self, Cameras cameras, bool onlyActive=True)
        getCameras(self, Cameras cameras)
        """
        return _osgViewer.CompositeViewer_getCameras(*args)

    def getContexts(*args):
        """
        getContexts(self, Contexts contexts, bool onlyValid=True)
        getContexts(self, Contexts contexts)
        """
        return _osgViewer.CompositeViewer_getContexts(*args)

    def getWindows(*args):
        """
        getWindows(self, Windows windows, bool onlyValid=True)
        getWindows(self, Windows windows)
        """
        return _osgViewer.CompositeViewer_getWindows(*args)

    def getScenes(*args):
        """
        getScenes(self, Scenes scenes, bool onlyValid=True)
        getScenes(self, Scenes scenes)
        """
        return _osgViewer.CompositeViewer_getScenes(*args)

    def getViews(*args):
        """
        getViews(self, Views views, bool onlyValid=True)
        getViews(self, Views views)
        """
        return _osgViewer.CompositeViewer_getViews(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.CompositeViewer_getUsage(*args)

CompositeViewer_swigregister = _osgViewer.CompositeViewer_swigregister
CompositeViewer_swigregister(CompositeViewer)

OSGVIEWER_VIEWEREVENTHANDLERS = _osgViewer.OSGVIEWER_VIEWEREVENTHANDLERS
class HelpHandler(osgGA.GUIEventHandler):
    """Proxy of C++ HelpHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelpHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HelpHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ApplicationUsage au=0) -> HelpHandler
        __init__(self) -> HelpHandler
        """
        this = _osgViewer.new_HelpHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def setApplicationUsage(*args):
        """setApplicationUsage(self, ApplicationUsage au)"""
        return _osgViewer.HelpHandler_setApplicationUsage(*args)

    def getApplicationUsage(*args):
        """
        getApplicationUsage(self) -> ApplicationUsage
        getApplicationUsage(self) -> ApplicationUsage
        """
        return _osgViewer.HelpHandler_getApplicationUsage(*args)

    def setKeyEventTogglesOnScreenHelp(*args):
        """setKeyEventTogglesOnScreenHelp(self, int key)"""
        return _osgViewer.HelpHandler_setKeyEventTogglesOnScreenHelp(*args)

    def getKeyEventTogglesOnScreenHelp(*args):
        """getKeyEventTogglesOnScreenHelp(self) -> int"""
        return _osgViewer.HelpHandler_getKeyEventTogglesOnScreenHelp(*args)

    def reset(*args):
        """reset(self)"""
        return _osgViewer.HelpHandler_reset(*args)

    def getCamera(*args):
        """
        getCamera(self) -> Camera
        getCamera(self) -> Camera
        """
        return _osgViewer.HelpHandler_getCamera(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.HelpHandler_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.HelpHandler_getUsage(*args)

    __swig_destroy__ = _osgViewer.delete_HelpHandler
    __del__ = lambda self : None;
HelpHandler_swigregister = _osgViewer.HelpHandler_swigregister
HelpHandler_swigregister(HelpHandler)

class StatsHandler(osgGA.GUIEventHandler):
    """Proxy of C++ StatsHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatsHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatsHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> StatsHandler"""
        this = _osgViewer.new_StatsHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    NO_STATS = _osgViewer.StatsHandler_NO_STATS
    FRAME_RATE = _osgViewer.StatsHandler_FRAME_RATE
    VIEWER_STATS = _osgViewer.StatsHandler_VIEWER_STATS
    LAST = _osgViewer.StatsHandler_LAST
    def setKeyEventTogglesOnScreenStats(*args):
        """setKeyEventTogglesOnScreenStats(self, int key)"""
        return _osgViewer.StatsHandler_setKeyEventTogglesOnScreenStats(*args)

    def getKeyEventTogglesOnScreenStats(*args):
        """getKeyEventTogglesOnScreenStats(self) -> int"""
        return _osgViewer.StatsHandler_getKeyEventTogglesOnScreenStats(*args)

    def setKeyEventPrintsOutStats(*args):
        """setKeyEventPrintsOutStats(self, int key)"""
        return _osgViewer.StatsHandler_setKeyEventPrintsOutStats(*args)

    def getKeyEventPrintsOutStats(*args):
        """getKeyEventPrintsOutStats(self) -> int"""
        return _osgViewer.StatsHandler_getKeyEventPrintsOutStats(*args)

    def getBlockMultiplier(*args):
        """getBlockMultiplier(self) -> double"""
        return _osgViewer.StatsHandler_getBlockMultiplier(*args)

    def reset(*args):
        """reset(self)"""
        return _osgViewer.StatsHandler_reset(*args)

    def getCamera(*args):
        """
        getCamera(self) -> Camera
        getCamera(self) -> Camera
        """
        return _osgViewer.StatsHandler_getCamera(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.StatsHandler_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.StatsHandler_getUsage(*args)

    __swig_destroy__ = _osgViewer.delete_StatsHandler
    __del__ = lambda self : None;
StatsHandler_swigregister = _osgViewer.StatsHandler_swigregister
StatsHandler_swigregister(StatsHandler)

class WindowSizeHandler(osgGA.GUIEventHandler):
    """Proxy of C++ WindowSizeHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowSizeHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WindowSizeHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> WindowSizeHandler"""
        this = _osgViewer.new_WindowSizeHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.WindowSizeHandler_getUsage(*args)

    def setKeyEventToggleFullscreen(*args):
        """setKeyEventToggleFullscreen(self, int key)"""
        return _osgViewer.WindowSizeHandler_setKeyEventToggleFullscreen(*args)

    def getKeyEventToggleFullscreen(*args):
        """getKeyEventToggleFullscreen(self) -> int"""
        return _osgViewer.WindowSizeHandler_getKeyEventToggleFullscreen(*args)

    def setToggleFullscreen(*args):
        """setToggleFullscreen(self, bool flag)"""
        return _osgViewer.WindowSizeHandler_setToggleFullscreen(*args)

    def getToggleFullscreen(*args):
        """getToggleFullscreen(self) -> bool"""
        return _osgViewer.WindowSizeHandler_getToggleFullscreen(*args)

    def setKeyEventWindowedResolutionUp(*args):
        """setKeyEventWindowedResolutionUp(self, int key)"""
        return _osgViewer.WindowSizeHandler_setKeyEventWindowedResolutionUp(*args)

    def getKeyEventWindowedResolutionUp(*args):
        """getKeyEventWindowedResolutionUp(self) -> int"""
        return _osgViewer.WindowSizeHandler_getKeyEventWindowedResolutionUp(*args)

    def setKeyEventWindowedResolutionDown(*args):
        """setKeyEventWindowedResolutionDown(self, int key)"""
        return _osgViewer.WindowSizeHandler_setKeyEventWindowedResolutionDown(*args)

    def getKeyEventWindowedResolutionDown(*args):
        """getKeyEventWindowedResolutionDown(self) -> int"""
        return _osgViewer.WindowSizeHandler_getKeyEventWindowedResolutionDown(*args)

    def setChangeWindowedResolution(*args):
        """setChangeWindowedResolution(self, bool flag)"""
        return _osgViewer.WindowSizeHandler_setChangeWindowedResolution(*args)

    def getChangeWindowedResolution(*args):
        """getChangeWindowedResolution(self) -> bool"""
        return _osgViewer.WindowSizeHandler_getChangeWindowedResolution(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.WindowSizeHandler_handle(*args)

    __swig_destroy__ = _osgViewer.delete_WindowSizeHandler
    __del__ = lambda self : None;
WindowSizeHandler_swigregister = _osgViewer.WindowSizeHandler_swigregister
WindowSizeHandler_swigregister(WindowSizeHandler)

class ThreadingHandler(osgGA.GUIEventHandler):
    """Proxy of C++ ThreadingHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadingHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadingHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ThreadingHandler"""
        this = _osgViewer.new_ThreadingHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.ThreadingHandler_getUsage(*args)

    def setKeyEventChangeThreadingModel(*args):
        """setKeyEventChangeThreadingModel(self, int key)"""
        return _osgViewer.ThreadingHandler_setKeyEventChangeThreadingModel(*args)

    def getKeyEventChangeThreadingModel(*args):
        """getKeyEventChangeThreadingModel(self) -> int"""
        return _osgViewer.ThreadingHandler_getKeyEventChangeThreadingModel(*args)

    def setChangeThreadingModel(*args):
        """setChangeThreadingModel(self, bool flag)"""
        return _osgViewer.ThreadingHandler_setChangeThreadingModel(*args)

    def getChangeThreadingModel(*args):
        """getChangeThreadingModel(self) -> bool"""
        return _osgViewer.ThreadingHandler_getChangeThreadingModel(*args)

    def setKeyEventChangeEndBarrierPosition(*args):
        """setKeyEventChangeEndBarrierPosition(self, int key)"""
        return _osgViewer.ThreadingHandler_setKeyEventChangeEndBarrierPosition(*args)

    def getKeyEventChangeEndBarrierPosition(*args):
        """getKeyEventChangeEndBarrierPosition(self) -> int"""
        return _osgViewer.ThreadingHandler_getKeyEventChangeEndBarrierPosition(*args)

    def setChangeEndBarrierPosition(*args):
        """setChangeEndBarrierPosition(self, bool flag)"""
        return _osgViewer.ThreadingHandler_setChangeEndBarrierPosition(*args)

    def getChangeEndBarrierPosition(*args):
        """getChangeEndBarrierPosition(self) -> bool"""
        return _osgViewer.ThreadingHandler_getChangeEndBarrierPosition(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.ThreadingHandler_handle(*args)

    __swig_destroy__ = _osgViewer.delete_ThreadingHandler
    __del__ = lambda self : None;
ThreadingHandler_swigregister = _osgViewer.ThreadingHandler_swigregister
ThreadingHandler_swigregister(ThreadingHandler)

class RecordCameraPathHandler(osgGA.GUIEventHandler):
    """Proxy of C++ RecordCameraPathHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordCameraPathHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordCameraPathHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string filename="saved_animation.path") -> RecordCameraPathHandler
        __init__(self) -> RecordCameraPathHandler
        """
        this = _osgViewer.new_RecordCameraPathHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def setKeyEventToggleRecord(*args):
        """setKeyEventToggleRecord(self, int key)"""
        return _osgViewer.RecordCameraPathHandler_setKeyEventToggleRecord(*args)

    def getKeyEventToggleRecord(*args):
        """getKeyEventToggleRecord(self) -> int"""
        return _osgViewer.RecordCameraPathHandler_getKeyEventToggleRecord(*args)

    def setKeyEventTogglePlayback(*args):
        """setKeyEventTogglePlayback(self, int key)"""
        return _osgViewer.RecordCameraPathHandler_setKeyEventTogglePlayback(*args)

    def getKeyEventTogglePlayback(*args):
        """getKeyEventTogglePlayback(self) -> int"""
        return _osgViewer.RecordCameraPathHandler_getKeyEventTogglePlayback(*args)

    def setAutoIncrementFilename(*args):
        """
        setAutoIncrementFilename(self, bool autoinc=True)
        setAutoIncrementFilename(self)
        """
        return _osgViewer.RecordCameraPathHandler_setAutoIncrementFilename(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.RecordCameraPathHandler_getUsage(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.RecordCameraPathHandler_handle(*args)

    __swig_destroy__ = _osgViewer.delete_RecordCameraPathHandler
    __del__ = lambda self : None;
RecordCameraPathHandler_swigregister = _osgViewer.RecordCameraPathHandler_swigregister
RecordCameraPathHandler_swigregister(RecordCameraPathHandler)

class LODScaleHandler(osgGA.GUIEventHandler):
    """Proxy of C++ LODScaleHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LODScaleHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LODScaleHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> LODScaleHandler"""
        this = _osgViewer.new_LODScaleHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def setKeyEventIncreaseLODScale(*args):
        """setKeyEventIncreaseLODScale(self, int key)"""
        return _osgViewer.LODScaleHandler_setKeyEventIncreaseLODScale(*args)

    def getKeyEventIncreaseLODScale(*args):
        """getKeyEventIncreaseLODScale(self) -> int"""
        return _osgViewer.LODScaleHandler_getKeyEventIncreaseLODScale(*args)

    def setKeyEventDecreaseLODScale(*args):
        """setKeyEventDecreaseLODScale(self, int key)"""
        return _osgViewer.LODScaleHandler_setKeyEventDecreaseLODScale(*args)

    def getKeyEventDecreaseLODScale(*args):
        """getKeyEventDecreaseLODScale(self) -> int"""
        return _osgViewer.LODScaleHandler_getKeyEventDecreaseLODScale(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.LODScaleHandler_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.LODScaleHandler_getUsage(*args)

    __swig_destroy__ = _osgViewer.delete_LODScaleHandler
    __del__ = lambda self : None;
LODScaleHandler_swigregister = _osgViewer.LODScaleHandler_swigregister
LODScaleHandler_swigregister(LODScaleHandler)


def GUIActionAdapterToViewer(*args):
  """GUIActionAdapterToViewer(GUIActionAdapter aa) -> Viewer"""
  return _osgViewer.GUIActionAdapterToViewer(*args)


