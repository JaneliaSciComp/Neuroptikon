# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osgGA', [dirname(__file__)])
        except ImportError:
            import _osgGA
            return _osgGA
        if fp is not None:
            try:
                _mod = imp.load_module('_osgGA', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osgGA = swig_import_helper()
    del swig_import_helper
else:
    import _osgGA
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgGA.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _osgGA.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgGA.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgGA.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _osgGA.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgGA.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _osgGA.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _osgGA.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _osgGA.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _osgGA.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgGA.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgGA.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgGA.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgGA.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgGA.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgGA.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osgGA.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osgGA.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import osg
OSGGA_EXPORT_ = _osgGA.OSGGA_EXPORT_
OSGGA_VERSION = _osgGA.OSGGA_VERSION

def osgGAGetVersion():
  """osgGAGetVersion() -> char const *"""
  return _osgGA.osgGAGetVersion()

def osgGAGetLibraryName():
  """osgGAGetLibraryName() -> char const *"""
  return _osgGA.osgGAGetLibraryName()
OSGGA_GUIACTIONADAPTER = _osgGA.OSGGA_GUIACTIONADAPTER
class GUIActionAdapter(_object):
    """Proxy of C++ osgGA::GUIActionAdapter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUIActionAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GUIActionAdapter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgGA.delete_GUIActionAdapter
    __del__ = lambda self : None;
    def asView(self):
        """asView(GUIActionAdapter self) -> View"""
        return _osgGA.GUIActionAdapter_asView(self)

    def requestRedraw(self):
        """requestRedraw(GUIActionAdapter self)"""
        return _osgGA.GUIActionAdapter_requestRedraw(self)

    def requestContinuousUpdate(self, needed=True):
        """
        requestContinuousUpdate(GUIActionAdapter self, bool needed=True)
        requestContinuousUpdate(GUIActionAdapter self)
        """
        return _osgGA.GUIActionAdapter_requestContinuousUpdate(self, needed)

    def requestWarpPointer(self, *args):
        """requestWarpPointer(GUIActionAdapter self, float x, float y)"""
        return _osgGA.GUIActionAdapter_requestWarpPointer(self, *args)

GUIActionAdapter_swigregister = _osgGA.GUIActionAdapter_swigregister
GUIActionAdapter_swigregister(GUIActionAdapter)

OSGGA_EVENT = _osgGA.OSGGA_EVENT
class PointerData(osg.Referenced):
    """Proxy of C++ osgGA::PointerData class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointerData, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointerData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgGA::PointerData self) -> PointerData
        __init__(osgGA::PointerData self, Object obj, float in_x, float in_xMin, float in_xMax, float in_y, float in_yMin, 
            float in_yMax) -> PointerData
        __init__(osgGA::PointerData self, PointerData pd) -> PointerData
        """
        this = _osgGA.new_PointerData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["object"] = _osgGA.PointerData_object_set
    __swig_getmethods__["object"] = _osgGA.PointerData_object_get
    if _newclass:object = _swig_property(_osgGA.PointerData_object_get, _osgGA.PointerData_object_set)
    __swig_setmethods__["x"] = _osgGA.PointerData_x_set
    __swig_getmethods__["x"] = _osgGA.PointerData_x_get
    if _newclass:x = _swig_property(_osgGA.PointerData_x_get, _osgGA.PointerData_x_set)
    __swig_setmethods__["xMin"] = _osgGA.PointerData_xMin_set
    __swig_getmethods__["xMin"] = _osgGA.PointerData_xMin_get
    if _newclass:xMin = _swig_property(_osgGA.PointerData_xMin_get, _osgGA.PointerData_xMin_set)
    __swig_setmethods__["xMax"] = _osgGA.PointerData_xMax_set
    __swig_getmethods__["xMax"] = _osgGA.PointerData_xMax_get
    if _newclass:xMax = _swig_property(_osgGA.PointerData_xMax_get, _osgGA.PointerData_xMax_set)
    __swig_setmethods__["y"] = _osgGA.PointerData_y_set
    __swig_getmethods__["y"] = _osgGA.PointerData_y_get
    if _newclass:y = _swig_property(_osgGA.PointerData_y_get, _osgGA.PointerData_y_set)
    __swig_setmethods__["yMin"] = _osgGA.PointerData_yMin_set
    __swig_getmethods__["yMin"] = _osgGA.PointerData_yMin_get
    if _newclass:yMin = _swig_property(_osgGA.PointerData_yMin_get, _osgGA.PointerData_yMin_set)
    __swig_setmethods__["yMax"] = _osgGA.PointerData_yMax_set
    __swig_getmethods__["yMax"] = _osgGA.PointerData_yMax_get
    if _newclass:yMax = _swig_property(_osgGA.PointerData_yMax_get, _osgGA.PointerData_yMax_set)
    def getXnormalized(self):
        """getXnormalized(PointerData self) -> float"""
        return _osgGA.PointerData_getXnormalized(self)

    def getYnormalized(self):
        """getYnormalized(PointerData self) -> float"""
        return _osgGA.PointerData_getYnormalized(self)

    __swig_destroy__ = _osgGA.delete_PointerData
    __del__ = lambda self : None;
PointerData_swigregister = _osgGA.PointerData_swigregister
PointerData_swigregister(PointerData)

class GUIEventAdapter(osg.Object):
    """Proxy of C++ osgGA::GUIEventAdapter class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUIEventAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GUIEventAdapter, name)
    __repr__ = _swig_repr
    LEFT_MOUSE_BUTTON = _osgGA.GUIEventAdapter_LEFT_MOUSE_BUTTON
    MIDDLE_MOUSE_BUTTON = _osgGA.GUIEventAdapter_MIDDLE_MOUSE_BUTTON
    RIGHT_MOUSE_BUTTON = _osgGA.GUIEventAdapter_RIGHT_MOUSE_BUTTON
    NONE = _osgGA.GUIEventAdapter_NONE
    PUSH = _osgGA.GUIEventAdapter_PUSH
    RELEASE = _osgGA.GUIEventAdapter_RELEASE
    DOUBLECLICK = _osgGA.GUIEventAdapter_DOUBLECLICK
    DRAG = _osgGA.GUIEventAdapter_DRAG
    MOVE = _osgGA.GUIEventAdapter_MOVE
    KEYDOWN = _osgGA.GUIEventAdapter_KEYDOWN
    KEYUP = _osgGA.GUIEventAdapter_KEYUP
    FRAME = _osgGA.GUIEventAdapter_FRAME
    RESIZE = _osgGA.GUIEventAdapter_RESIZE
    SCROLL = _osgGA.GUIEventAdapter_SCROLL
    PEN_PRESSURE = _osgGA.GUIEventAdapter_PEN_PRESSURE
    PEN_ORIENTATION = _osgGA.GUIEventAdapter_PEN_ORIENTATION
    PEN_PROXIMITY_ENTER = _osgGA.GUIEventAdapter_PEN_PROXIMITY_ENTER
    PEN_PROXIMITY_LEAVE = _osgGA.GUIEventAdapter_PEN_PROXIMITY_LEAVE
    CLOSE_WINDOW = _osgGA.GUIEventAdapter_CLOSE_WINDOW
    QUIT_APPLICATION = _osgGA.GUIEventAdapter_QUIT_APPLICATION
    USER = _osgGA.GUIEventAdapter_USER
    KEY_Space = _osgGA.GUIEventAdapter_KEY_Space
    KEY_0 = _osgGA.GUIEventAdapter_KEY_0
    KEY_1 = _osgGA.GUIEventAdapter_KEY_1
    KEY_2 = _osgGA.GUIEventAdapter_KEY_2
    KEY_3 = _osgGA.GUIEventAdapter_KEY_3
    KEY_4 = _osgGA.GUIEventAdapter_KEY_4
    KEY_5 = _osgGA.GUIEventAdapter_KEY_5
    KEY_6 = _osgGA.GUIEventAdapter_KEY_6
    KEY_7 = _osgGA.GUIEventAdapter_KEY_7
    KEY_8 = _osgGA.GUIEventAdapter_KEY_8
    KEY_9 = _osgGA.GUIEventAdapter_KEY_9
    KEY_A = _osgGA.GUIEventAdapter_KEY_A
    KEY_B = _osgGA.GUIEventAdapter_KEY_B
    KEY_C = _osgGA.GUIEventAdapter_KEY_C
    KEY_D = _osgGA.GUIEventAdapter_KEY_D
    KEY_E = _osgGA.GUIEventAdapter_KEY_E
    KEY_F = _osgGA.GUIEventAdapter_KEY_F
    KEY_G = _osgGA.GUIEventAdapter_KEY_G
    KEY_H = _osgGA.GUIEventAdapter_KEY_H
    KEY_I = _osgGA.GUIEventAdapter_KEY_I
    KEY_J = _osgGA.GUIEventAdapter_KEY_J
    KEY_K = _osgGA.GUIEventAdapter_KEY_K
    KEY_L = _osgGA.GUIEventAdapter_KEY_L
    KEY_M = _osgGA.GUIEventAdapter_KEY_M
    KEY_N = _osgGA.GUIEventAdapter_KEY_N
    KEY_O = _osgGA.GUIEventAdapter_KEY_O
    KEY_P = _osgGA.GUIEventAdapter_KEY_P
    KEY_Q = _osgGA.GUIEventAdapter_KEY_Q
    KEY_R = _osgGA.GUIEventAdapter_KEY_R
    KEY_S = _osgGA.GUIEventAdapter_KEY_S
    KEY_T = _osgGA.GUIEventAdapter_KEY_T
    KEY_U = _osgGA.GUIEventAdapter_KEY_U
    KEY_V = _osgGA.GUIEventAdapter_KEY_V
    KEY_W = _osgGA.GUIEventAdapter_KEY_W
    KEY_X = _osgGA.GUIEventAdapter_KEY_X
    KEY_Y = _osgGA.GUIEventAdapter_KEY_Y
    KEY_Z = _osgGA.GUIEventAdapter_KEY_Z
    KEY_Exclaim = _osgGA.GUIEventAdapter_KEY_Exclaim
    KEY_Quotedbl = _osgGA.GUIEventAdapter_KEY_Quotedbl
    KEY_Hash = _osgGA.GUIEventAdapter_KEY_Hash
    KEY_Dollar = _osgGA.GUIEventAdapter_KEY_Dollar
    KEY_Ampersand = _osgGA.GUIEventAdapter_KEY_Ampersand
    KEY_Quote = _osgGA.GUIEventAdapter_KEY_Quote
    KEY_Leftparen = _osgGA.GUIEventAdapter_KEY_Leftparen
    KEY_Rightparen = _osgGA.GUIEventAdapter_KEY_Rightparen
    KEY_Asterisk = _osgGA.GUIEventAdapter_KEY_Asterisk
    KEY_Plus = _osgGA.GUIEventAdapter_KEY_Plus
    KEY_Comma = _osgGA.GUIEventAdapter_KEY_Comma
    KEY_Minus = _osgGA.GUIEventAdapter_KEY_Minus
    KEY_Period = _osgGA.GUIEventAdapter_KEY_Period
    KEY_Slash = _osgGA.GUIEventAdapter_KEY_Slash
    KEY_Colon = _osgGA.GUIEventAdapter_KEY_Colon
    KEY_Semicolon = _osgGA.GUIEventAdapter_KEY_Semicolon
    KEY_Less = _osgGA.GUIEventAdapter_KEY_Less
    KEY_Equals = _osgGA.GUIEventAdapter_KEY_Equals
    KEY_Greater = _osgGA.GUIEventAdapter_KEY_Greater
    KEY_Question = _osgGA.GUIEventAdapter_KEY_Question
    KEY_At = _osgGA.GUIEventAdapter_KEY_At
    KEY_Leftbracket = _osgGA.GUIEventAdapter_KEY_Leftbracket
    KEY_Backslash = _osgGA.GUIEventAdapter_KEY_Backslash
    KEY_Rightbracket = _osgGA.GUIEventAdapter_KEY_Rightbracket
    KEY_Caret = _osgGA.GUIEventAdapter_KEY_Caret
    KEY_Underscore = _osgGA.GUIEventAdapter_KEY_Underscore
    KEY_Backquote = _osgGA.GUIEventAdapter_KEY_Backquote
    KEY_BackSpace = _osgGA.GUIEventAdapter_KEY_BackSpace
    KEY_Tab = _osgGA.GUIEventAdapter_KEY_Tab
    KEY_Linefeed = _osgGA.GUIEventAdapter_KEY_Linefeed
    KEY_Clear = _osgGA.GUIEventAdapter_KEY_Clear
    KEY_Return = _osgGA.GUIEventAdapter_KEY_Return
    KEY_Pause = _osgGA.GUIEventAdapter_KEY_Pause
    KEY_Scroll_Lock = _osgGA.GUIEventAdapter_KEY_Scroll_Lock
    KEY_Sys_Req = _osgGA.GUIEventAdapter_KEY_Sys_Req
    KEY_Escape = _osgGA.GUIEventAdapter_KEY_Escape
    KEY_Delete = _osgGA.GUIEventAdapter_KEY_Delete
    KEY_Home = _osgGA.GUIEventAdapter_KEY_Home
    KEY_Left = _osgGA.GUIEventAdapter_KEY_Left
    KEY_Up = _osgGA.GUIEventAdapter_KEY_Up
    KEY_Right = _osgGA.GUIEventAdapter_KEY_Right
    KEY_Down = _osgGA.GUIEventAdapter_KEY_Down
    KEY_Prior = _osgGA.GUIEventAdapter_KEY_Prior
    KEY_Page_Up = _osgGA.GUIEventAdapter_KEY_Page_Up
    KEY_Next = _osgGA.GUIEventAdapter_KEY_Next
    KEY_Page_Down = _osgGA.GUIEventAdapter_KEY_Page_Down
    KEY_End = _osgGA.GUIEventAdapter_KEY_End
    KEY_Begin = _osgGA.GUIEventAdapter_KEY_Begin
    KEY_Select = _osgGA.GUIEventAdapter_KEY_Select
    KEY_Print = _osgGA.GUIEventAdapter_KEY_Print
    KEY_Execute = _osgGA.GUIEventAdapter_KEY_Execute
    KEY_Insert = _osgGA.GUIEventAdapter_KEY_Insert
    KEY_Undo = _osgGA.GUIEventAdapter_KEY_Undo
    KEY_Redo = _osgGA.GUIEventAdapter_KEY_Redo
    KEY_Menu = _osgGA.GUIEventAdapter_KEY_Menu
    KEY_Find = _osgGA.GUIEventAdapter_KEY_Find
    KEY_Cancel = _osgGA.GUIEventAdapter_KEY_Cancel
    KEY_Help = _osgGA.GUIEventAdapter_KEY_Help
    KEY_Break = _osgGA.GUIEventAdapter_KEY_Break
    KEY_Mode_switch = _osgGA.GUIEventAdapter_KEY_Mode_switch
    KEY_Script_switch = _osgGA.GUIEventAdapter_KEY_Script_switch
    KEY_Num_Lock = _osgGA.GUIEventAdapter_KEY_Num_Lock
    KEY_KP_Space = _osgGA.GUIEventAdapter_KEY_KP_Space
    KEY_KP_Tab = _osgGA.GUIEventAdapter_KEY_KP_Tab
    KEY_KP_Enter = _osgGA.GUIEventAdapter_KEY_KP_Enter
    KEY_KP_F1 = _osgGA.GUIEventAdapter_KEY_KP_F1
    KEY_KP_F2 = _osgGA.GUIEventAdapter_KEY_KP_F2
    KEY_KP_F3 = _osgGA.GUIEventAdapter_KEY_KP_F3
    KEY_KP_F4 = _osgGA.GUIEventAdapter_KEY_KP_F4
    KEY_KP_Home = _osgGA.GUIEventAdapter_KEY_KP_Home
    KEY_KP_Left = _osgGA.GUIEventAdapter_KEY_KP_Left
    KEY_KP_Up = _osgGA.GUIEventAdapter_KEY_KP_Up
    KEY_KP_Right = _osgGA.GUIEventAdapter_KEY_KP_Right
    KEY_KP_Down = _osgGA.GUIEventAdapter_KEY_KP_Down
    KEY_KP_Prior = _osgGA.GUIEventAdapter_KEY_KP_Prior
    KEY_KP_Page_Up = _osgGA.GUIEventAdapter_KEY_KP_Page_Up
    KEY_KP_Next = _osgGA.GUIEventAdapter_KEY_KP_Next
    KEY_KP_Page_Down = _osgGA.GUIEventAdapter_KEY_KP_Page_Down
    KEY_KP_End = _osgGA.GUIEventAdapter_KEY_KP_End
    KEY_KP_Begin = _osgGA.GUIEventAdapter_KEY_KP_Begin
    KEY_KP_Insert = _osgGA.GUIEventAdapter_KEY_KP_Insert
    KEY_KP_Delete = _osgGA.GUIEventAdapter_KEY_KP_Delete
    KEY_KP_Equal = _osgGA.GUIEventAdapter_KEY_KP_Equal
    KEY_KP_Multiply = _osgGA.GUIEventAdapter_KEY_KP_Multiply
    KEY_KP_Add = _osgGA.GUIEventAdapter_KEY_KP_Add
    KEY_KP_Separator = _osgGA.GUIEventAdapter_KEY_KP_Separator
    KEY_KP_Subtract = _osgGA.GUIEventAdapter_KEY_KP_Subtract
    KEY_KP_Decimal = _osgGA.GUIEventAdapter_KEY_KP_Decimal
    KEY_KP_Divide = _osgGA.GUIEventAdapter_KEY_KP_Divide
    KEY_KP_0 = _osgGA.GUIEventAdapter_KEY_KP_0
    KEY_KP_1 = _osgGA.GUIEventAdapter_KEY_KP_1
    KEY_KP_2 = _osgGA.GUIEventAdapter_KEY_KP_2
    KEY_KP_3 = _osgGA.GUIEventAdapter_KEY_KP_3
    KEY_KP_4 = _osgGA.GUIEventAdapter_KEY_KP_4
    KEY_KP_5 = _osgGA.GUIEventAdapter_KEY_KP_5
    KEY_KP_6 = _osgGA.GUIEventAdapter_KEY_KP_6
    KEY_KP_7 = _osgGA.GUIEventAdapter_KEY_KP_7
    KEY_KP_8 = _osgGA.GUIEventAdapter_KEY_KP_8
    KEY_KP_9 = _osgGA.GUIEventAdapter_KEY_KP_9
    KEY_F1 = _osgGA.GUIEventAdapter_KEY_F1
    KEY_F2 = _osgGA.GUIEventAdapter_KEY_F2
    KEY_F3 = _osgGA.GUIEventAdapter_KEY_F3
    KEY_F4 = _osgGA.GUIEventAdapter_KEY_F4
    KEY_F5 = _osgGA.GUIEventAdapter_KEY_F5
    KEY_F6 = _osgGA.GUIEventAdapter_KEY_F6
    KEY_F7 = _osgGA.GUIEventAdapter_KEY_F7
    KEY_F8 = _osgGA.GUIEventAdapter_KEY_F8
    KEY_F9 = _osgGA.GUIEventAdapter_KEY_F9
    KEY_F10 = _osgGA.GUIEventAdapter_KEY_F10
    KEY_F11 = _osgGA.GUIEventAdapter_KEY_F11
    KEY_F12 = _osgGA.GUIEventAdapter_KEY_F12
    KEY_F13 = _osgGA.GUIEventAdapter_KEY_F13
    KEY_F14 = _osgGA.GUIEventAdapter_KEY_F14
    KEY_F15 = _osgGA.GUIEventAdapter_KEY_F15
    KEY_F16 = _osgGA.GUIEventAdapter_KEY_F16
    KEY_F17 = _osgGA.GUIEventAdapter_KEY_F17
    KEY_F18 = _osgGA.GUIEventAdapter_KEY_F18
    KEY_F19 = _osgGA.GUIEventAdapter_KEY_F19
    KEY_F20 = _osgGA.GUIEventAdapter_KEY_F20
    KEY_F21 = _osgGA.GUIEventAdapter_KEY_F21
    KEY_F22 = _osgGA.GUIEventAdapter_KEY_F22
    KEY_F23 = _osgGA.GUIEventAdapter_KEY_F23
    KEY_F24 = _osgGA.GUIEventAdapter_KEY_F24
    KEY_F25 = _osgGA.GUIEventAdapter_KEY_F25
    KEY_F26 = _osgGA.GUIEventAdapter_KEY_F26
    KEY_F27 = _osgGA.GUIEventAdapter_KEY_F27
    KEY_F28 = _osgGA.GUIEventAdapter_KEY_F28
    KEY_F29 = _osgGA.GUIEventAdapter_KEY_F29
    KEY_F30 = _osgGA.GUIEventAdapter_KEY_F30
    KEY_F31 = _osgGA.GUIEventAdapter_KEY_F31
    KEY_F32 = _osgGA.GUIEventAdapter_KEY_F32
    KEY_F33 = _osgGA.GUIEventAdapter_KEY_F33
    KEY_F34 = _osgGA.GUIEventAdapter_KEY_F34
    KEY_F35 = _osgGA.GUIEventAdapter_KEY_F35
    KEY_Shift_L = _osgGA.GUIEventAdapter_KEY_Shift_L
    KEY_Shift_R = _osgGA.GUIEventAdapter_KEY_Shift_R
    KEY_Control_L = _osgGA.GUIEventAdapter_KEY_Control_L
    KEY_Control_R = _osgGA.GUIEventAdapter_KEY_Control_R
    KEY_Caps_Lock = _osgGA.GUIEventAdapter_KEY_Caps_Lock
    KEY_Shift_Lock = _osgGA.GUIEventAdapter_KEY_Shift_Lock
    KEY_Meta_L = _osgGA.GUIEventAdapter_KEY_Meta_L
    KEY_Meta_R = _osgGA.GUIEventAdapter_KEY_Meta_R
    KEY_Alt_L = _osgGA.GUIEventAdapter_KEY_Alt_L
    KEY_Alt_R = _osgGA.GUIEventAdapter_KEY_Alt_R
    KEY_Super_L = _osgGA.GUIEventAdapter_KEY_Super_L
    KEY_Super_R = _osgGA.GUIEventAdapter_KEY_Super_R
    KEY_Hyper_L = _osgGA.GUIEventAdapter_KEY_Hyper_L
    KEY_Hyper_R = _osgGA.GUIEventAdapter_KEY_Hyper_R
    MODKEY_LEFT_SHIFT = _osgGA.GUIEventAdapter_MODKEY_LEFT_SHIFT
    MODKEY_RIGHT_SHIFT = _osgGA.GUIEventAdapter_MODKEY_RIGHT_SHIFT
    MODKEY_LEFT_CTRL = _osgGA.GUIEventAdapter_MODKEY_LEFT_CTRL
    MODKEY_RIGHT_CTRL = _osgGA.GUIEventAdapter_MODKEY_RIGHT_CTRL
    MODKEY_LEFT_ALT = _osgGA.GUIEventAdapter_MODKEY_LEFT_ALT
    MODKEY_RIGHT_ALT = _osgGA.GUIEventAdapter_MODKEY_RIGHT_ALT
    MODKEY_LEFT_META = _osgGA.GUIEventAdapter_MODKEY_LEFT_META
    MODKEY_RIGHT_META = _osgGA.GUIEventAdapter_MODKEY_RIGHT_META
    MODKEY_LEFT_SUPER = _osgGA.GUIEventAdapter_MODKEY_LEFT_SUPER
    MODKEY_RIGHT_SUPER = _osgGA.GUIEventAdapter_MODKEY_RIGHT_SUPER
    MODKEY_LEFT_HYPER = _osgGA.GUIEventAdapter_MODKEY_LEFT_HYPER
    MODKEY_RIGHT_HYPER = _osgGA.GUIEventAdapter_MODKEY_RIGHT_HYPER
    MODKEY_NUM_LOCK = _osgGA.GUIEventAdapter_MODKEY_NUM_LOCK
    MODKEY_CAPS_LOCK = _osgGA.GUIEventAdapter_MODKEY_CAPS_LOCK
    MODKEY_CTRL = _osgGA.GUIEventAdapter_MODKEY_CTRL
    MODKEY_SHIFT = _osgGA.GUIEventAdapter_MODKEY_SHIFT
    MODKEY_ALT = _osgGA.GUIEventAdapter_MODKEY_ALT
    MODKEY_META = _osgGA.GUIEventAdapter_MODKEY_META
    MODKEY_SUPER = _osgGA.GUIEventAdapter_MODKEY_SUPER
    MODKEY_HYPER = _osgGA.GUIEventAdapter_MODKEY_HYPER
    Y_INCREASING_UPWARDS = _osgGA.GUIEventAdapter_Y_INCREASING_UPWARDS
    Y_INCREASING_DOWNWARDS = _osgGA.GUIEventAdapter_Y_INCREASING_DOWNWARDS
    SCROLL_NONE = _osgGA.GUIEventAdapter_SCROLL_NONE
    SCROLL_LEFT = _osgGA.GUIEventAdapter_SCROLL_LEFT
    SCROLL_RIGHT = _osgGA.GUIEventAdapter_SCROLL_RIGHT
    SCROLL_UP = _osgGA.GUIEventAdapter_SCROLL_UP
    SCROLL_DOWN = _osgGA.GUIEventAdapter_SCROLL_DOWN
    SCROLL_2D = _osgGA.GUIEventAdapter_SCROLL_2D
    UNKNOWN = _osgGA.GUIEventAdapter_UNKNOWN
    PEN = _osgGA.GUIEventAdapter_PEN
    PUCK = _osgGA.GUIEventAdapter_PUCK
    ERASER = _osgGA.GUIEventAdapter_ERASER
    TOUCH_UNKNOWN = _osgGA.GUIEventAdapter_TOUCH_UNKNOWN
    TOUCH_BEGAN = _osgGA.GUIEventAdapter_TOUCH_BEGAN
    TOUCH_MOVED = _osgGA.GUIEventAdapter_TOUCH_MOVED
    TOUCH_STATIONERY = _osgGA.GUIEventAdapter_TOUCH_STATIONERY
    TOUCH_ENDED = _osgGA.GUIEventAdapter_TOUCH_ENDED
    def __init__(self, *args): 
        """
        __init__(osgGA::GUIEventAdapter self) -> GUIEventAdapter
        __init__(osgGA::GUIEventAdapter self, GUIEventAdapter rhs, CopyOp copyop=SHALLOW_COPY) -> GUIEventAdapter
        __init__(osgGA::GUIEventAdapter self, GUIEventAdapter rhs) -> GUIEventAdapter
        """
        this = _osgGA.new_GUIEventAdapter(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(GUIEventAdapter self) -> Object"""
        return _osgGA.GUIEventAdapter_cloneType(self)

    def clone(self, *args):
        """clone(GUIEventAdapter self, CopyOp copyop) -> Object"""
        return _osgGA.GUIEventAdapter_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(GUIEventAdapter self, Object obj) -> bool"""
        return _osgGA.GUIEventAdapter_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(GUIEventAdapter self) -> char const *"""
        return _osgGA.GUIEventAdapter_libraryName(self)

    def className(self):
        """className(GUIEventAdapter self) -> char const *"""
        return _osgGA.GUIEventAdapter_className(self)

    def getAccumulatedEventState():
        """getAccumulatedEventState() -> osg::ref_ptr< osgGA::GUIEventAdapter > &"""
        return _osgGA.GUIEventAdapter_getAccumulatedEventState()

    if _newclass:getAccumulatedEventState = staticmethod(getAccumulatedEventState)
    __swig_getmethods__["getAccumulatedEventState"] = lambda x: getAccumulatedEventState
    def setHandled(self, *args):
        """setHandled(GUIEventAdapter self, bool handled)"""
        return _osgGA.GUIEventAdapter_setHandled(self, *args)

    def getHandled(self):
        """getHandled(GUIEventAdapter self) -> bool"""
        return _osgGA.GUIEventAdapter_getHandled(self)

    def setEventType(self, *args):
        """setEventType(GUIEventAdapter self, osgGA::GUIEventAdapter::EventType Type)"""
        return _osgGA.GUIEventAdapter_setEventType(self, *args)

    def getEventType(self):
        """getEventType(GUIEventAdapter self) -> osgGA::GUIEventAdapter::EventType"""
        return _osgGA.GUIEventAdapter_getEventType(self)

    def setTime(self, *args):
        """setTime(GUIEventAdapter self, double time)"""
        return _osgGA.GUIEventAdapter_setTime(self, *args)

    def getTime(self):
        """getTime(GUIEventAdapter self) -> double"""
        return _osgGA.GUIEventAdapter_getTime(self)

    def time(self):
        """time(GUIEventAdapter self) -> double"""
        return _osgGA.GUIEventAdapter_time(self)

    def setGraphicsContext(self, *args):
        """setGraphicsContext(GUIEventAdapter self, GraphicsContext context)"""
        return _osgGA.GUIEventAdapter_setGraphicsContext(self, *args)

    def getGraphicsContext(self, *args):
        """
        getGraphicsContext(GUIEventAdapter self) -> GraphicsContext
        getGraphicsContext(GUIEventAdapter self) -> GraphicsContext
        """
        return _osgGA.GUIEventAdapter_getGraphicsContext(self, *args)

    def setWindowRectangle(self, *args):
        """
        setWindowRectangle(GUIEventAdapter self, int x, int y, int width, int height, bool updateMouseRange=True)
        setWindowRectangle(GUIEventAdapter self, int x, int y, int width, int height)
        """
        return _osgGA.GUIEventAdapter_setWindowRectangle(self, *args)

    def setWindowX(self, *args):
        """setWindowX(GUIEventAdapter self, int v)"""
        return _osgGA.GUIEventAdapter_setWindowX(self, *args)

    def getWindowX(self):
        """getWindowX(GUIEventAdapter self) -> int"""
        return _osgGA.GUIEventAdapter_getWindowX(self)

    def setWindowY(self, *args):
        """setWindowY(GUIEventAdapter self, int v)"""
        return _osgGA.GUIEventAdapter_setWindowY(self, *args)

    def getWindowY(self):
        """getWindowY(GUIEventAdapter self) -> int"""
        return _osgGA.GUIEventAdapter_getWindowY(self)

    def setWindowWidth(self, *args):
        """setWindowWidth(GUIEventAdapter self, int v)"""
        return _osgGA.GUIEventAdapter_setWindowWidth(self, *args)

    def getWindowWidth(self):
        """getWindowWidth(GUIEventAdapter self) -> int"""
        return _osgGA.GUIEventAdapter_getWindowWidth(self)

    def setWindowHeight(self, *args):
        """setWindowHeight(GUIEventAdapter self, int v)"""
        return _osgGA.GUIEventAdapter_setWindowHeight(self, *args)

    def getWindowHeight(self):
        """getWindowHeight(GUIEventAdapter self) -> int"""
        return _osgGA.GUIEventAdapter_getWindowHeight(self)

    def setKey(self, *args):
        """setKey(GUIEventAdapter self, int key)"""
        return _osgGA.GUIEventAdapter_setKey(self, *args)

    def getKey(self):
        """getKey(GUIEventAdapter self) -> int"""
        return _osgGA.GUIEventAdapter_getKey(self)

    def setUnmodifiedKey(self, *args):
        """setUnmodifiedKey(GUIEventAdapter self, int key)"""
        return _osgGA.GUIEventAdapter_setUnmodifiedKey(self, *args)

    def getUnmodifiedKey(self):
        """getUnmodifiedKey(GUIEventAdapter self) -> int"""
        return _osgGA.GUIEventAdapter_getUnmodifiedKey(self)

    def setButton(self, *args):
        """setButton(GUIEventAdapter self, int button)"""
        return _osgGA.GUIEventAdapter_setButton(self, *args)

    def getButton(self):
        """getButton(GUIEventAdapter self) -> int"""
        return _osgGA.GUIEventAdapter_getButton(self)

    def setInputRange(self, *args):
        """setInputRange(GUIEventAdapter self, float Xmin, float Ymin, float Xmax, float Ymax)"""
        return _osgGA.GUIEventAdapter_setInputRange(self, *args)

    def setXmin(self, *args):
        """setXmin(GUIEventAdapter self, float v)"""
        return _osgGA.GUIEventAdapter_setXmin(self, *args)

    def getXmin(self):
        """getXmin(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getXmin(self)

    def setXmax(self, *args):
        """setXmax(GUIEventAdapter self, float v)"""
        return _osgGA.GUIEventAdapter_setXmax(self, *args)

    def getXmax(self):
        """getXmax(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getXmax(self)

    def setYmin(self, *args):
        """setYmin(GUIEventAdapter self, float v)"""
        return _osgGA.GUIEventAdapter_setYmin(self, *args)

    def getYmin(self):
        """getYmin(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getYmin(self)

    def setYmax(self, *args):
        """setYmax(GUIEventAdapter self, float v)"""
        return _osgGA.GUIEventAdapter_setYmax(self, *args)

    def getYmax(self):
        """getYmax(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getYmax(self)

    def setX(self, *args):
        """setX(GUIEventAdapter self, float x)"""
        return _osgGA.GUIEventAdapter_setX(self, *args)

    def getX(self):
        """getX(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getX(self)

    def setY(self, *args):
        """setY(GUIEventAdapter self, float y)"""
        return _osgGA.GUIEventAdapter_setY(self, *args)

    def getY(self):
        """getY(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getY(self)

    def getXnormalized(self):
        """getXnormalized(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getXnormalized(self)

    def getYnormalized(self):
        """getYnormalized(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getYnormalized(self)

    def setMouseYOrientation(self, *args):
        """setMouseYOrientation(GUIEventAdapter self, osgGA::GUIEventAdapter::MouseYOrientation myo)"""
        return _osgGA.GUIEventAdapter_setMouseYOrientation(self, *args)

    def getMouseYOrientation(self):
        """getMouseYOrientation(GUIEventAdapter self) -> osgGA::GUIEventAdapter::MouseYOrientation"""
        return _osgGA.GUIEventAdapter_getMouseYOrientation(self)

    def setButtonMask(self, *args):
        """setButtonMask(GUIEventAdapter self, int mask)"""
        return _osgGA.GUIEventAdapter_setButtonMask(self, *args)

    def getButtonMask(self):
        """getButtonMask(GUIEventAdapter self) -> int"""
        return _osgGA.GUIEventAdapter_getButtonMask(self)

    def setModKeyMask(self, *args):
        """setModKeyMask(GUIEventAdapter self, int mask)"""
        return _osgGA.GUIEventAdapter_setModKeyMask(self, *args)

    def getModKeyMask(self):
        """getModKeyMask(GUIEventAdapter self) -> int"""
        return _osgGA.GUIEventAdapter_getModKeyMask(self)

    def setScrollingMotion(self, *args):
        """setScrollingMotion(GUIEventAdapter self, osgGA::GUIEventAdapter::ScrollingMotion motion)"""
        return _osgGA.GUIEventAdapter_setScrollingMotion(self, *args)

    def getScrollingMotion(self):
        """getScrollingMotion(GUIEventAdapter self) -> osgGA::GUIEventAdapter::ScrollingMotion"""
        return _osgGA.GUIEventAdapter_getScrollingMotion(self)

    def setScrollingMotionDelta(self, *args):
        """setScrollingMotionDelta(GUIEventAdapter self, float x, float y)"""
        return _osgGA.GUIEventAdapter_setScrollingMotionDelta(self, *args)

    def setScrollingDeltaX(self, *args):
        """setScrollingDeltaX(GUIEventAdapter self, float v)"""
        return _osgGA.GUIEventAdapter_setScrollingDeltaX(self, *args)

    def getScrollingDeltaX(self):
        """getScrollingDeltaX(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getScrollingDeltaX(self)

    def setScrollingDeltaY(self, *args):
        """setScrollingDeltaY(GUIEventAdapter self, float v)"""
        return _osgGA.GUIEventAdapter_setScrollingDeltaY(self, *args)

    def getScrollingDeltaY(self):
        """getScrollingDeltaY(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getScrollingDeltaY(self)

    def setPenPressure(self, *args):
        """setPenPressure(GUIEventAdapter self, float pressure)"""
        return _osgGA.GUIEventAdapter_setPenPressure(self, *args)

    def getPenPressure(self):
        """getPenPressure(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getPenPressure(self)

    def setPenTiltX(self, *args):
        """setPenTiltX(GUIEventAdapter self, float tiltX)"""
        return _osgGA.GUIEventAdapter_setPenTiltX(self, *args)

    def getPenTiltX(self):
        """getPenTiltX(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getPenTiltX(self)

    def setPenTiltY(self, *args):
        """setPenTiltY(GUIEventAdapter self, float tiltY)"""
        return _osgGA.GUIEventAdapter_setPenTiltY(self, *args)

    def getPenTiltY(self):
        """getPenTiltY(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getPenTiltY(self)

    def setPenRotation(self, *args):
        """setPenRotation(GUIEventAdapter self, float rotation)"""
        return _osgGA.GUIEventAdapter_setPenRotation(self, *args)

    def getPenRotation(self):
        """getPenRotation(GUIEventAdapter self) -> float"""
        return _osgGA.GUIEventAdapter_getPenRotation(self)

    def setTabletPointerType(self, *args):
        """setTabletPointerType(GUIEventAdapter self, osgGA::GUIEventAdapter::TabletPointerType pt)"""
        return _osgGA.GUIEventAdapter_setTabletPointerType(self, *args)

    def getTabletPointerType(self):
        """getTabletPointerType(GUIEventAdapter self) -> osgGA::GUIEventAdapter::TabletPointerType"""
        return _osgGA.GUIEventAdapter_getTabletPointerType(self)

    def getPenOrientation(self):
        """getPenOrientation(GUIEventAdapter self) -> Matrixd"""
        return _osgGA.GUIEventAdapter_getPenOrientation(self)

    def addTouchPoint(self, *args):
        """
        addTouchPoint(GUIEventAdapter self, unsigned int id, osgGA::GUIEventAdapter::TouchPhase phase, float x, float y, unsigned int tapCount=0)
        addTouchPoint(GUIEventAdapter self, unsigned int id, osgGA::GUIEventAdapter::TouchPhase phase, float x, float y)
        """
        return _osgGA.GUIEventAdapter_addTouchPoint(self, *args)

    def isMultiTouchEvent(self):
        """isMultiTouchEvent(GUIEventAdapter self) -> bool"""
        return _osgGA.GUIEventAdapter_isMultiTouchEvent(self)

    def setPointerDataList(self, *args):
        """setPointerDataList(GUIEventAdapter self, osgGA::GUIEventAdapter::PointerDataList const & pdl)"""
        return _osgGA.GUIEventAdapter_setPointerDataList(self, *args)

    def getPointerDataList(self, *args):
        """
        getPointerDataList(GUIEventAdapter self) -> osgGA::GUIEventAdapter::PointerDataList
        getPointerDataList(GUIEventAdapter self) -> osgGA::GUIEventAdapter::PointerDataList const &
        """
        return _osgGA.GUIEventAdapter_getPointerDataList(self, *args)

    def getNumPointerData(self):
        """getNumPointerData(GUIEventAdapter self) -> unsigned int"""
        return _osgGA.GUIEventAdapter_getNumPointerData(self)

    def getPointerData(self, *args):
        """
        getPointerData(GUIEventAdapter self, unsigned int i) -> PointerData
        getPointerData(GUIEventAdapter self, unsigned int i) -> PointerData
        getPointerData(GUIEventAdapter self, Object obj) -> PointerData
        getPointerData(GUIEventAdapter self, Object obj) -> PointerData
        """
        return _osgGA.GUIEventAdapter_getPointerData(self, *args)

    def addPointerData(self, *args):
        """addPointerData(GUIEventAdapter self, PointerData pd)"""
        return _osgGA.GUIEventAdapter_addPointerData(self, *args)

    def copyPointerDataFrom(self, *args):
        """copyPointerDataFrom(GUIEventAdapter self, GUIEventAdapter sourceEvent)"""
        return _osgGA.GUIEventAdapter_copyPointerDataFrom(self, *args)

GUIEventAdapter_swigregister = _osgGA.GUIEventAdapter_swigregister
GUIEventAdapter_swigregister(GUIEventAdapter)

def GUIEventAdapter_getAccumulatedEventState():
  """GUIEventAdapter_getAccumulatedEventState() -> osg::ref_ptr< osgGA::GUIEventAdapter > &"""
  return _osgGA.GUIEventAdapter_getAccumulatedEventState()

OSGGA_EVENTQUEUE = _osgGA.OSGGA_EVENTQUEUE
class EventQueue(osg.Referenced):
    """Proxy of C++ osgGA::EventQueue class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventQueue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgGA::EventQueue self, osgGA::GUIEventAdapter::MouseYOrientation mouseYOrientation=Y_INCREASING_DOWNWARDS) -> EventQueue
        __init__(osgGA::EventQueue self) -> EventQueue
        """
        this = _osgGA.new_EventQueue(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(EventQueue self) -> bool"""
        return _osgGA.EventQueue_empty(self)

    def setEvents(self, *args):
        """setEvents(EventQueue self, osgGA::EventQueue::Events & events)"""
        return _osgGA.EventQueue_setEvents(self, *args)

    def takeEvents(self, *args):
        """
        takeEvents(EventQueue self, osgGA::EventQueue::Events & events) -> bool
        takeEvents(EventQueue self, osgGA::EventQueue::Events & events, double cutOffTime) -> bool
        """
        return _osgGA.EventQueue_takeEvents(self, *args)

    def copyEvents(self, *args):
        """copyEvents(EventQueue self, osgGA::EventQueue::Events & events) -> bool"""
        return _osgGA.EventQueue_copyEvents(self, *args)

    def appendEvents(self, *args):
        """appendEvents(EventQueue self, osgGA::EventQueue::Events & events)"""
        return _osgGA.EventQueue_appendEvents(self, *args)

    def addEvent(self, *args):
        """addEvent(EventQueue self, GUIEventAdapter event)"""
        return _osgGA.EventQueue_addEvent(self, *args)

    def setUseFixedMouseInputRange(self, *args):
        """setUseFixedMouseInputRange(EventQueue self, bool useFixedMouseInputRange)"""
        return _osgGA.EventQueue_setUseFixedMouseInputRange(self, *args)

    def getUseFixedMouseInputRange(self):
        """getUseFixedMouseInputRange(EventQueue self) -> bool"""
        return _osgGA.EventQueue_getUseFixedMouseInputRange(self)

    def setGraphicsContext(self, *args):
        """setGraphicsContext(EventQueue self, GraphicsContext context)"""
        return _osgGA.EventQueue_setGraphicsContext(self, *args)

    def getGraphicsContext(self, *args):
        """
        getGraphicsContext(EventQueue self) -> GraphicsContext
        getGraphicsContext(EventQueue self) -> GraphicsContext
        """
        return _osgGA.EventQueue_getGraphicsContext(self, *args)

    def syncWindowRectangleWithGraphcisContext(self):
        """syncWindowRectangleWithGraphcisContext(EventQueue self)"""
        return _osgGA.EventQueue_syncWindowRectangleWithGraphcisContext(self)

    def setMouseInputRange(self, *args):
        """setMouseInputRange(EventQueue self, float xMin, float yMin, float xMax, float yMax)"""
        return _osgGA.EventQueue_setMouseInputRange(self, *args)

    def windowResize(self, *args):
        """
        windowResize(EventQueue self, int x, int y, int width, int height)
        windowResize(EventQueue self, int x, int y, int width, int height, double time)
        """
        return _osgGA.EventQueue_windowResize(self, *args)

    def mouseScroll(self, *args):
        """
        mouseScroll(EventQueue self, osgGA::GUIEventAdapter::ScrollingMotion sm)
        mouseScroll(EventQueue self, osgGA::GUIEventAdapter::ScrollingMotion sm, double time)
        """
        return _osgGA.EventQueue_mouseScroll(self, *args)

    def mouseScroll2D(self, *args):
        """
        mouseScroll2D(EventQueue self, float x, float y)
        mouseScroll2D(EventQueue self, float x, float y, double time)
        """
        return _osgGA.EventQueue_mouseScroll2D(self, *args)

    def penPressure(self, *args):
        """
        penPressure(EventQueue self, float pressure)
        penPressure(EventQueue self, float pressure, double time)
        """
        return _osgGA.EventQueue_penPressure(self, *args)

    def penOrientation(self, *args):
        """
        penOrientation(EventQueue self, float tiltX, float tiltY, float rotation)
        penOrientation(EventQueue self, float tiltX, float tiltY, float rotation, double time)
        """
        return _osgGA.EventQueue_penOrientation(self, *args)

    def penProximity(self, *args):
        """
        penProximity(EventQueue self, osgGA::GUIEventAdapter::TabletPointerType pt, bool isEntering)
        penProximity(EventQueue self, osgGA::GUIEventAdapter::TabletPointerType pt, bool isEntering, double time)
        """
        return _osgGA.EventQueue_penProximity(self, *args)

    def mouseWarped(self, *args):
        """mouseWarped(EventQueue self, float x, float y)"""
        return _osgGA.EventQueue_mouseWarped(self, *args)

    def mouseMotion(self, *args):
        """
        mouseMotion(EventQueue self, float x, float y)
        mouseMotion(EventQueue self, float x, float y, double time)
        """
        return _osgGA.EventQueue_mouseMotion(self, *args)

    def mouseButtonPress(self, *args):
        """
        mouseButtonPress(EventQueue self, float x, float y, unsigned int button)
        mouseButtonPress(EventQueue self, float x, float y, unsigned int button, double time)
        """
        return _osgGA.EventQueue_mouseButtonPress(self, *args)

    def mouseDoubleButtonPress(self, *args):
        """
        mouseDoubleButtonPress(EventQueue self, float x, float y, unsigned int button)
        mouseDoubleButtonPress(EventQueue self, float x, float y, unsigned int button, double time)
        """
        return _osgGA.EventQueue_mouseDoubleButtonPress(self, *args)

    def mouseButtonRelease(self, *args):
        """
        mouseButtonRelease(EventQueue self, float x, float y, unsigned int button)
        mouseButtonRelease(EventQueue self, float x, float y, unsigned int button, double time)
        """
        return _osgGA.EventQueue_mouseButtonRelease(self, *args)

    def keyPress(self, *args):
        """
        keyPress(EventQueue self, int key, int unmodifiedKey=0)
        keyPress(EventQueue self, int key)
        keyPress(EventQueue self, int key, double time, int unmodifiedKey=0)
        keyPress(EventQueue self, int key, double time)
        """
        return _osgGA.EventQueue_keyPress(self, *args)

    def keyRelease(self, *args):
        """
        keyRelease(EventQueue self, int key, int unmodifiedKey=0)
        keyRelease(EventQueue self, int key)
        keyRelease(EventQueue self, int key, double time, int unmodifiedKey=0)
        keyRelease(EventQueue self, int key, double time)
        """
        return _osgGA.EventQueue_keyRelease(self, *args)

    def touchBegan(self, *args):
        """
        touchBegan(EventQueue self, unsigned int id, osgGA::GUIEventAdapter::TouchPhase phase, float x, float y, double time) -> GUIEventAdapter
        touchBegan(EventQueue self, unsigned int id, osgGA::GUIEventAdapter::TouchPhase phase, float x, float y) -> GUIEventAdapter
        """
        return _osgGA.EventQueue_touchBegan(self, *args)

    def touchMoved(self, *args):
        """
        touchMoved(EventQueue self, unsigned int id, osgGA::GUIEventAdapter::TouchPhase phase, float x, float y, double time) -> GUIEventAdapter
        touchMoved(EventQueue self, unsigned int id, osgGA::GUIEventAdapter::TouchPhase phase, float x, float y) -> GUIEventAdapter
        """
        return _osgGA.EventQueue_touchMoved(self, *args)

    def touchEnded(self, *args):
        """
        touchEnded(EventQueue self, unsigned int id, osgGA::GUIEventAdapter::TouchPhase phase, float x, float y, unsigned int tap_count, 
            double time) -> GUIEventAdapter
        touchEnded(EventQueue self, unsigned int id, osgGA::GUIEventAdapter::TouchPhase phase, float x, float y, unsigned int tap_count) -> GUIEventAdapter
        """
        return _osgGA.EventQueue_touchEnded(self, *args)

    def closeWindow(self, *args):
        """
        closeWindow(EventQueue self)
        closeWindow(EventQueue self, double time)
        """
        return _osgGA.EventQueue_closeWindow(self, *args)

    def quitApplication(self, *args):
        """
        quitApplication(EventQueue self)
        quitApplication(EventQueue self, double time)
        """
        return _osgGA.EventQueue_quitApplication(self, *args)

    def frame(self, *args):
        """frame(EventQueue self, double time)"""
        return _osgGA.EventQueue_frame(self, *args)

    def setStartTick(self, *args):
        """setStartTick(EventQueue self, osg::Timer_t tick)"""
        return _osgGA.EventQueue_setStartTick(self, *args)

    def getStartTick(self):
        """getStartTick(EventQueue self) -> osg::Timer_t"""
        return _osgGA.EventQueue_getStartTick(self)

    def getTime(self):
        """getTime(EventQueue self) -> double"""
        return _osgGA.EventQueue_getTime(self)

    def clear(self):
        """clear(EventQueue self)"""
        return _osgGA.EventQueue_clear(self)

    def createEvent(self):
        """createEvent(EventQueue self) -> GUIEventAdapter"""
        return _osgGA.EventQueue_createEvent(self)

    def setCurrentEventState(self, *args):
        """setCurrentEventState(EventQueue self, GUIEventAdapter ea)"""
        return _osgGA.EventQueue_setCurrentEventState(self, *args)

    def getCurrentEventState(self, *args):
        """
        getCurrentEventState(EventQueue self) -> GUIEventAdapter
        getCurrentEventState(EventQueue self) -> GUIEventAdapter
        """
        return _osgGA.EventQueue_getCurrentEventState(self, *args)

    def userEvent(self, *args):
        """
        userEvent(EventQueue self, Referenced userEventData)
        userEvent(EventQueue self, Referenced userEventData, double time)
        """
        return _osgGA.EventQueue_userEvent(self, *args)

    def setFirstTouchEmulatesMouse(self, *args):
        """setFirstTouchEmulatesMouse(EventQueue self, bool b)"""
        return _osgGA.EventQueue_setFirstTouchEmulatesMouse(self, *args)

    def getFirstTouchEmulatesMouse(self):
        """getFirstTouchEmulatesMouse(EventQueue self) -> bool"""
        return _osgGA.EventQueue_getFirstTouchEmulatesMouse(self)

EventQueue_swigregister = _osgGA.EventQueue_swigregister
EventQueue_swigregister(EventQueue)

OSGGA_GUIEVENTHANDLER = _osgGA.OSGGA_GUIEVENTHANDLER
class GUIEventHandler(osg.NodeCallback):
    """Proxy of C++ osgGA::GUIEventHandler class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUIEventHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GUIEventHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgGA::GUIEventHandler self) -> GUIEventHandler
        __init__(osgGA::GUIEventHandler self, GUIEventHandler eh, CopyOp copyop) -> GUIEventHandler
        """
        if self.__class__ == GUIEventHandler:
            _self = None
        else:
            _self = self
        this = _osgGA.new_GUIEventHandler(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(GUIEventHandler self) -> Object"""
        return _osgGA.GUIEventHandler_cloneType(self)

    def clone(self, *args):
        """clone(GUIEventHandler self, CopyOp copyop) -> Object"""
        return _osgGA.GUIEventHandler_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(GUIEventHandler self, Object obj) -> bool"""
        return _osgGA.GUIEventHandler_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(GUIEventHandler self) -> char const *"""
        return _osgGA.GUIEventHandler_libraryName(self)

    def className(self):
        """className(GUIEventHandler self) -> char const *"""
        return _osgGA.GUIEventHandler_className(self)

    def __call__(self, *args):
        """__call__(GUIEventHandler self, Node node, NodeVisitor nv)"""
        return _osgGA.GUIEventHandler___call__(self, *args)

    def event(self, *args):
        """event(GUIEventHandler self, NodeVisitor nv, Drawable drawable)"""
        return _osgGA.GUIEventHandler_event(self, *args)

    def handle(self, *args):
        """
        handle(GUIEventHandler self, GUIEventAdapter ea, GUIActionAdapter aa, Object arg0, NodeVisitor arg1) -> bool
        handle(GUIEventHandler self, GUIEventAdapter arg0, GUIActionAdapter arg1) -> bool
        """
        return _osgGA.GUIEventHandler_handle(self, *args)

    def handleWithCheckAgainstIgnoreHandledEventsMask(self, *args):
        """
        handleWithCheckAgainstIgnoreHandledEventsMask(GUIEventHandler self, GUIEventAdapter ea, GUIActionAdapter aa, Object object, NodeVisitor nv) -> bool
        handleWithCheckAgainstIgnoreHandledEventsMask(GUIEventHandler self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool
        """
        return _osgGA.GUIEventHandler_handleWithCheckAgainstIgnoreHandledEventsMask(self, *args)

    def getUsage(self, *args):
        """getUsage(GUIEventHandler self, ApplicationUsage arg0)"""
        return _osgGA.GUIEventHandler_getUsage(self, *args)

    def setIgnoreHandledEventsMask(self, *args):
        """setIgnoreHandledEventsMask(GUIEventHandler self, unsigned int mask)"""
        return _osgGA.GUIEventHandler_setIgnoreHandledEventsMask(self, *args)

    def getIgnoreHandledEventsMask(self):
        """getIgnoreHandledEventsMask(GUIEventHandler self) -> unsigned int"""
        return _osgGA.GUIEventHandler_getIgnoreHandledEventsMask(self)

    __swig_destroy__ = _osgGA.delete_GUIEventHandler
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _osgGA.disown_GUIEventHandler(self)
        return weakref_proxy(self)
GUIEventHandler_swigregister = _osgGA.GUIEventHandler_swigregister
GUIEventHandler_swigregister(GUIEventHandler)

OSGGA_EVENTVISITOR = _osgGA.OSGGA_EVENTVISITOR
class EventVisitor(osg.NodeVisitor):
    """Proxy of C++ osgGA::EventVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgGA::EventVisitor self) -> EventVisitor"""
        this = _osgGA.new_EventVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgGA.delete_EventVisitor
    __del__ = lambda self : None;
    def libraryName(self):
        """libraryName(EventVisitor self) -> char const *"""
        return _osgGA.EventVisitor_libraryName(self)

    def className(self):
        """className(EventVisitor self) -> char const *"""
        return _osgGA.EventVisitor_className(self)

    def setActionAdapter(self, *args):
        """setActionAdapter(EventVisitor self, GUIActionAdapter actionAdapter)"""
        return _osgGA.EventVisitor_setActionAdapter(self, *args)

    def getActionAdapter(self, *args):
        """
        getActionAdapter(EventVisitor self) -> GUIActionAdapter
        getActionAdapter(EventVisitor self) -> GUIActionAdapter
        """
        return _osgGA.EventVisitor_getActionAdapter(self, *args)

    def addEvent(self, *args):
        """addEvent(EventVisitor self, GUIEventAdapter event)"""
        return _osgGA.EventVisitor_addEvent(self, *args)

    def removeEvent(self, *args):
        """removeEvent(EventVisitor self, GUIEventAdapter event)"""
        return _osgGA.EventVisitor_removeEvent(self, *args)

    def setEventHandled(self, *args):
        """setEventHandled(EventVisitor self, bool handled)"""
        return _osgGA.EventVisitor_setEventHandled(self, *args)

    def getEventHandled(self):
        """getEventHandled(EventVisitor self) -> bool"""
        return _osgGA.EventVisitor_getEventHandled(self)

    def setEvents(self, *args):
        """setEvents(EventVisitor self, osgGA::EventQueue::Events const & events)"""
        return _osgGA.EventVisitor_setEvents(self, *args)

    def getEvents(self, *args):
        """
        getEvents(EventVisitor self) -> osgGA::EventQueue::Events
        getEvents(EventVisitor self) -> osgGA::EventQueue::Events const &
        """
        return _osgGA.EventVisitor_getEvents(self, *args)

    def reset(self):
        """reset(EventVisitor self)"""
        return _osgGA.EventVisitor_reset(self)

    def apply(self, *args):
        """
        apply(EventVisitor self, Node node)
        apply(EventVisitor self, Geode node)
        apply(EventVisitor self, Billboard node)
        apply(EventVisitor self, LightSource node)
        apply(EventVisitor self, Group node)
        apply(EventVisitor self, Transform node)
        apply(EventVisitor self, Projection node)
        apply(EventVisitor self, Switch node)
        apply(EventVisitor self, LOD node)
        apply(EventVisitor self, osg::OccluderNode & node)
        """
        return _osgGA.EventVisitor_apply(self, *args)

EventVisitor_swigregister = _osgGA.EventVisitor_swigregister
EventVisitor_swigregister(EventVisitor)

OSGGA_FLIGHT_MANIPULATOR = _osgGA.OSGGA_FLIGHT_MANIPULATOR
class FlightManipulator(_object):
    """Proxy of C++ osgGA::FlightManipulator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlightManipulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlightManipulator, name)
    __repr__ = _swig_repr
    YAW_AUTOMATICALLY_WHEN_BANKED = _osgGA.FlightManipulator_YAW_AUTOMATICALLY_WHEN_BANKED
    NO_AUTOMATIC_YAW = _osgGA.FlightManipulator_NO_AUTOMATIC_YAW
    def __init__(self, *args): 
        """
        __init__(osgGA::FlightManipulator self, int flags=UPDATE_MODEL_SIZE|COMPUTE_HOME_USING_BBOX) -> FlightManipulator
        __init__(osgGA::FlightManipulator self) -> FlightManipulator
        __init__(osgGA::FlightManipulator self, FlightManipulator fpm, CopyOp copyOp=SHALLOW_COPY) -> FlightManipulator
        __init__(osgGA::FlightManipulator self, FlightManipulator fpm) -> FlightManipulator
        """
        this = _osgGA.new_FlightManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(FlightManipulator self) -> Object"""
        return _osgGA.FlightManipulator_cloneType(self)

    def clone(self, *args):
        """clone(FlightManipulator self, CopyOp copyop) -> Object"""
        return _osgGA.FlightManipulator_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(FlightManipulator self, Object obj) -> bool"""
        return _osgGA.FlightManipulator_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(FlightManipulator self) -> char const *"""
        return _osgGA.FlightManipulator_libraryName(self)

    def className(self):
        """className(FlightManipulator self) -> char const *"""
        return _osgGA.FlightManipulator_className(self)

    def setYawControlMode(self, *args):
        """setYawControlMode(FlightManipulator self, osgGA::FlightManipulator::YawControlMode ycm)"""
        return _osgGA.FlightManipulator_setYawControlMode(self, *args)

    def getYawControlMode(self):
        """getYawControlMode(FlightManipulator self) -> osgGA::FlightManipulator::YawControlMode"""
        return _osgGA.FlightManipulator_getYawControlMode(self)

    def home(self, *args):
        """home(FlightManipulator self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.FlightManipulator_home(self, *args)

    def init(self, *args):
        """init(FlightManipulator self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.FlightManipulator_init(self, *args)

    def getUsage(self, *args):
        """getUsage(FlightManipulator self, ApplicationUsage usage)"""
        return _osgGA.FlightManipulator_getUsage(self, *args)

    __swig_destroy__ = _osgGA.delete_FlightManipulator
    __del__ = lambda self : None;
FlightManipulator_swigregister = _osgGA.FlightManipulator_swigregister
FlightManipulator_swigregister(FlightManipulator)

OSGGA_CameraManipulator = _osgGA.OSGGA_CameraManipulator
class CameraManipulator(GUIEventHandler):
    """Proxy of C++ osgGA::CameraManipulator class"""
    __swig_setmethods__ = {}
    for _s in [GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CameraManipulator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def className(self):
        """className(CameraManipulator self) -> char const *"""
        return _osgGA.CameraManipulator_className(self)

    def setCoordinateFrameCallback(self, *args):
        """setCoordinateFrameCallback(CameraManipulator self, osgGA::CameraManipulator::CoordinateFrameCallback * cb)"""
        return _osgGA.CameraManipulator_setCoordinateFrameCallback(self, *args)

    def getCoordinateFrameCallback(self, *args):
        """
        getCoordinateFrameCallback(CameraManipulator self) -> osgGA::CameraManipulator::CoordinateFrameCallback
        getCoordinateFrameCallback(CameraManipulator self) -> osgGA::CameraManipulator::CoordinateFrameCallback const *
        """
        return _osgGA.CameraManipulator_getCoordinateFrameCallback(self, *args)

    def getCoordinateFrame(self, *args):
        """getCoordinateFrame(CameraManipulator self, Vec3d position) -> osg::CoordinateFrame"""
        return _osgGA.CameraManipulator_getCoordinateFrame(self, *args)

    def getSideVector(self, *args):
        """getSideVector(CameraManipulator self, osg::CoordinateFrame const & cf) -> Vec3d"""
        return _osgGA.CameraManipulator_getSideVector(self, *args)

    def getFrontVector(self, *args):
        """getFrontVector(CameraManipulator self, osg::CoordinateFrame const & cf) -> Vec3d"""
        return _osgGA.CameraManipulator_getFrontVector(self, *args)

    def getUpVector(self, *args):
        """getUpVector(CameraManipulator self, osg::CoordinateFrame const & cf) -> Vec3d"""
        return _osgGA.CameraManipulator_getUpVector(self, *args)

    def setByMatrix(self, *args):
        """setByMatrix(CameraManipulator self, Matrixd matrix)"""
        return _osgGA.CameraManipulator_setByMatrix(self, *args)

    def setByInverseMatrix(self, *args):
        """setByInverseMatrix(CameraManipulator self, Matrixd matrix)"""
        return _osgGA.CameraManipulator_setByInverseMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(CameraManipulator self) -> Matrixd"""
        return _osgGA.CameraManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(CameraManipulator self) -> Matrixd"""
        return _osgGA.CameraManipulator_getInverseMatrix(self)

    def updateCamera(self, *args):
        """updateCamera(CameraManipulator self, Camera camera)"""
        return _osgGA.CameraManipulator_updateCamera(self, *args)

    def getFusionDistanceMode(self):
        """getFusionDistanceMode(CameraManipulator self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgGA.CameraManipulator_getFusionDistanceMode(self)

    def getFusionDistanceValue(self):
        """getFusionDistanceValue(CameraManipulator self) -> float"""
        return _osgGA.CameraManipulator_getFusionDistanceValue(self)

    def setIntersectTraversalMask(self, *args):
        """setIntersectTraversalMask(CameraManipulator self, unsigned int mask)"""
        return _osgGA.CameraManipulator_setIntersectTraversalMask(self, *args)

    def getIntersectTraversalMask(self):
        """getIntersectTraversalMask(CameraManipulator self) -> unsigned int"""
        return _osgGA.CameraManipulator_getIntersectTraversalMask(self)

    def setNode(self, *args):
        """setNode(CameraManipulator self, Node arg2)"""
        return _osgGA.CameraManipulator_setNode(self, *args)

    def getNode(self, *args):
        """
        getNode(CameraManipulator self) -> Node
        getNode(CameraManipulator self) -> Node
        """
        return _osgGA.CameraManipulator_getNode(self, *args)

    def setHomePosition(self, *args):
        """
        setHomePosition(CameraManipulator self, Vec3d eye, Vec3d center, Vec3d up, bool autoComputeHomePosition=False)
        setHomePosition(CameraManipulator self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.CameraManipulator_setHomePosition(self, *args)

    def getHomePosition(self, *args):
        """getHomePosition(CameraManipulator self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osgGA.CameraManipulator_getHomePosition(self, *args)

    def setAutoComputeHomePosition(self, *args):
        """setAutoComputeHomePosition(CameraManipulator self, bool flag)"""
        return _osgGA.CameraManipulator_setAutoComputeHomePosition(self, *args)

    def getAutoComputeHomePosition(self):
        """getAutoComputeHomePosition(CameraManipulator self) -> bool"""
        return _osgGA.CameraManipulator_getAutoComputeHomePosition(self)

    def computeHomePosition(self, camera=None, useBoundingBox=False):
        """
        computeHomePosition(CameraManipulator self, Camera camera=None, bool useBoundingBox=False)
        computeHomePosition(CameraManipulator self, Camera camera=None)
        computeHomePosition(CameraManipulator self)
        """
        return _osgGA.CameraManipulator_computeHomePosition(self, camera, useBoundingBox)

    def home(self, *args):
        """
        home(CameraManipulator self, GUIEventAdapter arg2, GUIActionAdapter arg3)
        home(CameraManipulator self, double arg2)
        """
        return _osgGA.CameraManipulator_home(self, *args)

    def init(self, *args):
        """init(CameraManipulator self, GUIEventAdapter arg2, GUIActionAdapter arg3)"""
        return _osgGA.CameraManipulator_init(self, *args)

    def handle(self, *args):
        """handle(CameraManipulator self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.CameraManipulator_handle(self, *args)

CameraManipulator_swigregister = _osgGA.CameraManipulator_swigregister
CameraManipulator_swigregister(CameraManipulator)

class CoordinateFrameCallback(osg.Referenced):
    """Proxy of C++ CoordinateFrameCallback class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateFrameCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateFrameCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getCoordinateFrame(self, *args):
        """getCoordinateFrame(CoordinateFrameCallback self, Vec3d position) -> osg::CoordinateFrame"""
        return _osgGA.CoordinateFrameCallback_getCoordinateFrame(self, *args)

    __swig_destroy__ = _osgGA.delete_CoordinateFrameCallback
    __del__ = lambda self : None;
CoordinateFrameCallback_swigregister = _osgGA.CoordinateFrameCallback_swigregister
CoordinateFrameCallback_swigregister(CoordinateFrameCallback)

OSGGA_VIEWLISTMANIPULATOR = _osgGA.OSGGA_VIEWLISTMANIPULATOR
class CameraViewSwitchManipulator(CameraManipulator):
    """Proxy of C++ osgGA::CameraViewSwitchManipulator class"""
    __swig_setmethods__ = {}
    for _s in [CameraManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraViewSwitchManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [CameraManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CameraViewSwitchManipulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgGA::CameraViewSwitchManipulator self) -> CameraViewSwitchManipulator"""
        this = _osgGA.new_CameraViewSwitchManipulator()
        try: self.this.append(this)
        except: self.this = this
    def className(self):
        """className(CameraViewSwitchManipulator self) -> char const *"""
        return _osgGA.CameraViewSwitchManipulator_className(self)

    def setByMatrix(self, *args):
        """setByMatrix(CameraViewSwitchManipulator self, Matrixd arg2)"""
        return _osgGA.CameraViewSwitchManipulator_setByMatrix(self, *args)

    def setByInverseMatrix(self, *args):
        """setByInverseMatrix(CameraViewSwitchManipulator self, Matrixd arg2)"""
        return _osgGA.CameraViewSwitchManipulator_setByInverseMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(CameraViewSwitchManipulator self) -> Matrixd"""
        return _osgGA.CameraViewSwitchManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(CameraViewSwitchManipulator self) -> Matrixd"""
        return _osgGA.CameraViewSwitchManipulator_getInverseMatrix(self)

    def setNode(self, *args):
        """setNode(CameraViewSwitchManipulator self, Node arg2)"""
        return _osgGA.CameraViewSwitchManipulator_setNode(self, *args)

    def getNode(self, *args):
        """
        getNode(CameraViewSwitchManipulator self) -> Node
        getNode(CameraViewSwitchManipulator self) -> Node
        """
        return _osgGA.CameraViewSwitchManipulator_getNode(self, *args)

    def init(self, *args):
        """init(CameraViewSwitchManipulator self, GUIEventAdapter arg2, GUIActionAdapter arg3)"""
        return _osgGA.CameraViewSwitchManipulator_init(self, *args)

    def handle(self, *args):
        """handle(CameraViewSwitchManipulator self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.CameraViewSwitchManipulator_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(CameraViewSwitchManipulator self, ApplicationUsage usage)"""
        return _osgGA.CameraViewSwitchManipulator_getUsage(self, *args)

CameraViewSwitchManipulator_swigregister = _osgGA.CameraViewSwitchManipulator_swigregister
CameraViewSwitchManipulator_swigregister(CameraViewSwitchManipulator)

OSGUTIL_KEYSWITCMATRIXMANIPULATOR = _osgGA.OSGUTIL_KEYSWITCMATRIXMANIPULATOR
class KeySwitchMatrixManipulator(CameraManipulator):
    """Proxy of C++ osgGA::KeySwitchMatrixManipulator class"""
    __swig_setmethods__ = {}
    for _s in [CameraManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeySwitchMatrixManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [CameraManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeySwitchMatrixManipulator, name)
    __repr__ = _swig_repr
    def className(self):
        """className(KeySwitchMatrixManipulator self) -> char const *"""
        return _osgGA.KeySwitchMatrixManipulator_className(self)

    def addMatrixManipulator(self, *args):
        """addMatrixManipulator(KeySwitchMatrixManipulator self, int key, std::string name, CameraManipulator cm)"""
        return _osgGA.KeySwitchMatrixManipulator_addMatrixManipulator(self, *args)

    def addNumberedMatrixManipulator(self, *args):
        """addNumberedMatrixManipulator(KeySwitchMatrixManipulator self, CameraManipulator cm)"""
        return _osgGA.KeySwitchMatrixManipulator_addNumberedMatrixManipulator(self, *args)

    def getNumMatrixManipulators(self):
        """getNumMatrixManipulators(KeySwitchMatrixManipulator self) -> unsigned int"""
        return _osgGA.KeySwitchMatrixManipulator_getNumMatrixManipulators(self)

    def selectMatrixManipulator(self, *args):
        """selectMatrixManipulator(KeySwitchMatrixManipulator self, unsigned int num)"""
        return _osgGA.KeySwitchMatrixManipulator_selectMatrixManipulator(self, *args)

    def getKeyManipMap(self, *args):
        """
        getKeyManipMap(KeySwitchMatrixManipulator self) -> osgGA::KeySwitchMatrixManipulator::KeyManipMap
        getKeyManipMap(KeySwitchMatrixManipulator self) -> osgGA::KeySwitchMatrixManipulator::KeyManipMap const &
        """
        return _osgGA.KeySwitchMatrixManipulator_getKeyManipMap(self, *args)

    def getCurrentMatrixManipulator(self, *args):
        """
        getCurrentMatrixManipulator(KeySwitchMatrixManipulator self) -> CameraManipulator
        getCurrentMatrixManipulator(KeySwitchMatrixManipulator self) -> CameraManipulator
        """
        return _osgGA.KeySwitchMatrixManipulator_getCurrentMatrixManipulator(self, *args)

    def getMatrixManipulatorWithIndex(self, *args):
        """
        getMatrixManipulatorWithIndex(KeySwitchMatrixManipulator self, unsigned int key) -> CameraManipulator
        getMatrixManipulatorWithIndex(KeySwitchMatrixManipulator self, unsigned int key) -> CameraManipulator
        """
        return _osgGA.KeySwitchMatrixManipulator_getMatrixManipulatorWithIndex(self, *args)

    def getMatrixManipulatorWithKey(self, *args):
        """
        getMatrixManipulatorWithKey(KeySwitchMatrixManipulator self, unsigned int key) -> CameraManipulator
        getMatrixManipulatorWithKey(KeySwitchMatrixManipulator self, unsigned int key) -> CameraManipulator
        """
        return _osgGA.KeySwitchMatrixManipulator_getMatrixManipulatorWithKey(self, *args)

    def setCoordinateFrameCallback(self, *args):
        """setCoordinateFrameCallback(KeySwitchMatrixManipulator self, osgGA::CameraManipulator::CoordinateFrameCallback * cb)"""
        return _osgGA.KeySwitchMatrixManipulator_setCoordinateFrameCallback(self, *args)

    def setByMatrix(self, *args):
        """setByMatrix(KeySwitchMatrixManipulator self, Matrixd matrix)"""
        return _osgGA.KeySwitchMatrixManipulator_setByMatrix(self, *args)

    def setByInverseMatrix(self, *args):
        """setByInverseMatrix(KeySwitchMatrixManipulator self, Matrixd matrix)"""
        return _osgGA.KeySwitchMatrixManipulator_setByInverseMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(KeySwitchMatrixManipulator self) -> Matrixd"""
        return _osgGA.KeySwitchMatrixManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(KeySwitchMatrixManipulator self) -> Matrixd"""
        return _osgGA.KeySwitchMatrixManipulator_getInverseMatrix(self)

    def getFusionDistanceMode(self):
        """getFusionDistanceMode(KeySwitchMatrixManipulator self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgGA.KeySwitchMatrixManipulator_getFusionDistanceMode(self)

    def getFusionDistanceValue(self):
        """getFusionDistanceValue(KeySwitchMatrixManipulator self) -> float"""
        return _osgGA.KeySwitchMatrixManipulator_getFusionDistanceValue(self)

    def setNode(self, *args):
        """setNode(KeySwitchMatrixManipulator self, Node n)"""
        return _osgGA.KeySwitchMatrixManipulator_setNode(self, *args)

    def getNode(self, *args):
        """
        getNode(KeySwitchMatrixManipulator self) -> Node
        getNode(KeySwitchMatrixManipulator self) -> Node
        """
        return _osgGA.KeySwitchMatrixManipulator_getNode(self, *args)

    def setHomePosition(self, *args):
        """
        setHomePosition(KeySwitchMatrixManipulator self, Vec3d eye, Vec3d center, Vec3d up, bool autoComputeHomePosition=False)
        setHomePosition(KeySwitchMatrixManipulator self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.KeySwitchMatrixManipulator_setHomePosition(self, *args)

    def setAutoComputeHomePosition(self, *args):
        """setAutoComputeHomePosition(KeySwitchMatrixManipulator self, bool flag)"""
        return _osgGA.KeySwitchMatrixManipulator_setAutoComputeHomePosition(self, *args)

    def computeHomePosition(self):
        """computeHomePosition(KeySwitchMatrixManipulator self)"""
        return _osgGA.KeySwitchMatrixManipulator_computeHomePosition(self)

    def home(self, *args):
        """home(KeySwitchMatrixManipulator self, GUIEventAdapter ee, GUIActionAdapter aa)"""
        return _osgGA.KeySwitchMatrixManipulator_home(self, *args)

    def init(self, *args):
        """init(KeySwitchMatrixManipulator self, GUIEventAdapter ee, GUIActionAdapter aa)"""
        return _osgGA.KeySwitchMatrixManipulator_init(self, *args)

    def handle(self, *args):
        """handle(KeySwitchMatrixManipulator self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.KeySwitchMatrixManipulator_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(KeySwitchMatrixManipulator self, ApplicationUsage usage)"""
        return _osgGA.KeySwitchMatrixManipulator_getUsage(self, *args)

    def __init__(self): 
        """__init__(osgGA::KeySwitchMatrixManipulator self) -> KeySwitchMatrixManipulator"""
        this = _osgGA.new_KeySwitchMatrixManipulator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgGA.delete_KeySwitchMatrixManipulator
    __del__ = lambda self : None;
KeySwitchMatrixManipulator_swigregister = _osgGA.KeySwitchMatrixManipulator_swigregister
KeySwitchMatrixManipulator_swigregister(KeySwitchMatrixManipulator)

OSGGA_STATESET_MANIPULATOR = _osgGA.OSGGA_STATESET_MANIPULATOR
class StateSetManipulator(GUIEventHandler):
    """Proxy of C++ osgGA::StateSetManipulator class"""
    __swig_setmethods__ = {}
    for _s in [GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateSetManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateSetManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, stateset=None): 
        """
        __init__(osgGA::StateSetManipulator self, StateSet stateset=None) -> StateSetManipulator
        __init__(osgGA::StateSetManipulator self) -> StateSetManipulator
        """
        this = _osgGA.new_StateSetManipulator(stateset)
        try: self.this.append(this)
        except: self.this = this
    def className(self):
        """className(StateSetManipulator self) -> char const *"""
        return _osgGA.StateSetManipulator_className(self)

    def setStateSet(self, *args):
        """setStateSet(StateSetManipulator self, StateSet arg2)"""
        return _osgGA.StateSetManipulator_setStateSet(self, *args)

    def getStateSet(self, *args):
        """
        getStateSet(StateSetManipulator self) -> StateSet
        getStateSet(StateSetManipulator self) -> StateSet
        """
        return _osgGA.StateSetManipulator_getStateSet(self, *args)

    def handle(self, *args):
        """handle(StateSetManipulator self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.StateSetManipulator_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(StateSetManipulator self, ApplicationUsage usage)"""
        return _osgGA.StateSetManipulator_getUsage(self, *args)

    def setMaximumNumOfTextureUnits(self, *args):
        """setMaximumNumOfTextureUnits(StateSetManipulator self, unsigned int i)"""
        return _osgGA.StateSetManipulator_setMaximumNumOfTextureUnits(self, *args)

    def getMaximumNumOfTextureUnits(self):
        """getMaximumNumOfTextureUnits(StateSetManipulator self) -> unsigned int"""
        return _osgGA.StateSetManipulator_getMaximumNumOfTextureUnits(self)

    def setBackfaceEnabled(self, *args):
        """setBackfaceEnabled(StateSetManipulator self, bool newbackface)"""
        return _osgGA.StateSetManipulator_setBackfaceEnabled(self, *args)

    def getBackfaceEnabled(self):
        """getBackfaceEnabled(StateSetManipulator self) -> bool"""
        return _osgGA.StateSetManipulator_getBackfaceEnabled(self)

    def setLightingEnabled(self, *args):
        """setLightingEnabled(StateSetManipulator self, bool newlighting)"""
        return _osgGA.StateSetManipulator_setLightingEnabled(self, *args)

    def getLightingEnabled(self):
        """getLightingEnabled(StateSetManipulator self) -> bool"""
        return _osgGA.StateSetManipulator_getLightingEnabled(self)

    def setTextureEnabled(self, *args):
        """setTextureEnabled(StateSetManipulator self, bool newtexture)"""
        return _osgGA.StateSetManipulator_setTextureEnabled(self, *args)

    def getTextureEnabled(self):
        """getTextureEnabled(StateSetManipulator self) -> bool"""
        return _osgGA.StateSetManipulator_getTextureEnabled(self)

    def setPolygonMode(self, *args):
        """setPolygonMode(StateSetManipulator self, osg::PolygonMode::Mode newpolygonmode)"""
        return _osgGA.StateSetManipulator_setPolygonMode(self, *args)

    def getPolygonMode(self):
        """getPolygonMode(StateSetManipulator self) -> osg::PolygonMode::Mode"""
        return _osgGA.StateSetManipulator_getPolygonMode(self)

    def cyclePolygonMode(self):
        """cyclePolygonMode(StateSetManipulator self)"""
        return _osgGA.StateSetManipulator_cyclePolygonMode(self)

    def setKeyEventToggleBackfaceCulling(self, *args):
        """setKeyEventToggleBackfaceCulling(StateSetManipulator self, int key)"""
        return _osgGA.StateSetManipulator_setKeyEventToggleBackfaceCulling(self, *args)

    def getKeyEventToggleBackfaceCulling(self):
        """getKeyEventToggleBackfaceCulling(StateSetManipulator self) -> int"""
        return _osgGA.StateSetManipulator_getKeyEventToggleBackfaceCulling(self)

    def setKeyEventToggleLighting(self, *args):
        """setKeyEventToggleLighting(StateSetManipulator self, int key)"""
        return _osgGA.StateSetManipulator_setKeyEventToggleLighting(self, *args)

    def getKeyEventToggleLighting(self):
        """getKeyEventToggleLighting(StateSetManipulator self) -> int"""
        return _osgGA.StateSetManipulator_getKeyEventToggleLighting(self)

    def setKeyEventToggleTexturing(self, *args):
        """setKeyEventToggleTexturing(StateSetManipulator self, int key)"""
        return _osgGA.StateSetManipulator_setKeyEventToggleTexturing(self, *args)

    def getKeyEventToggleTexturing(self):
        """getKeyEventToggleTexturing(StateSetManipulator self) -> int"""
        return _osgGA.StateSetManipulator_getKeyEventToggleTexturing(self)

    def setKeyEventCyclePolygonMode(self, *args):
        """setKeyEventCyclePolygonMode(StateSetManipulator self, int key)"""
        return _osgGA.StateSetManipulator_setKeyEventCyclePolygonMode(self, *args)

    def getKeyEventCyclePolygonMode(self):
        """getKeyEventCyclePolygonMode(StateSetManipulator self) -> int"""
        return _osgGA.StateSetManipulator_getKeyEventCyclePolygonMode(self)

StateSetManipulator_swigregister = _osgGA.StateSetManipulator_swigregister
StateSetManipulator_swigregister(StateSetManipulator)

OSGGA_ORBIT_MANIPULATOR = _osgGA.OSGGA_ORBIT_MANIPULATOR
class OrbitManipulator(_object):
    """Proxy of C++ osgGA::OrbitManipulator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrbitManipulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrbitManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgGA::OrbitManipulator self, int flags=DEFAULT_SETTINGS) -> OrbitManipulator
        __init__(osgGA::OrbitManipulator self) -> OrbitManipulator
        __init__(osgGA::OrbitManipulator self, OrbitManipulator om, CopyOp copyOp=SHALLOW_COPY) -> OrbitManipulator
        __init__(osgGA::OrbitManipulator self, OrbitManipulator om) -> OrbitManipulator
        """
        this = _osgGA.new_OrbitManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(OrbitManipulator self) -> Object"""
        return _osgGA.OrbitManipulator_cloneType(self)

    def clone(self, *args):
        """clone(OrbitManipulator self, CopyOp copyop) -> Object"""
        return _osgGA.OrbitManipulator_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(OrbitManipulator self, Object obj) -> bool"""
        return _osgGA.OrbitManipulator_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(OrbitManipulator self) -> char const *"""
        return _osgGA.OrbitManipulator_libraryName(self)

    def className(self):
        """className(OrbitManipulator self) -> char const *"""
        return _osgGA.OrbitManipulator_className(self)

    def setByMatrix(self, *args):
        """setByMatrix(OrbitManipulator self, Matrixd matrix)"""
        return _osgGA.OrbitManipulator_setByMatrix(self, *args)

    def setByInverseMatrix(self, *args):
        """setByInverseMatrix(OrbitManipulator self, Matrixd matrix)"""
        return _osgGA.OrbitManipulator_setByInverseMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(OrbitManipulator self) -> Matrixd"""
        return _osgGA.OrbitManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(OrbitManipulator self) -> Matrixd"""
        return _osgGA.OrbitManipulator_getInverseMatrix(self)

    def setTransformation(self, *args):
        """
        setTransformation(OrbitManipulator self, Vec3d eye, Quat rotation)
        setTransformation(OrbitManipulator self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.OrbitManipulator_setTransformation(self, *args)

    def getTransformation(self, *args):
        """
        getTransformation(OrbitManipulator self, Vec3d eye, Quat rotation)
        getTransformation(OrbitManipulator self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.OrbitManipulator_getTransformation(self, *args)

    def setHeading(self, *args):
        """setHeading(OrbitManipulator self, double azimuth)"""
        return _osgGA.OrbitManipulator_setHeading(self, *args)

    def getHeading(self):
        """getHeading(OrbitManipulator self) -> double"""
        return _osgGA.OrbitManipulator_getHeading(self)

    def setElevation(self, *args):
        """setElevation(OrbitManipulator self, double elevation)"""
        return _osgGA.OrbitManipulator_setElevation(self, *args)

    def getElevation(self):
        """getElevation(OrbitManipulator self) -> double"""
        return _osgGA.OrbitManipulator_getElevation(self)

    def setCenter(self, *args):
        """setCenter(OrbitManipulator self, Vec3d center)"""
        return _osgGA.OrbitManipulator_setCenter(self, *args)

    def getCenter(self):
        """getCenter(OrbitManipulator self) -> Vec3d"""
        return _osgGA.OrbitManipulator_getCenter(self)

    def setRotation(self, *args):
        """setRotation(OrbitManipulator self, Quat rotation)"""
        return _osgGA.OrbitManipulator_setRotation(self, *args)

    def getRotation(self):
        """getRotation(OrbitManipulator self) -> Quat"""
        return _osgGA.OrbitManipulator_getRotation(self)

    def setDistance(self, *args):
        """setDistance(OrbitManipulator self, double distance)"""
        return _osgGA.OrbitManipulator_setDistance(self, *args)

    def getDistance(self):
        """getDistance(OrbitManipulator self) -> double"""
        return _osgGA.OrbitManipulator_getDistance(self)

    def setTrackballSize(self, *args):
        """setTrackballSize(OrbitManipulator self, double const & size)"""
        return _osgGA.OrbitManipulator_setTrackballSize(self, *args)

    def getTrackballSize(self):
        """getTrackballSize(OrbitManipulator self) -> double"""
        return _osgGA.OrbitManipulator_getTrackballSize(self)

    def setWheelZoomFactor(self, *args):
        """setWheelZoomFactor(OrbitManipulator self, double wheelZoomFactor)"""
        return _osgGA.OrbitManipulator_setWheelZoomFactor(self, *args)

    def getWheelZoomFactor(self):
        """getWheelZoomFactor(OrbitManipulator self) -> double"""
        return _osgGA.OrbitManipulator_getWheelZoomFactor(self)

    def setMinimumDistance(self, *args):
        """
        setMinimumDistance(OrbitManipulator self, double const & minimumDistance, bool relativeToModelSize=False)
        setMinimumDistance(OrbitManipulator self, double const & minimumDistance)
        """
        return _osgGA.OrbitManipulator_setMinimumDistance(self, *args)

    def getMinimumDistance(self, relativeToModelSize=None):
        """
        getMinimumDistance(OrbitManipulator self, bool * relativeToModelSize=None) -> double
        getMinimumDistance(OrbitManipulator self) -> double
        """
        return _osgGA.OrbitManipulator_getMinimumDistance(self, relativeToModelSize)

    def getFusionDistanceMode(self):
        """getFusionDistanceMode(OrbitManipulator self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgGA.OrbitManipulator_getFusionDistanceMode(self)

    def getFusionDistanceValue(self):
        """getFusionDistanceValue(OrbitManipulator self) -> float"""
        return _osgGA.OrbitManipulator_getFusionDistanceValue(self)

    __swig_destroy__ = _osgGA.delete_OrbitManipulator
    __del__ = lambda self : None;
OrbitManipulator_swigregister = _osgGA.OrbitManipulator_swigregister
OrbitManipulator_swigregister(OrbitManipulator)

class SphericalManipulator(CameraManipulator):
    """Proxy of C++ osgGA::SphericalManipulator class"""
    __swig_setmethods__ = {}
    for _s in [CameraManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphericalManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [CameraManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphericalManipulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgGA::SphericalManipulator self) -> SphericalManipulator"""
        this = _osgGA.new_SphericalManipulator()
        try: self.this.append(this)
        except: self.this = this
    def className(self):
        """className(SphericalManipulator self) -> char const *"""
        return _osgGA.SphericalManipulator_className(self)

    def setByMatrix(self, *args):
        """setByMatrix(SphericalManipulator self, Matrixd matrix)"""
        return _osgGA.SphericalManipulator_setByMatrix(self, *args)

    def setByInverseMatrix(self, *args):
        """setByInverseMatrix(SphericalManipulator self, Matrixd matrix)"""
        return _osgGA.SphericalManipulator_setByInverseMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(SphericalManipulator self) -> Matrixd"""
        return _osgGA.SphericalManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(SphericalManipulator self) -> Matrixd"""
        return _osgGA.SphericalManipulator_getInverseMatrix(self)

    def getFusionDistanceMode(self):
        """getFusionDistanceMode(SphericalManipulator self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgGA.SphericalManipulator_getFusionDistanceMode(self)

    def getFusionDistanceValue(self):
        """getFusionDistanceValue(SphericalManipulator self) -> float"""
        return _osgGA.SphericalManipulator_getFusionDistanceValue(self)

    def setNode(self, *args):
        """setNode(SphericalManipulator self, Node arg2)"""
        return _osgGA.SphericalManipulator_setNode(self, *args)

    def getNode(self, *args):
        """
        getNode(SphericalManipulator self) -> Node
        getNode(SphericalManipulator self) -> Node
        """
        return _osgGA.SphericalManipulator_getNode(self, *args)

    def home(self, *args):
        """
        home(SphericalManipulator self, GUIEventAdapter ea, GUIActionAdapter us)
        home(SphericalManipulator self, double arg2)
        """
        return _osgGA.SphericalManipulator_home(self, *args)

    def init(self, *args):
        """init(SphericalManipulator self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.SphericalManipulator_init(self, *args)

    def zoomOn(self, *args):
        """zoomOn(SphericalManipulator self, BoundingSpheref bound)"""
        return _osgGA.SphericalManipulator_zoomOn(self, *args)

    def handle(self, *args):
        """handle(SphericalManipulator self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.SphericalManipulator_handle(self, *args)

    def computeHomePosition(self):
        """computeHomePosition(SphericalManipulator self)"""
        return _osgGA.SphericalManipulator_computeHomePosition(self)

    def computeViewPosition(self, *args):
        """computeViewPosition(SphericalManipulator self, BoundingSpheref bound, double & scale, double & distance, Vec3d center)"""
        return _osgGA.SphericalManipulator_computeViewPosition(self, *args)

    def setCenter(self, *args):
        """setCenter(SphericalManipulator self, Vec3d center)"""
        return _osgGA.SphericalManipulator_setCenter(self, *args)

    def getCenter(self):
        """getCenter(SphericalManipulator self) -> Vec3d"""
        return _osgGA.SphericalManipulator_getCenter(self)

    def setDistance(self, *args):
        """setDistance(SphericalManipulator self, double distance) -> bool"""
        return _osgGA.SphericalManipulator_setDistance(self, *args)

    def getDistance(self):
        """getDistance(SphericalManipulator self) -> double"""
        return _osgGA.SphericalManipulator_getDistance(self)

    def getHomeDistance(self):
        """getHomeDistance(SphericalManipulator self) -> double"""
        return _osgGA.SphericalManipulator_getHomeDistance(self)

    def setHeading(self, *args):
        """setHeading(SphericalManipulator self, double azimuth)"""
        return _osgGA.SphericalManipulator_setHeading(self, *args)

    def getHeading(self):
        """getHeading(SphericalManipulator self) -> double"""
        return _osgGA.SphericalManipulator_getHeading(self)

    def setElevation(self, *args):
        """setElevation(SphericalManipulator self, double elevation)"""
        return _osgGA.SphericalManipulator_setElevation(self, *args)

    def getElevtion(self):
        """getElevtion(SphericalManipulator self) -> double"""
        return _osgGA.SphericalManipulator_getElevtion(self)

    def getMinimumZoomScale(self):
        """getMinimumZoomScale(SphericalManipulator self) -> double"""
        return _osgGA.SphericalManipulator_getMinimumZoomScale(self)

    def setMinimumZoomScale(self, *args):
        """setMinimumZoomScale(SphericalManipulator self, double minimumZoomScale)"""
        return _osgGA.SphericalManipulator_setMinimumZoomScale(self, *args)

    def setScroolWheelZoomDelta(self, *args):
        """setScroolWheelZoomDelta(SphericalManipulator self, double zoomDelta)"""
        return _osgGA.SphericalManipulator_setScroolWheelZoomDelta(self, *args)

    def getScroolWheelZoomDelta(self):
        """getScroolWheelZoomDelta(SphericalManipulator self) -> double"""
        return _osgGA.SphericalManipulator_getScroolWheelZoomDelta(self)

    def getUsage(self, *args):
        """getUsage(SphericalManipulator self, ApplicationUsage usage)"""
        return _osgGA.SphericalManipulator_getUsage(self, *args)

    ELEVATION_HEADING = _osgGA.SphericalManipulator_ELEVATION_HEADING
    HEADING = _osgGA.SphericalManipulator_HEADING
    ELEVATION = _osgGA.SphericalManipulator_ELEVATION
    MAP = _osgGA.SphericalManipulator_MAP
    def getRotationMode(self):
        """getRotationMode(SphericalManipulator self) -> osgGA::SphericalManipulator::RotationMode"""
        return _osgGA.SphericalManipulator_getRotationMode(self)

    def setRotationMode(self, *args):
        """setRotationMode(SphericalManipulator self, osgGA::SphericalManipulator::RotationMode mode)"""
        return _osgGA.SphericalManipulator_setRotationMode(self, *args)

    def getAllowThrow(self):
        """getAllowThrow(SphericalManipulator self) -> bool"""
        return _osgGA.SphericalManipulator_getAllowThrow(self)

    def setAllowThrow(self, *args):
        """setAllowThrow(SphericalManipulator self, bool allowThrow)"""
        return _osgGA.SphericalManipulator_setAllowThrow(self, *args)

SphericalManipulator_swigregister = _osgGA.SphericalManipulator_swigregister
SphericalManipulator_swigregister(SphericalManipulator)

OSGGA_CAMERA_MANIPULATOR = _osgGA.OSGGA_CAMERA_MANIPULATOR
class StandardManipulator(CameraManipulator):
    """Proxy of C++ osgGA::StandardManipulator class"""
    __swig_setmethods__ = {}
    for _s in [CameraManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [CameraManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardManipulator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UPDATE_MODEL_SIZE = _osgGA.StandardManipulator_UPDATE_MODEL_SIZE
    COMPUTE_HOME_USING_BBOX = _osgGA.StandardManipulator_COMPUTE_HOME_USING_BBOX
    PROCESS_MOUSE_WHEEL = _osgGA.StandardManipulator_PROCESS_MOUSE_WHEEL
    SET_CENTER_ON_WHEEL_FORWARD_MOVEMENT = _osgGA.StandardManipulator_SET_CENTER_ON_WHEEL_FORWARD_MOVEMENT
    DEFAULT_SETTINGS = _osgGA.StandardManipulator_DEFAULT_SETTINGS
    def className(self):
        """className(StandardManipulator self) -> char const *"""
        return _osgGA.StandardManipulator_className(self)

    def setTransformation(self, *args):
        """
        setTransformation(StandardManipulator self, Vec3d eye, Quat rotation)
        setTransformation(StandardManipulator self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.StandardManipulator_setTransformation(self, *args)

    def getTransformation(self, *args):
        """
        getTransformation(StandardManipulator self, Vec3d eye, Quat rotation)
        getTransformation(StandardManipulator self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.StandardManipulator_getTransformation(self, *args)

    def setNode(self, *args):
        """setNode(StandardManipulator self, Node arg2)"""
        return _osgGA.StandardManipulator_setNode(self, *args)

    def getNode(self, *args):
        """
        getNode(StandardManipulator self) -> Node
        getNode(StandardManipulator self) -> Node
        """
        return _osgGA.StandardManipulator_getNode(self, *args)

    def setVerticalAxisFixed(self, *args):
        """setVerticalAxisFixed(StandardManipulator self, bool value)"""
        return _osgGA.StandardManipulator_setVerticalAxisFixed(self, *args)

    def getVerticalAxisFixed(self):
        """getVerticalAxisFixed(StandardManipulator self) -> bool"""
        return _osgGA.StandardManipulator_getVerticalAxisFixed(self)

    def getAllowThrow(self):
        """getAllowThrow(StandardManipulator self) -> bool"""
        return _osgGA.StandardManipulator_getAllowThrow(self)

    def setAllowThrow(self, *args):
        """setAllowThrow(StandardManipulator self, bool allowThrow)"""
        return _osgGA.StandardManipulator_setAllowThrow(self, *args)

    def setAnimationTime(self, *args):
        """setAnimationTime(StandardManipulator self, double const t)"""
        return _osgGA.StandardManipulator_setAnimationTime(self, *args)

    def getAnimationTime(self):
        """getAnimationTime(StandardManipulator self) -> double"""
        return _osgGA.StandardManipulator_getAnimationTime(self)

    def isAnimating(self):
        """isAnimating(StandardManipulator self) -> bool"""
        return _osgGA.StandardManipulator_isAnimating(self)

    def finishAnimation(self):
        """finishAnimation(StandardManipulator self)"""
        return _osgGA.StandardManipulator_finishAnimation(self)

    def home(self, *args):
        """
        home(StandardManipulator self, GUIEventAdapter ea, GUIActionAdapter us)
        home(StandardManipulator self, double arg2)
        """
        return _osgGA.StandardManipulator_home(self, *args)

    def init(self, *args):
        """init(StandardManipulator self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.StandardManipulator_init(self, *args)

    def handle(self, *args):
        """handle(StandardManipulator self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.StandardManipulator_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(StandardManipulator self, ApplicationUsage usage)"""
        return _osgGA.StandardManipulator_getUsage(self, *args)

    __swig_destroy__ = _osgGA.delete_StandardManipulator
    __del__ = lambda self : None;
StandardManipulator_swigregister = _osgGA.StandardManipulator_swigregister
StandardManipulator_swigregister(StandardManipulator)

OSGGA_TERRAIN_MANIPULATOR = _osgGA.OSGGA_TERRAIN_MANIPULATOR
class TerrainManipulator(OrbitManipulator):
    """Proxy of C++ osgGA::TerrainManipulator class"""
    __swig_setmethods__ = {}
    for _s in [OrbitManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TerrainManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TerrainManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgGA::TerrainManipulator self, int flags=DEFAULT_SETTINGS) -> TerrainManipulator
        __init__(osgGA::TerrainManipulator self) -> TerrainManipulator
        __init__(osgGA::TerrainManipulator self, TerrainManipulator tm, CopyOp copyOp=SHALLOW_COPY) -> TerrainManipulator
        __init__(osgGA::TerrainManipulator self, TerrainManipulator tm) -> TerrainManipulator
        """
        this = _osgGA.new_TerrainManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TerrainManipulator self) -> Object"""
        return _osgGA.TerrainManipulator_cloneType(self)

    def clone(self, *args):
        """clone(TerrainManipulator self, CopyOp copyop) -> Object"""
        return _osgGA.TerrainManipulator_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TerrainManipulator self, Object obj) -> bool"""
        return _osgGA.TerrainManipulator_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TerrainManipulator self) -> char const *"""
        return _osgGA.TerrainManipulator_libraryName(self)

    def className(self):
        """className(TerrainManipulator self) -> char const *"""
        return _osgGA.TerrainManipulator_className(self)

    ELEVATION_AZIM_ROLL = _osgGA.TerrainManipulator_ELEVATION_AZIM_ROLL
    ELEVATION_AZIM = _osgGA.TerrainManipulator_ELEVATION_AZIM
    def setRotationMode(self, *args):
        """setRotationMode(TerrainManipulator self, osgGA::TerrainManipulator::RotationMode mode)"""
        return _osgGA.TerrainManipulator_setRotationMode(self, *args)

    def getRotationMode(self):
        """getRotationMode(TerrainManipulator self) -> osgGA::TerrainManipulator::RotationMode"""
        return _osgGA.TerrainManipulator_getRotationMode(self)

    def setByMatrix(self, *args):
        """setByMatrix(TerrainManipulator self, Matrixd matrix)"""
        return _osgGA.TerrainManipulator_setByMatrix(self, *args)

    def setTransformation(self, *args):
        """setTransformation(TerrainManipulator self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osgGA.TerrainManipulator_setTransformation(self, *args)

    def setNode(self, *args):
        """setNode(TerrainManipulator self, Node node)"""
        return _osgGA.TerrainManipulator_setNode(self, *args)

    __swig_destroy__ = _osgGA.delete_TerrainManipulator
    __del__ = lambda self : None;
TerrainManipulator_swigregister = _osgGA.TerrainManipulator_swigregister
TerrainManipulator_swigregister(TerrainManipulator)

OSGGA_TRACKBALL_MANIPULATOR = _osgGA.OSGGA_TRACKBALL_MANIPULATOR
class TrackballManipulator(OrbitManipulator):
    """Proxy of C++ osgGA::TrackballManipulator class"""
    __swig_setmethods__ = {}
    for _s in [OrbitManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrackballManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrackballManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgGA::TrackballManipulator self, int flags=DEFAULT_SETTINGS) -> TrackballManipulator
        __init__(osgGA::TrackballManipulator self) -> TrackballManipulator
        __init__(osgGA::TrackballManipulator self, TrackballManipulator tm, CopyOp copyOp=SHALLOW_COPY) -> TrackballManipulator
        __init__(osgGA::TrackballManipulator self, TrackballManipulator tm) -> TrackballManipulator
        """
        this = _osgGA.new_TrackballManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TrackballManipulator self) -> Object"""
        return _osgGA.TrackballManipulator_cloneType(self)

    def clone(self, *args):
        """clone(TrackballManipulator self, CopyOp copyop) -> Object"""
        return _osgGA.TrackballManipulator_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TrackballManipulator self, Object obj) -> bool"""
        return _osgGA.TrackballManipulator_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TrackballManipulator self) -> char const *"""
        return _osgGA.TrackballManipulator_libraryName(self)

    def className(self):
        """className(TrackballManipulator self) -> char const *"""
        return _osgGA.TrackballManipulator_className(self)

    __swig_destroy__ = _osgGA.delete_TrackballManipulator
    __del__ = lambda self : None;
TrackballManipulator_swigregister = _osgGA.TrackballManipulator_swigregister
TrackballManipulator_swigregister(TrackballManipulator)

OSGGA_UFO_MANIPULATOR_DEF = _osgGA.OSGGA_UFO_MANIPULATOR_DEF
class UFOManipulator(CameraManipulator):
    """Proxy of C++ osgGA::UFOManipulator class"""
    __swig_setmethods__ = {}
    for _s in [CameraManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UFOManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [CameraManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UFOManipulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgGA::UFOManipulator self) -> UFOManipulator"""
        this = _osgGA.new_UFOManipulator()
        try: self.this.append(this)
        except: self.this = this
    def className(self):
        """className(UFOManipulator self) -> char const *"""
        return _osgGA.UFOManipulator_className(self)

    def setByMatrix(self, *args):
        """setByMatrix(UFOManipulator self, Matrixd matrix)"""
        return _osgGA.UFOManipulator_setByMatrix(self, *args)

    def setByInverseMatrix(self, *args):
        """setByInverseMatrix(UFOManipulator self, Matrixd invmat)"""
        return _osgGA.UFOManipulator_setByInverseMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(UFOManipulator self) -> Matrixd"""
        return _osgGA.UFOManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(UFOManipulator self) -> Matrixd"""
        return _osgGA.UFOManipulator_getInverseMatrix(self)

    def setNode(self, *args):
        """setNode(UFOManipulator self, Node node)"""
        return _osgGA.UFOManipulator_setNode(self, *args)

    def getNode(self, *args):
        """
        getNode(UFOManipulator self) -> Node
        getNode(UFOManipulator self) -> Node
        """
        return _osgGA.UFOManipulator_getNode(self, *args)

    def computeHomePosition(self):
        """computeHomePosition(UFOManipulator self)"""
        return _osgGA.UFOManipulator_computeHomePosition(self)

    def home(self, *args):
        """
        home(UFOManipulator self, GUIEventAdapter arg2, GUIActionAdapter arg3)
        home(UFOManipulator self, double arg2)
        """
        return _osgGA.UFOManipulator_home(self, *args)

    def init(self, *args):
        """init(UFOManipulator self, GUIEventAdapter arg2, GUIActionAdapter arg3)"""
        return _osgGA.UFOManipulator_init(self, *args)

    def handle(self, *args):
        """handle(UFOManipulator self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgGA.UFOManipulator_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(UFOManipulator self, ApplicationUsage usage)"""
        return _osgGA.UFOManipulator_getUsage(self, *args)

    def getCurrentPositionAsLookAt(self, *args):
        """getCurrentPositionAsLookAt(UFOManipulator self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osgGA.UFOManipulator_getCurrentPositionAsLookAt(self, *args)

    def setMinHeight(self, *args):
        """setMinHeight(UFOManipulator self, double in_min_height)"""
        return _osgGA.UFOManipulator_setMinHeight(self, *args)

    def getMinHeight(self):
        """getMinHeight(UFOManipulator self) -> double"""
        return _osgGA.UFOManipulator_getMinHeight(self)

    def setMinDistance(self, *args):
        """setMinDistance(UFOManipulator self, double in_min_dist)"""
        return _osgGA.UFOManipulator_setMinDistance(self, *args)

    def getMinDistance(self):
        """getMinDistance(UFOManipulator self) -> double"""
        return _osgGA.UFOManipulator_getMinDistance(self)

    def setForwardSpeed(self, *args):
        """setForwardSpeed(UFOManipulator self, double in_fs)"""
        return _osgGA.UFOManipulator_setForwardSpeed(self, *args)

    def getForwardSpeed(self):
        """getForwardSpeed(UFOManipulator self) -> double"""
        return _osgGA.UFOManipulator_getForwardSpeed(self)

    def setSideSpeed(self, *args):
        """setSideSpeed(UFOManipulator self, double in_ss)"""
        return _osgGA.UFOManipulator_setSideSpeed(self, *args)

    def getSideSpeed(self):
        """getSideSpeed(UFOManipulator self) -> double"""
        return _osgGA.UFOManipulator_getSideSpeed(self)

    def setRotationSpeed(self, *args):
        """setRotationSpeed(UFOManipulator self, double in_rot_speed)"""
        return _osgGA.UFOManipulator_setRotationSpeed(self, *args)

    def getRotationSpeed(self):
        """getRotationSpeed(UFOManipulator self) -> double"""
        return _osgGA.UFOManipulator_getRotationSpeed(self)

UFOManipulator_swigregister = _osgGA.UFOManipulator_swigregister
UFOManipulator_swigregister(UFOManipulator)

OSGGA_FIRST_PERSON_MANIPULATOR = _osgGA.OSGGA_FIRST_PERSON_MANIPULATOR
class FirstPersonManipulator(StandardManipulator):
    """Proxy of C++ osgGA::FirstPersonManipulator class"""
    __swig_setmethods__ = {}
    for _s in [StandardManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirstPersonManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [StandardManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FirstPersonManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgGA::FirstPersonManipulator self, int flags=DEFAULT_SETTINGS) -> FirstPersonManipulator
        __init__(osgGA::FirstPersonManipulator self) -> FirstPersonManipulator
        __init__(osgGA::FirstPersonManipulator self, FirstPersonManipulator fpm, CopyOp copyOp=SHALLOW_COPY) -> FirstPersonManipulator
        __init__(osgGA::FirstPersonManipulator self, FirstPersonManipulator fpm) -> FirstPersonManipulator
        """
        this = _osgGA.new_FirstPersonManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(FirstPersonManipulator self) -> Object"""
        return _osgGA.FirstPersonManipulator_cloneType(self)

    def clone(self, *args):
        """clone(FirstPersonManipulator self, CopyOp copyop) -> Object"""
        return _osgGA.FirstPersonManipulator_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(FirstPersonManipulator self, Object obj) -> bool"""
        return _osgGA.FirstPersonManipulator_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(FirstPersonManipulator self) -> char const *"""
        return _osgGA.FirstPersonManipulator_libraryName(self)

    def className(self):
        """className(FirstPersonManipulator self) -> char const *"""
        return _osgGA.FirstPersonManipulator_className(self)

    def setByMatrix(self, *args):
        """setByMatrix(FirstPersonManipulator self, Matrixd matrix)"""
        return _osgGA.FirstPersonManipulator_setByMatrix(self, *args)

    def setByInverseMatrix(self, *args):
        """setByInverseMatrix(FirstPersonManipulator self, Matrixd matrix)"""
        return _osgGA.FirstPersonManipulator_setByInverseMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(FirstPersonManipulator self) -> Matrixd"""
        return _osgGA.FirstPersonManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(FirstPersonManipulator self) -> Matrixd"""
        return _osgGA.FirstPersonManipulator_getInverseMatrix(self)

    def setTransformation(self, *args):
        """
        setTransformation(FirstPersonManipulator self, Vec3d eye, Quat rotation)
        setTransformation(FirstPersonManipulator self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.FirstPersonManipulator_setTransformation(self, *args)

    def getTransformation(self, *args):
        """
        getTransformation(FirstPersonManipulator self, Vec3d eye, Quat rotation)
        getTransformation(FirstPersonManipulator self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.FirstPersonManipulator_getTransformation(self, *args)

    def setVelocity(self, *args):
        """setVelocity(FirstPersonManipulator self, double const & velocity)"""
        return _osgGA.FirstPersonManipulator_setVelocity(self, *args)

    def getVelocity(self):
        """getVelocity(FirstPersonManipulator self) -> double"""
        return _osgGA.FirstPersonManipulator_getVelocity(self)

    def setAcceleration(self, *args):
        """
        setAcceleration(FirstPersonManipulator self, double const & acceleration, bool relativeToModelSize=False)
        setAcceleration(FirstPersonManipulator self, double const & acceleration)
        """
        return _osgGA.FirstPersonManipulator_setAcceleration(self, *args)

    def getAcceleration(self, relativeToModelSize=None):
        """
        getAcceleration(FirstPersonManipulator self, bool * relativeToModelSize=None) -> double
        getAcceleration(FirstPersonManipulator self) -> double
        """
        return _osgGA.FirstPersonManipulator_getAcceleration(self, relativeToModelSize)

    def setMaxVelocity(self, *args):
        """
        setMaxVelocity(FirstPersonManipulator self, double const & maxVelocity, bool relativeToModelSize=False)
        setMaxVelocity(FirstPersonManipulator self, double const & maxVelocity)
        """
        return _osgGA.FirstPersonManipulator_setMaxVelocity(self, *args)

    def getMaxVelocity(self, relativeToModelSize=None):
        """
        getMaxVelocity(FirstPersonManipulator self, bool * relativeToModelSize=None) -> double
        getMaxVelocity(FirstPersonManipulator self) -> double
        """
        return _osgGA.FirstPersonManipulator_getMaxVelocity(self, relativeToModelSize)

    def setWheelMovement(self, *args):
        """
        setWheelMovement(FirstPersonManipulator self, double const & wheelMovement, bool relativeToModelSize=False)
        setWheelMovement(FirstPersonManipulator self, double const & wheelMovement)
        """
        return _osgGA.FirstPersonManipulator_setWheelMovement(self, *args)

    def getWheelMovement(self, relativeToModelSize=None):
        """
        getWheelMovement(FirstPersonManipulator self, bool * relativeToModelSize=None) -> double
        getWheelMovement(FirstPersonManipulator self) -> double
        """
        return _osgGA.FirstPersonManipulator_getWheelMovement(self, relativeToModelSize)

    def home(self, *args):
        """
        home(FirstPersonManipulator self, GUIEventAdapter ea, GUIActionAdapter us)
        home(FirstPersonManipulator self, double arg2)
        """
        return _osgGA.FirstPersonManipulator_home(self, *args)

    def init(self, *args):
        """init(FirstPersonManipulator self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.FirstPersonManipulator_init(self, *args)

    __swig_destroy__ = _osgGA.delete_FirstPersonManipulator
    __del__ = lambda self : None;
FirstPersonManipulator_swigregister = _osgGA.FirstPersonManipulator_swigregister
FirstPersonManipulator_swigregister(FirstPersonManipulator)

OSGGA_ANIMATION_PATH_MANIPULATOR = _osgGA.OSGGA_ANIMATION_PATH_MANIPULATOR
class AnimationPathManipulator(CameraManipulator):
    """Proxy of C++ osgGA::AnimationPathManipulator class"""
    __swig_setmethods__ = {}
    for _s in [CameraManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationPathManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [CameraManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationPathManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgGA::AnimationPathManipulator self, AnimationPath animationPath=None) -> AnimationPathManipulator
        __init__(osgGA::AnimationPathManipulator self) -> AnimationPathManipulator
        __init__(osgGA::AnimationPathManipulator self, std::string const & filename) -> AnimationPathManipulator
        """
        this = _osgGA.new_AnimationPathManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(self):
        """className(AnimationPathManipulator self) -> char const *"""
        return _osgGA.AnimationPathManipulator_className(self)

    def setTimeScale(self, *args):
        """setTimeScale(AnimationPathManipulator self, double s)"""
        return _osgGA.AnimationPathManipulator_setTimeScale(self, *args)

    def getTimeScale(self):
        """getTimeScale(AnimationPathManipulator self) -> double"""
        return _osgGA.AnimationPathManipulator_getTimeScale(self)

    def setTimeOffset(self, *args):
        """setTimeOffset(AnimationPathManipulator self, double o)"""
        return _osgGA.AnimationPathManipulator_setTimeOffset(self, *args)

    def getTimeOffset(self):
        """getTimeOffset(AnimationPathManipulator self) -> double"""
        return _osgGA.AnimationPathManipulator_getTimeOffset(self)

    def setAnimationCompletedCallback(self, *args):
        """setAnimationCompletedCallback(AnimationPathManipulator self, osgGA::AnimationPathManipulator::AnimationCompletedCallback * acc)"""
        return _osgGA.AnimationPathManipulator_setAnimationCompletedCallback(self, *args)

    def getAnimationCompletedCallback(self, *args):
        """
        getAnimationCompletedCallback(AnimationPathManipulator self) -> osgGA::AnimationPathManipulator::AnimationCompletedCallback
        getAnimationCompletedCallback(AnimationPathManipulator self) -> osgGA::AnimationPathManipulator::AnimationCompletedCallback const *
        """
        return _osgGA.AnimationPathManipulator_getAnimationCompletedCallback(self, *args)

    def setPrintOutTimingInfo(self, *args):
        """setPrintOutTimingInfo(AnimationPathManipulator self, bool printOutTimingInfo)"""
        return _osgGA.AnimationPathManipulator_setPrintOutTimingInfo(self, *args)

    def getPrintOutTimingInfo(self):
        """getPrintOutTimingInfo(AnimationPathManipulator self) -> bool"""
        return _osgGA.AnimationPathManipulator_getPrintOutTimingInfo(self)

    def setByMatrix(self, *args):
        """setByMatrix(AnimationPathManipulator self, Matrixd matrix)"""
        return _osgGA.AnimationPathManipulator_setByMatrix(self, *args)

    def setByInverseMatrix(self, *args):
        """setByInverseMatrix(AnimationPathManipulator self, Matrixd matrix)"""
        return _osgGA.AnimationPathManipulator_setByInverseMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(AnimationPathManipulator self) -> Matrixd"""
        return _osgGA.AnimationPathManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(AnimationPathManipulator self) -> Matrixd"""
        return _osgGA.AnimationPathManipulator_getInverseMatrix(self)

    def setAnimationPath(self, *args):
        """setAnimationPath(AnimationPathManipulator self, AnimationPath animationPath)"""
        return _osgGA.AnimationPathManipulator_setAnimationPath(self, *args)

    def getAnimationPath(self, *args):
        """
        getAnimationPath(AnimationPathManipulator self) -> AnimationPath
        getAnimationPath(AnimationPathManipulator self) -> AnimationPath
        """
        return _osgGA.AnimationPathManipulator_getAnimationPath(self, *args)

    def valid(self):
        """valid(AnimationPathManipulator self) -> bool"""
        return _osgGA.AnimationPathManipulator_valid(self)

    def init(self, *args):
        """init(AnimationPathManipulator self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.AnimationPathManipulator_init(self, *args)

    def home(self, *args):
        """
        home(AnimationPathManipulator self, GUIEventAdapter ea, GUIActionAdapter us)
        home(AnimationPathManipulator self, double currentTime)
        """
        return _osgGA.AnimationPathManipulator_home(self, *args)

    def handle(self, *args):
        """handle(AnimationPathManipulator self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.AnimationPathManipulator_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(AnimationPathManipulator self, ApplicationUsage usage)"""
        return _osgGA.AnimationPathManipulator_getUsage(self, *args)

    __swig_destroy__ = _osgGA.delete_AnimationPathManipulator
    __del__ = lambda self : None;
AnimationPathManipulator_swigregister = _osgGA.AnimationPathManipulator_swigregister
AnimationPathManipulator_swigregister(AnimationPathManipulator)

class AnimationCompletedCallback(osg.Referenced):
    """Proxy of C++ AnimationCompletedCallback class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationCompletedCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationCompletedCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def completed(self, *args):
        """completed(AnimationCompletedCallback self, AnimationPathManipulator apm)"""
        return _osgGA.AnimationCompletedCallback_completed(self, *args)

    __swig_destroy__ = _osgGA.delete_AnimationCompletedCallback
    __del__ = lambda self : None;
AnimationCompletedCallback_swigregister = _osgGA.AnimationCompletedCallback_swigregister
AnimationCompletedCallback_swigregister(AnimationCompletedCallback)

OSGGA_DRIVEMANIPULATOR = _osgGA.OSGGA_DRIVEMANIPULATOR
class DriveManipulator(CameraManipulator):
    """Proxy of C++ osgGA::DriveManipulator class"""
    __swig_setmethods__ = {}
    for _s in [CameraManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DriveManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [CameraManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DriveManipulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgGA::DriveManipulator self) -> DriveManipulator"""
        this = _osgGA.new_DriveManipulator()
        try: self.this.append(this)
        except: self.this = this
    def className(self):
        """className(DriveManipulator self) -> char const *"""
        return _osgGA.DriveManipulator_className(self)

    def setByMatrix(self, *args):
        """setByMatrix(DriveManipulator self, Matrixd matrix)"""
        return _osgGA.DriveManipulator_setByMatrix(self, *args)

    def setByInverseMatrix(self, *args):
        """setByInverseMatrix(DriveManipulator self, Matrixd matrix)"""
        return _osgGA.DriveManipulator_setByInverseMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(DriveManipulator self) -> Matrixd"""
        return _osgGA.DriveManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(DriveManipulator self) -> Matrixd"""
        return _osgGA.DriveManipulator_getInverseMatrix(self)

    def setNode(self, *args):
        """setNode(DriveManipulator self, Node arg2)"""
        return _osgGA.DriveManipulator_setNode(self, *args)

    def getNode(self, *args):
        """
        getNode(DriveManipulator self) -> Node
        getNode(DriveManipulator self) -> Node
        """
        return _osgGA.DriveManipulator_getNode(self, *args)

    def computeHomePosition(self):
        """computeHomePosition(DriveManipulator self)"""
        return _osgGA.DriveManipulator_computeHomePosition(self)

    def home(self, *args):
        """home(DriveManipulator self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.DriveManipulator_home(self, *args)

    def init(self, *args):
        """init(DriveManipulator self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.DriveManipulator_init(self, *args)

    def handle(self, *args):
        """handle(DriveManipulator self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.DriveManipulator_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(DriveManipulator self, ApplicationUsage usage)"""
        return _osgGA.DriveManipulator_getUsage(self, *args)

    def setModelScale(self, *args):
        """setModelScale(DriveManipulator self, double in_ms)"""
        return _osgGA.DriveManipulator_setModelScale(self, *args)

    def getModelScale(self):
        """getModelScale(DriveManipulator self) -> double"""
        return _osgGA.DriveManipulator_getModelScale(self)

    def setVelocity(self, *args):
        """setVelocity(DriveManipulator self, double in_vel)"""
        return _osgGA.DriveManipulator_setVelocity(self, *args)

    def getVelocity(self):
        """getVelocity(DriveManipulator self) -> double"""
        return _osgGA.DriveManipulator_getVelocity(self)

    def setHeight(self, *args):
        """setHeight(DriveManipulator self, double in_h)"""
        return _osgGA.DriveManipulator_setHeight(self, *args)

    def getHeight(self):
        """getHeight(DriveManipulator self) -> double"""
        return _osgGA.DriveManipulator_getHeight(self)

DriveManipulator_swigregister = _osgGA.DriveManipulator_swigregister
DriveManipulator_swigregister(DriveManipulator)

OSGGA_NODE_TRACKER_MANIPULATOR = _osgGA.OSGGA_NODE_TRACKER_MANIPULATOR
class NodeTrackerManipulator(OrbitManipulator):
    """Proxy of C++ osgGA::NodeTrackerManipulator class"""
    __swig_setmethods__ = {}
    for _s in [OrbitManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeTrackerManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeTrackerManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgGA::NodeTrackerManipulator self, int flags=DEFAULT_SETTINGS) -> NodeTrackerManipulator
        __init__(osgGA::NodeTrackerManipulator self) -> NodeTrackerManipulator
        __init__(osgGA::NodeTrackerManipulator self, NodeTrackerManipulator om, CopyOp copyOp=SHALLOW_COPY) -> NodeTrackerManipulator
        __init__(osgGA::NodeTrackerManipulator self, NodeTrackerManipulator om) -> NodeTrackerManipulator
        """
        this = _osgGA.new_NodeTrackerManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(NodeTrackerManipulator self) -> Object"""
        return _osgGA.NodeTrackerManipulator_cloneType(self)

    def clone(self, *args):
        """clone(NodeTrackerManipulator self, CopyOp copyop) -> Object"""
        return _osgGA.NodeTrackerManipulator_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(NodeTrackerManipulator self, Object obj) -> bool"""
        return _osgGA.NodeTrackerManipulator_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(NodeTrackerManipulator self) -> char const *"""
        return _osgGA.NodeTrackerManipulator_libraryName(self)

    def className(self):
        """className(NodeTrackerManipulator self) -> char const *"""
        return _osgGA.NodeTrackerManipulator_className(self)

    def setTrackNodePath(self, *args):
        """
        setTrackNodePath(NodeTrackerManipulator self, vectorNode nodePath)
        setTrackNodePath(NodeTrackerManipulator self, osg::ObserverNodePath const & nodePath)
        """
        return _osgGA.NodeTrackerManipulator_setTrackNodePath(self, *args)

    def getTrackNodePath(self):
        """getTrackNodePath(NodeTrackerManipulator self) -> osg::ObserverNodePath &"""
        return _osgGA.NodeTrackerManipulator_getTrackNodePath(self)

    def setTrackNode(self, *args):
        """setTrackNode(NodeTrackerManipulator self, Node node)"""
        return _osgGA.NodeTrackerManipulator_setTrackNode(self, *args)

    def getTrackNode(self, *args):
        """
        getTrackNode(NodeTrackerManipulator self) -> Node
        getTrackNode(NodeTrackerManipulator self) -> Node
        """
        return _osgGA.NodeTrackerManipulator_getTrackNode(self, *args)

    NODE_CENTER = _osgGA.NodeTrackerManipulator_NODE_CENTER
    NODE_CENTER_AND_AZIM = _osgGA.NodeTrackerManipulator_NODE_CENTER_AND_AZIM
    NODE_CENTER_AND_ROTATION = _osgGA.NodeTrackerManipulator_NODE_CENTER_AND_ROTATION
    def setTrackerMode(self, *args):
        """setTrackerMode(NodeTrackerManipulator self, osgGA::NodeTrackerManipulator::TrackerMode mode)"""
        return _osgGA.NodeTrackerManipulator_setTrackerMode(self, *args)

    def getTrackerMode(self):
        """getTrackerMode(NodeTrackerManipulator self) -> osgGA::NodeTrackerManipulator::TrackerMode"""
        return _osgGA.NodeTrackerManipulator_getTrackerMode(self)

    TRACKBALL = _osgGA.NodeTrackerManipulator_TRACKBALL
    ELEVATION_AZIM = _osgGA.NodeTrackerManipulator_ELEVATION_AZIM
    def setRotationMode(self, *args):
        """setRotationMode(NodeTrackerManipulator self, osgGA::NodeTrackerManipulator::RotationMode mode)"""
        return _osgGA.NodeTrackerManipulator_setRotationMode(self, *args)

    def getRotationMode(self):
        """getRotationMode(NodeTrackerManipulator self) -> osgGA::NodeTrackerManipulator::RotationMode"""
        return _osgGA.NodeTrackerManipulator_getRotationMode(self)

    def setByMatrix(self, *args):
        """setByMatrix(NodeTrackerManipulator self, Matrixd matrix)"""
        return _osgGA.NodeTrackerManipulator_setByMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(NodeTrackerManipulator self) -> Matrixd"""
        return _osgGA.NodeTrackerManipulator_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(NodeTrackerManipulator self) -> Matrixd"""
        return _osgGA.NodeTrackerManipulator_getInverseMatrix(self)

    def setNode(self, *args):
        """setNode(NodeTrackerManipulator self, Node arg2)"""
        return _osgGA.NodeTrackerManipulator_setNode(self, *args)

    def computeHomePosition(self):
        """computeHomePosition(NodeTrackerManipulator self)"""
        return _osgGA.NodeTrackerManipulator_computeHomePosition(self)

    __swig_destroy__ = _osgGA.delete_NodeTrackerManipulator
    __del__ = lambda self : None;
NodeTrackerManipulator_swigregister = _osgGA.NodeTrackerManipulator_swigregister
NodeTrackerManipulator_swigregister(NodeTrackerManipulator)

# This file is compatible with both classic and new-style classes.


