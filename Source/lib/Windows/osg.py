# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osg', [dirname(__file__)])
        except ImportError:
            import _osg
            return _osg
        if fp is not None:
            try:
                _mod = imp.load_module('_osg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osg = swig_import_helper()
    del swig_import_helper
else:
    import _osg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osg.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _osg.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osg.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osg.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _osg.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osg.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _osg.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _osg.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _osg.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _osg.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osg.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osg.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osg.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osg.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osg.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osg.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osg.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osg.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

GL_FALSE = _osg.GL_FALSE
GL_TRUE = _osg.GL_TRUE
GL_BYTE = _osg.GL_BYTE
GL_UNSIGNED_BYTE = _osg.GL_UNSIGNED_BYTE
GL_SHORT = _osg.GL_SHORT
GL_UNSIGNED_SHORT = _osg.GL_UNSIGNED_SHORT
GL_INT = _osg.GL_INT
GL_UNSIGNED_INT = _osg.GL_UNSIGNED_INT
GL_FLOAT = _osg.GL_FLOAT
GL_2_BYTES = _osg.GL_2_BYTES
GL_3_BYTES = _osg.GL_3_BYTES
GL_4_BYTES = _osg.GL_4_BYTES
GL_DOUBLE = _osg.GL_DOUBLE
GL_POINTS = _osg.GL_POINTS
GL_LINES = _osg.GL_LINES
GL_LINE_LOOP = _osg.GL_LINE_LOOP
GL_LINE_STRIP = _osg.GL_LINE_STRIP
GL_TRIANGLES = _osg.GL_TRIANGLES
GL_TRIANGLE_STRIP = _osg.GL_TRIANGLE_STRIP
GL_TRIANGLE_FAN = _osg.GL_TRIANGLE_FAN
GL_QUADS = _osg.GL_QUADS
GL_QUAD_STRIP = _osg.GL_QUAD_STRIP
GL_POLYGON = _osg.GL_POLYGON
GL_VERTEX_ARRAY = _osg.GL_VERTEX_ARRAY
GL_NORMAL_ARRAY = _osg.GL_NORMAL_ARRAY
GL_COLOR_ARRAY = _osg.GL_COLOR_ARRAY
GL_INDEX_ARRAY = _osg.GL_INDEX_ARRAY
GL_TEXTURE_COORD_ARRAY = _osg.GL_TEXTURE_COORD_ARRAY
GL_EDGE_FLAG_ARRAY = _osg.GL_EDGE_FLAG_ARRAY
GL_VERTEX_ARRAY_SIZE = _osg.GL_VERTEX_ARRAY_SIZE
GL_VERTEX_ARRAY_TYPE = _osg.GL_VERTEX_ARRAY_TYPE
GL_VERTEX_ARRAY_STRIDE = _osg.GL_VERTEX_ARRAY_STRIDE
GL_NORMAL_ARRAY_TYPE = _osg.GL_NORMAL_ARRAY_TYPE
GL_NORMAL_ARRAY_STRIDE = _osg.GL_NORMAL_ARRAY_STRIDE
GL_COLOR_ARRAY_SIZE = _osg.GL_COLOR_ARRAY_SIZE
GL_COLOR_ARRAY_TYPE = _osg.GL_COLOR_ARRAY_TYPE
GL_COLOR_ARRAY_STRIDE = _osg.GL_COLOR_ARRAY_STRIDE
GL_INDEX_ARRAY_TYPE = _osg.GL_INDEX_ARRAY_TYPE
GL_INDEX_ARRAY_STRIDE = _osg.GL_INDEX_ARRAY_STRIDE
GL_TEXTURE_COORD_ARRAY_SIZE = _osg.GL_TEXTURE_COORD_ARRAY_SIZE
GL_TEXTURE_COORD_ARRAY_TYPE = _osg.GL_TEXTURE_COORD_ARRAY_TYPE
GL_TEXTURE_COORD_ARRAY_STRIDE = _osg.GL_TEXTURE_COORD_ARRAY_STRIDE
GL_EDGE_FLAG_ARRAY_STRIDE = _osg.GL_EDGE_FLAG_ARRAY_STRIDE
GL_VERTEX_ARRAY_POINTER = _osg.GL_VERTEX_ARRAY_POINTER
GL_NORMAL_ARRAY_POINTER = _osg.GL_NORMAL_ARRAY_POINTER
GL_COLOR_ARRAY_POINTER = _osg.GL_COLOR_ARRAY_POINTER
GL_INDEX_ARRAY_POINTER = _osg.GL_INDEX_ARRAY_POINTER
GL_TEXTURE_COORD_ARRAY_POINTER = _osg.GL_TEXTURE_COORD_ARRAY_POINTER
GL_EDGE_FLAG_ARRAY_POINTER = _osg.GL_EDGE_FLAG_ARRAY_POINTER
GL_V2F = _osg.GL_V2F
GL_V3F = _osg.GL_V3F
GL_C4UB_V2F = _osg.GL_C4UB_V2F
GL_C4UB_V3F = _osg.GL_C4UB_V3F
GL_C3F_V3F = _osg.GL_C3F_V3F
GL_N3F_V3F = _osg.GL_N3F_V3F
GL_C4F_N3F_V3F = _osg.GL_C4F_N3F_V3F
GL_T2F_V3F = _osg.GL_T2F_V3F
GL_T4F_V4F = _osg.GL_T4F_V4F
GL_T2F_C4UB_V3F = _osg.GL_T2F_C4UB_V3F
GL_T2F_C3F_V3F = _osg.GL_T2F_C3F_V3F
GL_T2F_N3F_V3F = _osg.GL_T2F_N3F_V3F
GL_T2F_C4F_N3F_V3F = _osg.GL_T2F_C4F_N3F_V3F
GL_T4F_C4F_N3F_V4F = _osg.GL_T4F_C4F_N3F_V4F
GL_MATRIX_MODE = _osg.GL_MATRIX_MODE
GL_MODELVIEW = _osg.GL_MODELVIEW
GL_PROJECTION = _osg.GL_PROJECTION
GL_TEXTURE = _osg.GL_TEXTURE
GL_POINT_SMOOTH = _osg.GL_POINT_SMOOTH
GL_POINT_SIZE = _osg.GL_POINT_SIZE
GL_POINT_SIZE_GRANULARITY = _osg.GL_POINT_SIZE_GRANULARITY
GL_POINT_SIZE_RANGE = _osg.GL_POINT_SIZE_RANGE
GL_LINE_SMOOTH = _osg.GL_LINE_SMOOTH
GL_LINE_STIPPLE = _osg.GL_LINE_STIPPLE
GL_LINE_STIPPLE_PATTERN = _osg.GL_LINE_STIPPLE_PATTERN
GL_LINE_STIPPLE_REPEAT = _osg.GL_LINE_STIPPLE_REPEAT
GL_LINE_WIDTH = _osg.GL_LINE_WIDTH
GL_LINE_WIDTH_GRANULARITY = _osg.GL_LINE_WIDTH_GRANULARITY
GL_LINE_WIDTH_RANGE = _osg.GL_LINE_WIDTH_RANGE
GL_POINT = _osg.GL_POINT
GL_LINE = _osg.GL_LINE
GL_FILL = _osg.GL_FILL
GL_CW = _osg.GL_CW
GL_CCW = _osg.GL_CCW
GL_FRONT = _osg.GL_FRONT
GL_BACK = _osg.GL_BACK
GL_POLYGON_MODE = _osg.GL_POLYGON_MODE
GL_POLYGON_SMOOTH = _osg.GL_POLYGON_SMOOTH
GL_POLYGON_STIPPLE = _osg.GL_POLYGON_STIPPLE
GL_EDGE_FLAG = _osg.GL_EDGE_FLAG
GL_CULL_FACE = _osg.GL_CULL_FACE
GL_CULL_FACE_MODE = _osg.GL_CULL_FACE_MODE
GL_FRONT_FACE = _osg.GL_FRONT_FACE
GL_POLYGON_OFFSET_FACTOR = _osg.GL_POLYGON_OFFSET_FACTOR
GL_POLYGON_OFFSET_UNITS = _osg.GL_POLYGON_OFFSET_UNITS
GL_POLYGON_OFFSET_POINT = _osg.GL_POLYGON_OFFSET_POINT
GL_POLYGON_OFFSET_LINE = _osg.GL_POLYGON_OFFSET_LINE
GL_POLYGON_OFFSET_FILL = _osg.GL_POLYGON_OFFSET_FILL
GL_COMPILE = _osg.GL_COMPILE
GL_COMPILE_AND_EXECUTE = _osg.GL_COMPILE_AND_EXECUTE
GL_LIST_BASE = _osg.GL_LIST_BASE
GL_LIST_INDEX = _osg.GL_LIST_INDEX
GL_LIST_MODE = _osg.GL_LIST_MODE
GL_NEVER = _osg.GL_NEVER
GL_LESS = _osg.GL_LESS
GL_EQUAL = _osg.GL_EQUAL
GL_LEQUAL = _osg.GL_LEQUAL
GL_GREATER = _osg.GL_GREATER
GL_NOTEQUAL = _osg.GL_NOTEQUAL
GL_GEQUAL = _osg.GL_GEQUAL
GL_ALWAYS = _osg.GL_ALWAYS
GL_DEPTH_TEST = _osg.GL_DEPTH_TEST
GL_DEPTH_BITS = _osg.GL_DEPTH_BITS
GL_DEPTH_CLEAR_VALUE = _osg.GL_DEPTH_CLEAR_VALUE
GL_DEPTH_FUNC = _osg.GL_DEPTH_FUNC
GL_DEPTH_RANGE = _osg.GL_DEPTH_RANGE
GL_DEPTH_WRITEMASK = _osg.GL_DEPTH_WRITEMASK
GL_DEPTH_COMPONENT = _osg.GL_DEPTH_COMPONENT
GL_LIGHTING = _osg.GL_LIGHTING
GL_LIGHT0 = _osg.GL_LIGHT0
GL_LIGHT1 = _osg.GL_LIGHT1
GL_LIGHT2 = _osg.GL_LIGHT2
GL_LIGHT3 = _osg.GL_LIGHT3
GL_LIGHT4 = _osg.GL_LIGHT4
GL_LIGHT5 = _osg.GL_LIGHT5
GL_LIGHT6 = _osg.GL_LIGHT6
GL_LIGHT7 = _osg.GL_LIGHT7
GL_SPOT_EXPONENT = _osg.GL_SPOT_EXPONENT
GL_SPOT_CUTOFF = _osg.GL_SPOT_CUTOFF
GL_CONSTANT_ATTENUATION = _osg.GL_CONSTANT_ATTENUATION
GL_LINEAR_ATTENUATION = _osg.GL_LINEAR_ATTENUATION
GL_QUADRATIC_ATTENUATION = _osg.GL_QUADRATIC_ATTENUATION
GL_AMBIENT = _osg.GL_AMBIENT
GL_DIFFUSE = _osg.GL_DIFFUSE
GL_SPECULAR = _osg.GL_SPECULAR
GL_SHININESS = _osg.GL_SHININESS
GL_EMISSION = _osg.GL_EMISSION
GL_POSITION = _osg.GL_POSITION
GL_SPOT_DIRECTION = _osg.GL_SPOT_DIRECTION
GL_AMBIENT_AND_DIFFUSE = _osg.GL_AMBIENT_AND_DIFFUSE
GL_COLOR_INDEXES = _osg.GL_COLOR_INDEXES
GL_LIGHT_MODEL_TWO_SIDE = _osg.GL_LIGHT_MODEL_TWO_SIDE
GL_LIGHT_MODEL_LOCAL_VIEWER = _osg.GL_LIGHT_MODEL_LOCAL_VIEWER
GL_LIGHT_MODEL_AMBIENT = _osg.GL_LIGHT_MODEL_AMBIENT
GL_FRONT_AND_BACK = _osg.GL_FRONT_AND_BACK
GL_SHADE_MODEL = _osg.GL_SHADE_MODEL
GL_FLAT = _osg.GL_FLAT
GL_SMOOTH = _osg.GL_SMOOTH
GL_COLOR_MATERIAL = _osg.GL_COLOR_MATERIAL
GL_COLOR_MATERIAL_FACE = _osg.GL_COLOR_MATERIAL_FACE
GL_COLOR_MATERIAL_PARAMETER = _osg.GL_COLOR_MATERIAL_PARAMETER
GL_NORMALIZE = _osg.GL_NORMALIZE
GL_CLIP_PLANE0 = _osg.GL_CLIP_PLANE0
GL_CLIP_PLANE1 = _osg.GL_CLIP_PLANE1
GL_CLIP_PLANE2 = _osg.GL_CLIP_PLANE2
GL_CLIP_PLANE3 = _osg.GL_CLIP_PLANE3
GL_CLIP_PLANE4 = _osg.GL_CLIP_PLANE4
GL_CLIP_PLANE5 = _osg.GL_CLIP_PLANE5
GL_ACCUM_RED_BITS = _osg.GL_ACCUM_RED_BITS
GL_ACCUM_GREEN_BITS = _osg.GL_ACCUM_GREEN_BITS
GL_ACCUM_BLUE_BITS = _osg.GL_ACCUM_BLUE_BITS
GL_ACCUM_ALPHA_BITS = _osg.GL_ACCUM_ALPHA_BITS
GL_ACCUM_CLEAR_VALUE = _osg.GL_ACCUM_CLEAR_VALUE
GL_ACCUM = _osg.GL_ACCUM
GL_ADD = _osg.GL_ADD
GL_LOAD = _osg.GL_LOAD
GL_MULT = _osg.GL_MULT
GL_RETURN = _osg.GL_RETURN
GL_ALPHA_TEST = _osg.GL_ALPHA_TEST
GL_ALPHA_TEST_REF = _osg.GL_ALPHA_TEST_REF
GL_ALPHA_TEST_FUNC = _osg.GL_ALPHA_TEST_FUNC
GL_BLEND = _osg.GL_BLEND
GL_BLEND_SRC = _osg.GL_BLEND_SRC
GL_BLEND_DST = _osg.GL_BLEND_DST
GL_ZERO = _osg.GL_ZERO
GL_ONE = _osg.GL_ONE
GL_SRC_COLOR = _osg.GL_SRC_COLOR
GL_ONE_MINUS_SRC_COLOR = _osg.GL_ONE_MINUS_SRC_COLOR
GL_SRC_ALPHA = _osg.GL_SRC_ALPHA
GL_ONE_MINUS_SRC_ALPHA = _osg.GL_ONE_MINUS_SRC_ALPHA
GL_DST_ALPHA = _osg.GL_DST_ALPHA
GL_ONE_MINUS_DST_ALPHA = _osg.GL_ONE_MINUS_DST_ALPHA
GL_DST_COLOR = _osg.GL_DST_COLOR
GL_ONE_MINUS_DST_COLOR = _osg.GL_ONE_MINUS_DST_COLOR
GL_SRC_ALPHA_SATURATE = _osg.GL_SRC_ALPHA_SATURATE
GL_FEEDBACK = _osg.GL_FEEDBACK
GL_RENDER = _osg.GL_RENDER
GL_SELECT = _osg.GL_SELECT
GL_2D = _osg.GL_2D
GL_3D = _osg.GL_3D
GL_3D_COLOR = _osg.GL_3D_COLOR
GL_3D_COLOR_TEXTURE = _osg.GL_3D_COLOR_TEXTURE
GL_4D_COLOR_TEXTURE = _osg.GL_4D_COLOR_TEXTURE
GL_POINT_TOKEN = _osg.GL_POINT_TOKEN
GL_LINE_TOKEN = _osg.GL_LINE_TOKEN
GL_LINE_RESET_TOKEN = _osg.GL_LINE_RESET_TOKEN
GL_POLYGON_TOKEN = _osg.GL_POLYGON_TOKEN
GL_BITMAP_TOKEN = _osg.GL_BITMAP_TOKEN
GL_DRAW_PIXEL_TOKEN = _osg.GL_DRAW_PIXEL_TOKEN
GL_COPY_PIXEL_TOKEN = _osg.GL_COPY_PIXEL_TOKEN
GL_PASS_THROUGH_TOKEN = _osg.GL_PASS_THROUGH_TOKEN
GL_FEEDBACK_BUFFER_POINTER = _osg.GL_FEEDBACK_BUFFER_POINTER
GL_FEEDBACK_BUFFER_SIZE = _osg.GL_FEEDBACK_BUFFER_SIZE
GL_FEEDBACK_BUFFER_TYPE = _osg.GL_FEEDBACK_BUFFER_TYPE
GL_SELECTION_BUFFER_POINTER = _osg.GL_SELECTION_BUFFER_POINTER
GL_SELECTION_BUFFER_SIZE = _osg.GL_SELECTION_BUFFER_SIZE
GL_FOG = _osg.GL_FOG
GL_FOG_MODE = _osg.GL_FOG_MODE
GL_FOG_DENSITY = _osg.GL_FOG_DENSITY
GL_FOG_COLOR = _osg.GL_FOG_COLOR
GL_FOG_INDEX = _osg.GL_FOG_INDEX
GL_FOG_START = _osg.GL_FOG_START
GL_FOG_END = _osg.GL_FOG_END
GL_LINEAR = _osg.GL_LINEAR
GL_EXP = _osg.GL_EXP
GL_EXP2 = _osg.GL_EXP2
GL_LOGIC_OP = _osg.GL_LOGIC_OP
GL_INDEX_LOGIC_OP = _osg.GL_INDEX_LOGIC_OP
GL_COLOR_LOGIC_OP = _osg.GL_COLOR_LOGIC_OP
GL_LOGIC_OP_MODE = _osg.GL_LOGIC_OP_MODE
GL_CLEAR = _osg.GL_CLEAR
GL_SET = _osg.GL_SET
GL_COPY = _osg.GL_COPY
GL_COPY_INVERTED = _osg.GL_COPY_INVERTED
GL_NOOP = _osg.GL_NOOP
GL_INVERT = _osg.GL_INVERT
GL_AND = _osg.GL_AND
GL_NAND = _osg.GL_NAND
GL_OR = _osg.GL_OR
GL_NOR = _osg.GL_NOR
GL_XOR = _osg.GL_XOR
GL_EQUIV = _osg.GL_EQUIV
GL_AND_REVERSE = _osg.GL_AND_REVERSE
GL_AND_INVERTED = _osg.GL_AND_INVERTED
GL_OR_REVERSE = _osg.GL_OR_REVERSE
GL_OR_INVERTED = _osg.GL_OR_INVERTED
GL_STENCIL_BITS = _osg.GL_STENCIL_BITS
GL_STENCIL_TEST = _osg.GL_STENCIL_TEST
GL_STENCIL_CLEAR_VALUE = _osg.GL_STENCIL_CLEAR_VALUE
GL_STENCIL_FUNC = _osg.GL_STENCIL_FUNC
GL_STENCIL_VALUE_MASK = _osg.GL_STENCIL_VALUE_MASK
GL_STENCIL_FAIL = _osg.GL_STENCIL_FAIL
GL_STENCIL_PASS_DEPTH_FAIL = _osg.GL_STENCIL_PASS_DEPTH_FAIL
GL_STENCIL_PASS_DEPTH_PASS = _osg.GL_STENCIL_PASS_DEPTH_PASS
GL_STENCIL_REF = _osg.GL_STENCIL_REF
GL_STENCIL_WRITEMASK = _osg.GL_STENCIL_WRITEMASK
GL_STENCIL_INDEX = _osg.GL_STENCIL_INDEX
GL_KEEP = _osg.GL_KEEP
GL_REPLACE = _osg.GL_REPLACE
GL_INCR = _osg.GL_INCR
GL_DECR = _osg.GL_DECR
GL_NONE = _osg.GL_NONE
GL_LEFT = _osg.GL_LEFT
GL_RIGHT = _osg.GL_RIGHT
GL_FRONT_LEFT = _osg.GL_FRONT_LEFT
GL_FRONT_RIGHT = _osg.GL_FRONT_RIGHT
GL_BACK_LEFT = _osg.GL_BACK_LEFT
GL_BACK_RIGHT = _osg.GL_BACK_RIGHT
GL_AUX0 = _osg.GL_AUX0
GL_AUX1 = _osg.GL_AUX1
GL_AUX2 = _osg.GL_AUX2
GL_AUX3 = _osg.GL_AUX3
GL_COLOR_INDEX = _osg.GL_COLOR_INDEX
GL_RED = _osg.GL_RED
GL_GREEN = _osg.GL_GREEN
GL_BLUE = _osg.GL_BLUE
GL_ALPHA = _osg.GL_ALPHA
GL_LUMINANCE = _osg.GL_LUMINANCE
GL_LUMINANCE_ALPHA = _osg.GL_LUMINANCE_ALPHA
GL_ALPHA_BITS = _osg.GL_ALPHA_BITS
GL_RED_BITS = _osg.GL_RED_BITS
GL_GREEN_BITS = _osg.GL_GREEN_BITS
GL_BLUE_BITS = _osg.GL_BLUE_BITS
GL_INDEX_BITS = _osg.GL_INDEX_BITS
GL_SUBPIXEL_BITS = _osg.GL_SUBPIXEL_BITS
GL_AUX_BUFFERS = _osg.GL_AUX_BUFFERS
GL_READ_BUFFER = _osg.GL_READ_BUFFER
GL_DRAW_BUFFER = _osg.GL_DRAW_BUFFER
GL_DOUBLEBUFFER = _osg.GL_DOUBLEBUFFER
GL_STEREO = _osg.GL_STEREO
GL_BITMAP = _osg.GL_BITMAP
GL_COLOR = _osg.GL_COLOR
GL_DEPTH = _osg.GL_DEPTH
GL_STENCIL = _osg.GL_STENCIL
GL_DITHER = _osg.GL_DITHER
GL_RGB = _osg.GL_RGB
GL_RGBA = _osg.GL_RGBA
GL_MAX_LIST_NESTING = _osg.GL_MAX_LIST_NESTING
GL_MAX_EVAL_ORDER = _osg.GL_MAX_EVAL_ORDER
GL_MAX_LIGHTS = _osg.GL_MAX_LIGHTS
GL_MAX_CLIP_PLANES = _osg.GL_MAX_CLIP_PLANES
GL_MAX_TEXTURE_SIZE = _osg.GL_MAX_TEXTURE_SIZE
GL_MAX_PIXEL_MAP_TABLE = _osg.GL_MAX_PIXEL_MAP_TABLE
GL_MAX_ATTRIB_STACK_DEPTH = _osg.GL_MAX_ATTRIB_STACK_DEPTH
GL_MAX_MODELVIEW_STACK_DEPTH = _osg.GL_MAX_MODELVIEW_STACK_DEPTH
GL_MAX_NAME_STACK_DEPTH = _osg.GL_MAX_NAME_STACK_DEPTH
GL_MAX_PROJECTION_STACK_DEPTH = _osg.GL_MAX_PROJECTION_STACK_DEPTH
GL_MAX_TEXTURE_STACK_DEPTH = _osg.GL_MAX_TEXTURE_STACK_DEPTH
GL_MAX_VIEWPORT_DIMS = _osg.GL_MAX_VIEWPORT_DIMS
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = _osg.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
GL_ATTRIB_STACK_DEPTH = _osg.GL_ATTRIB_STACK_DEPTH
GL_CLIENT_ATTRIB_STACK_DEPTH = _osg.GL_CLIENT_ATTRIB_STACK_DEPTH
GL_COLOR_CLEAR_VALUE = _osg.GL_COLOR_CLEAR_VALUE
GL_COLOR_WRITEMASK = _osg.GL_COLOR_WRITEMASK
GL_CURRENT_INDEX = _osg.GL_CURRENT_INDEX
GL_CURRENT_COLOR = _osg.GL_CURRENT_COLOR
GL_CURRENT_NORMAL = _osg.GL_CURRENT_NORMAL
GL_CURRENT_RASTER_COLOR = _osg.GL_CURRENT_RASTER_COLOR
GL_CURRENT_RASTER_DISTANCE = _osg.GL_CURRENT_RASTER_DISTANCE
GL_CURRENT_RASTER_INDEX = _osg.GL_CURRENT_RASTER_INDEX
GL_CURRENT_RASTER_POSITION = _osg.GL_CURRENT_RASTER_POSITION
GL_CURRENT_RASTER_TEXTURE_COORDS = _osg.GL_CURRENT_RASTER_TEXTURE_COORDS
GL_CURRENT_RASTER_POSITION_VALID = _osg.GL_CURRENT_RASTER_POSITION_VALID
GL_CURRENT_TEXTURE_COORDS = _osg.GL_CURRENT_TEXTURE_COORDS
GL_INDEX_CLEAR_VALUE = _osg.GL_INDEX_CLEAR_VALUE
GL_INDEX_MODE = _osg.GL_INDEX_MODE
GL_INDEX_WRITEMASK = _osg.GL_INDEX_WRITEMASK
GL_MODELVIEW_MATRIX = _osg.GL_MODELVIEW_MATRIX
GL_MODELVIEW_STACK_DEPTH = _osg.GL_MODELVIEW_STACK_DEPTH
GL_NAME_STACK_DEPTH = _osg.GL_NAME_STACK_DEPTH
GL_PROJECTION_MATRIX = _osg.GL_PROJECTION_MATRIX
GL_PROJECTION_STACK_DEPTH = _osg.GL_PROJECTION_STACK_DEPTH
GL_RENDER_MODE = _osg.GL_RENDER_MODE
GL_RGBA_MODE = _osg.GL_RGBA_MODE
GL_TEXTURE_MATRIX = _osg.GL_TEXTURE_MATRIX
GL_TEXTURE_STACK_DEPTH = _osg.GL_TEXTURE_STACK_DEPTH
GL_VIEWPORT = _osg.GL_VIEWPORT
GL_AUTO_NORMAL = _osg.GL_AUTO_NORMAL
GL_MAP1_COLOR_4 = _osg.GL_MAP1_COLOR_4
GL_MAP1_INDEX = _osg.GL_MAP1_INDEX
GL_MAP1_NORMAL = _osg.GL_MAP1_NORMAL
GL_MAP1_TEXTURE_COORD_1 = _osg.GL_MAP1_TEXTURE_COORD_1
GL_MAP1_TEXTURE_COORD_2 = _osg.GL_MAP1_TEXTURE_COORD_2
GL_MAP1_TEXTURE_COORD_3 = _osg.GL_MAP1_TEXTURE_COORD_3
GL_MAP1_TEXTURE_COORD_4 = _osg.GL_MAP1_TEXTURE_COORD_4
GL_MAP1_VERTEX_3 = _osg.GL_MAP1_VERTEX_3
GL_MAP1_VERTEX_4 = _osg.GL_MAP1_VERTEX_4
GL_MAP2_COLOR_4 = _osg.GL_MAP2_COLOR_4
GL_MAP2_INDEX = _osg.GL_MAP2_INDEX
GL_MAP2_NORMAL = _osg.GL_MAP2_NORMAL
GL_MAP2_TEXTURE_COORD_1 = _osg.GL_MAP2_TEXTURE_COORD_1
GL_MAP2_TEXTURE_COORD_2 = _osg.GL_MAP2_TEXTURE_COORD_2
GL_MAP2_TEXTURE_COORD_3 = _osg.GL_MAP2_TEXTURE_COORD_3
GL_MAP2_TEXTURE_COORD_4 = _osg.GL_MAP2_TEXTURE_COORD_4
GL_MAP2_VERTEX_3 = _osg.GL_MAP2_VERTEX_3
GL_MAP2_VERTEX_4 = _osg.GL_MAP2_VERTEX_4
GL_MAP1_GRID_DOMAIN = _osg.GL_MAP1_GRID_DOMAIN
GL_MAP1_GRID_SEGMENTS = _osg.GL_MAP1_GRID_SEGMENTS
GL_MAP2_GRID_DOMAIN = _osg.GL_MAP2_GRID_DOMAIN
GL_MAP2_GRID_SEGMENTS = _osg.GL_MAP2_GRID_SEGMENTS
GL_COEFF = _osg.GL_COEFF
GL_ORDER = _osg.GL_ORDER
GL_DOMAIN = _osg.GL_DOMAIN
GL_PERSPECTIVE_CORRECTION_HINT = _osg.GL_PERSPECTIVE_CORRECTION_HINT
GL_POINT_SMOOTH_HINT = _osg.GL_POINT_SMOOTH_HINT
GL_LINE_SMOOTH_HINT = _osg.GL_LINE_SMOOTH_HINT
GL_POLYGON_SMOOTH_HINT = _osg.GL_POLYGON_SMOOTH_HINT
GL_FOG_HINT = _osg.GL_FOG_HINT
GL_DONT_CARE = _osg.GL_DONT_CARE
GL_FASTEST = _osg.GL_FASTEST
GL_NICEST = _osg.GL_NICEST
GL_SCISSOR_BOX = _osg.GL_SCISSOR_BOX
GL_SCISSOR_TEST = _osg.GL_SCISSOR_TEST
GL_MAP_COLOR = _osg.GL_MAP_COLOR
GL_MAP_STENCIL = _osg.GL_MAP_STENCIL
GL_INDEX_SHIFT = _osg.GL_INDEX_SHIFT
GL_INDEX_OFFSET = _osg.GL_INDEX_OFFSET
GL_RED_SCALE = _osg.GL_RED_SCALE
GL_RED_BIAS = _osg.GL_RED_BIAS
GL_GREEN_SCALE = _osg.GL_GREEN_SCALE
GL_GREEN_BIAS = _osg.GL_GREEN_BIAS
GL_BLUE_SCALE = _osg.GL_BLUE_SCALE
GL_BLUE_BIAS = _osg.GL_BLUE_BIAS
GL_ALPHA_SCALE = _osg.GL_ALPHA_SCALE
GL_ALPHA_BIAS = _osg.GL_ALPHA_BIAS
GL_DEPTH_SCALE = _osg.GL_DEPTH_SCALE
GL_DEPTH_BIAS = _osg.GL_DEPTH_BIAS
GL_PIXEL_MAP_S_TO_S_SIZE = _osg.GL_PIXEL_MAP_S_TO_S_SIZE
GL_PIXEL_MAP_I_TO_I_SIZE = _osg.GL_PIXEL_MAP_I_TO_I_SIZE
GL_PIXEL_MAP_I_TO_R_SIZE = _osg.GL_PIXEL_MAP_I_TO_R_SIZE
GL_PIXEL_MAP_I_TO_G_SIZE = _osg.GL_PIXEL_MAP_I_TO_G_SIZE
GL_PIXEL_MAP_I_TO_B_SIZE = _osg.GL_PIXEL_MAP_I_TO_B_SIZE
GL_PIXEL_MAP_I_TO_A_SIZE = _osg.GL_PIXEL_MAP_I_TO_A_SIZE
GL_PIXEL_MAP_R_TO_R_SIZE = _osg.GL_PIXEL_MAP_R_TO_R_SIZE
GL_PIXEL_MAP_G_TO_G_SIZE = _osg.GL_PIXEL_MAP_G_TO_G_SIZE
GL_PIXEL_MAP_B_TO_B_SIZE = _osg.GL_PIXEL_MAP_B_TO_B_SIZE
GL_PIXEL_MAP_A_TO_A_SIZE = _osg.GL_PIXEL_MAP_A_TO_A_SIZE
GL_PIXEL_MAP_S_TO_S = _osg.GL_PIXEL_MAP_S_TO_S
GL_PIXEL_MAP_I_TO_I = _osg.GL_PIXEL_MAP_I_TO_I
GL_PIXEL_MAP_I_TO_R = _osg.GL_PIXEL_MAP_I_TO_R
GL_PIXEL_MAP_I_TO_G = _osg.GL_PIXEL_MAP_I_TO_G
GL_PIXEL_MAP_I_TO_B = _osg.GL_PIXEL_MAP_I_TO_B
GL_PIXEL_MAP_I_TO_A = _osg.GL_PIXEL_MAP_I_TO_A
GL_PIXEL_MAP_R_TO_R = _osg.GL_PIXEL_MAP_R_TO_R
GL_PIXEL_MAP_G_TO_G = _osg.GL_PIXEL_MAP_G_TO_G
GL_PIXEL_MAP_B_TO_B = _osg.GL_PIXEL_MAP_B_TO_B
GL_PIXEL_MAP_A_TO_A = _osg.GL_PIXEL_MAP_A_TO_A
GL_PACK_ALIGNMENT = _osg.GL_PACK_ALIGNMENT
GL_PACK_LSB_FIRST = _osg.GL_PACK_LSB_FIRST
GL_PACK_ROW_LENGTH = _osg.GL_PACK_ROW_LENGTH
GL_PACK_SKIP_PIXELS = _osg.GL_PACK_SKIP_PIXELS
GL_PACK_SKIP_ROWS = _osg.GL_PACK_SKIP_ROWS
GL_PACK_SWAP_BYTES = _osg.GL_PACK_SWAP_BYTES
GL_UNPACK_ALIGNMENT = _osg.GL_UNPACK_ALIGNMENT
GL_UNPACK_LSB_FIRST = _osg.GL_UNPACK_LSB_FIRST
GL_UNPACK_ROW_LENGTH = _osg.GL_UNPACK_ROW_LENGTH
GL_UNPACK_SKIP_PIXELS = _osg.GL_UNPACK_SKIP_PIXELS
GL_UNPACK_SKIP_ROWS = _osg.GL_UNPACK_SKIP_ROWS
GL_UNPACK_SWAP_BYTES = _osg.GL_UNPACK_SWAP_BYTES
GL_ZOOM_X = _osg.GL_ZOOM_X
GL_ZOOM_Y = _osg.GL_ZOOM_Y
GL_TEXTURE_ENV = _osg.GL_TEXTURE_ENV
GL_TEXTURE_ENV_MODE = _osg.GL_TEXTURE_ENV_MODE
GL_TEXTURE_1D = _osg.GL_TEXTURE_1D
GL_TEXTURE_2D = _osg.GL_TEXTURE_2D
GL_TEXTURE_WRAP_S = _osg.GL_TEXTURE_WRAP_S
GL_TEXTURE_WRAP_T = _osg.GL_TEXTURE_WRAP_T
GL_TEXTURE_MAG_FILTER = _osg.GL_TEXTURE_MAG_FILTER
GL_TEXTURE_MIN_FILTER = _osg.GL_TEXTURE_MIN_FILTER
GL_TEXTURE_ENV_COLOR = _osg.GL_TEXTURE_ENV_COLOR
GL_TEXTURE_GEN_S = _osg.GL_TEXTURE_GEN_S
GL_TEXTURE_GEN_T = _osg.GL_TEXTURE_GEN_T
GL_TEXTURE_GEN_MODE = _osg.GL_TEXTURE_GEN_MODE
GL_TEXTURE_BORDER_COLOR = _osg.GL_TEXTURE_BORDER_COLOR
GL_TEXTURE_WIDTH = _osg.GL_TEXTURE_WIDTH
GL_TEXTURE_HEIGHT = _osg.GL_TEXTURE_HEIGHT
GL_TEXTURE_BORDER = _osg.GL_TEXTURE_BORDER
GL_TEXTURE_COMPONENTS = _osg.GL_TEXTURE_COMPONENTS
GL_TEXTURE_RED_SIZE = _osg.GL_TEXTURE_RED_SIZE
GL_TEXTURE_GREEN_SIZE = _osg.GL_TEXTURE_GREEN_SIZE
GL_TEXTURE_BLUE_SIZE = _osg.GL_TEXTURE_BLUE_SIZE
GL_TEXTURE_ALPHA_SIZE = _osg.GL_TEXTURE_ALPHA_SIZE
GL_TEXTURE_LUMINANCE_SIZE = _osg.GL_TEXTURE_LUMINANCE_SIZE
GL_TEXTURE_INTENSITY_SIZE = _osg.GL_TEXTURE_INTENSITY_SIZE
GL_NEAREST_MIPMAP_NEAREST = _osg.GL_NEAREST_MIPMAP_NEAREST
GL_NEAREST_MIPMAP_LINEAR = _osg.GL_NEAREST_MIPMAP_LINEAR
GL_LINEAR_MIPMAP_NEAREST = _osg.GL_LINEAR_MIPMAP_NEAREST
GL_LINEAR_MIPMAP_LINEAR = _osg.GL_LINEAR_MIPMAP_LINEAR
GL_OBJECT_LINEAR = _osg.GL_OBJECT_LINEAR
GL_OBJECT_PLANE = _osg.GL_OBJECT_PLANE
GL_EYE_LINEAR = _osg.GL_EYE_LINEAR
GL_EYE_PLANE = _osg.GL_EYE_PLANE
GL_SPHERE_MAP = _osg.GL_SPHERE_MAP
GL_DECAL = _osg.GL_DECAL
GL_MODULATE = _osg.GL_MODULATE
GL_NEAREST = _osg.GL_NEAREST
GL_REPEAT = _osg.GL_REPEAT
GL_CLAMP = _osg.GL_CLAMP
GL_S = _osg.GL_S
GL_T = _osg.GL_T
GL_R = _osg.GL_R
GL_Q = _osg.GL_Q
GL_TEXTURE_GEN_R = _osg.GL_TEXTURE_GEN_R
GL_TEXTURE_GEN_Q = _osg.GL_TEXTURE_GEN_Q
GL_VENDOR = _osg.GL_VENDOR
GL_RENDERER = _osg.GL_RENDERER
GL_VERSION = _osg.GL_VERSION
GL_EXTENSIONS = _osg.GL_EXTENSIONS
GL_NO_ERROR = _osg.GL_NO_ERROR
GL_INVALID_ENUM = _osg.GL_INVALID_ENUM
GL_INVALID_VALUE = _osg.GL_INVALID_VALUE
GL_INVALID_OPERATION = _osg.GL_INVALID_OPERATION
GL_STACK_OVERFLOW = _osg.GL_STACK_OVERFLOW
GL_STACK_UNDERFLOW = _osg.GL_STACK_UNDERFLOW
GL_OUT_OF_MEMORY = _osg.GL_OUT_OF_MEMORY
GL_CURRENT_BIT = _osg.GL_CURRENT_BIT
GL_POINT_BIT = _osg.GL_POINT_BIT
GL_LINE_BIT = _osg.GL_LINE_BIT
GL_POLYGON_BIT = _osg.GL_POLYGON_BIT
GL_POLYGON_STIPPLE_BIT = _osg.GL_POLYGON_STIPPLE_BIT
GL_PIXEL_MODE_BIT = _osg.GL_PIXEL_MODE_BIT
GL_LIGHTING_BIT = _osg.GL_LIGHTING_BIT
GL_FOG_BIT = _osg.GL_FOG_BIT
GL_DEPTH_BUFFER_BIT = _osg.GL_DEPTH_BUFFER_BIT
GL_ACCUM_BUFFER_BIT = _osg.GL_ACCUM_BUFFER_BIT
GL_STENCIL_BUFFER_BIT = _osg.GL_STENCIL_BUFFER_BIT
GL_VIEWPORT_BIT = _osg.GL_VIEWPORT_BIT
GL_TRANSFORM_BIT = _osg.GL_TRANSFORM_BIT
GL_ENABLE_BIT = _osg.GL_ENABLE_BIT
GL_COLOR_BUFFER_BIT = _osg.GL_COLOR_BUFFER_BIT
GL_HINT_BIT = _osg.GL_HINT_BIT
GL_EVAL_BIT = _osg.GL_EVAL_BIT
GL_LIST_BIT = _osg.GL_LIST_BIT
GL_TEXTURE_BIT = _osg.GL_TEXTURE_BIT
GL_SCISSOR_BIT = _osg.GL_SCISSOR_BIT
GL_ALL_ATTRIB_BITS = _osg.GL_ALL_ATTRIB_BITS
GL_PROXY_TEXTURE_1D = _osg.GL_PROXY_TEXTURE_1D
GL_PROXY_TEXTURE_2D = _osg.GL_PROXY_TEXTURE_2D
GL_TEXTURE_PRIORITY = _osg.GL_TEXTURE_PRIORITY
GL_TEXTURE_RESIDENT = _osg.GL_TEXTURE_RESIDENT
GL_TEXTURE_BINDING_1D = _osg.GL_TEXTURE_BINDING_1D
GL_TEXTURE_BINDING_2D = _osg.GL_TEXTURE_BINDING_2D
GL_TEXTURE_INTERNAL_FORMAT = _osg.GL_TEXTURE_INTERNAL_FORMAT
GL_ALPHA4 = _osg.GL_ALPHA4
GL_ALPHA8 = _osg.GL_ALPHA8
GL_ALPHA12 = _osg.GL_ALPHA12
GL_ALPHA16 = _osg.GL_ALPHA16
GL_LUMINANCE4 = _osg.GL_LUMINANCE4
GL_LUMINANCE8 = _osg.GL_LUMINANCE8
GL_LUMINANCE12 = _osg.GL_LUMINANCE12
GL_LUMINANCE16 = _osg.GL_LUMINANCE16
GL_LUMINANCE4_ALPHA4 = _osg.GL_LUMINANCE4_ALPHA4
GL_LUMINANCE6_ALPHA2 = _osg.GL_LUMINANCE6_ALPHA2
GL_LUMINANCE8_ALPHA8 = _osg.GL_LUMINANCE8_ALPHA8
GL_LUMINANCE12_ALPHA4 = _osg.GL_LUMINANCE12_ALPHA4
GL_LUMINANCE12_ALPHA12 = _osg.GL_LUMINANCE12_ALPHA12
GL_LUMINANCE16_ALPHA16 = _osg.GL_LUMINANCE16_ALPHA16
GL_INTENSITY = _osg.GL_INTENSITY
GL_INTENSITY4 = _osg.GL_INTENSITY4
GL_INTENSITY8 = _osg.GL_INTENSITY8
GL_INTENSITY12 = _osg.GL_INTENSITY12
GL_INTENSITY16 = _osg.GL_INTENSITY16
GL_R3_G3_B2 = _osg.GL_R3_G3_B2
GL_RGB4 = _osg.GL_RGB4
GL_RGB5 = _osg.GL_RGB5
GL_RGB8 = _osg.GL_RGB8
GL_RGB10 = _osg.GL_RGB10
GL_RGB12 = _osg.GL_RGB12
GL_RGB16 = _osg.GL_RGB16
GL_RGBA2 = _osg.GL_RGBA2
GL_RGBA4 = _osg.GL_RGBA4
GL_RGB5_A1 = _osg.GL_RGB5_A1
GL_RGBA8 = _osg.GL_RGBA8
GL_RGB10_A2 = _osg.GL_RGB10_A2
GL_RGBA12 = _osg.GL_RGBA12
GL_RGBA16 = _osg.GL_RGBA16
GL_CLIENT_PIXEL_STORE_BIT = _osg.GL_CLIENT_PIXEL_STORE_BIT
GL_CLIENT_VERTEX_ARRAY_BIT = _osg.GL_CLIENT_VERTEX_ARRAY_BIT
GL_ALL_CLIENT_ATTRIB_BITS = _osg.GL_ALL_CLIENT_ATTRIB_BITS
GL_CLIENT_ALL_ATTRIB_BITS = _osg.GL_CLIENT_ALL_ATTRIB_BITS
class Callback(_object):
    """Proxy of C++ Callback class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Callback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Callback self) -> Callback
        __init__(Callback self, Callback arg2, CopyOp arg3) -> Callback
        """
        this = _osg.new_Callback(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """__call__(Callback self, StateSet arg2, NodeVisitor arg3)"""
        return _osg.Callback___call__(self, *args)

    __swig_destroy__ = _osg.delete_Callback
    __del__ = lambda self : None;
Callback_swigregister = _osg.Callback_swigregister
Callback_swigregister(Callback)

OSG_VERSION = _osg.OSG_VERSION
OPENSCENEGRAPH_MAJOR_VERSION = _osg.OPENSCENEGRAPH_MAJOR_VERSION
OPENSCENEGRAPH_MINOR_VERSION = _osg.OPENSCENEGRAPH_MINOR_VERSION
OPENSCENEGRAPH_PATCH_VERSION = _osg.OPENSCENEGRAPH_PATCH_VERSION
OPENSCENEGRAPH_SOVERSION = _osg.OPENSCENEGRAPH_SOVERSION

def osgGetVersion():
  """osgGetVersion() -> char const *"""
  return _osg.osgGetVersion()

def osgGetSOVersion():
  """osgGetSOVersion() -> char const *"""
  return _osg.osgGetSOVersion()

def osgGetLibraryName():
  """osgGetLibraryName() -> char const *"""
  return _osg.osgGetLibraryName()
OSG_VERSION_MAJOR = _osg.OSG_VERSION_MAJOR
OSG_VERSION_MINOR = _osg.OSG_VERSION_MINOR
OSG_VERSION_PATCH = _osg.OSG_VERSION_PATCH
OSG_VERSION_RELEASE = _osg.OSG_VERSION_RELEASE
OSG_VERSION_REVISION = _osg.OSG_VERSION_REVISION
OSG_CONFIG = _osg.OSG_CONFIG
class DrawCallback(_object):
    """Proxy of C++ DrawCallback class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DrawCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DrawCallback self) -> DrawCallback
        __init__(DrawCallback self, DrawCallback arg2, CopyOp arg3) -> DrawCallback
        """
        if self.__class__ == DrawCallback:
            _self = None
        else:
            _self = self
        this = _osg.new_DrawCallback(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """
        __call__(DrawCallback self, RenderInfo renderInfo)
        __call__(DrawCallback self, Camera arg0)
        """
        return _osg.DrawCallback___call__(self, *args)

    __swig_destroy__ = _osg.delete_DrawCallback
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _osg.disown_DrawCallback(self)
        return weakref_proxy(self)
DrawCallback_swigregister = _osg.DrawCallback_swigregister
DrawCallback_swigregister(DrawCallback)

OSG_NOTIFY_H = _osg.OSG_NOTIFY_H
ALWAYS = _osg.ALWAYS
FATAL = _osg.FATAL
WARN = _osg.WARN
NOTICE = _osg.NOTICE
INFO = _osg.INFO
DEBUG_INFO = _osg.DEBUG_INFO
DEBUG_FP = _osg.DEBUG_FP

def setNotifyLevel(*args):
  """setNotifyLevel(osg::NotifySeverity severity)"""
  return _osg.setNotifyLevel(*args)

def getNotifyLevel():
  """getNotifyLevel() -> osg::NotifySeverity"""
  return _osg.getNotifyLevel()

def initNotifyLevel():
  """initNotifyLevel() -> bool"""
  return _osg.initNotifyLevel()

def isNotifyEnabled(*args):
  """isNotifyEnabled(osg::NotifySeverity severity) -> bool"""
  return _osg.isNotifyEnabled(*args)

def notify(*args):
  """
    notify(osg::NotifySeverity const severity) -> std::ostream
    notify() -> std::ostream &
    """
  return _osg.notify(*args)
class NotifyHandler(_object):
    """Proxy of C++ osg::NotifyHandler class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifyHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NotifyHandler, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def notify(self, *args):
        """notify(NotifyHandler self, osg::NotifySeverity severity, char const * message)"""
        return _osg.NotifyHandler_notify(self, *args)

    __swig_destroy__ = _osg.delete_NotifyHandler
    __del__ = lambda self : None;
NotifyHandler_swigregister = _osg.NotifyHandler_swigregister
NotifyHandler_swigregister(NotifyHandler)


def setNotifyHandler(*args):
  """setNotifyHandler(NotifyHandler handler)"""
  return _osg.setNotifyHandler(*args)

def getNotifyHandler():
  """getNotifyHandler() -> NotifyHandler"""
  return _osg.getNotifyHandler()
class StandardNotifyHandler(NotifyHandler):
    """Proxy of C++ osg::StandardNotifyHandler class"""
    __swig_setmethods__ = {}
    for _s in [NotifyHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardNotifyHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [NotifyHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardNotifyHandler, name)
    __repr__ = _swig_repr
    def notify(self, *args):
        """notify(StandardNotifyHandler self, osg::NotifySeverity severity, char const * message)"""
        return _osg.StandardNotifyHandler_notify(self, *args)

    def __init__(self): 
        """__init__(osg::StandardNotifyHandler self) -> StandardNotifyHandler"""
        this = _osg.new_StandardNotifyHandler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_StandardNotifyHandler
    __del__ = lambda self : None;
StandardNotifyHandler_swigregister = _osg.StandardNotifyHandler_swigregister
StandardNotifyHandler_swigregister(StandardNotifyHandler)


def equivalent(*args):
  """
    equivalent(float lhs, float rhs, float epsilon=1e-6) -> bool
    equivalent(float lhs, float rhs) -> bool
    equivalent(double lhs, double rhs, double epsilon=1e-6) -> bool
    equivalent(double lhs, double rhs) -> bool
    """
  return _osg.equivalent(*args)

def inDegrees(*args):
  """
    inDegrees(float angle) -> float
    inDegrees(double angle) -> double
    """
  return _osg.inDegrees(*args)

def DegreesToRadians(*args):
  """
    DegreesToRadians(float angle) -> float
    DegreesToRadians(double angle) -> double
    """
  return _osg.DegreesToRadians(*args)

def RadiansToDegrees(*args):
  """
    RadiansToDegrees(float angle) -> float
    RadiansToDegrees(double angle) -> double
    """
  return _osg.RadiansToDegrees(*args)

def round(*args):
  """
    round(float v) -> float
    round(double v) -> double
    """
  return _osg.round(*args)

def isNaN(*args):
  """
    isNaN(float v) -> bool
    isNaN(double v) -> bool
    """
  return _osg.isNaN(*args)

def asciiToDouble(*args):
  """asciiToDouble(char const * str) -> double"""
  return _osg.asciiToDouble(*args)

def asciiToFloat(*args):
  """asciiToFloat(char const * str) -> float"""
  return _osg.asciiToFloat(*args)

def findAsciiToDouble(*args):
  """findAsciiToDouble(char const * str) -> double"""
  return _osg.findAsciiToDouble(*args)

def findAsciiToFloat(*args):
  """findAsciiToFloat(char const * str) -> float"""
  return _osg.findAsciiToFloat(*args)
OSG_REFERENCED = _osg.OSG_REFERENCED
class Referenced(_object):
    """Proxy of C++ osg::Referenced class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Referenced, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Referenced, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Referenced self) -> Referenced
        __init__(osg::Referenced self, bool threadSafeRefUnref) -> Referenced
        __init__(osg::Referenced self, Referenced arg2) -> Referenced
        """
        this = _osg.new_Referenced(*args)
        try: self.this.append(this)
        except: self.this = this
    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Referenced self, bool threadSafe)"""
        return _osg.Referenced_setThreadSafeRefUnref(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(Referenced self) -> bool"""
        return _osg.Referenced_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(Referenced self) -> OpenThreads::Mutex *"""
        return _osg.Referenced_getRefMutex(self)

    def getGlobalReferencedMutex():
        """getGlobalReferencedMutex() -> OpenThreads::Mutex *"""
        return _osg.Referenced_getGlobalReferencedMutex()

    if _newclass:getGlobalReferencedMutex = staticmethod(getGlobalReferencedMutex)
    __swig_getmethods__["getGlobalReferencedMutex"] = lambda x: getGlobalReferencedMutex
    def ref(self):
        """ref(Referenced self) -> int"""
        return _osg.Referenced_ref(self)

    def unref(self):
        """unref(Referenced self) -> int"""
        return _osg.Referenced_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(Referenced self) -> int"""
        return _osg.Referenced_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(Referenced self) -> int"""
        return _osg.Referenced_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(Referenced self) -> osg::ObserverSet *"""
        return _osg.Referenced_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(Referenced self) -> osg::ObserverSet *"""
        return _osg.Referenced_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(Referenced self, osg::Observer * observer)"""
        return _osg.Referenced_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(Referenced self, osg::Observer * observer)"""
        return _osg.Referenced_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(*args):
        """setThreadSafeReferenceCounting(bool enableThreadSafeReferenceCounting)"""
        return _osg.Referenced_setThreadSafeReferenceCounting(*args)

    if _newclass:setThreadSafeReferenceCounting = staticmethod(setThreadSafeReferenceCounting)
    __swig_getmethods__["setThreadSafeReferenceCounting"] = lambda x: setThreadSafeReferenceCounting
    def getThreadSafeReferenceCounting():
        """getThreadSafeReferenceCounting() -> bool"""
        return _osg.Referenced_getThreadSafeReferenceCounting()

    if _newclass:getThreadSafeReferenceCounting = staticmethod(getThreadSafeReferenceCounting)
    __swig_getmethods__["getThreadSafeReferenceCounting"] = lambda x: getThreadSafeReferenceCounting
    def setDeleteHandler(*args):
        """setDeleteHandler(DeleteHandler handler)"""
        return _osg.Referenced_setDeleteHandler(*args)

    if _newclass:setDeleteHandler = staticmethod(setDeleteHandler)
    __swig_getmethods__["setDeleteHandler"] = lambda x: setDeleteHandler
    def getDeleteHandler():
        """getDeleteHandler() -> DeleteHandler"""
        return _osg.Referenced_getDeleteHandler()

    if _newclass:getDeleteHandler = staticmethod(getDeleteHandler)
    __swig_getmethods__["getDeleteHandler"] = lambda x: getDeleteHandler
    __swig_destroy__ = _osg.delete_Referenced
    __del__ = lambda self : None;
Referenced_swigregister = _osg.Referenced_swigregister
Referenced_swigregister(Referenced)
cvar = _osg.cvar
PI = cvar.PI
PI_2 = cvar.PI_2
PI_4 = cvar.PI_4
LN_2 = cvar.LN_2
INVLN_2 = cvar.INVLN_2

def Referenced_getGlobalReferencedMutex():
  """Referenced_getGlobalReferencedMutex() -> OpenThreads::Mutex *"""
  return _osg.Referenced_getGlobalReferencedMutex()

def Referenced_setThreadSafeReferenceCounting(*args):
  """Referenced_setThreadSafeReferenceCounting(bool enableThreadSafeReferenceCounting)"""
  return _osg.Referenced_setThreadSafeReferenceCounting(*args)

def Referenced_getThreadSafeReferenceCounting():
  """Referenced_getThreadSafeReferenceCounting() -> bool"""
  return _osg.Referenced_getThreadSafeReferenceCounting()

def Referenced_setDeleteHandler(*args):
  """Referenced_setDeleteHandler(DeleteHandler handler)"""
  return _osg.Referenced_setDeleteHandler(*args)

def Referenced_getDeleteHandler():
  """Referenced_getDeleteHandler() -> DeleteHandler"""
  return _osg.Referenced_getDeleteHandler()


def intrusive_ptr_add_ref(*args):
  """intrusive_ptr_add_ref(Referenced p)"""
  return _osg.intrusive_ptr_add_ref(*args)

def intrusive_ptr_release(*args):
  """intrusive_ptr_release(Referenced p)"""
  return _osg.intrusive_ptr_release(*args)
OSG_REF_PTR = _osg.OSG_REF_PTR
OSG_MIXIN_VECTOR = _osg.OSG_MIXIN_VECTOR
OSG_DELETEHANDLER = _osg.OSG_DELETEHANDLER
class DeleteHandler(_object):
    """Proxy of C++ osg::DeleteHandler class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeleteHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeleteHandler, name)
    __repr__ = _swig_repr
    def __init__(self, numberOfFramesToRetainObjects=0): 
        """
        __init__(osg::DeleteHandler self, int numberOfFramesToRetainObjects=0) -> DeleteHandler
        __init__(osg::DeleteHandler self) -> DeleteHandler
        """
        this = _osg.new_DeleteHandler(numberOfFramesToRetainObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_DeleteHandler
    __del__ = lambda self : None;
    def setNumFramesToRetainObjects(self, *args):
        """setNumFramesToRetainObjects(DeleteHandler self, unsigned int numberOfFramesToRetainObjects)"""
        return _osg.DeleteHandler_setNumFramesToRetainObjects(self, *args)

    def getNumFramesToRetainObjects(self):
        """getNumFramesToRetainObjects(DeleteHandler self) -> unsigned int"""
        return _osg.DeleteHandler_getNumFramesToRetainObjects(self)

    def setFrameNumber(self, *args):
        """setFrameNumber(DeleteHandler self, unsigned int frameNumber)"""
        return _osg.DeleteHandler_setFrameNumber(self, *args)

    def getFrameNumber(self):
        """getFrameNumber(DeleteHandler self) -> unsigned int"""
        return _osg.DeleteHandler_getFrameNumber(self)

    def doDelete(self, *args):
        """doDelete(DeleteHandler self, Referenced object)"""
        return _osg.DeleteHandler_doDelete(self, *args)

    def flush(self):
        """flush(DeleteHandler self)"""
        return _osg.DeleteHandler_flush(self)

    def flushAll(self):
        """flushAll(DeleteHandler self)"""
        return _osg.DeleteHandler_flushAll(self)

    def requestDelete(self, *args):
        """requestDelete(DeleteHandler self, Referenced object)"""
        return _osg.DeleteHandler_requestDelete(self, *args)

DeleteHandler_swigregister = _osg.DeleteHandler_swigregister
DeleteHandler_swigregister(DeleteHandler)

OSG_COPYOP = _osg.OSG_COPYOP
class CopyOp(_object):
    """Proxy of C++ osg::CopyOp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CopyOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CopyOp, name)
    __repr__ = _swig_repr
    SHALLOW_COPY = _osg.CopyOp_SHALLOW_COPY
    DEEP_COPY_OBJECTS = _osg.CopyOp_DEEP_COPY_OBJECTS
    DEEP_COPY_NODES = _osg.CopyOp_DEEP_COPY_NODES
    DEEP_COPY_DRAWABLES = _osg.CopyOp_DEEP_COPY_DRAWABLES
    DEEP_COPY_STATESETS = _osg.CopyOp_DEEP_COPY_STATESETS
    DEEP_COPY_STATEATTRIBUTES = _osg.CopyOp_DEEP_COPY_STATEATTRIBUTES
    DEEP_COPY_TEXTURES = _osg.CopyOp_DEEP_COPY_TEXTURES
    DEEP_COPY_IMAGES = _osg.CopyOp_DEEP_COPY_IMAGES
    DEEP_COPY_ARRAYS = _osg.CopyOp_DEEP_COPY_ARRAYS
    DEEP_COPY_PRIMITIVES = _osg.CopyOp_DEEP_COPY_PRIMITIVES
    DEEP_COPY_SHAPES = _osg.CopyOp_DEEP_COPY_SHAPES
    DEEP_COPY_UNIFORMS = _osg.CopyOp_DEEP_COPY_UNIFORMS
    DEEP_COPY_CALLBACKS = _osg.CopyOp_DEEP_COPY_CALLBACKS
    DEEP_COPY_USERDATA = _osg.CopyOp_DEEP_COPY_USERDATA
    DEEP_COPY_ALL = _osg.CopyOp_DEEP_COPY_ALL
    def __init__(self, *args): 
        """
        __init__(osg::CopyOp self, osg::CopyOp::CopyFlags flags=SHALLOW_COPY) -> CopyOp
        __init__(osg::CopyOp self) -> CopyOp
        """
        this = _osg.new_CopyOp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CopyOp
    __del__ = lambda self : None;
    def setCopyFlags(self, *args):
        """setCopyFlags(CopyOp self, osg::CopyOp::CopyFlags flags)"""
        return _osg.CopyOp_setCopyFlags(self, *args)

    def getCopyFlags(self):
        """getCopyFlags(CopyOp self) -> osg::CopyOp::CopyFlags"""
        return _osg.CopyOp_getCopyFlags(self)

    def __call__(self, *args):
        """
        __call__(CopyOp self, Referenced ref) -> Referenced
        __call__(CopyOp self, Object obj) -> Object
        __call__(CopyOp self, Node node) -> Node
        __call__(CopyOp self, Drawable drawable) -> Drawable
        __call__(CopyOp self, StateSet stateset) -> StateSet
        __call__(CopyOp self, StateAttribute attr) -> StateAttribute
        __call__(CopyOp self, Texture text) -> Texture
        __call__(CopyOp self, Image image) -> Image
        __call__(CopyOp self, Array array) -> Array
        __call__(CopyOp self, PrimitiveSet primitives) -> PrimitiveSet
        __call__(CopyOp self, Shape shape) -> Shape
        __call__(CopyOp self, Uniform shape) -> Uniform
        __call__(CopyOp self, NodeCallback nodecallback) -> NodeCallback
        __call__(CopyOp self, osg::StateAttributeCallback const * stateattributecallback) -> osg::StateAttributeCallback *
        """
        return _osg.CopyOp___call__(self, *args)

CopyOp_swigregister = _osg.CopyOp_swigregister
CopyOp_swigregister(CopyOp)

OSG_OBJECT = _osg.OSG_OBJECT
class Object(Referenced):
    """Proxy of C++ osg::Object class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(Object self) -> Object"""
        return _osg.Object_cloneType(self)

    def clone(self, *args):
        """clone(Object self, CopyOp arg2) -> Object"""
        return _osg.Object_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Object self, Object arg2) -> bool"""
        return _osg.Object_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Object self) -> char const *"""
        return _osg.Object_libraryName(self)

    def className(self):
        """className(Object self) -> char const *"""
        return _osg.Object_className(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Object self, bool threadSafe)"""
        return _osg.Object_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(Object self, std::string const & name)
        setName(Object self, char const * name)
        """
        return _osg.Object_setName(self, *args)

    def getName(self):
        """getName(Object self) -> std::string const &"""
        return _osg.Object_getName(self)

    DYNAMIC = _osg.Object_DYNAMIC
    STATIC = _osg.Object_STATIC
    UNSPECIFIED = _osg.Object_UNSPECIFIED
    def setDataVariance(self, *args):
        """setDataVariance(Object self, osg::Object::DataVariance dv)"""
        return _osg.Object_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(Object self) -> osg::Object::DataVariance"""
        return _osg.Object_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(Object self)"""
        return _osg.Object_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(Object self, osg::UserDataContainer * udc)"""
        return _osg.Object_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(Object self) -> osg::UserDataContainer
        getUserDataContainer(Object self) -> osg::UserDataContainer const *
        """
        return _osg.Object_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(Object self) -> osg::UserDataContainer *"""
        return _osg.Object_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(Object self, Referenced obj)"""
        return _osg.Object_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(Object self) -> Referenced
        getUserData(Object self) -> Referenced
        """
        return _osg.Object_getUserData(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Object self, unsigned int arg2)"""
        return _osg.Object_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(Object self, State arg2=None)
        releaseGLObjects(Object self)
        """
        return _osg.Object_releaseGLObjects(self, arg2)

Object_swigregister = _osg.Object_swigregister
Object_swigregister(Object)

OSG_VEC2S = _osg.OSG_VEC2S
class Vec2s(_object):
    """Proxy of C++ osg::Vec2s class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2s, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec2s_num_components
    __swig_setmethods__["_v"] = _osg.Vec2s__v_set
    __swig_getmethods__["_v"] = _osg.Vec2s__v_get
    if _newclass:_v = _swig_property(_osg.Vec2s__v_get, _osg.Vec2s__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec2s self) -> Vec2s
        __init__(osg::Vec2s self, osg::Vec2s::value_type x, osg::Vec2s::value_type y) -> Vec2s
        """
        this = _osg.new_Vec2s(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec2s self, Vec2s v) -> bool"""
        return _osg.Vec2s___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec2s self, Vec2s v) -> bool"""
        return _osg.Vec2s___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec2s self, Vec2s v) -> bool"""
        return _osg.Vec2s___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec2s self) -> osg::Vec2s::value_type
        ptr(Vec2s self) -> osg::Vec2s::value_type const *
        """
        return _osg.Vec2s_ptr(self, *args)

    def set(self, *args):
        """
        set(Vec2s self, osg::Vec2s::value_type x, osg::Vec2s::value_type y)
        set(Vec2s self, Vec2s rhs)
        """
        return _osg.Vec2s_set(self, *args)

    def x(self):
        """x(Vec2s self) -> osg::Vec2s::value_type"""
        return _osg.Vec2s_x(self)

    def y(self):
        """y(Vec2s self) -> osg::Vec2s::value_type"""
        return _osg.Vec2s_y(self)

    def r(self):
        """r(Vec2s self) -> osg::Vec2s::value_type"""
        return _osg.Vec2s_r(self)

    def g(self):
        """g(Vec2s self) -> osg::Vec2s::value_type"""
        return _osg.Vec2s_g(self)

    def __div__(self, *args):
        """__div__(Vec2s self, osg::Vec2s::value_type rhs) -> Vec2s"""
        return _osg.Vec2s___div__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(Vec2s self, osg::Vec2s::value_type rhs) -> Vec2s
        __mul__(Vec2s self, Vec2s rhs) -> Vec2s
        """
        return _osg.Vec2s___mul__(self, *args)

    def __add__(self, *args):
        """__add__(Vec2s self, Vec2s rhs) -> Vec2s"""
        return _osg.Vec2s___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec2s self, Vec2s rhs) -> Vec2s"""
        return _osg.Vec2s___sub__(self, *args)

    def __neg__(self):
        """__neg__(Vec2s self) -> Vec2s"""
        return _osg.Vec2s___neg__(self)

    def __str__(self):
        """__str__(Vec2s self) -> std::string"""
        return _osg.Vec2s___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec2s self, int i) -> osg::Vec2s::value_type"""
        return _osg.Vec2s___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec2s self, int i, osg::Vec2s::value_type v)"""
        return _osg.Vec2s___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec2s self) -> int"""
        return _osg.Vec2s___len__(self)

    __swig_destroy__ = _osg.delete_Vec2s
    __del__ = lambda self : None;
Vec2s_swigregister = _osg.Vec2s_swigregister
Vec2s_swigregister(Vec2s)

OSG_VEC3S = _osg.OSG_VEC3S
class Vec3s(_object):
    """Proxy of C++ osg::Vec3s class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3s, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec3s_num_components
    __swig_setmethods__["_v"] = _osg.Vec3s__v_set
    __swig_getmethods__["_v"] = _osg.Vec3s__v_get
    if _newclass:_v = _swig_property(_osg.Vec3s__v_get, _osg.Vec3s__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec3s self) -> Vec3s
        __init__(osg::Vec3s self, osg::Vec3s::value_type r, osg::Vec3s::value_type g, osg::Vec3s::value_type b) -> Vec3s
        """
        this = _osg.new_Vec3s(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec3s self, Vec3s v) -> bool"""
        return _osg.Vec3s___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec3s self, Vec3s v) -> bool"""
        return _osg.Vec3s___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec3s self, Vec3s v) -> bool"""
        return _osg.Vec3s___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec3s self) -> osg::Vec3s::value_type
        ptr(Vec3s self) -> osg::Vec3s::value_type const *
        """
        return _osg.Vec3s_ptr(self, *args)

    def set(self, *args):
        """
        set(Vec3s self, osg::Vec3s::value_type r, osg::Vec3s::value_type g, osg::Vec3s::value_type b)
        set(Vec3s self, Vec3s rhs)
        """
        return _osg.Vec3s_set(self, *args)

    def x(self):
        """x(Vec3s self) -> osg::Vec3s::value_type"""
        return _osg.Vec3s_x(self)

    def y(self):
        """y(Vec3s self) -> osg::Vec3s::value_type"""
        return _osg.Vec3s_y(self)

    def z(self):
        """z(Vec3s self) -> osg::Vec3s::value_type"""
        return _osg.Vec3s_z(self)

    def r(self):
        """r(Vec3s self) -> osg::Vec3s::value_type"""
        return _osg.Vec3s_r(self)

    def g(self):
        """g(Vec3s self) -> osg::Vec3s::value_type"""
        return _osg.Vec3s_g(self)

    def b(self):
        """b(Vec3s self) -> osg::Vec3s::value_type"""
        return _osg.Vec3s_b(self)

    def __div__(self, *args):
        """__div__(Vec3s self, osg::Vec3s::value_type rhs) -> Vec3s"""
        return _osg.Vec3s___div__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(Vec3s self, osg::Vec3s::value_type rhs) -> Vec3s
        __mul__(Vec3s self, Vec3s rhs) -> Vec3s
        """
        return _osg.Vec3s___mul__(self, *args)

    def __add__(self, *args):
        """__add__(Vec3s self, Vec3s rhs) -> Vec3s"""
        return _osg.Vec3s___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec3s self, Vec3s rhs) -> Vec3s"""
        return _osg.Vec3s___sub__(self, *args)

    def __neg__(self):
        """__neg__(Vec3s self) -> Vec3s"""
        return _osg.Vec3s___neg__(self)

    def __str__(self):
        """__str__(Vec3s self) -> std::string"""
        return _osg.Vec3s___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec3s self, int i) -> osg::Vec3s::value_type"""
        return _osg.Vec3s___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec3s self, int i, osg::Vec3s::value_type v)"""
        return _osg.Vec3s___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec3s self) -> int"""
        return _osg.Vec3s___len__(self)

    __swig_destroy__ = _osg.delete_Vec3s
    __del__ = lambda self : None;
Vec3s_swigregister = _osg.Vec3s_swigregister
Vec3s_swigregister(Vec3s)

OSG_VEC4S = _osg.OSG_VEC4S
class Vec4s(_object):
    """Proxy of C++ osg::Vec4s class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4s, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4s_num_components
    __swig_setmethods__["_v"] = _osg.Vec4s__v_set
    __swig_getmethods__["_v"] = _osg.Vec4s__v_get
    if _newclass:_v = _swig_property(_osg.Vec4s__v_get, _osg.Vec4s__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec4s self) -> Vec4s
        __init__(osg::Vec4s self, osg::Vec4s::value_type x, osg::Vec4s::value_type y, osg::Vec4s::value_type z, osg::Vec4s::value_type w) -> Vec4s
        """
        this = _osg.new_Vec4s(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec4s self, Vec4s v) -> bool"""
        return _osg.Vec4s___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec4s self, Vec4s v) -> bool"""
        return _osg.Vec4s___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec4s self, Vec4s v) -> bool"""
        return _osg.Vec4s___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec4s self) -> osg::Vec4s::value_type
        ptr(Vec4s self) -> osg::Vec4s::value_type const *
        """
        return _osg.Vec4s_ptr(self, *args)

    def set(self, *args):
        """set(Vec4s self, osg::Vec4s::value_type x, osg::Vec4s::value_type y, osg::Vec4s::value_type z, osg::Vec4s::value_type w)"""
        return _osg.Vec4s_set(self, *args)

    def x(self):
        """x(Vec4s self) -> osg::Vec4s::value_type"""
        return _osg.Vec4s_x(self)

    def y(self):
        """y(Vec4s self) -> osg::Vec4s::value_type"""
        return _osg.Vec4s_y(self)

    def z(self):
        """z(Vec4s self) -> osg::Vec4s::value_type"""
        return _osg.Vec4s_z(self)

    def w(self):
        """w(Vec4s self) -> osg::Vec4s::value_type"""
        return _osg.Vec4s_w(self)

    def r(self):
        """r(Vec4s self) -> osg::Vec4s::value_type"""
        return _osg.Vec4s_r(self)

    def g(self):
        """g(Vec4s self) -> osg::Vec4s::value_type"""
        return _osg.Vec4s_g(self)

    def b(self):
        """b(Vec4s self) -> osg::Vec4s::value_type"""
        return _osg.Vec4s_b(self)

    def a(self):
        """a(Vec4s self) -> osg::Vec4s::value_type"""
        return _osg.Vec4s_a(self)

    def __div__(self, *args):
        """__div__(Vec4s self, osg::Vec4s::value_type rhs) -> Vec4s"""
        return _osg.Vec4s___div__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(Vec4s self, osg::Vec4s::value_type rhs) -> Vec4s
        __mul__(Vec4s self, Vec4s rhs) -> Vec4s
        """
        return _osg.Vec4s___mul__(self, *args)

    def __add__(self, *args):
        """__add__(Vec4s self, Vec4s rhs) -> Vec4s"""
        return _osg.Vec4s___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec4s self, Vec4s rhs) -> Vec4s"""
        return _osg.Vec4s___sub__(self, *args)

    def __neg__(self):
        """__neg__(Vec4s self) -> Vec4s"""
        return _osg.Vec4s___neg__(self)

    def __str__(self):
        """__str__(Vec4s self) -> std::string"""
        return _osg.Vec4s___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec4s self, int i) -> osg::Vec4s::value_type"""
        return _osg.Vec4s___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec4s self, int i, osg::Vec4s::value_type v)"""
        return _osg.Vec4s___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec4s self) -> int"""
        return _osg.Vec4s___len__(self)

    __swig_destroy__ = _osg.delete_Vec4s
    __del__ = lambda self : None;
Vec4s_swigregister = _osg.Vec4s_swigregister
Vec4s_swigregister(Vec4s)

OSG_VEC4UB = _osg.OSG_VEC4UB
class Vec4ub(_object):
    """Proxy of C++ osg::Vec4ub class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4ub, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4ub, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4ub_num_components
    __swig_setmethods__["_v"] = _osg.Vec4ub__v_set
    __swig_getmethods__["_v"] = _osg.Vec4ub__v_get
    if _newclass:_v = _swig_property(_osg.Vec4ub__v_get, _osg.Vec4ub__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec4ub self) -> Vec4ub
        __init__(osg::Vec4ub self, osg::Vec4ub::value_type x, osg::Vec4ub::value_type y, osg::Vec4ub::value_type z, 
            osg::Vec4ub::value_type w) -> Vec4ub
        """
        this = _osg.new_Vec4ub(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec4ub self, Vec4ub v) -> bool"""
        return _osg.Vec4ub___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec4ub self, Vec4ub v) -> bool"""
        return _osg.Vec4ub___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec4ub self, Vec4ub v) -> bool"""
        return _osg.Vec4ub___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec4ub self) -> osg::Vec4ub::value_type
        ptr(Vec4ub self) -> osg::Vec4ub::value_type const *
        """
        return _osg.Vec4ub_ptr(self, *args)

    def set(self, *args):
        """
        set(Vec4ub self, osg::Vec4ub::value_type r, osg::Vec4ub::value_type g, osg::Vec4ub::value_type b, 
            osg::Vec4ub::value_type a)
        """
        return _osg.Vec4ub_set(self, *args)

    def r(self):
        """r(Vec4ub self) -> osg::Vec4ub::value_type"""
        return _osg.Vec4ub_r(self)

    def g(self):
        """g(Vec4ub self) -> osg::Vec4ub::value_type"""
        return _osg.Vec4ub_g(self)

    def b(self):
        """b(Vec4ub self) -> osg::Vec4ub::value_type"""
        return _osg.Vec4ub_b(self)

    def a(self):
        """a(Vec4ub self) -> osg::Vec4ub::value_type"""
        return _osg.Vec4ub_a(self)

    def __mul__(self, *args):
        """__mul__(Vec4ub self, float rhs) -> Vec4ub"""
        return _osg.Vec4ub___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec4ub self, float rhs) -> Vec4ub"""
        return _osg.Vec4ub___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec4ub self, Vec4ub rhs) -> Vec4ub"""
        return _osg.Vec4ub___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec4ub self, Vec4ub rhs) -> Vec4ub"""
        return _osg.Vec4ub___sub__(self, *args)

    def __str__(self):
        """__str__(Vec4ub self) -> std::string"""
        return _osg.Vec4ub___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec4ub self, int i) -> osg::Vec4ub::value_type"""
        return _osg.Vec4ub___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec4ub self, int i, osg::Vec4ub::value_type v)"""
        return _osg.Vec4ub___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec4ub self) -> int"""
        return _osg.Vec4ub___len__(self)

    __swig_destroy__ = _osg.delete_Vec4ub
    __del__ = lambda self : None;
Vec4ub_swigregister = _osg.Vec4ub_swigregister
Vec4ub_swigregister(Vec4ub)

OSG_VEC2B = _osg.OSG_VEC2B
class Vec2b(_object):
    """Proxy of C++ osg::Vec2b class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2b, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec2b_num_components
    __swig_setmethods__["_v"] = _osg.Vec2b__v_set
    __swig_getmethods__["_v"] = _osg.Vec2b__v_get
    if _newclass:_v = _swig_property(_osg.Vec2b__v_get, _osg.Vec2b__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec2b self) -> Vec2b
        __init__(osg::Vec2b self, osg::Vec2b::value_type r, osg::Vec2b::value_type g) -> Vec2b
        """
        this = _osg.new_Vec2b(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec2b self, Vec2b v) -> bool"""
        return _osg.Vec2b___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec2b self, Vec2b v) -> bool"""
        return _osg.Vec2b___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec2b self, Vec2b v) -> bool"""
        return _osg.Vec2b___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec2b self) -> osg::Vec2b::value_type
        ptr(Vec2b self) -> osg::Vec2b::value_type const *
        """
        return _osg.Vec2b_ptr(self, *args)

    def set(self, *args):
        """
        set(Vec2b self, osg::Vec2b::value_type x, osg::Vec2b::value_type y)
        set(Vec2b self, Vec2b rhs)
        """
        return _osg.Vec2b_set(self, *args)

    def x(self):
        """x(Vec2b self) -> osg::Vec2b::value_type"""
        return _osg.Vec2b_x(self)

    def y(self):
        """y(Vec2b self) -> osg::Vec2b::value_type"""
        return _osg.Vec2b_y(self)

    def r(self):
        """r(Vec2b self) -> osg::Vec2b::value_type"""
        return _osg.Vec2b_r(self)

    def g(self):
        """g(Vec2b self) -> osg::Vec2b::value_type"""
        return _osg.Vec2b_g(self)

    def __mul__(self, *args):
        """__mul__(Vec2b self, float rhs) -> Vec2b"""
        return _osg.Vec2b___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec2b self, float rhs) -> Vec2b"""
        return _osg.Vec2b___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec2b self, Vec2b rhs) -> Vec2b"""
        return _osg.Vec2b___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec2b self, Vec2b rhs) -> Vec2b"""
        return _osg.Vec2b___sub__(self, *args)

    def __str__(self):
        """__str__(Vec2b self) -> std::string"""
        return _osg.Vec2b___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec2b self, int i) -> osg::Vec2b::value_type"""
        return _osg.Vec2b___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec2b self, int i, osg::Vec2b::value_type v)"""
        return _osg.Vec2b___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec2b self) -> int"""
        return _osg.Vec2b___len__(self)

    __swig_destroy__ = _osg.delete_Vec2b
    __del__ = lambda self : None;
Vec2b_swigregister = _osg.Vec2b_swigregister
Vec2b_swigregister(Vec2b)

OSG_VEC3B = _osg.OSG_VEC3B
class Vec3b(_object):
    """Proxy of C++ osg::Vec3b class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3b, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec3b_num_components
    __swig_setmethods__["_v"] = _osg.Vec3b__v_set
    __swig_getmethods__["_v"] = _osg.Vec3b__v_get
    if _newclass:_v = _swig_property(_osg.Vec3b__v_get, _osg.Vec3b__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec3b self) -> Vec3b
        __init__(osg::Vec3b self, osg::Vec3b::value_type r, osg::Vec3b::value_type g, osg::Vec3b::value_type b) -> Vec3b
        """
        this = _osg.new_Vec3b(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec3b self, Vec3b v) -> bool"""
        return _osg.Vec3b___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec3b self, Vec3b v) -> bool"""
        return _osg.Vec3b___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec3b self, Vec3b v) -> bool"""
        return _osg.Vec3b___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec3b self) -> osg::Vec3b::value_type
        ptr(Vec3b self) -> osg::Vec3b::value_type const *
        """
        return _osg.Vec3b_ptr(self, *args)

    def set(self, *args):
        """
        set(Vec3b self, osg::Vec3b::value_type r, osg::Vec3b::value_type g, osg::Vec3b::value_type b)
        set(Vec3b self, Vec3b rhs)
        """
        return _osg.Vec3b_set(self, *args)

    def x(self):
        """x(Vec3b self) -> osg::Vec3b::value_type"""
        return _osg.Vec3b_x(self)

    def y(self):
        """y(Vec3b self) -> osg::Vec3b::value_type"""
        return _osg.Vec3b_y(self)

    def z(self):
        """z(Vec3b self) -> osg::Vec3b::value_type"""
        return _osg.Vec3b_z(self)

    def r(self):
        """r(Vec3b self) -> osg::Vec3b::value_type"""
        return _osg.Vec3b_r(self)

    def g(self):
        """g(Vec3b self) -> osg::Vec3b::value_type"""
        return _osg.Vec3b_g(self)

    def b(self):
        """b(Vec3b self) -> osg::Vec3b::value_type"""
        return _osg.Vec3b_b(self)

    def __mul__(self, *args):
        """__mul__(Vec3b self, float rhs) -> Vec3b"""
        return _osg.Vec3b___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec3b self, float rhs) -> Vec3b"""
        return _osg.Vec3b___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec3b self, Vec3b rhs) -> Vec3b"""
        return _osg.Vec3b___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec3b self, Vec3b rhs) -> Vec3b"""
        return _osg.Vec3b___sub__(self, *args)

    def __str__(self):
        """__str__(Vec3b self) -> std::string"""
        return _osg.Vec3b___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec3b self, int i) -> osg::Vec3b::value_type"""
        return _osg.Vec3b___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec3b self, int i, osg::Vec3b::value_type v)"""
        return _osg.Vec3b___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec3b self) -> int"""
        return _osg.Vec3b___len__(self)

    __swig_destroy__ = _osg.delete_Vec3b
    __del__ = lambda self : None;
Vec3b_swigregister = _osg.Vec3b_swigregister
Vec3b_swigregister(Vec3b)

OSG_VEC4B = _osg.OSG_VEC4B
class Vec4b(_object):
    """Proxy of C++ osg::Vec4b class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4b, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4b_num_components
    __swig_setmethods__["_v"] = _osg.Vec4b__v_set
    __swig_getmethods__["_v"] = _osg.Vec4b__v_get
    if _newclass:_v = _swig_property(_osg.Vec4b__v_get, _osg.Vec4b__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec4b self) -> Vec4b
        __init__(osg::Vec4b self, osg::Vec4b::value_type x, osg::Vec4b::value_type y, osg::Vec4b::value_type z, osg::Vec4b::value_type w) -> Vec4b
        """
        this = _osg.new_Vec4b(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec4b self, Vec4b v) -> bool"""
        return _osg.Vec4b___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec4b self, Vec4b v) -> bool"""
        return _osg.Vec4b___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec4b self, Vec4b v) -> bool"""
        return _osg.Vec4b___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec4b self) -> osg::Vec4b::value_type
        ptr(Vec4b self) -> osg::Vec4b::value_type const *
        """
        return _osg.Vec4b_ptr(self, *args)

    def set(self, *args):
        """set(Vec4b self, osg::Vec4b::value_type x, osg::Vec4b::value_type y, osg::Vec4b::value_type z, osg::Vec4b::value_type w)"""
        return _osg.Vec4b_set(self, *args)

    def x(self):
        """x(Vec4b self) -> osg::Vec4b::value_type"""
        return _osg.Vec4b_x(self)

    def y(self):
        """y(Vec4b self) -> osg::Vec4b::value_type"""
        return _osg.Vec4b_y(self)

    def z(self):
        """z(Vec4b self) -> osg::Vec4b::value_type"""
        return _osg.Vec4b_z(self)

    def w(self):
        """w(Vec4b self) -> osg::Vec4b::value_type"""
        return _osg.Vec4b_w(self)

    def r(self):
        """r(Vec4b self) -> osg::Vec4b::value_type"""
        return _osg.Vec4b_r(self)

    def g(self):
        """g(Vec4b self) -> osg::Vec4b::value_type"""
        return _osg.Vec4b_g(self)

    def b(self):
        """b(Vec4b self) -> osg::Vec4b::value_type"""
        return _osg.Vec4b_b(self)

    def a(self):
        """a(Vec4b self) -> osg::Vec4b::value_type"""
        return _osg.Vec4b_a(self)

    def __mul__(self, *args):
        """__mul__(Vec4b self, float rhs) -> Vec4b"""
        return _osg.Vec4b___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec4b self, float rhs) -> Vec4b"""
        return _osg.Vec4b___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec4b self, Vec4b rhs) -> Vec4b"""
        return _osg.Vec4b___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec4b self, Vec4b rhs) -> Vec4b"""
        return _osg.Vec4b___sub__(self, *args)

    def __str__(self):
        """__str__(Vec4b self) -> std::string"""
        return _osg.Vec4b___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec4b self, int i) -> osg::Vec4b::value_type"""
        return _osg.Vec4b___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec4b self, int i, osg::Vec4b::value_type v)"""
        return _osg.Vec4b___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec4b self) -> int"""
        return _osg.Vec4b___len__(self)

    __swig_destroy__ = _osg.delete_Vec4b
    __del__ = lambda self : None;
Vec4b_swigregister = _osg.Vec4b_swigregister
Vec4b_swigregister(Vec4b)

OSG_VEC2F = _osg.OSG_VEC2F
class Vec2f(_object):
    """Proxy of C++ osg::Vec2f class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2f, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec2f_num_components
    __swig_setmethods__["_v"] = _osg.Vec2f__v_set
    __swig_getmethods__["_v"] = _osg.Vec2f__v_get
    if _newclass:_v = _swig_property(_osg.Vec2f__v_get, _osg.Vec2f__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec2f self) -> Vec2f
        __init__(osg::Vec2f self, osg::Vec2f::value_type x, osg::Vec2f::value_type y) -> Vec2f
        """
        this = _osg.new_Vec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec2f self, Vec2f v) -> bool"""
        return _osg.Vec2f___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec2f self, Vec2f v) -> bool"""
        return _osg.Vec2f___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec2f self, Vec2f v) -> bool"""
        return _osg.Vec2f___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec2f self) -> osg::Vec2f::value_type
        ptr(Vec2f self) -> osg::Vec2f::value_type const *
        """
        return _osg.Vec2f_ptr(self, *args)

    def set(self, *args):
        """set(Vec2f self, osg::Vec2f::value_type x, osg::Vec2f::value_type y)"""
        return _osg.Vec2f_set(self, *args)

    def x(self):
        """x(Vec2f self) -> osg::Vec2f::value_type"""
        return _osg.Vec2f_x(self)

    def y(self):
        """y(Vec2f self) -> osg::Vec2f::value_type"""
        return _osg.Vec2f_y(self)

    def valid(self):
        """valid(Vec2f self) -> bool"""
        return _osg.Vec2f_valid(self)

    def isNaN(self):
        """isNaN(Vec2f self) -> bool"""
        return _osg.Vec2f_isNaN(self)

    def __mul__(self, *args):
        """
        __mul__(Vec2f self, Vec2f rhs) -> osg::Vec2f::value_type
        __mul__(Vec2f self, osg::Vec2f::value_type rhs) -> Vec2f
        """
        return _osg.Vec2f___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec2f self, osg::Vec2f::value_type rhs) -> Vec2f"""
        return _osg.Vec2f___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec2f self, Vec2f rhs) -> Vec2f"""
        return _osg.Vec2f___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec2f self, Vec2f rhs) -> Vec2f"""
        return _osg.Vec2f___sub__(self, *args)

    def __neg__(self):
        """__neg__(Vec2f self) -> Vec2f"""
        return _osg.Vec2f___neg__(self)

    def length(self):
        """length(Vec2f self) -> osg::Vec2f::value_type"""
        return _osg.Vec2f_length(self)

    def length2(self):
        """length2(Vec2f self) -> osg::Vec2f::value_type"""
        return _osg.Vec2f_length2(self)

    def normalize(self):
        """normalize(Vec2f self) -> osg::Vec2f::value_type"""
        return _osg.Vec2f_normalize(self)

    def __str__(self):
        """__str__(Vec2f self) -> std::string"""
        return _osg.Vec2f___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec2f self, int i) -> osg::Vec2f::value_type"""
        return _osg.Vec2f___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec2f self, int i, osg::Vec2f::value_type v)"""
        return _osg.Vec2f___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec2f self) -> int"""
        return _osg.Vec2f___len__(self)

    __swig_destroy__ = _osg.delete_Vec2f
    __del__ = lambda self : None;
Vec2f_swigregister = _osg.Vec2f_swigregister
Vec2f_swigregister(Vec2f)

OSG_VEC3F = _osg.OSG_VEC3F
class Vec3f(_object):
    """Proxy of C++ osg::Vec3f class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3f, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec3f_num_components
    __swig_setmethods__["_v"] = _osg.Vec3f__v_set
    __swig_getmethods__["_v"] = _osg.Vec3f__v_get
    if _newclass:_v = _swig_property(_osg.Vec3f__v_get, _osg.Vec3f__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec3f self) -> Vec3f
        __init__(osg::Vec3f self, osg::Vec3f::value_type x, osg::Vec3f::value_type y, osg::Vec3f::value_type z) -> Vec3f
        __init__(osg::Vec3f self, Vec2f v2, osg::Vec3f::value_type zz) -> Vec3f
        """
        this = _osg.new_Vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec3f self, Vec3f v) -> bool"""
        return _osg.Vec3f___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec3f self, Vec3f v) -> bool"""
        return _osg.Vec3f___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec3f self, Vec3f v) -> bool"""
        return _osg.Vec3f___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec3f self) -> osg::Vec3f::value_type
        ptr(Vec3f self) -> osg::Vec3f::value_type const *
        """
        return _osg.Vec3f_ptr(self, *args)

    def set(self, *args):
        """
        set(Vec3f self, osg::Vec3f::value_type x, osg::Vec3f::value_type y, osg::Vec3f::value_type z)
        set(Vec3f self, Vec3f rhs)
        """
        return _osg.Vec3f_set(self, *args)

    def x(self):
        """x(Vec3f self) -> osg::Vec3f::value_type"""
        return _osg.Vec3f_x(self)

    def y(self):
        """y(Vec3f self) -> osg::Vec3f::value_type"""
        return _osg.Vec3f_y(self)

    def z(self):
        """z(Vec3f self) -> osg::Vec3f::value_type"""
        return _osg.Vec3f_z(self)

    def valid(self):
        """valid(Vec3f self) -> bool"""
        return _osg.Vec3f_valid(self)

    def isNaN(self):
        """isNaN(Vec3f self) -> bool"""
        return _osg.Vec3f_isNaN(self)

    def __xor__(self, *args):
        """__xor__(Vec3f self, Vec3f rhs) -> Vec3f"""
        return _osg.Vec3f___xor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(Vec3f self, Vec3f rhs) -> osg::Vec3f::value_type
        __mul__(Vec3f self, osg::Vec3f::value_type rhs) -> Vec3f
        """
        return _osg.Vec3f___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec3f self, osg::Vec3f::value_type rhs) -> Vec3f"""
        return _osg.Vec3f___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec3f self, Vec3f rhs) -> Vec3f"""
        return _osg.Vec3f___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec3f self, Vec3f rhs) -> Vec3f"""
        return _osg.Vec3f___sub__(self, *args)

    def __neg__(self):
        """__neg__(Vec3f self) -> Vec3f"""
        return _osg.Vec3f___neg__(self)

    def length(self):
        """length(Vec3f self) -> osg::Vec3f::value_type"""
        return _osg.Vec3f_length(self)

    def length2(self):
        """length2(Vec3f self) -> osg::Vec3f::value_type"""
        return _osg.Vec3f_length2(self)

    def normalize(self):
        """normalize(Vec3f self) -> osg::Vec3f::value_type"""
        return _osg.Vec3f_normalize(self)

    def __str__(self):
        """__str__(Vec3f self) -> std::string"""
        return _osg.Vec3f___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec3f self, int i) -> osg::Vec3f::value_type"""
        return _osg.Vec3f___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec3f self, int i, osg::Vec3f::value_type v)"""
        return _osg.Vec3f___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec3f self) -> int"""
        return _osg.Vec3f___len__(self)

    __swig_destroy__ = _osg.delete_Vec3f
    __del__ = lambda self : None;
Vec3f_swigregister = _osg.Vec3f_swigregister
Vec3f_swigregister(Vec3f)

OSG_VEC4F = _osg.OSG_VEC4F
class Vec4f(_object):
    """Proxy of C++ osg::Vec4f class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4f, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4f_num_components
    __swig_setmethods__["_v"] = _osg.Vec4f__v_set
    __swig_getmethods__["_v"] = _osg.Vec4f__v_get
    if _newclass:_v = _swig_property(_osg.Vec4f__v_get, _osg.Vec4f__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec4f self) -> Vec4f
        __init__(osg::Vec4f self, osg::Vec4f::value_type x, osg::Vec4f::value_type y, osg::Vec4f::value_type z, osg::Vec4f::value_type w) -> Vec4f
        __init__(osg::Vec4f self, Vec3f v3, osg::Vec4f::value_type w) -> Vec4f
        """
        this = _osg.new_Vec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec4f self, Vec4f v) -> bool"""
        return _osg.Vec4f___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec4f self, Vec4f v) -> bool"""
        return _osg.Vec4f___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec4f self, Vec4f v) -> bool"""
        return _osg.Vec4f___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec4f self) -> osg::Vec4f::value_type
        ptr(Vec4f self) -> osg::Vec4f::value_type const *
        """
        return _osg.Vec4f_ptr(self, *args)

    def set(self, *args):
        """set(Vec4f self, osg::Vec4f::value_type x, osg::Vec4f::value_type y, osg::Vec4f::value_type z, osg::Vec4f::value_type w)"""
        return _osg.Vec4f_set(self, *args)

    def x(self):
        """x(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_x(self)

    def y(self):
        """y(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_y(self)

    def z(self):
        """z(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_z(self)

    def w(self):
        """w(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_w(self)

    def r(self):
        """r(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_r(self)

    def g(self):
        """g(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_g(self)

    def b(self):
        """b(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_b(self)

    def a(self):
        """a(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_a(self)

    def asABGR(self):
        """asABGR(Vec4f self) -> unsigned int"""
        return _osg.Vec4f_asABGR(self)

    def asRGBA(self):
        """asRGBA(Vec4f self) -> unsigned int"""
        return _osg.Vec4f_asRGBA(self)

    def valid(self):
        """valid(Vec4f self) -> bool"""
        return _osg.Vec4f_valid(self)

    def isNaN(self):
        """isNaN(Vec4f self) -> bool"""
        return _osg.Vec4f_isNaN(self)

    def __mul__(self, *args):
        """
        __mul__(Vec4f self, Vec4f rhs) -> osg::Vec4f::value_type
        __mul__(Vec4f self, osg::Vec4f::value_type rhs) -> Vec4f
        """
        return _osg.Vec4f___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec4f self, osg::Vec4f::value_type rhs) -> Vec4f"""
        return _osg.Vec4f___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec4f self, Vec4f rhs) -> Vec4f"""
        return _osg.Vec4f___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec4f self, Vec4f rhs) -> Vec4f"""
        return _osg.Vec4f___sub__(self, *args)

    def __neg__(self):
        """__neg__(Vec4f self) -> Vec4f"""
        return _osg.Vec4f___neg__(self)

    def length(self):
        """length(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_length(self)

    def length2(self):
        """length2(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_length2(self)

    def normalize(self):
        """normalize(Vec4f self) -> osg::Vec4f::value_type"""
        return _osg.Vec4f_normalize(self)

    def __str__(self):
        """__str__(Vec4f self) -> std::string"""
        return _osg.Vec4f___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec4f self, int i) -> osg::Vec4f::value_type"""
        return _osg.Vec4f___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec4f self, int i, osg::Vec4f::value_type v)"""
        return _osg.Vec4f___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec4f self) -> int"""
        return _osg.Vec4f___len__(self)

    __swig_destroy__ = _osg.delete_Vec4f
    __del__ = lambda self : None;
Vec4f_swigregister = _osg.Vec4f_swigregister
Vec4f_swigregister(Vec4f)
X_AXIS = cvar.X_AXIS
Y_AXIS = cvar.Y_AXIS
Z_AXIS = cvar.Z_AXIS

OSG_VEC2D = _osg.OSG_VEC2D
class Vec2d(_object):
    """Proxy of C++ osg::Vec2d class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2d, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec2d_num_components
    __swig_setmethods__["_v"] = _osg.Vec2d__v_set
    __swig_getmethods__["_v"] = _osg.Vec2d__v_get
    if _newclass:_v = _swig_property(_osg.Vec2d__v_get, _osg.Vec2d__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec2d self) -> Vec2d
        __init__(osg::Vec2d self, osg::Vec2d::value_type x, osg::Vec2d::value_type y) -> Vec2d
        __init__(osg::Vec2d self, Vec2f vec) -> Vec2d
        """
        this = _osg.new_Vec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec2d self, Vec2d v) -> bool"""
        return _osg.Vec2d___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec2d self, Vec2d v) -> bool"""
        return _osg.Vec2d___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec2d self, Vec2d v) -> bool"""
        return _osg.Vec2d___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec2d self) -> osg::Vec2d::value_type
        ptr(Vec2d self) -> osg::Vec2d::value_type const *
        """
        return _osg.Vec2d_ptr(self, *args)

    def set(self, *args):
        """set(Vec2d self, osg::Vec2d::value_type x, osg::Vec2d::value_type y)"""
        return _osg.Vec2d_set(self, *args)

    def x(self):
        """x(Vec2d self) -> osg::Vec2d::value_type"""
        return _osg.Vec2d_x(self)

    def y(self):
        """y(Vec2d self) -> osg::Vec2d::value_type"""
        return _osg.Vec2d_y(self)

    def valid(self):
        """valid(Vec2d self) -> bool"""
        return _osg.Vec2d_valid(self)

    def isNaN(self):
        """isNaN(Vec2d self) -> bool"""
        return _osg.Vec2d_isNaN(self)

    def __mul__(self, *args):
        """
        __mul__(Vec2d self, Vec2d rhs) -> osg::Vec2d::value_type
        __mul__(Vec2d self, osg::Vec2d::value_type rhs) -> Vec2d
        """
        return _osg.Vec2d___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec2d self, osg::Vec2d::value_type rhs) -> Vec2d"""
        return _osg.Vec2d___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec2d self, Vec2d rhs) -> Vec2d"""
        return _osg.Vec2d___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec2d self, Vec2d rhs) -> Vec2d"""
        return _osg.Vec2d___sub__(self, *args)

    def __neg__(self):
        """__neg__(Vec2d self) -> Vec2d"""
        return _osg.Vec2d___neg__(self)

    def length(self):
        """length(Vec2d self) -> osg::Vec2d::value_type"""
        return _osg.Vec2d_length(self)

    def length2(self):
        """length2(Vec2d self) -> osg::Vec2d::value_type"""
        return _osg.Vec2d_length2(self)

    def normalize(self):
        """normalize(Vec2d self) -> osg::Vec2d::value_type"""
        return _osg.Vec2d_normalize(self)

    def __str__(self):
        """__str__(Vec2d self) -> std::string"""
        return _osg.Vec2d___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec2d self, int i) -> osg::Vec2d::value_type"""
        return _osg.Vec2d___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec2d self, int i, osg::Vec2d::value_type v)"""
        return _osg.Vec2d___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec2d self) -> int"""
        return _osg.Vec2d___len__(self)

    __swig_destroy__ = _osg.delete_Vec2d
    __del__ = lambda self : None;
Vec2d_swigregister = _osg.Vec2d_swigregister
Vec2d_swigregister(Vec2d)

OSG_VEC3D = _osg.OSG_VEC3D
class Vec3d(_object):
    """Proxy of C++ osg::Vec3d class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3d, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec3d_num_components
    __swig_setmethods__["_v"] = _osg.Vec3d__v_set
    __swig_getmethods__["_v"] = _osg.Vec3d__v_get
    if _newclass:_v = _swig_property(_osg.Vec3d__v_get, _osg.Vec3d__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec3d self) -> Vec3d
        __init__(osg::Vec3d self, Vec3f vec) -> Vec3d
        __init__(osg::Vec3d self, osg::Vec3d::value_type x, osg::Vec3d::value_type y, osg::Vec3d::value_type z) -> Vec3d
        __init__(osg::Vec3d self, Vec2d v2, osg::Vec3d::value_type zz) -> Vec3d
        """
        this = _osg.new_Vec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec3d self, Vec3d v) -> bool"""
        return _osg.Vec3d___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec3d self, Vec3d v) -> bool"""
        return _osg.Vec3d___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec3d self, Vec3d v) -> bool"""
        return _osg.Vec3d___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec3d self) -> osg::Vec3d::value_type
        ptr(Vec3d self) -> osg::Vec3d::value_type const *
        """
        return _osg.Vec3d_ptr(self, *args)

    def set(self, *args):
        """
        set(Vec3d self, osg::Vec3d::value_type x, osg::Vec3d::value_type y, osg::Vec3d::value_type z)
        set(Vec3d self, Vec3d rhs)
        """
        return _osg.Vec3d_set(self, *args)

    def x(self):
        """x(Vec3d self) -> osg::Vec3d::value_type"""
        return _osg.Vec3d_x(self)

    def y(self):
        """y(Vec3d self) -> osg::Vec3d::value_type"""
        return _osg.Vec3d_y(self)

    def z(self):
        """z(Vec3d self) -> osg::Vec3d::value_type"""
        return _osg.Vec3d_z(self)

    def valid(self):
        """valid(Vec3d self) -> bool"""
        return _osg.Vec3d_valid(self)

    def isNaN(self):
        """isNaN(Vec3d self) -> bool"""
        return _osg.Vec3d_isNaN(self)

    def __xor__(self, *args):
        """__xor__(Vec3d self, Vec3d rhs) -> Vec3d"""
        return _osg.Vec3d___xor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(Vec3d self, Vec3d rhs) -> osg::Vec3d::value_type
        __mul__(Vec3d self, osg::Vec3d::value_type rhs) -> Vec3d
        """
        return _osg.Vec3d___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec3d self, osg::Vec3d::value_type rhs) -> Vec3d"""
        return _osg.Vec3d___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec3d self, Vec3d rhs) -> Vec3d"""
        return _osg.Vec3d___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec3d self, Vec3d rhs) -> Vec3d"""
        return _osg.Vec3d___sub__(self, *args)

    def __neg__(self):
        """__neg__(Vec3d self) -> Vec3d"""
        return _osg.Vec3d___neg__(self)

    def length(self):
        """length(Vec3d self) -> osg::Vec3d::value_type"""
        return _osg.Vec3d_length(self)

    def length2(self):
        """length2(Vec3d self) -> osg::Vec3d::value_type"""
        return _osg.Vec3d_length2(self)

    def normalize(self):
        """normalize(Vec3d self) -> osg::Vec3d::value_type"""
        return _osg.Vec3d_normalize(self)

    def __str__(self):
        """__str__(Vec3d self) -> std::string"""
        return _osg.Vec3d___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec3d self, int i) -> osg::Vec3d::value_type"""
        return _osg.Vec3d___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec3d self, int i, osg::Vec3d::value_type v)"""
        return _osg.Vec3d___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec3d self) -> int"""
        return _osg.Vec3d___len__(self)

    __swig_destroy__ = _osg.delete_Vec3d
    __del__ = lambda self : None;
Vec3d_swigregister = _osg.Vec3d_swigregister
Vec3d_swigregister(Vec3d)

OSG_VEC4D = _osg.OSG_VEC4D
class Vec4d(_object):
    """Proxy of C++ osg::Vec4d class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4d, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4d_num_components
    __swig_setmethods__["_v"] = _osg.Vec4d__v_set
    __swig_getmethods__["_v"] = _osg.Vec4d__v_get
    if _newclass:_v = _swig_property(_osg.Vec4d__v_get, _osg.Vec4d__v_set)
    def __init__(self, *args): 
        """
        __init__(osg::Vec4d self) -> Vec4d
        __init__(osg::Vec4d self, osg::Vec4d::value_type x, osg::Vec4d::value_type y, osg::Vec4d::value_type z, osg::Vec4d::value_type w) -> Vec4d
        __init__(osg::Vec4d self, Vec3d v3, osg::Vec4d::value_type w) -> Vec4d
        __init__(osg::Vec4d self, Vec4f vec) -> Vec4d
        """
        this = _osg.new_Vec4d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(Vec4d self, Vec4d v) -> bool"""
        return _osg.Vec4d___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Vec4d self, Vec4d v) -> bool"""
        return _osg.Vec4d___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Vec4d self, Vec4d v) -> bool"""
        return _osg.Vec4d___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Vec4d self) -> osg::Vec4d::value_type
        ptr(Vec4d self) -> osg::Vec4d::value_type const *
        """
        return _osg.Vec4d_ptr(self, *args)

    def set(self, *args):
        """set(Vec4d self, osg::Vec4d::value_type x, osg::Vec4d::value_type y, osg::Vec4d::value_type z, osg::Vec4d::value_type w)"""
        return _osg.Vec4d_set(self, *args)

    def x(self):
        """x(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_x(self)

    def y(self):
        """y(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_y(self)

    def z(self):
        """z(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_z(self)

    def w(self):
        """w(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_w(self)

    def r(self):
        """r(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_r(self)

    def g(self):
        """g(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_g(self)

    def b(self):
        """b(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_b(self)

    def a(self):
        """a(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_a(self)

    def asABGR(self):
        """asABGR(Vec4d self) -> unsigned int"""
        return _osg.Vec4d_asABGR(self)

    def asRGBA(self):
        """asRGBA(Vec4d self) -> unsigned int"""
        return _osg.Vec4d_asRGBA(self)

    def valid(self):
        """valid(Vec4d self) -> bool"""
        return _osg.Vec4d_valid(self)

    def isNaN(self):
        """isNaN(Vec4d self) -> bool"""
        return _osg.Vec4d_isNaN(self)

    def __mul__(self, *args):
        """
        __mul__(Vec4d self, Vec4d rhs) -> osg::Vec4d::value_type
        __mul__(Vec4d self, osg::Vec4d::value_type rhs) -> Vec4d
        """
        return _osg.Vec4d___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Vec4d self, osg::Vec4d::value_type rhs) -> Vec4d"""
        return _osg.Vec4d___div__(self, *args)

    def __add__(self, *args):
        """__add__(Vec4d self, Vec4d rhs) -> Vec4d"""
        return _osg.Vec4d___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Vec4d self, Vec4d rhs) -> Vec4d"""
        return _osg.Vec4d___sub__(self, *args)

    def __neg__(self):
        """__neg__(Vec4d self) -> Vec4d"""
        return _osg.Vec4d___neg__(self)

    def length(self):
        """length(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_length(self)

    def length2(self):
        """length2(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_length2(self)

    def normalize(self):
        """normalize(Vec4d self) -> osg::Vec4d::value_type"""
        return _osg.Vec4d_normalize(self)

    def __str__(self):
        """__str__(Vec4d self) -> std::string"""
        return _osg.Vec4d___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Vec4d self, int i) -> osg::Vec4d::value_type"""
        return _osg.Vec4d___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Vec4d self, int i, osg::Vec4d::value_type v)"""
        return _osg.Vec4d___setitem__(self, *args)

    def __len__(self):
        """__len__(Vec4d self) -> int"""
        return _osg.Vec4d___len__(self)

    __swig_destroy__ = _osg.delete_Vec4d
    __del__ = lambda self : None;
Vec4d_swigregister = _osg.Vec4d_swigregister
Vec4d_swigregister(Vec4d)


def componentMultiply(*args):
  """
    componentMultiply(Vec2s lhs, Vec2s rhs) -> Vec2s
    componentMultiply(Vec3s lhs, Vec3s rhs) -> Vec3s
    componentMultiply(Vec4s lhs, Vec4s rhs) -> Vec4s
    componentMultiply(Vec2f lhs, Vec2f rhs) -> Vec2f
    componentMultiply(Vec3f lhs, Vec3f rhs) -> Vec3f
    componentMultiply(Vec4f lhs, Vec4f rhs) -> Vec4f
    componentMultiply(Vec2d lhs, Vec2d rhs) -> Vec2d
    componentMultiply(Vec3d lhs, Vec3d rhs) -> Vec3d
    componentMultiply(Vec4d lhs, Vec4d rhs) -> Vec4d
    """
  return _osg.componentMultiply(*args)

def componentDivide(*args):
  """
    componentDivide(Vec2s lhs, Vec2s rhs) -> Vec2s
    componentDivide(Vec3s lhs, Vec3s rhs) -> Vec3s
    componentDivide(Vec4s lhs, Vec4s rhs) -> Vec4s
    componentDivide(Vec2f lhs, Vec2f rhs) -> Vec2f
    componentDivide(Vec3f lhs, Vec3f rhs) -> Vec3f
    componentDivide(Vec4f lhs, Vec4f rhs) -> Vec4f
    componentDivide(Vec2d lhs, Vec2d rhs) -> Vec2d
    componentDivide(Vec3d lhs, Vec3d rhs) -> Vec3d
    componentDivide(Vec4d lhs, Vec4d rhs) -> Vec4d
    """
  return _osg.componentDivide(*args)
OSG_VEC4 = _osg.OSG_VEC4
OSG_VEC3 = _osg.OSG_VEC3
OSG_VEC2 = _osg.OSG_VEC2
Vec2 = Vec2f
Vec3 = Vec3f
Vec4 = Vec4f

OSG_QUAT = _osg.OSG_QUAT
class Quat(_object):
    """Proxy of C++ osg::Quat class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_v"] = _osg.Quat__v_set
    __swig_getmethods__["_v"] = _osg.Quat__v_get
    if _newclass:_v = _swig_property(_osg.Quat__v_get, _osg.Quat__v_set)
    def __eq__(self, *args):
        """__eq__(Quat self, Quat v) -> bool"""
        return _osg.Quat___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Quat self, Quat v) -> bool"""
        return _osg.Quat___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Quat self, Quat v) -> bool"""
        return _osg.Quat___lt__(self, *args)

    def asVec4(self):
        """asVec4(Quat self) -> Vec4d"""
        return _osg.Quat_asVec4(self)

    def asVec3(self):
        """asVec3(Quat self) -> Vec3d"""
        return _osg.Quat_asVec3(self)

    def set(self, *args):
        """
        set(Quat self, osg::Quat::value_type x, osg::Quat::value_type y, osg::Quat::value_type z, osg::Quat::value_type w)
        set(Quat self, Vec4f v)
        set(Quat self, Vec4d v)
        set(Quat self, Matrixf matrix)
        set(Quat self, Matrixd matrix)
        """
        return _osg.Quat_set(self, *args)

    def get(self, *args):
        """
        get(Quat self, Matrixf matrix)
        get(Quat self, Matrixd matrix)
        """
        return _osg.Quat_get(self, *args)

    def x(self):
        """x(Quat self) -> osg::Quat::value_type"""
        return _osg.Quat_x(self)

    def y(self):
        """y(Quat self) -> osg::Quat::value_type"""
        return _osg.Quat_y(self)

    def z(self):
        """z(Quat self) -> osg::Quat::value_type"""
        return _osg.Quat_z(self)

    def w(self):
        """w(Quat self) -> osg::Quat::value_type"""
        return _osg.Quat_w(self)

    def zeroRotation(self):
        """zeroRotation(Quat self) -> bool"""
        return _osg.Quat_zeroRotation(self)

    def __div__(self, *args):
        """
        __div__(Quat self, osg::Quat::value_type rhs) -> Quat
        __div__(Quat self, Quat denom) -> Quat
        """
        return _osg.Quat___div__(self, *args)

    def __add__(self, *args):
        """__add__(Quat self, Quat rhs) -> Quat"""
        return _osg.Quat___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Quat self, Quat rhs) -> Quat"""
        return _osg.Quat___sub__(self, *args)

    def __neg__(self):
        """__neg__(Quat self) -> Quat"""
        return _osg.Quat___neg__(self)

    def length(self):
        """length(Quat self) -> osg::Quat::value_type"""
        return _osg.Quat_length(self)

    def length2(self):
        """length2(Quat self) -> osg::Quat::value_type"""
        return _osg.Quat_length2(self)

    def conj(self):
        """conj(Quat self) -> Quat"""
        return _osg.Quat_conj(self)

    def inverse(self):
        """inverse(Quat self) -> Quat"""
        return _osg.Quat_inverse(self)

    def makeRotate(self, *args):
        """
        makeRotate(Quat self, osg::Quat::value_type angle, osg::Quat::value_type x, osg::Quat::value_type y, osg::Quat::value_type z)
        makeRotate(Quat self, osg::Quat::value_type angle, Vec3f vec)
        makeRotate(Quat self, osg::Quat::value_type angle, Vec3d vec)
        makeRotate(Quat self, osg::Quat::value_type angle1, Vec3f axis1, osg::Quat::value_type angle2, Vec3f axis2, 
            osg::Quat::value_type angle3, Vec3f axis3)
        makeRotate(Quat self, osg::Quat::value_type angle1, Vec3d axis1, osg::Quat::value_type angle2, Vec3d axis2, 
            osg::Quat::value_type angle3, Vec3d axis3)
        makeRotate(Quat self, Vec3f vec1, Vec3f vec2)
        makeRotate(Quat self, Vec3d vec1, Vec3d vec2)
        """
        return _osg.Quat_makeRotate(self, *args)

    def makeRotate_original(self, *args):
        """makeRotate_original(Quat self, Vec3d vec1, Vec3d vec2)"""
        return _osg.Quat_makeRotate_original(self, *args)

    def getRotate(self, *args):
        """
        getRotate(Quat self)
        getRotate(Quat self, Vec3f vec)
        getRotate(Quat self, Vec3d vec)
        """
        return _osg.Quat_getRotate(self, *args)

    def slerp(self, *args):
        """slerp(Quat self, osg::Quat::value_type t, Quat _from, Quat to)"""
        return _osg.Quat_slerp(self, *args)

    def __mul__(self, *args):
        """
        __mul__(Quat self, osg::Quat::value_type rhs) -> Quat
        __mul__(Quat self, Quat rhs) -> Quat
        __mul__(Quat self, Vec3f v) -> Vec3f
        __mul__(Quat self, Vec3d v) -> Vec3d
        """
        return _osg.Quat___mul__(self, *args)

    def __str__(self):
        """__str__(Quat self) -> std::string"""
        return _osg.Quat___str__(self)

    def __getitem__(self, *args):
        """__getitem__(Quat self, int i) -> osg::Quat::value_type"""
        return _osg.Quat___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Quat self, int i, osg::Quat::value_type v)"""
        return _osg.Quat___setitem__(self, *args)

    def __len__(self):
        """__len__(Quat self) -> int"""
        return _osg.Quat___len__(self)

    def __init__(self, *args): 
        """
        __init__(osg::Quat self) -> Quat
        __init__(osg::Quat self, osg::Quat::value_type x, osg::Quat::value_type y, osg::Quat::value_type z, osg::Quat::value_type w) -> Quat
        __init__(osg::Quat self, Vec4f v) -> Quat
        __init__(osg::Quat self, Vec4d v) -> Quat
        __init__(osg::Quat self, osg::Quat::value_type angle, Vec3f axis) -> Quat
        __init__(osg::Quat self, osg::Quat::value_type angle, Vec3d axis) -> Quat
        __init__(osg::Quat self, osg::Quat::value_type angle1, Vec3f axis1, osg::Quat::value_type angle2, Vec3f axis2, 
            osg::Quat::value_type angle3, Vec3f axis3) -> Quat
        __init__(osg::Quat self, osg::Quat::value_type angle1, Vec3d axis1, osg::Quat::value_type angle2, Vec3d axis2, 
            osg::Quat::value_type angle3, Vec3d axis3) -> Quat
        __init__(osg::Quat self, Quat other) -> Quat
        """
        this = _osg.new_Quat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Quat
    __del__ = lambda self : None;
Quat_swigregister = _osg.Quat_swigregister
Quat_swigregister(Quat)

OSG_MATRIXD = _osg.OSG_MATRIXD
class Matrixd(_object):
    """Proxy of C++ osg::Matrixd class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrixd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrixd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Matrixd self) -> Matrixd
        __init__(osg::Matrixd self, Matrixd mat) -> Matrixd
        __init__(osg::Matrixd self, Matrixf mat) -> Matrixd
        __init__(osg::Matrixd self, float const *const ptr) -> Matrixd
        __init__(osg::Matrixd self, double const *const ptr) -> Matrixd
        __init__(osg::Matrixd self, Quat quat) -> Matrixd
        __init__(osg::Matrixd self, osg::Matrixd::value_type a00, osg::Matrixd::value_type a01, osg::Matrixd::value_type a02, 
            osg::Matrixd::value_type a03, osg::Matrixd::value_type a10, osg::Matrixd::value_type a11, 
            osg::Matrixd::value_type a12, osg::Matrixd::value_type a13, 
            osg::Matrixd::value_type a20, osg::Matrixd::value_type a21, osg::Matrixd::value_type a22, 
            osg::Matrixd::value_type a23, osg::Matrixd::value_type a30, 
            osg::Matrixd::value_type a31, osg::Matrixd::value_type a32, osg::Matrixd::value_type a33) -> Matrixd
        """
        this = _osg.new_Matrixd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Matrixd
    __del__ = lambda self : None;
    def compare(self, *args):
        """compare(Matrixd self, Matrixd m) -> int"""
        return _osg.Matrixd_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(Matrixd self, Matrixd m) -> bool"""
        return _osg.Matrixd___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(Matrixd self, Matrixd m) -> bool"""
        return _osg.Matrixd___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Matrixd self, Matrixd m) -> bool"""
        return _osg.Matrixd___ne__(self, *args)

    def __call__(self, *args):
        """__call__(Matrixd self, int row, int col) -> osg::Matrixd::value_type"""
        return _osg.Matrixd___call__(self, *args)

    def valid(self):
        """valid(Matrixd self) -> bool"""
        return _osg.Matrixd_valid(self)

    def isNaN(self):
        """isNaN(Matrixd self) -> bool"""
        return _osg.Matrixd_isNaN(self)

    def set(self, *args):
        """
        set(Matrixd self, Matrixd rhs)
        set(Matrixd self, Matrixf rhs)
        set(Matrixd self, float const *const ptr)
        set(Matrixd self, double const *const ptr)
        set(Matrixd self, osg::Matrixd::value_type a00, osg::Matrixd::value_type a01, osg::Matrixd::value_type a02, 
            osg::Matrixd::value_type a03, osg::Matrixd::value_type a10, osg::Matrixd::value_type a11, 
            osg::Matrixd::value_type a12, osg::Matrixd::value_type a13, 
            osg::Matrixd::value_type a20, osg::Matrixd::value_type a21, osg::Matrixd::value_type a22, 
            osg::Matrixd::value_type a23, osg::Matrixd::value_type a30, 
            osg::Matrixd::value_type a31, osg::Matrixd::value_type a32, osg::Matrixd::value_type a33)
        """
        return _osg.Matrixd_set(self, *args)

    def ptr(self, *args):
        """
        ptr(Matrixd self) -> osg::Matrixd::value_type
        ptr(Matrixd self) -> osg::Matrixd::value_type const *
        """
        return _osg.Matrixd_ptr(self, *args)

    def isIdentity(self):
        """isIdentity(Matrixd self) -> bool"""
        return _osg.Matrixd_isIdentity(self)

    def makeIdentity(self):
        """makeIdentity(Matrixd self)"""
        return _osg.Matrixd_makeIdentity(self)

    def makeScale(self, *args):
        """
        makeScale(Matrixd self, Vec3f arg2)
        makeScale(Matrixd self, Vec3d arg2)
        makeScale(Matrixd self, osg::Matrixd::value_type arg2, osg::Matrixd::value_type arg3, osg::Matrixd::value_type arg4)
        """
        return _osg.Matrixd_makeScale(self, *args)

    def makeTranslate(self, *args):
        """
        makeTranslate(Matrixd self, Vec3f arg2)
        makeTranslate(Matrixd self, Vec3d arg2)
        makeTranslate(Matrixd self, osg::Matrixd::value_type arg2, osg::Matrixd::value_type arg3, osg::Matrixd::value_type arg4)
        """
        return _osg.Matrixd_makeTranslate(self, *args)

    def makeRotate(self, *args):
        """
        makeRotate(Matrixd self, Vec3f _from, Vec3f to)
        makeRotate(Matrixd self, Vec3d _from, Vec3d to)
        makeRotate(Matrixd self, osg::Matrixd::value_type angle, Vec3f axis)
        makeRotate(Matrixd self, osg::Matrixd::value_type angle, Vec3d axis)
        makeRotate(Matrixd self, osg::Matrixd::value_type angle, osg::Matrixd::value_type x, osg::Matrixd::value_type y, 
            osg::Matrixd::value_type z)
        makeRotate(Matrixd self, Quat arg2)
        makeRotate(Matrixd self, osg::Matrixd::value_type angle1, Vec3f axis1, osg::Matrixd::value_type angle2, Vec3f axis2, 
            osg::Matrixd::value_type angle3, Vec3f axis3)
        makeRotate(Matrixd self, osg::Matrixd::value_type angle1, Vec3d axis1, osg::Matrixd::value_type angle2, Vec3d axis2, 
            osg::Matrixd::value_type angle3, Vec3d axis3)
        """
        return _osg.Matrixd_makeRotate(self, *args)

    def decompose(self, *args):
        """
        decompose(Matrixd self, Vec3f translation, Quat rotation, Vec3f scale, Quat so)
        decompose(Matrixd self, Vec3d translation, Quat rotation, Vec3d scale, Quat so)
        """
        return _osg.Matrixd_decompose(self, *args)

    def makeOrtho(self, *args):
        """makeOrtho(Matrixd self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osg.Matrixd_makeOrtho(self, *args)

    def getOrtho(self, *args):
        """
        getOrtho(Matrixd self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool
        getOrtho(Matrixd self, float & left, float & right, float & bottom, float & top, float & zNear, float & zFar) -> bool
        """
        return _osg.Matrixd_getOrtho(self, *args)

    def makeOrtho2D(self, *args):
        """makeOrtho2D(Matrixd self, double left, double right, double bottom, double top)"""
        return _osg.Matrixd_makeOrtho2D(self, *args)

    def makeFrustum(self, *args):
        """makeFrustum(Matrixd self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osg.Matrixd_makeFrustum(self, *args)

    def getFrustum(self, *args):
        """
        getFrustum(Matrixd self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool
        getFrustum(Matrixd self, float & left, float & right, float & bottom, float & top, float & zNear, float & zFar) -> bool
        """
        return _osg.Matrixd_getFrustum(self, *args)

    def makePerspective(self, *args):
        """makePerspective(Matrixd self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osg.Matrixd_makePerspective(self, *args)

    def getPerspective(self, *args):
        """
        getPerspective(Matrixd self, double & fovy, double & aspectRatio, double & zNear, double & zFar) -> bool
        getPerspective(Matrixd self, float & fovy, float & aspectRatio, float & zNear, float & zFar) -> bool
        """
        return _osg.Matrixd_getPerspective(self, *args)

    def makeLookAt(self, *args):
        """makeLookAt(Matrixd self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osg.Matrixd_makeLookAt(self, *args)

    def getLookAt(self, *args):
        """
        getLookAt(Matrixd self, Vec3f eye, Vec3f center, Vec3f up, osg::Matrixd::value_type lookDistance=1.0)
        getLookAt(Matrixd self, Vec3f eye, Vec3f center, Vec3f up)
        getLookAt(Matrixd self, Vec3d eye, Vec3d center, Vec3d up, osg::Matrixd::value_type lookDistance=1.0)
        getLookAt(Matrixd self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osg.Matrixd_getLookAt(self, *args)

    def invert(self, *args):
        """invert(Matrixd self, Matrixd rhs) -> bool"""
        return _osg.Matrixd_invert(self, *args)

    def invert_4x3(self, *args):
        """invert_4x3(Matrixd self, Matrixd rhs) -> bool"""
        return _osg.Matrixd_invert_4x3(self, *args)

    def invert_4x4(self, *args):
        """invert_4x4(Matrixd self, Matrixd rhs) -> bool"""
        return _osg.Matrixd_invert_4x4(self, *args)

    def orthoNormalize(self, *args):
        """orthoNormalize(Matrixd self, Matrixd rhs)"""
        return _osg.Matrixd_orthoNormalize(self, *args)

    def identity():
        """identity() -> Matrixd"""
        return _osg.Matrixd_identity()

    if _newclass:identity = staticmethod(identity)
    __swig_getmethods__["identity"] = lambda x: identity
    def scale(*args):
        """
        scale(Vec3f sv) -> Matrixd
        scale(Vec3d sv) -> Matrixd
        scale(osg::Matrixd::value_type sx, osg::Matrixd::value_type sy, osg::Matrixd::value_type sz) -> Matrixd
        """
        return _osg.Matrixd_scale(*args)

    if _newclass:scale = staticmethod(scale)
    __swig_getmethods__["scale"] = lambda x: scale
    def translate(*args):
        """
        translate(Vec3f dv) -> Matrixd
        translate(Vec3d dv) -> Matrixd
        translate(osg::Matrixd::value_type x, osg::Matrixd::value_type y, osg::Matrixd::value_type z) -> Matrixd
        """
        return _osg.Matrixd_translate(*args)

    if _newclass:translate = staticmethod(translate)
    __swig_getmethods__["translate"] = lambda x: translate
    def rotate(*args):
        """
        rotate(Vec3f _from, Vec3f to) -> Matrixd
        rotate(Vec3d _from, Vec3d to) -> Matrixd
        rotate(osg::Matrixd::value_type angle, osg::Matrixd::value_type x, osg::Matrixd::value_type y, 
            osg::Matrixd::value_type z) -> Matrixd
        rotate(osg::Matrixd::value_type angle, Vec3f axis) -> Matrixd
        rotate(osg::Matrixd::value_type angle, Vec3d axis) -> Matrixd
        rotate(osg::Matrixd::value_type angle1, Vec3f axis1, osg::Matrixd::value_type angle2, Vec3f axis2, 
            osg::Matrixd::value_type angle3, Vec3f axis3) -> Matrixd
        rotate(osg::Matrixd::value_type angle1, Vec3d axis1, osg::Matrixd::value_type angle2, Vec3d axis2, 
            osg::Matrixd::value_type angle3, Vec3d axis3) -> Matrixd
        rotate(Quat quat) -> Matrixd
        """
        return _osg.Matrixd_rotate(*args)

    if _newclass:rotate = staticmethod(rotate)
    __swig_getmethods__["rotate"] = lambda x: rotate
    def inverse(*args):
        """inverse(Matrixd matrix) -> Matrixd"""
        return _osg.Matrixd_inverse(*args)

    if _newclass:inverse = staticmethod(inverse)
    __swig_getmethods__["inverse"] = lambda x: inverse
    def orthoNormal(*args):
        """orthoNormal(Matrixd matrix) -> Matrixd"""
        return _osg.Matrixd_orthoNormal(*args)

    if _newclass:orthoNormal = staticmethod(orthoNormal)
    __swig_getmethods__["orthoNormal"] = lambda x: orthoNormal
    def ortho(*args):
        """ortho(double left, double right, double bottom, double top, double zNear, double zFar) -> Matrixd"""
        return _osg.Matrixd_ortho(*args)

    if _newclass:ortho = staticmethod(ortho)
    __swig_getmethods__["ortho"] = lambda x: ortho
    def ortho2D(*args):
        """ortho2D(double left, double right, double bottom, double top) -> Matrixd"""
        return _osg.Matrixd_ortho2D(*args)

    if _newclass:ortho2D = staticmethod(ortho2D)
    __swig_getmethods__["ortho2D"] = lambda x: ortho2D
    def frustum(*args):
        """frustum(double left, double right, double bottom, double top, double zNear, double zFar) -> Matrixd"""
        return _osg.Matrixd_frustum(*args)

    if _newclass:frustum = staticmethod(frustum)
    __swig_getmethods__["frustum"] = lambda x: frustum
    def perspective(*args):
        """perspective(double fovy, double aspectRatio, double zNear, double zFar) -> Matrixd"""
        return _osg.Matrixd_perspective(*args)

    if _newclass:perspective = staticmethod(perspective)
    __swig_getmethods__["perspective"] = lambda x: perspective
    def lookAt(*args):
        """
        lookAt(Vec3f eye, Vec3f center, Vec3f up) -> Matrixd
        lookAt(Vec3d eye, Vec3d center, Vec3d up) -> Matrixd
        """
        return _osg.Matrixd_lookAt(*args)

    if _newclass:lookAt = staticmethod(lookAt)
    __swig_getmethods__["lookAt"] = lambda x: lookAt
    def setRotate(self, *args):
        """setRotate(Matrixd self, Quat q)"""
        return _osg.Matrixd_setRotate(self, *args)

    def getRotate(self):
        """getRotate(Matrixd self) -> Quat"""
        return _osg.Matrixd_getRotate(self)

    def setTrans(self, *args):
        """
        setTrans(Matrixd self, osg::Matrixd::value_type tx, osg::Matrixd::value_type ty, osg::Matrixd::value_type tz)
        setTrans(Matrixd self, Vec3f v)
        setTrans(Matrixd self, Vec3d v)
        """
        return _osg.Matrixd_setTrans(self, *args)

    def getTrans(self):
        """getTrans(Matrixd self) -> Vec3d"""
        return _osg.Matrixd_getTrans(self)

    def getScale(self):
        """getScale(Matrixd self) -> Vec3d"""
        return _osg.Matrixd_getScale(self)

    def transform3x3(*args):
        """
        transform3x3(Vec3f v, Matrixd m) -> Vec3f
        transform3x3(Vec3d v, Matrixd m) -> Vec3d
        transform3x3(Matrixd m, Vec3f v) -> Vec3f
        transform3x3(Matrixd m, Vec3d v) -> Vec3d
        """
        return _osg.Matrixd_transform3x3(*args)

    if _newclass:transform3x3 = staticmethod(transform3x3)
    __swig_getmethods__["transform3x3"] = lambda x: transform3x3
    def mult(self, *args):
        """mult(Matrixd self, Matrixd arg2, Matrixd arg3)"""
        return _osg.Matrixd_mult(self, *args)

    def preMult(self, *args):
        """
        preMult(Matrixd self, Vec3f v) -> Vec3f
        preMult(Matrixd self, Vec3d v) -> Vec3d
        preMult(Matrixd self, Vec4f v) -> Vec4f
        preMult(Matrixd self, Vec4d v) -> Vec4d
        preMult(Matrixd self, Matrixd arg2)
        """
        return _osg.Matrixd_preMult(self, *args)

    def postMult(self, *args):
        """
        postMult(Matrixd self, Vec3f v) -> Vec3f
        postMult(Matrixd self, Vec3d v) -> Vec3d
        postMult(Matrixd self, Vec4f v) -> Vec4f
        postMult(Matrixd self, Vec4d v) -> Vec4d
        postMult(Matrixd self, Matrixd arg2)
        """
        return _osg.Matrixd_postMult(self, *args)

    def preMultTranslate(self, *args):
        """
        preMultTranslate(Matrixd self, Vec3d v)
        preMultTranslate(Matrixd self, Vec3f v)
        """
        return _osg.Matrixd_preMultTranslate(self, *args)

    def postMultTranslate(self, *args):
        """
        postMultTranslate(Matrixd self, Vec3d v)
        postMultTranslate(Matrixd self, Vec3f v)
        """
        return _osg.Matrixd_postMultTranslate(self, *args)

    def preMultScale(self, *args):
        """
        preMultScale(Matrixd self, Vec3d v)
        preMultScale(Matrixd self, Vec3f v)
        """
        return _osg.Matrixd_preMultScale(self, *args)

    def postMultScale(self, *args):
        """
        postMultScale(Matrixd self, Vec3d v)
        postMultScale(Matrixd self, Vec3f v)
        """
        return _osg.Matrixd_postMultScale(self, *args)

    def preMultRotate(self, *args):
        """preMultRotate(Matrixd self, Quat q)"""
        return _osg.Matrixd_preMultRotate(self, *args)

    def postMultRotate(self, *args):
        """postMultRotate(Matrixd self, Quat q)"""
        return _osg.Matrixd_postMultRotate(self, *args)

    def __mul__(self, *args):
        """
        __mul__(Matrixd self, Vec3f v) -> Vec3f
        __mul__(Matrixd self, Vec3d v) -> Vec3d
        __mul__(Matrixd self, Vec4f v) -> Vec4f
        __mul__(Matrixd self, Vec4d v) -> Vec4d
        __mul__(Matrixd self, Matrixd m) -> Matrixd
        """
        return _osg.Matrixd___mul__(self, *args)

    def __str__(self):
        """__str__(Matrixd self) -> std::string"""
        return _osg.Matrixd___str__(self)

Matrixd_swigregister = _osg.Matrixd_swigregister
Matrixd_swigregister(Matrixd)

def Matrixd_identity():
  """Matrixd_identity() -> Matrixd"""
  return _osg.Matrixd_identity()

def Matrixd_scale(*args):
  """
    scale(Vec3f sv) -> Matrixd
    scale(Vec3d sv) -> Matrixd
    Matrixd_scale(osg::Matrixd::value_type sx, osg::Matrixd::value_type sy, osg::Matrixd::value_type sz) -> Matrixd
    """
  return _osg.Matrixd_scale(*args)

def Matrixd_translate(*args):
  """
    translate(Vec3f dv) -> Matrixd
    translate(Vec3d dv) -> Matrixd
    Matrixd_translate(osg::Matrixd::value_type x, osg::Matrixd::value_type y, osg::Matrixd::value_type z) -> Matrixd
    """
  return _osg.Matrixd_translate(*args)

def Matrixd_rotate(*args):
  """
    rotate(Vec3f _from, Vec3f to) -> Matrixd
    rotate(Vec3d _from, Vec3d to) -> Matrixd
    rotate(osg::Matrixd::value_type angle, osg::Matrixd::value_type x, osg::Matrixd::value_type y, 
        osg::Matrixd::value_type z) -> Matrixd
    rotate(osg::Matrixd::value_type angle, Vec3f axis) -> Matrixd
    rotate(osg::Matrixd::value_type angle, Vec3d axis) -> Matrixd
    rotate(osg::Matrixd::value_type angle1, Vec3f axis1, osg::Matrixd::value_type angle2, Vec3f axis2, 
        osg::Matrixd::value_type angle3, Vec3f axis3) -> Matrixd
    rotate(osg::Matrixd::value_type angle1, Vec3d axis1, osg::Matrixd::value_type angle2, Vec3d axis2, 
        osg::Matrixd::value_type angle3, Vec3d axis3) -> Matrixd
    Matrixd_rotate(Quat quat) -> Matrixd
    """
  return _osg.Matrixd_rotate(*args)

def Matrixd_inverse(*args):
  """Matrixd_inverse(Matrixd matrix) -> Matrixd"""
  return _osg.Matrixd_inverse(*args)

def Matrixd_orthoNormal(*args):
  """Matrixd_orthoNormal(Matrixd matrix) -> Matrixd"""
  return _osg.Matrixd_orthoNormal(*args)

def Matrixd_ortho(*args):
  """Matrixd_ortho(double left, double right, double bottom, double top, double zNear, double zFar) -> Matrixd"""
  return _osg.Matrixd_ortho(*args)

def Matrixd_ortho2D(*args):
  """Matrixd_ortho2D(double left, double right, double bottom, double top) -> Matrixd"""
  return _osg.Matrixd_ortho2D(*args)

def Matrixd_frustum(*args):
  """Matrixd_frustum(double left, double right, double bottom, double top, double zNear, double zFar) -> Matrixd"""
  return _osg.Matrixd_frustum(*args)

def Matrixd_perspective(*args):
  """Matrixd_perspective(double fovy, double aspectRatio, double zNear, double zFar) -> Matrixd"""
  return _osg.Matrixd_perspective(*args)

def Matrixd_lookAt(*args):
  """
    lookAt(Vec3f eye, Vec3f center, Vec3f up) -> Matrixd
    Matrixd_lookAt(Vec3d eye, Vec3d center, Vec3d up) -> Matrixd
    """
  return _osg.Matrixd_lookAt(*args)

def Matrixd_transform3x3(*args):
  """
    transform3x3(Vec3f v, Matrixd m) -> Vec3f
    transform3x3(Vec3d v, Matrixd m) -> Vec3d
    transform3x3(Matrixd m, Vec3f v) -> Vec3f
    Matrixd_transform3x3(Matrixd m, Vec3d v) -> Vec3d
    """
  return _osg.Matrixd_transform3x3(*args)

class RefMatrixd(Object,Matrixd):
    """Proxy of C++ osg::RefMatrixd class"""
    __swig_setmethods__ = {}
    for _s in [Object,Matrixd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefMatrixd, name, value)
    __swig_getmethods__ = {}
    for _s in [Object,Matrixd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefMatrixd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::RefMatrixd self) -> RefMatrixd
        __init__(osg::RefMatrixd self, Matrixd other) -> RefMatrixd
        __init__(osg::RefMatrixd self, Matrixf other) -> RefMatrixd
        __init__(osg::RefMatrixd self, RefMatrixd other) -> RefMatrixd
        __init__(osg::RefMatrixd self, osg::Matrixd::value_type const *const _def) -> RefMatrixd
        __init__(osg::RefMatrixd self, osg::Matrixd::value_type a00, osg::Matrixd::value_type a01, osg::Matrixd::value_type a02, 
            osg::Matrixd::value_type a03, osg::Matrixd::value_type a10, osg::Matrixd::value_type a11, 
            osg::Matrixd::value_type a12, osg::Matrixd::value_type a13, 
            osg::Matrixd::value_type a20, osg::Matrixd::value_type a21, osg::Matrixd::value_type a22, 
            osg::Matrixd::value_type a23, osg::Matrixd::value_type a30, 
            osg::Matrixd::value_type a31, osg::Matrixd::value_type a32, osg::Matrixd::value_type a33) -> RefMatrixd
        """
        this = _osg.new_RefMatrixd(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(RefMatrixd self) -> Object"""
        return _osg.RefMatrixd_cloneType(self)

    def clone(self, *args):
        """clone(RefMatrixd self, CopyOp arg2) -> Object"""
        return _osg.RefMatrixd_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(RefMatrixd self, Object obj) -> bool"""
        return _osg.RefMatrixd_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(RefMatrixd self) -> char const *"""
        return _osg.RefMatrixd_libraryName(self)

    def className(self):
        """className(RefMatrixd self) -> char const *"""
        return _osg.RefMatrixd_className(self)

RefMatrixd_swigregister = _osg.RefMatrixd_swigregister
RefMatrixd_swigregister(RefMatrixd)

OSG_MATRIXF = _osg.OSG_MATRIXF
class Matrixf(_object):
    """Proxy of C++ osg::Matrixf class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrixf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrixf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Matrixf self) -> Matrixf
        __init__(osg::Matrixf self, Matrixf mat) -> Matrixf
        __init__(osg::Matrixf self, Matrixd mat) -> Matrixf
        __init__(osg::Matrixf self, float const *const ptr) -> Matrixf
        __init__(osg::Matrixf self, double const *const ptr) -> Matrixf
        __init__(osg::Matrixf self, Quat quat) -> Matrixf
        __init__(osg::Matrixf self, osg::Matrixf::value_type a00, osg::Matrixf::value_type a01, osg::Matrixf::value_type a02, 
            osg::Matrixf::value_type a03, osg::Matrixf::value_type a10, osg::Matrixf::value_type a11, 
            osg::Matrixf::value_type a12, osg::Matrixf::value_type a13, 
            osg::Matrixf::value_type a20, osg::Matrixf::value_type a21, osg::Matrixf::value_type a22, 
            osg::Matrixf::value_type a23, osg::Matrixf::value_type a30, 
            osg::Matrixf::value_type a31, osg::Matrixf::value_type a32, osg::Matrixf::value_type a33) -> Matrixf
        """
        this = _osg.new_Matrixf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Matrixf
    __del__ = lambda self : None;
    def compare(self, *args):
        """compare(Matrixf self, Matrixf m) -> int"""
        return _osg.Matrixf_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(Matrixf self, Matrixf m) -> bool"""
        return _osg.Matrixf___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(Matrixf self, Matrixf m) -> bool"""
        return _osg.Matrixf___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Matrixf self, Matrixf m) -> bool"""
        return _osg.Matrixf___ne__(self, *args)

    def __call__(self, *args):
        """__call__(Matrixf self, int row, int col) -> osg::Matrixf::value_type"""
        return _osg.Matrixf___call__(self, *args)

    def valid(self):
        """valid(Matrixf self) -> bool"""
        return _osg.Matrixf_valid(self)

    def isNaN(self):
        """isNaN(Matrixf self) -> bool"""
        return _osg.Matrixf_isNaN(self)

    def set(self, *args):
        """
        set(Matrixf self, Matrixf rhs)
        set(Matrixf self, Matrixd rhs)
        set(Matrixf self, float const *const ptr)
        set(Matrixf self, double const *const ptr)
        set(Matrixf self, osg::Matrixf::value_type a00, osg::Matrixf::value_type a01, osg::Matrixf::value_type a02, 
            osg::Matrixf::value_type a03, osg::Matrixf::value_type a10, osg::Matrixf::value_type a11, 
            osg::Matrixf::value_type a12, osg::Matrixf::value_type a13, 
            osg::Matrixf::value_type a20, osg::Matrixf::value_type a21, osg::Matrixf::value_type a22, 
            osg::Matrixf::value_type a23, osg::Matrixf::value_type a30, 
            osg::Matrixf::value_type a31, osg::Matrixf::value_type a32, osg::Matrixf::value_type a33)
        """
        return _osg.Matrixf_set(self, *args)

    def ptr(self, *args):
        """
        ptr(Matrixf self) -> osg::Matrixf::value_type
        ptr(Matrixf self) -> osg::Matrixf::value_type const *
        """
        return _osg.Matrixf_ptr(self, *args)

    def isIdentity(self):
        """isIdentity(Matrixf self) -> bool"""
        return _osg.Matrixf_isIdentity(self)

    def makeIdentity(self):
        """makeIdentity(Matrixf self)"""
        return _osg.Matrixf_makeIdentity(self)

    def makeScale(self, *args):
        """
        makeScale(Matrixf self, Vec3f arg2)
        makeScale(Matrixf self, Vec3d arg2)
        makeScale(Matrixf self, osg::Matrixf::value_type arg2, osg::Matrixf::value_type arg3, osg::Matrixf::value_type arg4)
        """
        return _osg.Matrixf_makeScale(self, *args)

    def makeTranslate(self, *args):
        """
        makeTranslate(Matrixf self, Vec3f arg2)
        makeTranslate(Matrixf self, Vec3d arg2)
        makeTranslate(Matrixf self, osg::Matrixf::value_type arg2, osg::Matrixf::value_type arg3, osg::Matrixf::value_type arg4)
        """
        return _osg.Matrixf_makeTranslate(self, *args)

    def makeRotate(self, *args):
        """
        makeRotate(Matrixf self, Vec3f _from, Vec3f to)
        makeRotate(Matrixf self, Vec3d _from, Vec3d to)
        makeRotate(Matrixf self, osg::Matrixf::value_type angle, Vec3f axis)
        makeRotate(Matrixf self, osg::Matrixf::value_type angle, Vec3d axis)
        makeRotate(Matrixf self, osg::Matrixf::value_type angle, osg::Matrixf::value_type x, osg::Matrixf::value_type y, 
            osg::Matrixf::value_type z)
        makeRotate(Matrixf self, Quat arg2)
        makeRotate(Matrixf self, osg::Matrixf::value_type angle1, Vec3f axis1, osg::Matrixf::value_type angle2, Vec3f axis2, 
            osg::Matrixf::value_type angle3, Vec3f axis3)
        makeRotate(Matrixf self, osg::Matrixf::value_type angle1, Vec3d axis1, osg::Matrixf::value_type angle2, Vec3d axis2, 
            osg::Matrixf::value_type angle3, Vec3d axis3)
        """
        return _osg.Matrixf_makeRotate(self, *args)

    def decompose(self, *args):
        """
        decompose(Matrixf self, Vec3f translation, Quat rotation, Vec3f scale, Quat so)
        decompose(Matrixf self, Vec3d translation, Quat rotation, Vec3d scale, Quat so)
        """
        return _osg.Matrixf_decompose(self, *args)

    def makeOrtho(self, *args):
        """makeOrtho(Matrixf self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osg.Matrixf_makeOrtho(self, *args)

    def getOrtho(self, *args):
        """
        getOrtho(Matrixf self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool
        getOrtho(Matrixf self, float & left, float & right, float & bottom, float & top, float & zNear, float & zFar) -> bool
        """
        return _osg.Matrixf_getOrtho(self, *args)

    def makeOrtho2D(self, *args):
        """makeOrtho2D(Matrixf self, double left, double right, double bottom, double top)"""
        return _osg.Matrixf_makeOrtho2D(self, *args)

    def makeFrustum(self, *args):
        """makeFrustum(Matrixf self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osg.Matrixf_makeFrustum(self, *args)

    def getFrustum(self, *args):
        """
        getFrustum(Matrixf self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool
        getFrustum(Matrixf self, float & left, float & right, float & bottom, float & top, float & zNear, float & zFar) -> bool
        """
        return _osg.Matrixf_getFrustum(self, *args)

    def makePerspective(self, *args):
        """makePerspective(Matrixf self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osg.Matrixf_makePerspective(self, *args)

    def getPerspective(self, *args):
        """
        getPerspective(Matrixf self, double & fovy, double & aspectRatio, double & zNear, double & zFar) -> bool
        getPerspective(Matrixf self, float & fovy, float & aspectRatio, float & zNear, float & zFar) -> bool
        """
        return _osg.Matrixf_getPerspective(self, *args)

    def makeLookAt(self, *args):
        """makeLookAt(Matrixf self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osg.Matrixf_makeLookAt(self, *args)

    def getLookAt(self, *args):
        """
        getLookAt(Matrixf self, Vec3f eye, Vec3f center, Vec3f up, osg::Matrixf::value_type lookDistance=1.0)
        getLookAt(Matrixf self, Vec3f eye, Vec3f center, Vec3f up)
        getLookAt(Matrixf self, Vec3d eye, Vec3d center, Vec3d up, osg::Matrixf::value_type lookDistance=1.0)
        getLookAt(Matrixf self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osg.Matrixf_getLookAt(self, *args)

    def invert(self, *args):
        """invert(Matrixf self, Matrixf rhs) -> bool"""
        return _osg.Matrixf_invert(self, *args)

    def invert_4x3(self, *args):
        """invert_4x3(Matrixf self, Matrixf rhs) -> bool"""
        return _osg.Matrixf_invert_4x3(self, *args)

    def invert_4x4(self, *args):
        """invert_4x4(Matrixf self, Matrixf rhs) -> bool"""
        return _osg.Matrixf_invert_4x4(self, *args)

    def orthoNormalize(self, *args):
        """orthoNormalize(Matrixf self, Matrixf rhs)"""
        return _osg.Matrixf_orthoNormalize(self, *args)

    def identity():
        """identity() -> Matrixf"""
        return _osg.Matrixf_identity()

    if _newclass:identity = staticmethod(identity)
    __swig_getmethods__["identity"] = lambda x: identity
    def scale(*args):
        """
        scale(Vec3f sv) -> Matrixf
        scale(Vec3d sv) -> Matrixf
        scale(osg::Matrixf::value_type sx, osg::Matrixf::value_type sy, osg::Matrixf::value_type sz) -> Matrixf
        """
        return _osg.Matrixf_scale(*args)

    if _newclass:scale = staticmethod(scale)
    __swig_getmethods__["scale"] = lambda x: scale
    def translate(*args):
        """
        translate(Vec3f dv) -> Matrixf
        translate(Vec3d dv) -> Matrixf
        translate(osg::Matrixf::value_type x, osg::Matrixf::value_type y, osg::Matrixf::value_type z) -> Matrixf
        """
        return _osg.Matrixf_translate(*args)

    if _newclass:translate = staticmethod(translate)
    __swig_getmethods__["translate"] = lambda x: translate
    def rotate(*args):
        """
        rotate(Vec3f _from, Vec3f to) -> Matrixf
        rotate(Vec3d _from, Vec3d to) -> Matrixf
        rotate(osg::Matrixf::value_type angle, osg::Matrixf::value_type x, osg::Matrixf::value_type y, 
            osg::Matrixf::value_type z) -> Matrixf
        rotate(osg::Matrixf::value_type angle, Vec3f axis) -> Matrixf
        rotate(osg::Matrixf::value_type angle, Vec3d axis) -> Matrixf
        rotate(osg::Matrixf::value_type angle1, Vec3f axis1, osg::Matrixf::value_type angle2, Vec3f axis2, 
            osg::Matrixf::value_type angle3, Vec3f axis3) -> Matrixf
        rotate(osg::Matrixf::value_type angle1, Vec3d axis1, osg::Matrixf::value_type angle2, Vec3d axis2, 
            osg::Matrixf::value_type angle3, Vec3d axis3) -> Matrixf
        rotate(Quat quat) -> Matrixf
        """
        return _osg.Matrixf_rotate(*args)

    if _newclass:rotate = staticmethod(rotate)
    __swig_getmethods__["rotate"] = lambda x: rotate
    def inverse(*args):
        """inverse(Matrixf matrix) -> Matrixf"""
        return _osg.Matrixf_inverse(*args)

    if _newclass:inverse = staticmethod(inverse)
    __swig_getmethods__["inverse"] = lambda x: inverse
    def orthoNormal(*args):
        """orthoNormal(Matrixf matrix) -> Matrixf"""
        return _osg.Matrixf_orthoNormal(*args)

    if _newclass:orthoNormal = staticmethod(orthoNormal)
    __swig_getmethods__["orthoNormal"] = lambda x: orthoNormal
    def ortho(*args):
        """ortho(double left, double right, double bottom, double top, double zNear, double zFar) -> Matrixf"""
        return _osg.Matrixf_ortho(*args)

    if _newclass:ortho = staticmethod(ortho)
    __swig_getmethods__["ortho"] = lambda x: ortho
    def ortho2D(*args):
        """ortho2D(double left, double right, double bottom, double top) -> Matrixf"""
        return _osg.Matrixf_ortho2D(*args)

    if _newclass:ortho2D = staticmethod(ortho2D)
    __swig_getmethods__["ortho2D"] = lambda x: ortho2D
    def frustum(*args):
        """frustum(double left, double right, double bottom, double top, double zNear, double zFar) -> Matrixf"""
        return _osg.Matrixf_frustum(*args)

    if _newclass:frustum = staticmethod(frustum)
    __swig_getmethods__["frustum"] = lambda x: frustum
    def perspective(*args):
        """perspective(double fovy, double aspectRatio, double zNear, double zFar) -> Matrixf"""
        return _osg.Matrixf_perspective(*args)

    if _newclass:perspective = staticmethod(perspective)
    __swig_getmethods__["perspective"] = lambda x: perspective
    def lookAt(*args):
        """
        lookAt(Vec3f eye, Vec3f center, Vec3f up) -> Matrixf
        lookAt(Vec3d eye, Vec3d center, Vec3d up) -> Matrixf
        """
        return _osg.Matrixf_lookAt(*args)

    if _newclass:lookAt = staticmethod(lookAt)
    __swig_getmethods__["lookAt"] = lambda x: lookAt
    def setRotate(self, *args):
        """setRotate(Matrixf self, Quat q)"""
        return _osg.Matrixf_setRotate(self, *args)

    def getRotate(self):
        """getRotate(Matrixf self) -> Quat"""
        return _osg.Matrixf_getRotate(self)

    def setTrans(self, *args):
        """
        setTrans(Matrixf self, osg::Matrixf::value_type tx, osg::Matrixf::value_type ty, osg::Matrixf::value_type tz)
        setTrans(Matrixf self, Vec3f v)
        setTrans(Matrixf self, Vec3d v)
        """
        return _osg.Matrixf_setTrans(self, *args)

    def getTrans(self):
        """getTrans(Matrixf self) -> Vec3d"""
        return _osg.Matrixf_getTrans(self)

    def getScale(self):
        """getScale(Matrixf self) -> Vec3d"""
        return _osg.Matrixf_getScale(self)

    def transform3x3(*args):
        """
        transform3x3(Vec3f v, Matrixf m) -> Vec3f
        transform3x3(Vec3d v, Matrixf m) -> Vec3d
        transform3x3(Matrixf m, Vec3f v) -> Vec3f
        transform3x3(Matrixf m, Vec3d v) -> Vec3d
        """
        return _osg.Matrixf_transform3x3(*args)

    if _newclass:transform3x3 = staticmethod(transform3x3)
    __swig_getmethods__["transform3x3"] = lambda x: transform3x3
    def mult(self, *args):
        """mult(Matrixf self, Matrixf arg2, Matrixf arg3)"""
        return _osg.Matrixf_mult(self, *args)

    def preMult(self, *args):
        """
        preMult(Matrixf self, Vec3f v) -> Vec3f
        preMult(Matrixf self, Vec3d v) -> Vec3d
        preMult(Matrixf self, Vec4f v) -> Vec4f
        preMult(Matrixf self, Vec4d v) -> Vec4d
        preMult(Matrixf self, Matrixf arg2)
        """
        return _osg.Matrixf_preMult(self, *args)

    def postMult(self, *args):
        """
        postMult(Matrixf self, Vec3f v) -> Vec3f
        postMult(Matrixf self, Vec3d v) -> Vec3d
        postMult(Matrixf self, Vec4f v) -> Vec4f
        postMult(Matrixf self, Vec4d v) -> Vec4d
        postMult(Matrixf self, Matrixf arg2)
        """
        return _osg.Matrixf_postMult(self, *args)

    def preMultTranslate(self, *args):
        """
        preMultTranslate(Matrixf self, Vec3d v)
        preMultTranslate(Matrixf self, Vec3f v)
        """
        return _osg.Matrixf_preMultTranslate(self, *args)

    def postMultTranslate(self, *args):
        """
        postMultTranslate(Matrixf self, Vec3d v)
        postMultTranslate(Matrixf self, Vec3f v)
        """
        return _osg.Matrixf_postMultTranslate(self, *args)

    def preMultScale(self, *args):
        """
        preMultScale(Matrixf self, Vec3d v)
        preMultScale(Matrixf self, Vec3f v)
        """
        return _osg.Matrixf_preMultScale(self, *args)

    def postMultScale(self, *args):
        """
        postMultScale(Matrixf self, Vec3d v)
        postMultScale(Matrixf self, Vec3f v)
        """
        return _osg.Matrixf_postMultScale(self, *args)

    def preMultRotate(self, *args):
        """preMultRotate(Matrixf self, Quat q)"""
        return _osg.Matrixf_preMultRotate(self, *args)

    def postMultRotate(self, *args):
        """postMultRotate(Matrixf self, Quat q)"""
        return _osg.Matrixf_postMultRotate(self, *args)

    def __mul__(self, *args):
        """
        __mul__(Matrixf self, Vec3f v) -> Vec3f
        __mul__(Matrixf self, Vec3d v) -> Vec3d
        __mul__(Matrixf self, Vec4f v) -> Vec4f
        __mul__(Matrixf self, Vec4d v) -> Vec4d
        __mul__(Matrixf self, Matrixf m) -> Matrixf
        __mul__(Matrixf self, osg::Matrixf::value_type rhs) -> Matrixf
        """
        return _osg.Matrixf___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Matrixf self, osg::Matrixf::value_type rhs) -> Matrixf"""
        return _osg.Matrixf___div__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(Matrixf self, osg::Matrixf::value_type rhs) -> Matrixf"""
        return _osg.Matrixf___idiv__(self, *args)

    def __add__(self, *args):
        """__add__(Matrixf self, Matrixf rhs) -> Matrixf"""
        return _osg.Matrixf___add__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(Matrixf self, Matrixf rhs) -> Matrixf"""
        return _osg.Matrixf___iadd__(self, *args)

    def __str__(self):
        """__str__(Matrixf self) -> std::string"""
        return _osg.Matrixf___str__(self)

Matrixf_swigregister = _osg.Matrixf_swigregister
Matrixf_swigregister(Matrixf)

def Matrixf_identity():
  """Matrixf_identity() -> Matrixf"""
  return _osg.Matrixf_identity()

def Matrixf_scale(*args):
  """
    scale(Vec3f sv) -> Matrixf
    scale(Vec3d sv) -> Matrixf
    Matrixf_scale(osg::Matrixf::value_type sx, osg::Matrixf::value_type sy, osg::Matrixf::value_type sz) -> Matrixf
    """
  return _osg.Matrixf_scale(*args)

def Matrixf_translate(*args):
  """
    translate(Vec3f dv) -> Matrixf
    translate(Vec3d dv) -> Matrixf
    Matrixf_translate(osg::Matrixf::value_type x, osg::Matrixf::value_type y, osg::Matrixf::value_type z) -> Matrixf
    """
  return _osg.Matrixf_translate(*args)

def Matrixf_rotate(*args):
  """
    rotate(Vec3f _from, Vec3f to) -> Matrixf
    rotate(Vec3d _from, Vec3d to) -> Matrixf
    rotate(osg::Matrixf::value_type angle, osg::Matrixf::value_type x, osg::Matrixf::value_type y, 
        osg::Matrixf::value_type z) -> Matrixf
    rotate(osg::Matrixf::value_type angle, Vec3f axis) -> Matrixf
    rotate(osg::Matrixf::value_type angle, Vec3d axis) -> Matrixf
    rotate(osg::Matrixf::value_type angle1, Vec3f axis1, osg::Matrixf::value_type angle2, Vec3f axis2, 
        osg::Matrixf::value_type angle3, Vec3f axis3) -> Matrixf
    rotate(osg::Matrixf::value_type angle1, Vec3d axis1, osg::Matrixf::value_type angle2, Vec3d axis2, 
        osg::Matrixf::value_type angle3, Vec3d axis3) -> Matrixf
    Matrixf_rotate(Quat quat) -> Matrixf
    """
  return _osg.Matrixf_rotate(*args)

def Matrixf_inverse(*args):
  """Matrixf_inverse(Matrixf matrix) -> Matrixf"""
  return _osg.Matrixf_inverse(*args)

def Matrixf_orthoNormal(*args):
  """Matrixf_orthoNormal(Matrixf matrix) -> Matrixf"""
  return _osg.Matrixf_orthoNormal(*args)

def Matrixf_ortho(*args):
  """Matrixf_ortho(double left, double right, double bottom, double top, double zNear, double zFar) -> Matrixf"""
  return _osg.Matrixf_ortho(*args)

def Matrixf_ortho2D(*args):
  """Matrixf_ortho2D(double left, double right, double bottom, double top) -> Matrixf"""
  return _osg.Matrixf_ortho2D(*args)

def Matrixf_frustum(*args):
  """Matrixf_frustum(double left, double right, double bottom, double top, double zNear, double zFar) -> Matrixf"""
  return _osg.Matrixf_frustum(*args)

def Matrixf_perspective(*args):
  """Matrixf_perspective(double fovy, double aspectRatio, double zNear, double zFar) -> Matrixf"""
  return _osg.Matrixf_perspective(*args)

def Matrixf_lookAt(*args):
  """
    lookAt(Vec3f eye, Vec3f center, Vec3f up) -> Matrixf
    Matrixf_lookAt(Vec3d eye, Vec3d center, Vec3d up) -> Matrixf
    """
  return _osg.Matrixf_lookAt(*args)

def Matrixf_transform3x3(*args):
  """
    transform3x3(Vec3f v, Matrixf m) -> Vec3f
    transform3x3(Vec3d v, Matrixf m) -> Vec3d
    transform3x3(Matrixf m, Vec3f v) -> Vec3f
    Matrixf_transform3x3(Matrixf m, Vec3d v) -> Vec3d
    """
  return _osg.Matrixf_transform3x3(*args)

class RefMatrixf(Object,Matrixf):
    """Proxy of C++ osg::RefMatrixf class"""
    __swig_setmethods__ = {}
    for _s in [Object,Matrixf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefMatrixf, name, value)
    __swig_getmethods__ = {}
    for _s in [Object,Matrixf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefMatrixf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::RefMatrixf self) -> RefMatrixf
        __init__(osg::RefMatrixf self, Matrixf other) -> RefMatrixf
        __init__(osg::RefMatrixf self, Matrixd other) -> RefMatrixf
        __init__(osg::RefMatrixf self, RefMatrixf other) -> RefMatrixf
        __init__(osg::RefMatrixf self, osg::Matrixf::value_type const *const _def) -> RefMatrixf
        __init__(osg::RefMatrixf self, osg::Matrixf::value_type a00, osg::Matrixf::value_type a01, osg::Matrixf::value_type a02, 
            osg::Matrixf::value_type a03, osg::Matrixf::value_type a10, osg::Matrixf::value_type a11, 
            osg::Matrixf::value_type a12, osg::Matrixf::value_type a13, 
            osg::Matrixf::value_type a20, osg::Matrixf::value_type a21, osg::Matrixf::value_type a22, 
            osg::Matrixf::value_type a23, osg::Matrixf::value_type a30, 
            osg::Matrixf::value_type a31, osg::Matrixf::value_type a32, osg::Matrixf::value_type a33) -> RefMatrixf
        """
        this = _osg.new_RefMatrixf(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(RefMatrixf self) -> Object"""
        return _osg.RefMatrixf_cloneType(self)

    def clone(self, *args):
        """clone(RefMatrixf self, CopyOp arg2) -> Object"""
        return _osg.RefMatrixf_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(RefMatrixf self, Object obj) -> bool"""
        return _osg.RefMatrixf_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(RefMatrixf self) -> char const *"""
        return _osg.RefMatrixf_libraryName(self)

    def className(self):
        """className(RefMatrixf self) -> char const *"""
        return _osg.RefMatrixf_className(self)

RefMatrixf_swigregister = _osg.RefMatrixf_swigregister
RefMatrixf_swigregister(RefMatrixf)


def __mul__(*args):
  """
    __mul__(Vec3f lhs, Vec4f rhs) -> osg::Vec4f::value_type
    __mul__(Vec4f lhs, Vec3f rhs) -> osg::Vec4f::value_type
    __mul__(Vec3d lhs, Vec4d rhs) -> osg::Vec4d::value_type
    __mul__(Vec3f lhs, Vec4d rhs) -> osg::Vec4d::value_type
    __mul__(Vec3d lhs, Vec4f rhs) -> osg::Vec4d::value_type
    __mul__(Vec4d lhs, Vec3d rhs) -> osg::Vec4d::value_type
    __mul__(Vec4d lhs, Vec3f rhs) -> osg::Vec4d::value_type
    __mul__(Vec4f lhs, Vec3d rhs) -> osg::Vec4d::value_type
    __mul__(Vec3f v, Matrixd m) -> Vec3f
    __mul__(Vec3d v, Matrixd m) -> Vec3d
    __mul__(Vec4f v, Matrixd m) -> Vec4f
    __mul__(Vec4d v, Matrixd m) -> Vec4d
    __mul__(Vec3f v, Matrixf m) -> Vec3f
    __mul__(Vec3d v, Matrixf m) -> Vec3d
    __mul__(Vec4f v, Matrixf m) -> Vec4f
    __mul__(Vec4d v, Matrixf m) -> Vec4d
    """
  return _osg.__mul__(*args)
OSG_MATRIX = _osg.OSG_MATRIX
OSG_BOUNDINGSPHERE = _osg.OSG_BOUNDINGSPHERE
OSG_PLANE = _osg.OSG_PLANE
class Plane(_object):
    """Proxy of C++ osg::Plane class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plane, name)
    __repr__ = _swig_repr
    num_components = _osg.Plane_num_components
    def __init__(self, *args): 
        """
        __init__(osg::Plane self) -> Plane
        __init__(osg::Plane self, Plane pl) -> Plane
        __init__(osg::Plane self, osg::Plane::value_type a, osg::Plane::value_type b, osg::Plane::value_type c, osg::Plane::value_type d) -> Plane
        __init__(osg::Plane self, Vec4f vec) -> Plane
        __init__(osg::Plane self, Vec4d vec) -> Plane
        __init__(osg::Plane self, Vec3d norm, osg::Plane::value_type d) -> Plane
        __init__(osg::Plane self, Vec3d v1, Vec3d v2, Vec3d v3) -> Plane
        __init__(osg::Plane self, Vec3d norm, Vec3d point) -> Plane
        """
        this = _osg.new_Plane(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """
        set(Plane self, Plane pl)
        set(Plane self, osg::Plane::value_type a, osg::Plane::value_type b, osg::Plane::value_type c, osg::Plane::value_type d)
        set(Plane self, Vec4f vec)
        set(Plane self, Vec4d vec)
        set(Plane self, Vec3d norm, double d)
        set(Plane self, Vec3d v1, Vec3d v2, Vec3d v3)
        set(Plane self, Vec3d norm, Vec3d point)
        """
        return _osg.Plane_set(self, *args)

    def flip(self):
        """flip(Plane self)"""
        return _osg.Plane_flip(self)

    def makeUnitLength(self):
        """makeUnitLength(Plane self)"""
        return _osg.Plane_makeUnitLength(self)

    def calculateUpperLowerBBCorners(self):
        """calculateUpperLowerBBCorners(Plane self)"""
        return _osg.Plane_calculateUpperLowerBBCorners(self)

    def valid(self):
        """valid(Plane self) -> bool"""
        return _osg.Plane_valid(self)

    def isNaN(self):
        """isNaN(Plane self) -> bool"""
        return _osg.Plane_isNaN(self)

    def __eq__(self, *args):
        """__eq__(Plane self, Plane plane) -> bool"""
        return _osg.Plane___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Plane self, Plane plane) -> bool"""
        return _osg.Plane___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Plane self, Plane plane) -> bool"""
        return _osg.Plane___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(Plane self) -> osg::Plane::value_type
        ptr(Plane self) -> osg::Plane::value_type const *
        """
        return _osg.Plane_ptr(self, *args)

    def asVec4(self):
        """asVec4(Plane self) -> Vec4d"""
        return _osg.Plane_asVec4(self)

    def getNormal(self):
        """getNormal(Plane self) -> Vec3d"""
        return _osg.Plane_getNormal(self)

    def distance(self, *args):
        """
        distance(Plane self, Vec3f v) -> float
        distance(Plane self, Vec3d v) -> double
        """
        return _osg.Plane_distance(self, *args)

    def dotProductNormal(self, *args):
        """
        dotProductNormal(Plane self, Vec3f v) -> float
        dotProductNormal(Plane self, Vec3d v) -> double
        """
        return _osg.Plane_dotProductNormal(self, *args)

    def intersect(self, *args):
        """
        intersect(Plane self, vectorVec3 vertices) -> int
        intersect(Plane self, vectorVec3d vertices) -> int
        intersect(Plane self, BoundingSpheref bs) -> int
        intersect(Plane self, BoundingBoxf bb) -> int
        """
        return _osg.Plane_intersect(self, *args)

    def transform(self, *args):
        """transform(Plane self, Matrixd matrix)"""
        return _osg.Plane_transform(self, *args)

    def transformProvidingInverse(self, *args):
        """transformProvidingInverse(Plane self, Matrixd matrix)"""
        return _osg.Plane_transformProvidingInverse(self, *args)

    __swig_destroy__ = _osg.delete_Plane
    __del__ = lambda self : None;
Plane_swigregister = _osg.Plane_swigregister
Plane_swigregister(Plane)

OSG_POLYTOPE = _osg.OSG_POLYTOPE
class Polytope(_object):
    """Proxy of C++ osg::Polytope class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polytope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polytope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Polytope self) -> Polytope
        __init__(osg::Polytope self, Polytope cv) -> Polytope
        __init__(osg::Polytope self, osg::Polytope::PlaneList const & pl) -> Polytope
        """
        this = _osg.new_Polytope(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Polytope
    __del__ = lambda self : None;
    def clear(self):
        """clear(Polytope self)"""
        return _osg.Polytope_clear(self)

    def setToUnitFrustum(self, withNear=True, withFar=True):
        """
        setToUnitFrustum(Polytope self, bool withNear=True, bool withFar=True)
        setToUnitFrustum(Polytope self, bool withNear=True)
        setToUnitFrustum(Polytope self)
        """
        return _osg.Polytope_setToUnitFrustum(self, withNear, withFar)

    def setToBoundingBox(self, *args):
        """setToBoundingBox(Polytope self, BoundingBoxf bb)"""
        return _osg.Polytope_setToBoundingBox(self, *args)

    def setAndTransformProvidingInverse(self, *args):
        """setAndTransformProvidingInverse(Polytope self, Polytope pt, Matrixd matrix)"""
        return _osg.Polytope_setAndTransformProvidingInverse(self, *args)

    def set(self, *args):
        """set(Polytope self, osg::Polytope::PlaneList const & pl)"""
        return _osg.Polytope_set(self, *args)

    def add(self, *args):
        """add(Polytope self, Plane pl)"""
        return _osg.Polytope_add(self, *args)

    def flip(self):
        """flip(Polytope self)"""
        return _osg.Polytope_flip(self)

    def empty(self):
        """empty(Polytope self) -> bool"""
        return _osg.Polytope_empty(self)

    def getPlaneList(self, *args):
        """
        getPlaneList(Polytope self) -> osg::Polytope::PlaneList
        getPlaneList(Polytope self) -> osg::Polytope::PlaneList const &
        """
        return _osg.Polytope_getPlaneList(self, *args)

    def setReferenceVertexList(self, *args):
        """setReferenceVertexList(Polytope self, vectorVec3 vertices)"""
        return _osg.Polytope_setReferenceVertexList(self, *args)

    def getReferenceVertexList(self, *args):
        """
        getReferenceVertexList(Polytope self) -> vectorVec3
        getReferenceVertexList(Polytope self) -> vectorVec3
        """
        return _osg.Polytope_getReferenceVertexList(self, *args)

    def setupMask(self):
        """setupMask(Polytope self)"""
        return _osg.Polytope_setupMask(self)

    def getCurrentMask(self, *args):
        """
        getCurrentMask(Polytope self) -> osg::Polytope::ClippingMask
        getCurrentMask(Polytope self) -> osg::Polytope::ClippingMask
        """
        return _osg.Polytope_getCurrentMask(self, *args)

    def setResultMask(self, *args):
        """setResultMask(Polytope self, osg::Polytope::ClippingMask mask)"""
        return _osg.Polytope_setResultMask(self, *args)

    def getResultMask(self):
        """getResultMask(Polytope self) -> osg::Polytope::ClippingMask"""
        return _osg.Polytope_getResultMask(self)

    def getMaskStack(self, *args):
        """
        getMaskStack(Polytope self) -> osg::Polytope::MaskStack
        getMaskStack(Polytope self) -> osg::Polytope::MaskStack const &
        """
        return _osg.Polytope_getMaskStack(self, *args)

    def pushCurrentMask(self):
        """pushCurrentMask(Polytope self)"""
        return _osg.Polytope_pushCurrentMask(self)

    def popCurrentMask(self):
        """popCurrentMask(Polytope self)"""
        return _osg.Polytope_popCurrentMask(self)

    def contains(self, *args):
        """
        contains(Polytope self, Vec3f v) -> bool
        contains(Polytope self, vectorVec3 vertices) -> bool
        contains(Polytope self, BoundingSpheref bs) -> bool
        contains(Polytope self, BoundingBoxf bb) -> bool
        """
        return _osg.Polytope_contains(self, *args)

    def containsAllOf(self, *args):
        """
        containsAllOf(Polytope self, vectorVec3 vertices) -> bool
        containsAllOf(Polytope self, BoundingSpheref bs) -> bool
        containsAllOf(Polytope self, BoundingBoxf bb) -> bool
        """
        return _osg.Polytope_containsAllOf(self, *args)

    def transform(self, *args):
        """transform(Polytope self, Matrixd matrix)"""
        return _osg.Polytope_transform(self, *args)

    def transformProvidingInverse(self, *args):
        """transformProvidingInverse(Polytope self, Matrixd matrix)"""
        return _osg.Polytope_transformProvidingInverse(self, *args)

Polytope_swigregister = _osg.Polytope_swigregister
Polytope_swigregister(Polytope)

class vectorStateSet(_object):
    """Proxy of C++ std::vector<(p.osg::StateSet)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorStateSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorStateSet, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorStateSet self) -> SwigPyIterator"""
        return _osg.vectorStateSet_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorStateSet self) -> bool"""
        return _osg.vectorStateSet___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorStateSet self) -> bool"""
        return _osg.vectorStateSet___bool__(self)

    def __len__(self):
        """__len__(vectorStateSet self) -> std::vector< osg::StateSet * >::size_type"""
        return _osg.vectorStateSet___len__(self)

    def pop(self):
        """pop(vectorStateSet self) -> StateSet"""
        return _osg.vectorStateSet_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorStateSet self, std::vector< osg::StateSet * >::difference_type i, std::vector< osg::StateSet * >::difference_type j) -> vectorStateSet"""
        return _osg.vectorStateSet___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorStateSet self, std::vector< osg::StateSet * >::difference_type i, std::vector< osg::StateSet * >::difference_type j, 
            vectorStateSet v=std::vector< osg::StateSet *,std::allocator< osg::StateSet * > >())
        __setslice__(vectorStateSet self, std::vector< osg::StateSet * >::difference_type i, std::vector< osg::StateSet * >::difference_type j)
        """
        return _osg.vectorStateSet___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorStateSet self, std::vector< osg::StateSet * >::difference_type i, std::vector< osg::StateSet * >::difference_type j)"""
        return _osg.vectorStateSet___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorStateSet self, std::vector< osg::StateSet * >::difference_type i)
        __delitem__(vectorStateSet self, PySliceObject * slice)
        """
        return _osg.vectorStateSet___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorStateSet self, PySliceObject * slice) -> vectorStateSet
        __getitem__(vectorStateSet self, std::vector< osg::StateSet * >::difference_type i) -> StateSet
        """
        return _osg.vectorStateSet___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorStateSet self, PySliceObject * slice, vectorStateSet v)
        __setitem__(vectorStateSet self, PySliceObject * slice)
        __setitem__(vectorStateSet self, std::vector< osg::StateSet * >::difference_type i, StateSet x)
        """
        return _osg.vectorStateSet___setitem__(self, *args)

    def append(self, *args):
        """append(vectorStateSet self, StateSet x)"""
        return _osg.vectorStateSet_append(self, *args)

    def empty(self):
        """empty(vectorStateSet self) -> bool"""
        return _osg.vectorStateSet_empty(self)

    def size(self):
        """size(vectorStateSet self) -> std::vector< osg::StateSet * >::size_type"""
        return _osg.vectorStateSet_size(self)

    def clear(self):
        """clear(vectorStateSet self)"""
        return _osg.vectorStateSet_clear(self)

    def swap(self, *args):
        """swap(vectorStateSet self, vectorStateSet v)"""
        return _osg.vectorStateSet_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorStateSet self) -> std::vector< osg::StateSet * >::allocator_type"""
        return _osg.vectorStateSet_get_allocator(self)

    def begin(self):
        """begin(vectorStateSet self) -> std::vector< osg::StateSet * >::iterator"""
        return _osg.vectorStateSet_begin(self)

    def end(self):
        """end(vectorStateSet self) -> std::vector< osg::StateSet * >::iterator"""
        return _osg.vectorStateSet_end(self)

    def rbegin(self):
        """rbegin(vectorStateSet self) -> std::vector< osg::StateSet * >::reverse_iterator"""
        return _osg.vectorStateSet_rbegin(self)

    def rend(self):
        """rend(vectorStateSet self) -> std::vector< osg::StateSet * >::reverse_iterator"""
        return _osg.vectorStateSet_rend(self)

    def pop_back(self):
        """pop_back(vectorStateSet self)"""
        return _osg.vectorStateSet_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorStateSet self, std::vector< osg::StateSet * >::iterator pos) -> std::vector< osg::StateSet * >::iterator
        erase(vectorStateSet self, std::vector< osg::StateSet * >::iterator first, std::vector< osg::StateSet * >::iterator last) -> std::vector< osg::StateSet * >::iterator
        """
        return _osg.vectorStateSet_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.osg::StateSet)> self) -> vectorStateSet
        __init__(std::vector<(p.osg::StateSet)> self, vectorStateSet arg2) -> vectorStateSet
        __init__(std::vector<(p.osg::StateSet)> self, std::vector< osg::StateSet * >::size_type size) -> vectorStateSet
        __init__(std::vector<(p.osg::StateSet)> self, std::vector< osg::StateSet * >::size_type size, StateSet value) -> vectorStateSet
        """
        this = _osg.new_vectorStateSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorStateSet self, StateSet x)"""
        return _osg.vectorStateSet_push_back(self, *args)

    def front(self):
        """front(vectorStateSet self) -> StateSet"""
        return _osg.vectorStateSet_front(self)

    def back(self):
        """back(vectorStateSet self) -> StateSet"""
        return _osg.vectorStateSet_back(self)

    def assign(self, *args):
        """assign(vectorStateSet self, std::vector< osg::StateSet * >::size_type n, StateSet x)"""
        return _osg.vectorStateSet_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorStateSet self, std::vector< osg::StateSet * >::size_type new_size)
        resize(vectorStateSet self, std::vector< osg::StateSet * >::size_type new_size, StateSet x)
        """
        return _osg.vectorStateSet_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorStateSet self, std::vector< osg::StateSet * >::iterator pos, StateSet x) -> std::vector< osg::StateSet * >::iterator
        insert(vectorStateSet self, std::vector< osg::StateSet * >::iterator pos, std::vector< osg::StateSet * >::size_type n, 
            StateSet x)
        """
        return _osg.vectorStateSet_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorStateSet self, std::vector< osg::StateSet * >::size_type n)"""
        return _osg.vectorStateSet_reserve(self, *args)

    def capacity(self):
        """capacity(vectorStateSet self) -> std::vector< osg::StateSet * >::size_type"""
        return _osg.vectorStateSet_capacity(self)

    __swig_destroy__ = _osg.delete_vectorStateSet
    __del__ = lambda self : None;
vectorStateSet_swigregister = _osg.vectorStateSet_swigregister
vectorStateSet_swigregister(vectorStateSet)

class refStateAttribute(_object):
    """Proxy of C++ osg::ref_ptr<(osg::StateAttribute)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, refStateAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, refStateAttribute, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::StateAttribute)> self) -> refStateAttribute
        __init__(osg::ref_ptr<(osg::StateAttribute)> self, StateAttribute ptr) -> refStateAttribute
        __init__(osg::ref_ptr<(osg::StateAttribute)> self, refStateAttribute rp) -> refStateAttribute
        __init__(osg::ref_ptr<(osg::StateAttribute)> self, osg::observer_ptr< osg::StateAttribute > & optr) -> refStateAttribute
        """
        this = _osg.new_refStateAttribute(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_refStateAttribute
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(refStateAttribute self) -> StateAttribute"""
        return _osg.refStateAttribute___ref__(self)

    def __deref__(self):
        """__deref__(refStateAttribute self) -> StateAttribute"""
        return _osg.refStateAttribute___deref__(self)

    def get(self):
        """get(refStateAttribute self) -> StateAttribute"""
        return _osg.refStateAttribute_get(self)

    def valid(self):
        """valid(refStateAttribute self) -> bool"""
        return _osg.refStateAttribute_valid(self)

    def release(self):
        """release(refStateAttribute self) -> StateAttribute"""
        return _osg.refStateAttribute_release(self)

    def swap(self, *args):
        """swap(refStateAttribute self, refStateAttribute rp)"""
        return _osg.refStateAttribute_swap(self, *args)

    def cloneType(self):
        """cloneType(refStateAttribute self) -> Object"""
        return _osg.refStateAttribute_cloneType(self)

    def clone(self, *args):
        """clone(refStateAttribute self, CopyOp arg2) -> Object"""
        return _osg.refStateAttribute_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(refStateAttribute self, Object obj) -> bool"""
        return _osg.refStateAttribute_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(refStateAttribute self) -> char const *"""
        return _osg.refStateAttribute_libraryName(self)

    def className(self):
        """className(refStateAttribute self) -> char const *"""
        return _osg.refStateAttribute_className(self)

    def asTexture(self, *args):
        """
        asTexture(refStateAttribute self) -> Texture
        asTexture(refStateAttribute self) -> Texture
        """
        return _osg.refStateAttribute_asTexture(self, *args)

    def getType(self):
        """getType(refStateAttribute self) -> osg::StateAttribute::Type"""
        return _osg.refStateAttribute_getType(self)

    def getMember(self):
        """getMember(refStateAttribute self) -> unsigned int"""
        return _osg.refStateAttribute_getMember(self)

    def getTypeMemberPair(self):
        """getTypeMemberPair(refStateAttribute self) -> osg::StateAttribute::TypeMemberPair"""
        return _osg.refStateAttribute_getTypeMemberPair(self)

    def isTextureAttribute(self):
        """isTextureAttribute(refStateAttribute self) -> bool"""
        return _osg.refStateAttribute_isTextureAttribute(self)

    def compare(self, *args):
        """compare(refStateAttribute self, StateAttribute sa) -> int"""
        return _osg.refStateAttribute_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(refStateAttribute self, StateAttribute rhs) -> bool"""
        return _osg.refStateAttribute___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(refStateAttribute self, StateAttribute rhs) -> bool"""
        return _osg.refStateAttribute___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(refStateAttribute self, StateAttribute rhs) -> bool"""
        return _osg.refStateAttribute___ne__(self, *args)

    def getParents(self):
        """getParents(refStateAttribute self) -> vectorStateSet"""
        return _osg.refStateAttribute_getParents(self)

    def getParent(self, *args):
        """
        getParent(refStateAttribute self, unsigned int i) -> StateSet
        getParent(refStateAttribute self, unsigned int i) -> StateSet
        """
        return _osg.refStateAttribute_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(refStateAttribute self) -> unsigned int"""
        return _osg.refStateAttribute_getNumParents(self)

    def setShaderComponent(self, *args):
        """setShaderComponent(refStateAttribute self, ShaderComponent sc)"""
        return _osg.refStateAttribute_setShaderComponent(self, *args)

    def getShaderComponent(self, *args):
        """
        getShaderComponent(refStateAttribute self) -> ShaderComponent
        getShaderComponent(refStateAttribute self) -> ShaderComponent
        """
        return _osg.refStateAttribute_getShaderComponent(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(refStateAttribute self, State arg2) -> bool"""
        return _osg.refStateAttribute_checkValidityOfAssociatedModes(self, *args)

    def apply(self, *args):
        """apply(refStateAttribute self, State arg2)"""
        return _osg.refStateAttribute_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(refStateAttribute self, State arg2)"""
        return _osg.refStateAttribute_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(refStateAttribute self, unsigned int arg2)"""
        return _osg.refStateAttribute_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(refStateAttribute self, State arg2=None)
        releaseGLObjects(refStateAttribute self)
        """
        return _osg.refStateAttribute_releaseGLObjects(self, arg2)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(refStateAttribute self, bool threadSafe)"""
        return _osg.refStateAttribute_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(refStateAttribute self, std::string const & name)
        setName(refStateAttribute self, char const * name)
        """
        return _osg.refStateAttribute_setName(self, *args)

    def getName(self):
        """getName(refStateAttribute self) -> std::string const &"""
        return _osg.refStateAttribute_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(refStateAttribute self, osg::Object::DataVariance dv)"""
        return _osg.refStateAttribute_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(refStateAttribute self) -> osg::Object::DataVariance"""
        return _osg.refStateAttribute_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(refStateAttribute self)"""
        return _osg.refStateAttribute_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(refStateAttribute self, osg::UserDataContainer * udc)"""
        return _osg.refStateAttribute_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(refStateAttribute self) -> osg::UserDataContainer
        getUserDataContainer(refStateAttribute self) -> osg::UserDataContainer const *
        """
        return _osg.refStateAttribute_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(refStateAttribute self) -> osg::UserDataContainer *"""
        return _osg.refStateAttribute_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(refStateAttribute self, Referenced obj)"""
        return _osg.refStateAttribute_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(refStateAttribute self) -> Referenced
        getUserData(refStateAttribute self) -> Referenced
        """
        return _osg.refStateAttribute_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(refStateAttribute self) -> bool"""
        return _osg.refStateAttribute_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(refStateAttribute self) -> OpenThreads::Mutex *"""
        return _osg.refStateAttribute_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(refStateAttribute self) -> OpenThreads::Mutex *"""
        return _osg.refStateAttribute_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(refStateAttribute self) -> int"""
        return _osg.refStateAttribute_ref(self)

    def unref(self):
        """unref(refStateAttribute self) -> int"""
        return _osg.refStateAttribute_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(refStateAttribute self) -> int"""
        return _osg.refStateAttribute_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(refStateAttribute self) -> int"""
        return _osg.refStateAttribute_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(refStateAttribute self) -> osg::ObserverSet *"""
        return _osg.refStateAttribute_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(refStateAttribute self) -> osg::ObserverSet *"""
        return _osg.refStateAttribute_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(refStateAttribute self, osg::Observer * observer)"""
        return _osg.refStateAttribute_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(refStateAttribute self, osg::Observer * observer)"""
        return _osg.refStateAttribute_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(refStateAttribute self, bool enableThreadSafeReferenceCounting)"""
        return _osg.refStateAttribute_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(refStateAttribute self) -> bool"""
        return _osg.refStateAttribute_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(refStateAttribute self, DeleteHandler handler)"""
        return _osg.refStateAttribute_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(refStateAttribute self) -> DeleteHandler"""
        return _osg.refStateAttribute_getDeleteHandler(self)

refStateAttribute_swigregister = _osg.refStateAttribute_swigregister
refStateAttribute_swigregister(refStateAttribute)

OSG_FRAMESTAMP = _osg.OSG_FRAMESTAMP
class FrameStamp(Referenced):
    """Proxy of C++ osg::FrameStamp class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameStamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameStamp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::FrameStamp self) -> FrameStamp
        __init__(osg::FrameStamp self, FrameStamp fs) -> FrameStamp
        """
        this = _osg.new_FrameStamp(*args)
        try: self.this.append(this)
        except: self.this = this
    def setFrameNumber(self, *args):
        """setFrameNumber(FrameStamp self, unsigned int fnum)"""
        return _osg.FrameStamp_setFrameNumber(self, *args)

    def getFrameNumber(self):
        """getFrameNumber(FrameStamp self) -> unsigned int"""
        return _osg.FrameStamp_getFrameNumber(self)

    def setReferenceTime(self, *args):
        """setReferenceTime(FrameStamp self, double refTime)"""
        return _osg.FrameStamp_setReferenceTime(self, *args)

    def getReferenceTime(self):
        """getReferenceTime(FrameStamp self) -> double"""
        return _osg.FrameStamp_getReferenceTime(self)

    def setSimulationTime(self, *args):
        """setSimulationTime(FrameStamp self, double refTime)"""
        return _osg.FrameStamp_setSimulationTime(self, *args)

    def getSimulationTime(self):
        """getSimulationTime(FrameStamp self) -> double"""
        return _osg.FrameStamp_getSimulationTime(self)

    def setCalendarTime(self, *args):
        """setCalendarTime(FrameStamp self, tm const & calendarTime)"""
        return _osg.FrameStamp_setCalendarTime(self, *args)

    def getCalendarTime(self, *args):
        """getCalendarTime(FrameStamp self, tm & calendarTime)"""
        return _osg.FrameStamp_getCalendarTime(self, *args)

    __swig_destroy__ = _osg.delete_FrameStamp
    __del__ = lambda self : None;
FrameStamp_swigregister = _osg.FrameStamp_swigregister
FrameStamp_swigregister(FrameStamp)

OSG_STATESET = _osg.OSG_STATESET
GL_RESCALE_NORMAL = _osg.GL_RESCALE_NORMAL
class StateSet(Object):
    """Proxy of C++ osg::StateSet class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateSet, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::StateSet self) -> StateSet
        __init__(osg::StateSet self, StateSet arg2, CopyOp copyop=SHALLOW_COPY) -> StateSet
        __init__(osg::StateSet self, StateSet arg2) -> StateSet
        """
        this = _osg.new_StateSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(StateSet self) -> Object"""
        return _osg.StateSet_cloneType(self)

    def clone(self, *args):
        """clone(StateSet self, CopyOp copyop) -> Object"""
        return _osg.StateSet_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(StateSet self, Object obj) -> bool"""
        return _osg.StateSet_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(StateSet self) -> char const *"""
        return _osg.StateSet_libraryName(self)

    def className(self):
        """className(StateSet self) -> char const *"""
        return _osg.StateSet_className(self)

    def compare(self, *args):
        """
        compare(StateSet self, StateSet rhs, bool compareAttributeContents=False) -> int
        compare(StateSet self, StateSet rhs) -> int
        """
        return _osg.StateSet_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(StateSet self, StateSet rhs) -> bool"""
        return _osg.StateSet___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(StateSet self, StateSet rhs) -> bool"""
        return _osg.StateSet___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StateSet self, StateSet rhs) -> bool"""
        return _osg.StateSet___ne__(self, *args)

    def getParents(self, *args):
        """
        getParents(StateSet self) -> osg::StateSet::ParentList const
        getParents(StateSet self) -> osg::StateSet::ParentList
        """
        return _osg.StateSet_getParents(self, *args)

    def getParent(self, *args):
        """
        getParent(StateSet self, unsigned int i) -> Object
        getParent(StateSet self, unsigned int i) -> Object
        """
        return _osg.StateSet_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(StateSet self) -> unsigned int"""
        return _osg.StateSet_getNumParents(self)

    def computeDataVariance(self):
        """computeDataVariance(StateSet self)"""
        return _osg.StateSet_computeDataVariance(self)

    def setGlobalDefaults(self):
        """setGlobalDefaults(StateSet self)"""
        return _osg.StateSet_setGlobalDefaults(self)

    def clear(self):
        """clear(StateSet self)"""
        return _osg.StateSet_clear(self)

    def merge(self, *args):
        """merge(StateSet self, StateSet rhs)"""
        return _osg.StateSet_merge(self, *args)

    def setMode(self, *args):
        """setMode(StateSet self, osg::StateAttribute::GLMode mode, osg::StateAttribute::GLModeValue value)"""
        return _osg.StateSet_setMode(self, *args)

    def removeMode(self, *args):
        """removeMode(StateSet self, osg::StateAttribute::GLMode mode)"""
        return _osg.StateSet_removeMode(self, *args)

    def getMode(self, *args):
        """getMode(StateSet self, osg::StateAttribute::GLMode mode) -> osg::StateAttribute::GLModeValue"""
        return _osg.StateSet_getMode(self, *args)

    def setModeList(self, *args):
        """setModeList(StateSet self, osg::StateSet::ModeList & ml)"""
        return _osg.StateSet_setModeList(self, *args)

    def getModeList(self, *args):
        """
        getModeList(StateSet self) -> osg::StateSet::ModeList
        getModeList(StateSet self) -> osg::StateSet::ModeList const &
        """
        return _osg.StateSet_getModeList(self, *args)

    def setAttribute(self, *args):
        """
        setAttribute(StateSet self, StateAttribute attribute, osg::StateAttribute::OverrideValue value=OFF)
        setAttribute(StateSet self, StateAttribute attribute)
        """
        return _osg.StateSet_setAttribute(self, *args)

    def setAttributeAndModes(self, *args):
        """
        setAttributeAndModes(StateSet self, StateAttribute attribute, osg::StateAttribute::GLModeValue value=ON)
        setAttributeAndModes(StateSet self, StateAttribute attribute)
        """
        return _osg.StateSet_setAttributeAndModes(self, *args)

    def removeAttribute(self, *args):
        """
        removeAttribute(StateSet self, osg::StateAttribute::Type type, unsigned int member=0)
        removeAttribute(StateSet self, osg::StateAttribute::Type type)
        removeAttribute(StateSet self, StateAttribute attribute)
        """
        return _osg.StateSet_removeAttribute(self, *args)

    def getAttribute(self, *args):
        """
        getAttribute(StateSet self, osg::StateAttribute::Type type, unsigned int member=0) -> StateAttribute
        getAttribute(StateSet self, osg::StateAttribute::Type type) -> StateAttribute
        getAttribute(StateSet self, osg::StateAttribute::Type type, unsigned int member=0) -> StateAttribute
        getAttribute(StateSet self, osg::StateAttribute::Type type) -> StateAttribute
        """
        return _osg.StateSet_getAttribute(self, *args)

    def getAttributePair(self, *args):
        """
        getAttributePair(StateSet self, osg::StateAttribute::Type type, unsigned int member=0) -> osg::StateSet::RefAttributePair const
        getAttributePair(StateSet self, osg::StateAttribute::Type type) -> osg::StateSet::RefAttributePair const *
        """
        return _osg.StateSet_getAttributePair(self, *args)

    def setAttributeList(self, *args):
        """setAttributeList(StateSet self, osg::StateSet::AttributeList & al)"""
        return _osg.StateSet_setAttributeList(self, *args)

    def getAttributeList(self, *args):
        """
        getAttributeList(StateSet self) -> osg::StateSet::AttributeList
        getAttributeList(StateSet self) -> osg::StateSet::AttributeList const &
        """
        return _osg.StateSet_getAttributeList(self, *args)

    def setTextureMode(self, *args):
        """setTextureMode(StateSet self, unsigned int unit, osg::StateAttribute::GLMode mode, osg::StateAttribute::GLModeValue value)"""
        return _osg.StateSet_setTextureMode(self, *args)

    def removeTextureMode(self, *args):
        """removeTextureMode(StateSet self, unsigned int unit, osg::StateAttribute::GLMode mode)"""
        return _osg.StateSet_removeTextureMode(self, *args)

    def getTextureMode(self, *args):
        """getTextureMode(StateSet self, unsigned int unit, osg::StateAttribute::GLMode mode) -> osg::StateAttribute::GLModeValue"""
        return _osg.StateSet_getTextureMode(self, *args)

    def setTextureModeList(self, *args):
        """setTextureModeList(StateSet self, osg::StateSet::TextureModeList & tml)"""
        return _osg.StateSet_setTextureModeList(self, *args)

    def getTextureModeList(self, *args):
        """
        getTextureModeList(StateSet self) -> osg::StateSet::TextureModeList
        getTextureModeList(StateSet self) -> osg::StateSet::TextureModeList const &
        """
        return _osg.StateSet_getTextureModeList(self, *args)

    def getNumTextureModeLists(self):
        """getNumTextureModeLists(StateSet self) -> unsigned int"""
        return _osg.StateSet_getNumTextureModeLists(self)

    def setTextureAttribute(self, *args):
        """
        setTextureAttribute(StateSet self, unsigned int unit, StateAttribute attribute, osg::StateAttribute::OverrideValue value=OFF)
        setTextureAttribute(StateSet self, unsigned int unit, StateAttribute attribute)
        """
        return _osg.StateSet_setTextureAttribute(self, *args)

    def setTextureAttributeAndModes(self, *args):
        """
        setTextureAttributeAndModes(StateSet self, unsigned int unit, StateAttribute attribute, osg::StateAttribute::GLModeValue value=ON)
        setTextureAttributeAndModes(StateSet self, unsigned int unit, StateAttribute attribute)
        """
        return _osg.StateSet_setTextureAttributeAndModes(self, *args)

    def removeTextureAttribute(self, *args):
        """
        removeTextureAttribute(StateSet self, unsigned int unit, osg::StateAttribute::Type type)
        removeTextureAttribute(StateSet self, unsigned int unit, StateAttribute attribute)
        """
        return _osg.StateSet_removeTextureAttribute(self, *args)

    def getTextureAttribute(self, *args):
        """
        getTextureAttribute(StateSet self, unsigned int unit, osg::StateAttribute::Type type) -> StateAttribute
        getTextureAttribute(StateSet self, unsigned int unit, osg::StateAttribute::Type type) -> StateAttribute
        """
        return _osg.StateSet_getTextureAttribute(self, *args)

    def getTextureAttributePair(self, *args):
        """getTextureAttributePair(StateSet self, unsigned int unit, osg::StateAttribute::Type type) -> osg::StateSet::RefAttributePair const *"""
        return _osg.StateSet_getTextureAttributePair(self, *args)

    def setTextureAttributeList(self, *args):
        """setTextureAttributeList(StateSet self, osg::StateSet::TextureAttributeList & tal)"""
        return _osg.StateSet_setTextureAttributeList(self, *args)

    def getTextureAttributeList(self, *args):
        """
        getTextureAttributeList(StateSet self) -> osg::StateSet::TextureAttributeList
        getTextureAttributeList(StateSet self) -> osg::StateSet::TextureAttributeList const &
        """
        return _osg.StateSet_getTextureAttributeList(self, *args)

    def getNumTextureAttributeLists(self):
        """getNumTextureAttributeLists(StateSet self) -> unsigned int"""
        return _osg.StateSet_getNumTextureAttributeLists(self)

    def setAssociatedModes(self, *args):
        """setAssociatedModes(StateSet self, StateAttribute attribute, osg::StateAttribute::GLModeValue value)"""
        return _osg.StateSet_setAssociatedModes(self, *args)

    def removeAssociatedModes(self, *args):
        """removeAssociatedModes(StateSet self, StateAttribute attribute)"""
        return _osg.StateSet_removeAssociatedModes(self, *args)

    def setAssociatedTextureModes(self, *args):
        """setAssociatedTextureModes(StateSet self, unsigned int unit, StateAttribute attribute, osg::StateAttribute::GLModeValue value)"""
        return _osg.StateSet_setAssociatedTextureModes(self, *args)

    def removeAssociatedTextureModes(self, *args):
        """removeAssociatedTextureModes(StateSet self, unsigned int unit, StateAttribute attribute)"""
        return _osg.StateSet_removeAssociatedTextureModes(self, *args)

    def addUniform(self, *args):
        """
        addUniform(StateSet self, Uniform uniform, osg::StateAttribute::OverrideValue value=ON)
        addUniform(StateSet self, Uniform uniform)
        """
        return _osg.StateSet_addUniform(self, *args)

    def removeUniform(self, *args):
        """
        removeUniform(StateSet self, std::string const & name)
        removeUniform(StateSet self, Uniform uniform)
        """
        return _osg.StateSet_removeUniform(self, *args)

    def getOrCreateUniform(self, *args):
        """
        getOrCreateUniform(StateSet self, std::string const & name, osg::Uniform::Type type, unsigned int numElements=1) -> Uniform
        getOrCreateUniform(StateSet self, std::string const & name, osg::Uniform::Type type) -> Uniform
        """
        return _osg.StateSet_getOrCreateUniform(self, *args)

    def getUniform(self, *args):
        """
        getUniform(StateSet self, std::string const & name) -> Uniform
        getUniform(StateSet self, std::string const & name) -> Uniform
        """
        return _osg.StateSet_getUniform(self, *args)

    def getUniformPair(self, *args):
        """getUniformPair(StateSet self, std::string const & name) -> osg::StateSet::RefUniformPair const *"""
        return _osg.StateSet_getUniformPair(self, *args)

    def setUniformList(self, *args):
        """setUniformList(StateSet self, osg::StateSet::UniformList & al)"""
        return _osg.StateSet_setUniformList(self, *args)

    def getUniformList(self, *args):
        """
        getUniformList(StateSet self) -> osg::StateSet::UniformList
        getUniformList(StateSet self) -> osg::StateSet::UniformList const &
        """
        return _osg.StateSet_getUniformList(self, *args)

    DEFAULT_BIN = _osg.StateSet_DEFAULT_BIN
    OPAQUE_BIN = _osg.StateSet_OPAQUE_BIN
    TRANSPARENT_BIN = _osg.StateSet_TRANSPARENT_BIN
    def setRenderingHint(self, *args):
        """setRenderingHint(StateSet self, int hint)"""
        return _osg.StateSet_setRenderingHint(self, *args)

    def getRenderingHint(self):
        """getRenderingHint(StateSet self) -> int"""
        return _osg.StateSet_getRenderingHint(self)

    INHERIT_RENDERBIN_DETAILS = _osg.StateSet_INHERIT_RENDERBIN_DETAILS
    USE_RENDERBIN_DETAILS = _osg.StateSet_USE_RENDERBIN_DETAILS
    OVERRIDE_RENDERBIN_DETAILS = _osg.StateSet_OVERRIDE_RENDERBIN_DETAILS
    def setRenderBinDetails(self, *args):
        """
        setRenderBinDetails(StateSet self, int binNum, std::string const & binName, osg::StateSet::RenderBinMode mode=USE_RENDERBIN_DETAILS)
        setRenderBinDetails(StateSet self, int binNum, std::string const & binName)
        """
        return _osg.StateSet_setRenderBinDetails(self, *args)

    def setRenderBinToInherit(self):
        """setRenderBinToInherit(StateSet self)"""
        return _osg.StateSet_setRenderBinToInherit(self)

    def useRenderBinDetails(self):
        """useRenderBinDetails(StateSet self) -> bool"""
        return _osg.StateSet_useRenderBinDetails(self)

    def setRenderBinMode(self, *args):
        """setRenderBinMode(StateSet self, osg::StateSet::RenderBinMode mode)"""
        return _osg.StateSet_setRenderBinMode(self, *args)

    def getRenderBinMode(self):
        """getRenderBinMode(StateSet self) -> osg::StateSet::RenderBinMode"""
        return _osg.StateSet_getRenderBinMode(self)

    def setBinNumber(self, *args):
        """setBinNumber(StateSet self, int num)"""
        return _osg.StateSet_setBinNumber(self, *args)

    def getBinNumber(self):
        """getBinNumber(StateSet self) -> int"""
        return _osg.StateSet_getBinNumber(self)

    def setBinName(self, *args):
        """setBinName(StateSet self, std::string const & name)"""
        return _osg.StateSet_setBinName(self, *args)

    def getBinName(self):
        """getBinName(StateSet self) -> std::string const &"""
        return _osg.StateSet_getBinName(self)

    def setNestRenderBins(self, *args):
        """setNestRenderBins(StateSet self, bool val)"""
        return _osg.StateSet_setNestRenderBins(self, *args)

    def getNestRenderBins(self):
        """getNestRenderBins(StateSet self) -> bool"""
        return _osg.StateSet_getNestRenderBins(self)

    def requiresUpdateTraversal(self):
        """requiresUpdateTraversal(StateSet self) -> bool"""
        return _osg.StateSet_requiresUpdateTraversal(self)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(StateSet self) -> unsigned int"""
        return _osg.StateSet_getNumChildrenRequiringUpdateTraversal(self)

    def runUpdateCallbacks(self, *args):
        """runUpdateCallbacks(StateSet self, NodeVisitor nv)"""
        return _osg.StateSet_runUpdateCallbacks(self, *args)

    def requiresEventTraversal(self):
        """requiresEventTraversal(StateSet self) -> bool"""
        return _osg.StateSet_requiresEventTraversal(self)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(StateSet self) -> unsigned int"""
        return _osg.StateSet_getNumChildrenRequiringEventTraversal(self)

    def runEventCallbacks(self, *args):
        """runEventCallbacks(StateSet self, NodeVisitor nv)"""
        return _osg.StateSet_runEventCallbacks(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(StateSet self, State state) -> bool"""
        return _osg.StateSet_checkValidityOfAssociatedModes(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(StateSet self, bool threadSafe)"""
        return _osg.StateSet_setThreadSafeRefUnref(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(StateSet self, State state)"""
        return _osg.StateSet_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(StateSet self, unsigned int maxSize)"""
        return _osg.StateSet_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(StateSet self, State state=None)
        releaseGLObjects(StateSet self)
        """
        return _osg.StateSet_releaseGLObjects(self, state)

StateSet_swigregister = _osg.StateSet_swigregister
StateSet_swigregister(StateSet)


def isTextureMode(*args):
  """isTextureMode(osg::StateAttribute::GLMode mode) -> bool"""
  return _osg.isTextureMode(*args)
OSG_STATEATTRIBUTE = _osg.OSG_STATEATTRIBUTE
GL_COLOR_SUM = _osg.GL_COLOR_SUM
class StateAttribute(Object):
    """Proxy of C++ osg::StateAttribute class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateAttribute, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    OFF = _osg.StateAttribute_OFF
    ON = _osg.StateAttribute_ON
    OVERRIDE = _osg.StateAttribute_OVERRIDE
    PROTECTED = _osg.StateAttribute_PROTECTED
    INHERIT = _osg.StateAttribute_INHERIT
    TEXTURE = _osg.StateAttribute_TEXTURE
    POLYGONMODE = _osg.StateAttribute_POLYGONMODE
    POLYGONOFFSET = _osg.StateAttribute_POLYGONOFFSET
    MATERIAL = _osg.StateAttribute_MATERIAL
    ALPHAFUNC = _osg.StateAttribute_ALPHAFUNC
    ANTIALIAS = _osg.StateAttribute_ANTIALIAS
    COLORTABLE = _osg.StateAttribute_COLORTABLE
    CULLFACE = _osg.StateAttribute_CULLFACE
    FOG = _osg.StateAttribute_FOG
    FRONTFACE = _osg.StateAttribute_FRONTFACE
    LIGHT = _osg.StateAttribute_LIGHT
    POINT = _osg.StateAttribute_POINT
    LINEWIDTH = _osg.StateAttribute_LINEWIDTH
    LINESTIPPLE = _osg.StateAttribute_LINESTIPPLE
    POLYGONSTIPPLE = _osg.StateAttribute_POLYGONSTIPPLE
    SHADEMODEL = _osg.StateAttribute_SHADEMODEL
    TEXENV = _osg.StateAttribute_TEXENV
    TEXENVFILTER = _osg.StateAttribute_TEXENVFILTER
    TEXGEN = _osg.StateAttribute_TEXGEN
    TEXMAT = _osg.StateAttribute_TEXMAT
    LIGHTMODEL = _osg.StateAttribute_LIGHTMODEL
    BLENDFUNC = _osg.StateAttribute_BLENDFUNC
    BLENDEQUATION = _osg.StateAttribute_BLENDEQUATION
    LOGICOP = _osg.StateAttribute_LOGICOP
    STENCIL = _osg.StateAttribute_STENCIL
    COLORMASK = _osg.StateAttribute_COLORMASK
    DEPTH = _osg.StateAttribute_DEPTH
    VIEWPORT = _osg.StateAttribute_VIEWPORT
    SCISSOR = _osg.StateAttribute_SCISSOR
    BLENDCOLOR = _osg.StateAttribute_BLENDCOLOR
    MULTISAMPLE = _osg.StateAttribute_MULTISAMPLE
    CLIPPLANE = _osg.StateAttribute_CLIPPLANE
    COLORMATRIX = _osg.StateAttribute_COLORMATRIX
    VERTEXPROGRAM = _osg.StateAttribute_VERTEXPROGRAM
    FRAGMENTPROGRAM = _osg.StateAttribute_FRAGMENTPROGRAM
    POINTSPRITE = _osg.StateAttribute_POINTSPRITE
    PROGRAM = _osg.StateAttribute_PROGRAM
    CLAMPCOLOR = _osg.StateAttribute_CLAMPCOLOR
    HINT = _osg.StateAttribute_HINT
    SAMPLEMASKI = _osg.StateAttribute_SAMPLEMASKI
    PRIMITIVERESTARTINDEX = _osg.StateAttribute_PRIMITIVERESTARTINDEX
    VALIDATOR = _osg.StateAttribute_VALIDATOR
    VIEWMATRIXEXTRACTOR = _osg.StateAttribute_VIEWMATRIXEXTRACTOR
    OSGNV_PARAMETER_BLOCK = _osg.StateAttribute_OSGNV_PARAMETER_BLOCK
    OSGNVEXT_TEXTURE_SHADER = _osg.StateAttribute_OSGNVEXT_TEXTURE_SHADER
    OSGNVEXT_VERTEX_PROGRAM = _osg.StateAttribute_OSGNVEXT_VERTEX_PROGRAM
    OSGNVEXT_REGISTER_COMBINERS = _osg.StateAttribute_OSGNVEXT_REGISTER_COMBINERS
    OSGNVCG_PROGRAM = _osg.StateAttribute_OSGNVCG_PROGRAM
    OSGNVSLANG_PROGRAM = _osg.StateAttribute_OSGNVSLANG_PROGRAM
    OSGNVPARSE_PROGRAM_PARSER = _osg.StateAttribute_OSGNVPARSE_PROGRAM_PARSER
    UNIFORMBUFFERBINDING = _osg.StateAttribute_UNIFORMBUFFERBINDING
    TRANSFORMFEEDBACKBUFFERBINDING = _osg.StateAttribute_TRANSFORMFEEDBACKBUFFERBINDING
    ATOMICCOUNTERBUFFERBINDING = _osg.StateAttribute_ATOMICCOUNTERBUFFERBINDING
    PATCH_PARAMETER = _osg.StateAttribute_PATCH_PARAMETER
    FRAME_BUFFER_OBJECT = _osg.StateAttribute_FRAME_BUFFER_OBJECT
    def cloneType(self):
        """cloneType(StateAttribute self) -> Object"""
        return _osg.StateAttribute_cloneType(self)

    def clone(self, *args):
        """clone(StateAttribute self, CopyOp arg2) -> Object"""
        return _osg.StateAttribute_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(StateAttribute self, Object obj) -> bool"""
        return _osg.StateAttribute_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(StateAttribute self) -> char const *"""
        return _osg.StateAttribute_libraryName(self)

    def className(self):
        """className(StateAttribute self) -> char const *"""
        return _osg.StateAttribute_className(self)

    def asTexture(self, *args):
        """
        asTexture(StateAttribute self) -> Texture
        asTexture(StateAttribute self) -> Texture
        """
        return _osg.StateAttribute_asTexture(self, *args)

    def getType(self):
        """getType(StateAttribute self) -> osg::StateAttribute::Type"""
        return _osg.StateAttribute_getType(self)

    def getMember(self):
        """getMember(StateAttribute self) -> unsigned int"""
        return _osg.StateAttribute_getMember(self)

    def getTypeMemberPair(self):
        """getTypeMemberPair(StateAttribute self) -> osg::StateAttribute::TypeMemberPair"""
        return _osg.StateAttribute_getTypeMemberPair(self)

    def isTextureAttribute(self):
        """isTextureAttribute(StateAttribute self) -> bool"""
        return _osg.StateAttribute_isTextureAttribute(self)

    def compare(self, *args):
        """compare(StateAttribute self, StateAttribute sa) -> int"""
        return _osg.StateAttribute_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(StateAttribute self, StateAttribute rhs) -> bool"""
        return _osg.StateAttribute___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(StateAttribute self, StateAttribute rhs) -> bool"""
        return _osg.StateAttribute___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(StateAttribute self, StateAttribute rhs) -> bool"""
        return _osg.StateAttribute___ne__(self, *args)

    def getParents(self):
        """getParents(StateAttribute self) -> vectorStateSet"""
        return _osg.StateAttribute_getParents(self)

    def getParent(self, *args):
        """
        getParent(StateAttribute self, unsigned int i) -> StateSet
        getParent(StateAttribute self, unsigned int i) -> StateSet
        """
        return _osg.StateAttribute_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(StateAttribute self) -> unsigned int"""
        return _osg.StateAttribute_getNumParents(self)

    def setShaderComponent(self, *args):
        """setShaderComponent(StateAttribute self, ShaderComponent sc)"""
        return _osg.StateAttribute_setShaderComponent(self, *args)

    def getShaderComponent(self, *args):
        """
        getShaderComponent(StateAttribute self) -> ShaderComponent
        getShaderComponent(StateAttribute self) -> ShaderComponent
        """
        return _osg.StateAttribute_getShaderComponent(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(StateAttribute self, State arg2) -> bool"""
        return _osg.StateAttribute_checkValidityOfAssociatedModes(self, *args)

    def apply(self, *args):
        """apply(StateAttribute self, State arg2)"""
        return _osg.StateAttribute_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(StateAttribute self, State arg2)"""
        return _osg.StateAttribute_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(StateAttribute self, unsigned int arg2)"""
        return _osg.StateAttribute_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(StateAttribute self, State arg2=None)
        releaseGLObjects(StateAttribute self)
        """
        return _osg.StateAttribute_releaseGLObjects(self, arg2)

StateAttribute_swigregister = _osg.StateAttribute_swigregister
StateAttribute_swigregister(StateAttribute)

OSG_POLYGONMODE = _osg.OSG_POLYGONMODE
class PolygonMode(StateAttribute):
    """Proxy of C++ osg::PolygonMode class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolygonMode, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolygonMode, name)
    __repr__ = _swig_repr
    POINT = _osg.PolygonMode_POINT
    LINE = _osg.PolygonMode_LINE
    FILL = _osg.PolygonMode_FILL
    FRONT_AND_BACK = _osg.PolygonMode_FRONT_AND_BACK
    FRONT = _osg.PolygonMode_FRONT
    BACK = _osg.PolygonMode_BACK
    def __init__(self, *args): 
        """
        __init__(osg::PolygonMode self) -> PolygonMode
        __init__(osg::PolygonMode self, osg::PolygonMode::Face face, osg::PolygonMode::Mode mode) -> PolygonMode
        __init__(osg::PolygonMode self, PolygonMode pm, CopyOp copyop=SHALLOW_COPY) -> PolygonMode
        __init__(osg::PolygonMode self, PolygonMode pm) -> PolygonMode
        """
        this = _osg.new_PolygonMode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(PolygonMode self) -> Object"""
        return _osg.PolygonMode_cloneType(self)

    def clone(self, *args):
        """clone(PolygonMode self, CopyOp copyop) -> Object"""
        return _osg.PolygonMode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(PolygonMode self, Object obj) -> bool"""
        return _osg.PolygonMode_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(PolygonMode self) -> char const *"""
        return _osg.PolygonMode_libraryName(self)

    def className(self):
        """className(PolygonMode self) -> char const *"""
        return _osg.PolygonMode_className(self)

    def getType(self):
        """getType(PolygonMode self) -> osg::StateAttribute::Type"""
        return _osg.PolygonMode_getType(self)

    def compare(self, *args):
        """compare(PolygonMode self, StateAttribute sa) -> int"""
        return _osg.PolygonMode_compare(self, *args)

    def setMode(self, *args):
        """setMode(PolygonMode self, osg::PolygonMode::Face face, osg::PolygonMode::Mode mode)"""
        return _osg.PolygonMode_setMode(self, *args)

    def getMode(self, *args):
        """getMode(PolygonMode self, osg::PolygonMode::Face face) -> osg::PolygonMode::Mode"""
        return _osg.PolygonMode_getMode(self, *args)

    def getFrontAndBack(self):
        """getFrontAndBack(PolygonMode self) -> bool"""
        return _osg.PolygonMode_getFrontAndBack(self)

    def apply(self, *args):
        """apply(PolygonMode self, State state)"""
        return _osg.PolygonMode_apply(self, *args)

PolygonMode_swigregister = _osg.PolygonMode_swigregister
PolygonMode_swigregister(PolygonMode)

OSG_POINT = _osg.OSG_POINT
class Point(StateAttribute):
    """Proxy of C++ osg::Point class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Point self) -> Point
        __init__(osg::Point self, float size) -> Point
        __init__(osg::Point self, Point point, CopyOp copyop=SHALLOW_COPY) -> Point
        __init__(osg::Point self, Point point) -> Point
        """
        this = _osg.new_Point(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Point self) -> Object"""
        return _osg.Point_cloneType(self)

    def clone(self, *args):
        """clone(Point self, CopyOp copyop) -> Object"""
        return _osg.Point_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Point self, Object obj) -> bool"""
        return _osg.Point_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Point self) -> char const *"""
        return _osg.Point_libraryName(self)

    def className(self):
        """className(Point self) -> char const *"""
        return _osg.Point_className(self)

    def getType(self):
        """getType(Point self) -> osg::StateAttribute::Type"""
        return _osg.Point_getType(self)

    def compare(self, *args):
        """compare(Point self, StateAttribute sa) -> int"""
        return _osg.Point_compare(self, *args)

    def setSize(self, *args):
        """setSize(Point self, float size)"""
        return _osg.Point_setSize(self, *args)

    def getSize(self):
        """getSize(Point self) -> float"""
        return _osg.Point_getSize(self)

    def setFadeThresholdSize(self, *args):
        """setFadeThresholdSize(Point self, float fadeThresholdSize)"""
        return _osg.Point_setFadeThresholdSize(self, *args)

    def getFadeThresholdSize(self):
        """getFadeThresholdSize(Point self) -> float"""
        return _osg.Point_getFadeThresholdSize(self)

    def setDistanceAttenuation(self, *args):
        """setDistanceAttenuation(Point self, Vec3f distanceAttenuation)"""
        return _osg.Point_setDistanceAttenuation(self, *args)

    def getDistanceAttenuation(self):
        """getDistanceAttenuation(Point self) -> Vec3f"""
        return _osg.Point_getDistanceAttenuation(self)

    def setMinSize(self, *args):
        """setMinSize(Point self, float minSize)"""
        return _osg.Point_setMinSize(self, *args)

    def getMinSize(self):
        """getMinSize(Point self) -> float"""
        return _osg.Point_getMinSize(self)

    def setMaxSize(self, *args):
        """setMaxSize(Point self, float maxSize)"""
        return _osg.Point_setMaxSize(self, *args)

    def getMaxSize(self):
        """getMaxSize(Point self) -> float"""
        return _osg.Point_getMaxSize(self)

    def apply(self, *args):
        """apply(Point self, State state)"""
        return _osg.Point_apply(self, *args)

Point_swigregister = _osg.Point_swigregister
Point_swigregister(Point)

OSG_POLYGONOFFSET = _osg.OSG_POLYGONOFFSET
class PolygonOffset(StateAttribute):
    """Proxy of C++ osg::PolygonOffset class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolygonOffset, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolygonOffset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::PolygonOffset self) -> PolygonOffset
        __init__(osg::PolygonOffset self, float factor, float units) -> PolygonOffset
        __init__(osg::PolygonOffset self, PolygonOffset po, CopyOp copyop=SHALLOW_COPY) -> PolygonOffset
        __init__(osg::PolygonOffset self, PolygonOffset po) -> PolygonOffset
        """
        this = _osg.new_PolygonOffset(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(PolygonOffset self) -> Object"""
        return _osg.PolygonOffset_cloneType(self)

    def clone(self, *args):
        """clone(PolygonOffset self, CopyOp copyop) -> Object"""
        return _osg.PolygonOffset_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(PolygonOffset self, Object obj) -> bool"""
        return _osg.PolygonOffset_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(PolygonOffset self) -> char const *"""
        return _osg.PolygonOffset_libraryName(self)

    def className(self):
        """className(PolygonOffset self) -> char const *"""
        return _osg.PolygonOffset_className(self)

    def getType(self):
        """getType(PolygonOffset self) -> osg::StateAttribute::Type"""
        return _osg.PolygonOffset_getType(self)

    def compare(self, *args):
        """compare(PolygonOffset self, StateAttribute sa) -> int"""
        return _osg.PolygonOffset_compare(self, *args)

    def setFactor(self, *args):
        """setFactor(PolygonOffset self, float factor)"""
        return _osg.PolygonOffset_setFactor(self, *args)

    def getFactor(self):
        """getFactor(PolygonOffset self) -> float"""
        return _osg.PolygonOffset_getFactor(self)

    def setUnits(self, *args):
        """setUnits(PolygonOffset self, float units)"""
        return _osg.PolygonOffset_setUnits(self, *args)

    def getUnits(self):
        """getUnits(PolygonOffset self) -> float"""
        return _osg.PolygonOffset_getUnits(self)

    def apply(self, *args):
        """apply(PolygonOffset self, State state)"""
        return _osg.PolygonOffset_apply(self, *args)

    def setFactorMultiplier(*args):
        """setFactorMultiplier(float multiplier)"""
        return _osg.PolygonOffset_setFactorMultiplier(*args)

    if _newclass:setFactorMultiplier = staticmethod(setFactorMultiplier)
    __swig_getmethods__["setFactorMultiplier"] = lambda x: setFactorMultiplier
    def getFactorMultiplier():
        """getFactorMultiplier() -> float"""
        return _osg.PolygonOffset_getFactorMultiplier()

    if _newclass:getFactorMultiplier = staticmethod(getFactorMultiplier)
    __swig_getmethods__["getFactorMultiplier"] = lambda x: getFactorMultiplier
    def setUnitsMultiplier(*args):
        """setUnitsMultiplier(float multiplier)"""
        return _osg.PolygonOffset_setUnitsMultiplier(*args)

    if _newclass:setUnitsMultiplier = staticmethod(setUnitsMultiplier)
    __swig_getmethods__["setUnitsMultiplier"] = lambda x: setUnitsMultiplier
    def getUnitsMultiplier():
        """getUnitsMultiplier() -> float"""
        return _osg.PolygonOffset_getUnitsMultiplier()

    if _newclass:getUnitsMultiplier = staticmethod(getUnitsMultiplier)
    __swig_getmethods__["getUnitsMultiplier"] = lambda x: getUnitsMultiplier
    def areFactorAndUnitsMultipliersSet():
        """areFactorAndUnitsMultipliersSet() -> bool"""
        return _osg.PolygonOffset_areFactorAndUnitsMultipliersSet()

    if _newclass:areFactorAndUnitsMultipliersSet = staticmethod(areFactorAndUnitsMultipliersSet)
    __swig_getmethods__["areFactorAndUnitsMultipliersSet"] = lambda x: areFactorAndUnitsMultipliersSet
    def setFactorAndUnitsMultipliersUsingBestGuessForDriver():
        """setFactorAndUnitsMultipliersUsingBestGuessForDriver()"""
        return _osg.PolygonOffset_setFactorAndUnitsMultipliersUsingBestGuessForDriver()

    if _newclass:setFactorAndUnitsMultipliersUsingBestGuessForDriver = staticmethod(setFactorAndUnitsMultipliersUsingBestGuessForDriver)
    __swig_getmethods__["setFactorAndUnitsMultipliersUsingBestGuessForDriver"] = lambda x: setFactorAndUnitsMultipliersUsingBestGuessForDriver
PolygonOffset_swigregister = _osg.PolygonOffset_swigregister
PolygonOffset_swigregister(PolygonOffset)

def PolygonOffset_setFactorMultiplier(*args):
  """PolygonOffset_setFactorMultiplier(float multiplier)"""
  return _osg.PolygonOffset_setFactorMultiplier(*args)

def PolygonOffset_getFactorMultiplier():
  """PolygonOffset_getFactorMultiplier() -> float"""
  return _osg.PolygonOffset_getFactorMultiplier()

def PolygonOffset_setUnitsMultiplier(*args):
  """PolygonOffset_setUnitsMultiplier(float multiplier)"""
  return _osg.PolygonOffset_setUnitsMultiplier(*args)

def PolygonOffset_getUnitsMultiplier():
  """PolygonOffset_getUnitsMultiplier() -> float"""
  return _osg.PolygonOffset_getUnitsMultiplier()

def PolygonOffset_areFactorAndUnitsMultipliersSet():
  """PolygonOffset_areFactorAndUnitsMultipliersSet() -> bool"""
  return _osg.PolygonOffset_areFactorAndUnitsMultipliersSet()

def PolygonOffset_setFactorAndUnitsMultipliersUsingBestGuessForDriver():
  """PolygonOffset_setFactorAndUnitsMultipliersUsingBestGuessForDriver()"""
  return _osg.PolygonOffset_setFactorAndUnitsMultipliersUsingBestGuessForDriver()

OSG_LINEWIDTH = _osg.OSG_LINEWIDTH
class LineWidth(StateAttribute):
    """Proxy of C++ osg::LineWidth class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineWidth, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineWidth, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::LineWidth self, float width=1.0) -> LineWidth
        __init__(osg::LineWidth self) -> LineWidth
        __init__(osg::LineWidth self, LineWidth lw, CopyOp copyop=SHALLOW_COPY) -> LineWidth
        __init__(osg::LineWidth self, LineWidth lw) -> LineWidth
        """
        this = _osg.new_LineWidth(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(LineWidth self) -> Object"""
        return _osg.LineWidth_cloneType(self)

    def clone(self, *args):
        """clone(LineWidth self, CopyOp copyop) -> Object"""
        return _osg.LineWidth_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(LineWidth self, Object obj) -> bool"""
        return _osg.LineWidth_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(LineWidth self) -> char const *"""
        return _osg.LineWidth_libraryName(self)

    def className(self):
        """className(LineWidth self) -> char const *"""
        return _osg.LineWidth_className(self)

    def getType(self):
        """getType(LineWidth self) -> osg::StateAttribute::Type"""
        return _osg.LineWidth_getType(self)

    def compare(self, *args):
        """compare(LineWidth self, StateAttribute sa) -> int"""
        return _osg.LineWidth_compare(self, *args)

    def setWidth(self, *args):
        """setWidth(LineWidth self, float width)"""
        return _osg.LineWidth_setWidth(self, *args)

    def getWidth(self):
        """getWidth(LineWidth self) -> float"""
        return _osg.LineWidth_getWidth(self)

    def apply(self, *args):
        """apply(LineWidth self, State state)"""
        return _osg.LineWidth_apply(self, *args)

LineWidth_swigregister = _osg.LineWidth_swigregister
LineWidth_swigregister(LineWidth)

OSG_LINESTIPPLE = _osg.OSG_LINESTIPPLE
class LineStipple(StateAttribute):
    """Proxy of C++ osg::LineStipple class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineStipple, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineStipple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::LineStipple self) -> LineStipple
        __init__(osg::LineStipple self, GLint factor, GLushort pattern) -> LineStipple
        __init__(osg::LineStipple self, LineStipple lw, CopyOp copyop=SHALLOW_COPY) -> LineStipple
        __init__(osg::LineStipple self, LineStipple lw) -> LineStipple
        """
        this = _osg.new_LineStipple(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(LineStipple self) -> Object"""
        return _osg.LineStipple_cloneType(self)

    def clone(self, *args):
        """clone(LineStipple self, CopyOp copyop) -> Object"""
        return _osg.LineStipple_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(LineStipple self, Object obj) -> bool"""
        return _osg.LineStipple_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(LineStipple self) -> char const *"""
        return _osg.LineStipple_libraryName(self)

    def className(self):
        """className(LineStipple self) -> char const *"""
        return _osg.LineStipple_className(self)

    def getType(self):
        """getType(LineStipple self) -> osg::StateAttribute::Type"""
        return _osg.LineStipple_getType(self)

    def compare(self, *args):
        """compare(LineStipple self, StateAttribute sa) -> int"""
        return _osg.LineStipple_compare(self, *args)

    def setFactor(self, *args):
        """setFactor(LineStipple self, GLint factor)"""
        return _osg.LineStipple_setFactor(self, *args)

    def getFactor(self):
        """getFactor(LineStipple self) -> GLint"""
        return _osg.LineStipple_getFactor(self)

    def setPattern(self, *args):
        """setPattern(LineStipple self, GLushort pattern)"""
        return _osg.LineStipple_setPattern(self, *args)

    def getPattern(self):
        """getPattern(LineStipple self) -> GLushort"""
        return _osg.LineStipple_getPattern(self)

    def apply(self, *args):
        """apply(LineStipple self, State state)"""
        return _osg.LineStipple_apply(self, *args)

LineStipple_swigregister = _osg.LineStipple_swigregister
LineStipple_swigregister(LineStipple)

OSG_LOGICOP = _osg.OSG_LOGICOP
class LogicOp(StateAttribute):
    """Proxy of C++ osg::LogicOp class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicOp, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogicOp, name)
    __repr__ = _swig_repr
    CLEAR = _osg.LogicOp_CLEAR
    SET = _osg.LogicOp_SET
    COPY = _osg.LogicOp_COPY
    COPY_INVERTED = _osg.LogicOp_COPY_INVERTED
    NOOP = _osg.LogicOp_NOOP
    INVERT = _osg.LogicOp_INVERT
    AND = _osg.LogicOp_AND
    NAND = _osg.LogicOp_NAND
    OR = _osg.LogicOp_OR
    NOR = _osg.LogicOp_NOR
    XOR = _osg.LogicOp_XOR
    EQUIV = _osg.LogicOp_EQUIV
    AND_REVERSE = _osg.LogicOp_AND_REVERSE
    AND_INVERTED = _osg.LogicOp_AND_INVERTED
    OR_REVERSE = _osg.LogicOp_OR_REVERSE
    OR_INVERTED = _osg.LogicOp_OR_INVERTED
    def __init__(self, *args): 
        """
        __init__(osg::LogicOp self) -> LogicOp
        __init__(osg::LogicOp self, osg::LogicOp::Opcode opcode) -> LogicOp
        __init__(osg::LogicOp self, LogicOp trans, CopyOp copyop=SHALLOW_COPY) -> LogicOp
        __init__(osg::LogicOp self, LogicOp trans) -> LogicOp
        """
        this = _osg.new_LogicOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(LogicOp self) -> Object"""
        return _osg.LogicOp_cloneType(self)

    def clone(self, *args):
        """clone(LogicOp self, CopyOp copyop) -> Object"""
        return _osg.LogicOp_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(LogicOp self, Object obj) -> bool"""
        return _osg.LogicOp_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(LogicOp self) -> char const *"""
        return _osg.LogicOp_libraryName(self)

    def className(self):
        """className(LogicOp self) -> char const *"""
        return _osg.LogicOp_className(self)

    def getType(self):
        """getType(LogicOp self) -> osg::StateAttribute::Type"""
        return _osg.LogicOp_getType(self)

    def compare(self, *args):
        """compare(LogicOp self, StateAttribute sa) -> int"""
        return _osg.LogicOp_compare(self, *args)

    def setOpcode(self, *args):
        """setOpcode(LogicOp self, osg::LogicOp::Opcode opcode)"""
        return _osg.LogicOp_setOpcode(self, *args)

    def getOpcode(self):
        """getOpcode(LogicOp self) -> osg::LogicOp::Opcode"""
        return _osg.LogicOp_getOpcode(self)

    def apply(self, *args):
        """apply(LogicOp self, State state)"""
        return _osg.LogicOp_apply(self, *args)

LogicOp_swigregister = _osg.LogicOp_swigregister
LogicOp_swigregister(LogicOp)

OSG_MATERIAL = _osg.OSG_MATERIAL
class Material(StateAttribute):
    """Proxy of C++ osg::Material class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Material self) -> Material
        __init__(osg::Material self, Material mat, CopyOp copyop=SHALLOW_COPY) -> Material
        __init__(osg::Material self, Material mat) -> Material
        """
        this = _osg.new_Material(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Material self) -> Object"""
        return _osg.Material_cloneType(self)

    def clone(self, *args):
        """clone(Material self, CopyOp copyop) -> Object"""
        return _osg.Material_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Material self, Object obj) -> bool"""
        return _osg.Material_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Material self) -> char const *"""
        return _osg.Material_libraryName(self)

    def className(self):
        """className(Material self) -> char const *"""
        return _osg.Material_className(self)

    def getType(self):
        """getType(Material self) -> osg::StateAttribute::Type"""
        return _osg.Material_getType(self)

    def compare(self, *args):
        """compare(Material self, StateAttribute sa) -> int"""
        return _osg.Material_compare(self, *args)

    def apply(self, *args):
        """apply(Material self, State state)"""
        return _osg.Material_apply(self, *args)

    FRONT = _osg.Material_FRONT
    BACK = _osg.Material_BACK
    FRONT_AND_BACK = _osg.Material_FRONT_AND_BACK
    AMBIENT = _osg.Material_AMBIENT
    DIFFUSE = _osg.Material_DIFFUSE
    SPECULAR = _osg.Material_SPECULAR
    EMISSION = _osg.Material_EMISSION
    AMBIENT_AND_DIFFUSE = _osg.Material_AMBIENT_AND_DIFFUSE
    OFF = _osg.Material_OFF
    def setColorMode(self, *args):
        """setColorMode(Material self, osg::Material::ColorMode mode)"""
        return _osg.Material_setColorMode(self, *args)

    def getColorMode(self):
        """getColorMode(Material self) -> osg::Material::ColorMode"""
        return _osg.Material_getColorMode(self)

    def setAmbient(self, *args):
        """setAmbient(Material self, osg::Material::Face face, Vec4f ambient)"""
        return _osg.Material_setAmbient(self, *args)

    def getAmbient(self, *args):
        """getAmbient(Material self, osg::Material::Face face) -> Vec4f"""
        return _osg.Material_getAmbient(self, *args)

    def getAmbientFrontAndBack(self):
        """getAmbientFrontAndBack(Material self) -> bool"""
        return _osg.Material_getAmbientFrontAndBack(self)

    def setDiffuse(self, *args):
        """setDiffuse(Material self, osg::Material::Face face, Vec4f diffuse)"""
        return _osg.Material_setDiffuse(self, *args)

    def getDiffuse(self, *args):
        """getDiffuse(Material self, osg::Material::Face face) -> Vec4f"""
        return _osg.Material_getDiffuse(self, *args)

    def getDiffuseFrontAndBack(self):
        """getDiffuseFrontAndBack(Material self) -> bool"""
        return _osg.Material_getDiffuseFrontAndBack(self)

    def setSpecular(self, *args):
        """setSpecular(Material self, osg::Material::Face face, Vec4f specular)"""
        return _osg.Material_setSpecular(self, *args)

    def getSpecular(self, *args):
        """getSpecular(Material self, osg::Material::Face face) -> Vec4f"""
        return _osg.Material_getSpecular(self, *args)

    def getSpecularFrontAndBack(self):
        """getSpecularFrontAndBack(Material self) -> bool"""
        return _osg.Material_getSpecularFrontAndBack(self)

    def setEmission(self, *args):
        """setEmission(Material self, osg::Material::Face face, Vec4f emission)"""
        return _osg.Material_setEmission(self, *args)

    def getEmission(self, *args):
        """getEmission(Material self, osg::Material::Face face) -> Vec4f"""
        return _osg.Material_getEmission(self, *args)

    def getEmissionFrontAndBack(self):
        """getEmissionFrontAndBack(Material self) -> bool"""
        return _osg.Material_getEmissionFrontAndBack(self)

    def setShininess(self, *args):
        """setShininess(Material self, osg::Material::Face face, float shininess)"""
        return _osg.Material_setShininess(self, *args)

    def getShininess(self, *args):
        """getShininess(Material self, osg::Material::Face face) -> float"""
        return _osg.Material_getShininess(self, *args)

    def getShininessFrontAndBack(self):
        """getShininessFrontAndBack(Material self) -> bool"""
        return _osg.Material_getShininessFrontAndBack(self)

    def setTransparency(self, *args):
        """setTransparency(Material self, osg::Material::Face face, float trans)"""
        return _osg.Material_setTransparency(self, *args)

    def setAlpha(self, *args):
        """setAlpha(Material self, osg::Material::Face face, float alpha)"""
        return _osg.Material_setAlpha(self, *args)

Material_swigregister = _osg.Material_swigregister
Material_swigregister(Material)

OSG_STENCIL = _osg.OSG_STENCIL
GL_INCR_WRAP = _osg.GL_INCR_WRAP
GL_DECR_WRAP = _osg.GL_DECR_WRAP
class Stencil(StateAttribute):
    """Proxy of C++ osg::Stencil class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stencil, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stencil, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Stencil self) -> Stencil
        __init__(osg::Stencil self, Stencil stencil, CopyOp copyop=SHALLOW_COPY) -> Stencil
        __init__(osg::Stencil self, Stencil stencil) -> Stencil
        """
        this = _osg.new_Stencil(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Stencil self) -> Object"""
        return _osg.Stencil_cloneType(self)

    def clone(self, *args):
        """clone(Stencil self, CopyOp copyop) -> Object"""
        return _osg.Stencil_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Stencil self, Object obj) -> bool"""
        return _osg.Stencil_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Stencil self) -> char const *"""
        return _osg.Stencil_libraryName(self)

    def className(self):
        """className(Stencil self) -> char const *"""
        return _osg.Stencil_className(self)

    def getType(self):
        """getType(Stencil self) -> osg::StateAttribute::Type"""
        return _osg.Stencil_getType(self)

    def compare(self, *args):
        """compare(Stencil self, StateAttribute sa) -> int"""
        return _osg.Stencil_compare(self, *args)

    NEVER = _osg.Stencil_NEVER
    LESS = _osg.Stencil_LESS
    EQUAL = _osg.Stencil_EQUAL
    LEQUAL = _osg.Stencil_LEQUAL
    GREATER = _osg.Stencil_GREATER
    NOTEQUAL = _osg.Stencil_NOTEQUAL
    GEQUAL = _osg.Stencil_GEQUAL
    ALWAYS = _osg.Stencil_ALWAYS
    def setFunction(self, *args):
        """
        setFunction(Stencil self, osg::Stencil::Function func, int ref, unsigned int mask)
        setFunction(Stencil self, osg::Stencil::Function func)
        """
        return _osg.Stencil_setFunction(self, *args)

    def getFunction(self):
        """getFunction(Stencil self) -> osg::Stencil::Function"""
        return _osg.Stencil_getFunction(self)

    def setFunctionRef(self, *args):
        """setFunctionRef(Stencil self, int ref)"""
        return _osg.Stencil_setFunctionRef(self, *args)

    def getFunctionRef(self):
        """getFunctionRef(Stencil self) -> int"""
        return _osg.Stencil_getFunctionRef(self)

    def setFunctionMask(self, *args):
        """setFunctionMask(Stencil self, unsigned int mask)"""
        return _osg.Stencil_setFunctionMask(self, *args)

    def getFunctionMask(self):
        """getFunctionMask(Stencil self) -> unsigned int"""
        return _osg.Stencil_getFunctionMask(self)

    KEEP = _osg.Stencil_KEEP
    ZERO = _osg.Stencil_ZERO
    REPLACE = _osg.Stencil_REPLACE
    INCR = _osg.Stencil_INCR
    DECR = _osg.Stencil_DECR
    INVERT = _osg.Stencil_INVERT
    INCR_WRAP = _osg.Stencil_INCR_WRAP
    DECR_WRAP = _osg.Stencil_DECR_WRAP
    def setOperation(self, *args):
        """setOperation(Stencil self, osg::Stencil::Operation sfail, osg::Stencil::Operation zfail, osg::Stencil::Operation zpass)"""
        return _osg.Stencil_setOperation(self, *args)

    def setStencilFailOperation(self, *args):
        """setStencilFailOperation(Stencil self, osg::Stencil::Operation sfail)"""
        return _osg.Stencil_setStencilFailOperation(self, *args)

    def getStencilFailOperation(self):
        """getStencilFailOperation(Stencil self) -> osg::Stencil::Operation"""
        return _osg.Stencil_getStencilFailOperation(self)

    def setStencilPassAndDepthFailOperation(self, *args):
        """setStencilPassAndDepthFailOperation(Stencil self, osg::Stencil::Operation zfail)"""
        return _osg.Stencil_setStencilPassAndDepthFailOperation(self, *args)

    def getStencilPassAndDepthFailOperation(self):
        """getStencilPassAndDepthFailOperation(Stencil self) -> osg::Stencil::Operation"""
        return _osg.Stencil_getStencilPassAndDepthFailOperation(self)

    def setStencilPassAndDepthPassOperation(self, *args):
        """setStencilPassAndDepthPassOperation(Stencil self, osg::Stencil::Operation zpass)"""
        return _osg.Stencil_setStencilPassAndDepthPassOperation(self, *args)

    def getStencilPassAndDepthPassOperation(self):
        """getStencilPassAndDepthPassOperation(Stencil self) -> osg::Stencil::Operation"""
        return _osg.Stencil_getStencilPassAndDepthPassOperation(self)

    def setWriteMask(self, *args):
        """setWriteMask(Stencil self, unsigned int mask)"""
        return _osg.Stencil_setWriteMask(self, *args)

    def getWriteMask(self):
        """getWriteMask(Stencil self) -> unsigned int"""
        return _osg.Stencil_getWriteMask(self)

    def apply(self, *args):
        """apply(Stencil self, State state)"""
        return _osg.Stencil_apply(self, *args)

Stencil_swigregister = _osg.Stencil_swigregister
Stencil_swigregister(Stencil)

OSG_DEPTH = _osg.OSG_DEPTH
class Depth(StateAttribute):
    """Proxy of C++ osg::Depth class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Depth, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Depth, name)
    __repr__ = _swig_repr
    NEVER = _osg.Depth_NEVER
    LESS = _osg.Depth_LESS
    EQUAL = _osg.Depth_EQUAL
    LEQUAL = _osg.Depth_LEQUAL
    GREATER = _osg.Depth_GREATER
    NOTEQUAL = _osg.Depth_NOTEQUAL
    GEQUAL = _osg.Depth_GEQUAL
    ALWAYS = _osg.Depth_ALWAYS
    def __init__(self, *args): 
        """
        __init__(osg::Depth self, osg::Depth::Function func=LESS, double zNear=0.0, double zFar=1.0, bool writeMask=True) -> Depth
        __init__(osg::Depth self, osg::Depth::Function func=LESS, double zNear=0.0, double zFar=1.0) -> Depth
        __init__(osg::Depth self, osg::Depth::Function func=LESS, double zNear=0.0) -> Depth
        __init__(osg::Depth self, osg::Depth::Function func=LESS) -> Depth
        __init__(osg::Depth self) -> Depth
        __init__(osg::Depth self, Depth dp, CopyOp copyop=SHALLOW_COPY) -> Depth
        __init__(osg::Depth self, Depth dp) -> Depth
        """
        this = _osg.new_Depth(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Depth self) -> Object"""
        return _osg.Depth_cloneType(self)

    def clone(self, *args):
        """clone(Depth self, CopyOp copyop) -> Object"""
        return _osg.Depth_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Depth self, Object obj) -> bool"""
        return _osg.Depth_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Depth self) -> char const *"""
        return _osg.Depth_libraryName(self)

    def className(self):
        """className(Depth self) -> char const *"""
        return _osg.Depth_className(self)

    def getType(self):
        """getType(Depth self) -> osg::StateAttribute::Type"""
        return _osg.Depth_getType(self)

    def compare(self, *args):
        """compare(Depth self, StateAttribute sa) -> int"""
        return _osg.Depth_compare(self, *args)

    def setFunction(self, *args):
        """setFunction(Depth self, osg::Depth::Function func)"""
        return _osg.Depth_setFunction(self, *args)

    def getFunction(self):
        """getFunction(Depth self) -> osg::Depth::Function"""
        return _osg.Depth_getFunction(self)

    def setRange(self, *args):
        """setRange(Depth self, double zNear, double zFar)"""
        return _osg.Depth_setRange(self, *args)

    def setZNear(self, *args):
        """setZNear(Depth self, double zNear)"""
        return _osg.Depth_setZNear(self, *args)

    def getZNear(self):
        """getZNear(Depth self) -> double"""
        return _osg.Depth_getZNear(self)

    def setZFar(self, *args):
        """setZFar(Depth self, double zFar)"""
        return _osg.Depth_setZFar(self, *args)

    def getZFar(self):
        """getZFar(Depth self) -> double"""
        return _osg.Depth_getZFar(self)

    def setWriteMask(self, *args):
        """setWriteMask(Depth self, bool mask)"""
        return _osg.Depth_setWriteMask(self, *args)

    def getWriteMask(self):
        """getWriteMask(Depth self) -> bool"""
        return _osg.Depth_getWriteMask(self)

    def apply(self, *args):
        """apply(Depth self, State state)"""
        return _osg.Depth_apply(self, *args)

Depth_swigregister = _osg.Depth_swigregister
Depth_swigregister(Depth)

OSG_TEXENV = _osg.OSG_TEXENV
class TexEnv(StateAttribute):
    """Proxy of C++ osg::TexEnv class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexEnv, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexEnv, name)
    __repr__ = _swig_repr
    DECAL = _osg.TexEnv_DECAL
    MODULATE = _osg.TexEnv_MODULATE
    BLEND = _osg.TexEnv_BLEND
    REPLACE = _osg.TexEnv_REPLACE
    ADD = _osg.TexEnv_ADD
    def __init__(self, *args): 
        """
        __init__(osg::TexEnv self, osg::TexEnv::Mode mode=MODULATE) -> TexEnv
        __init__(osg::TexEnv self) -> TexEnv
        __init__(osg::TexEnv self, TexEnv texenv, CopyOp copyop=SHALLOW_COPY) -> TexEnv
        __init__(osg::TexEnv self, TexEnv texenv) -> TexEnv
        """
        this = _osg.new_TexEnv(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TexEnv self) -> Object"""
        return _osg.TexEnv_cloneType(self)

    def clone(self, *args):
        """clone(TexEnv self, CopyOp copyop) -> Object"""
        return _osg.TexEnv_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TexEnv self, Object obj) -> bool"""
        return _osg.TexEnv_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TexEnv self) -> char const *"""
        return _osg.TexEnv_libraryName(self)

    def className(self):
        """className(TexEnv self) -> char const *"""
        return _osg.TexEnv_className(self)

    def getType(self):
        """getType(TexEnv self) -> osg::StateAttribute::Type"""
        return _osg.TexEnv_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(TexEnv self) -> bool"""
        return _osg.TexEnv_isTextureAttribute(self)

    def compare(self, *args):
        """compare(TexEnv self, StateAttribute sa) -> int"""
        return _osg.TexEnv_compare(self, *args)

    def setMode(self, *args):
        """setMode(TexEnv self, osg::TexEnv::Mode mode)"""
        return _osg.TexEnv_setMode(self, *args)

    def getMode(self):
        """getMode(TexEnv self) -> osg::TexEnv::Mode"""
        return _osg.TexEnv_getMode(self)

    def setColor(self, *args):
        """setColor(TexEnv self, Vec4f color)"""
        return _osg.TexEnv_setColor(self, *args)

    def getColor(self, *args):
        """
        getColor(TexEnv self) -> Vec4f
        getColor(TexEnv self) -> Vec4f
        """
        return _osg.TexEnv_getColor(self, *args)

    def apply(self, *args):
        """apply(TexEnv self, State state)"""
        return _osg.TexEnv_apply(self, *args)

TexEnv_swigregister = _osg.TexEnv_swigregister
TexEnv_swigregister(TexEnv)

OSG_TEXENVCOMBINE = _osg.OSG_TEXENVCOMBINE
GL_COMBINE_ARB = _osg.GL_COMBINE_ARB
GL_COMBINE_RGB_ARB = _osg.GL_COMBINE_RGB_ARB
GL_COMBINE_ALPHA_ARB = _osg.GL_COMBINE_ALPHA_ARB
GL_SOURCE0_RGB_ARB = _osg.GL_SOURCE0_RGB_ARB
GL_SOURCE1_RGB_ARB = _osg.GL_SOURCE1_RGB_ARB
GL_SOURCE2_RGB_ARB = _osg.GL_SOURCE2_RGB_ARB
GL_SOURCE0_ALPHA_ARB = _osg.GL_SOURCE0_ALPHA_ARB
GL_SOURCE1_ALPHA_ARB = _osg.GL_SOURCE1_ALPHA_ARB
GL_SOURCE2_ALPHA_ARB = _osg.GL_SOURCE2_ALPHA_ARB
GL_OPERAND0_RGB_ARB = _osg.GL_OPERAND0_RGB_ARB
GL_OPERAND1_RGB_ARB = _osg.GL_OPERAND1_RGB_ARB
GL_OPERAND2_RGB_ARB = _osg.GL_OPERAND2_RGB_ARB
GL_OPERAND0_ALPHA_ARB = _osg.GL_OPERAND0_ALPHA_ARB
GL_OPERAND1_ALPHA_ARB = _osg.GL_OPERAND1_ALPHA_ARB
GL_OPERAND2_ALPHA_ARB = _osg.GL_OPERAND2_ALPHA_ARB
GL_RGB_SCALE_ARB = _osg.GL_RGB_SCALE_ARB
GL_ADD_SIGNED_ARB = _osg.GL_ADD_SIGNED_ARB
GL_INTERPOLATE_ARB = _osg.GL_INTERPOLATE_ARB
GL_SUBTRACT_ARB = _osg.GL_SUBTRACT_ARB
GL_CONSTANT_ARB = _osg.GL_CONSTANT_ARB
GL_PRIMARY_COLOR_ARB = _osg.GL_PRIMARY_COLOR_ARB
GL_PREVIOUS_ARB = _osg.GL_PREVIOUS_ARB
GL_DOT3_RGB_ARB = _osg.GL_DOT3_RGB_ARB
GL_DOT3_RGBA_ARB = _osg.GL_DOT3_RGBA_ARB
GL_TEXTURE0 = _osg.GL_TEXTURE0
class TexEnvCombine(StateAttribute):
    """Proxy of C++ osg::TexEnvCombine class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexEnvCombine, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexEnvCombine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TexEnvCombine self) -> TexEnvCombine
        __init__(osg::TexEnvCombine self, TexEnvCombine texenv, CopyOp copyop=SHALLOW_COPY) -> TexEnvCombine
        __init__(osg::TexEnvCombine self, TexEnvCombine texenv) -> TexEnvCombine
        """
        this = _osg.new_TexEnvCombine(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TexEnvCombine self) -> Object"""
        return _osg.TexEnvCombine_cloneType(self)

    def clone(self, *args):
        """clone(TexEnvCombine self, CopyOp copyop) -> Object"""
        return _osg.TexEnvCombine_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TexEnvCombine self, Object obj) -> bool"""
        return _osg.TexEnvCombine_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TexEnvCombine self) -> char const *"""
        return _osg.TexEnvCombine_libraryName(self)

    def className(self):
        """className(TexEnvCombine self) -> char const *"""
        return _osg.TexEnvCombine_className(self)

    def getType(self):
        """getType(TexEnvCombine self) -> osg::StateAttribute::Type"""
        return _osg.TexEnvCombine_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(TexEnvCombine self) -> bool"""
        return _osg.TexEnvCombine_isTextureAttribute(self)

    def compare(self, *args):
        """compare(TexEnvCombine self, StateAttribute sa) -> int"""
        return _osg.TexEnvCombine_compare(self, *args)

    REPLACE = _osg.TexEnvCombine_REPLACE
    MODULATE = _osg.TexEnvCombine_MODULATE
    ADD = _osg.TexEnvCombine_ADD
    ADD_SIGNED = _osg.TexEnvCombine_ADD_SIGNED
    INTERPOLATE = _osg.TexEnvCombine_INTERPOLATE
    SUBTRACT = _osg.TexEnvCombine_SUBTRACT
    DOT3_RGB = _osg.TexEnvCombine_DOT3_RGB
    DOT3_RGBA = _osg.TexEnvCombine_DOT3_RGBA
    def setCombine_RGB(self, *args):
        """setCombine_RGB(TexEnvCombine self, GLint cm)"""
        return _osg.TexEnvCombine_setCombine_RGB(self, *args)

    def setCombine_Alpha(self, *args):
        """setCombine_Alpha(TexEnvCombine self, GLint cm)"""
        return _osg.TexEnvCombine_setCombine_Alpha(self, *args)

    def getCombine_RGB(self):
        """getCombine_RGB(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getCombine_RGB(self)

    def getCombine_Alpha(self):
        """getCombine_Alpha(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getCombine_Alpha(self)

    CONSTANT = _osg.TexEnvCombine_CONSTANT
    PRIMARY_COLOR = _osg.TexEnvCombine_PRIMARY_COLOR
    PREVIOUS = _osg.TexEnvCombine_PREVIOUS
    TEXTURE = _osg.TexEnvCombine_TEXTURE
    TEXTURE0 = _osg.TexEnvCombine_TEXTURE0
    TEXTURE1 = _osg.TexEnvCombine_TEXTURE1
    TEXTURE2 = _osg.TexEnvCombine_TEXTURE2
    TEXTURE3 = _osg.TexEnvCombine_TEXTURE3
    TEXTURE4 = _osg.TexEnvCombine_TEXTURE4
    TEXTURE5 = _osg.TexEnvCombine_TEXTURE5
    TEXTURE6 = _osg.TexEnvCombine_TEXTURE6
    TEXTURE7 = _osg.TexEnvCombine_TEXTURE7
    def setSource0_RGB(self, *args):
        """setSource0_RGB(TexEnvCombine self, GLint sp)"""
        return _osg.TexEnvCombine_setSource0_RGB(self, *args)

    def setSource1_RGB(self, *args):
        """setSource1_RGB(TexEnvCombine self, GLint sp)"""
        return _osg.TexEnvCombine_setSource1_RGB(self, *args)

    def setSource2_RGB(self, *args):
        """setSource2_RGB(TexEnvCombine self, GLint sp)"""
        return _osg.TexEnvCombine_setSource2_RGB(self, *args)

    def setSource0_Alpha(self, *args):
        """setSource0_Alpha(TexEnvCombine self, GLint sp)"""
        return _osg.TexEnvCombine_setSource0_Alpha(self, *args)

    def setSource1_Alpha(self, *args):
        """setSource1_Alpha(TexEnvCombine self, GLint sp)"""
        return _osg.TexEnvCombine_setSource1_Alpha(self, *args)

    def setSource2_Alpha(self, *args):
        """setSource2_Alpha(TexEnvCombine self, GLint sp)"""
        return _osg.TexEnvCombine_setSource2_Alpha(self, *args)

    def getSource0_RGB(self):
        """getSource0_RGB(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getSource0_RGB(self)

    def getSource1_RGB(self):
        """getSource1_RGB(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getSource1_RGB(self)

    def getSource2_RGB(self):
        """getSource2_RGB(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getSource2_RGB(self)

    def getSource0_Alpha(self):
        """getSource0_Alpha(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getSource0_Alpha(self)

    def getSource1_Alpha(self):
        """getSource1_Alpha(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getSource1_Alpha(self)

    def getSource2_Alpha(self):
        """getSource2_Alpha(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getSource2_Alpha(self)

    SRC_COLOR = _osg.TexEnvCombine_SRC_COLOR
    ONE_MINUS_SRC_COLOR = _osg.TexEnvCombine_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = _osg.TexEnvCombine_SRC_ALPHA
    ONE_MINUS_SRC_ALPHA = _osg.TexEnvCombine_ONE_MINUS_SRC_ALPHA
    def setOperand0_RGB(self, *args):
        """setOperand0_RGB(TexEnvCombine self, GLint op)"""
        return _osg.TexEnvCombine_setOperand0_RGB(self, *args)

    def setOperand1_RGB(self, *args):
        """setOperand1_RGB(TexEnvCombine self, GLint op)"""
        return _osg.TexEnvCombine_setOperand1_RGB(self, *args)

    def setOperand2_RGB(self, *args):
        """setOperand2_RGB(TexEnvCombine self, GLint op)"""
        return _osg.TexEnvCombine_setOperand2_RGB(self, *args)

    def setOperand0_Alpha(self, *args):
        """setOperand0_Alpha(TexEnvCombine self, GLint op)"""
        return _osg.TexEnvCombine_setOperand0_Alpha(self, *args)

    def setOperand1_Alpha(self, *args):
        """setOperand1_Alpha(TexEnvCombine self, GLint op)"""
        return _osg.TexEnvCombine_setOperand1_Alpha(self, *args)

    def setOperand2_Alpha(self, *args):
        """setOperand2_Alpha(TexEnvCombine self, GLint op)"""
        return _osg.TexEnvCombine_setOperand2_Alpha(self, *args)

    def getOperand0_RGB(self):
        """getOperand0_RGB(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getOperand0_RGB(self)

    def getOperand1_RGB(self):
        """getOperand1_RGB(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getOperand1_RGB(self)

    def getOperand2_RGB(self):
        """getOperand2_RGB(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getOperand2_RGB(self)

    def getOperand0_Alpha(self):
        """getOperand0_Alpha(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getOperand0_Alpha(self)

    def getOperand1_Alpha(self):
        """getOperand1_Alpha(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getOperand1_Alpha(self)

    def getOperand2_Alpha(self):
        """getOperand2_Alpha(TexEnvCombine self) -> GLint"""
        return _osg.TexEnvCombine_getOperand2_Alpha(self)

    def setScale_RGB(self, *args):
        """setScale_RGB(TexEnvCombine self, float scale)"""
        return _osg.TexEnvCombine_setScale_RGB(self, *args)

    def setScale_Alpha(self, *args):
        """setScale_Alpha(TexEnvCombine self, float scale)"""
        return _osg.TexEnvCombine_setScale_Alpha(self, *args)

    def getScale_RGB(self):
        """getScale_RGB(TexEnvCombine self) -> float"""
        return _osg.TexEnvCombine_getScale_RGB(self)

    def getScale_Alpha(self):
        """getScale_Alpha(TexEnvCombine self) -> float"""
        return _osg.TexEnvCombine_getScale_Alpha(self)

    def setConstantColor(self, *args):
        """setConstantColor(TexEnvCombine self, Vec4f color)"""
        return _osg.TexEnvCombine_setConstantColor(self, *args)

    def getConstantColor(self):
        """getConstantColor(TexEnvCombine self) -> Vec4f"""
        return _osg.TexEnvCombine_getConstantColor(self)

    def setConstantColorAsLightDirection(self, *args):
        """setConstantColorAsLightDirection(TexEnvCombine self, Vec3f direction)"""
        return _osg.TexEnvCombine_setConstantColorAsLightDirection(self, *args)

    def getConstantColorAsLightDirection(self):
        """getConstantColorAsLightDirection(TexEnvCombine self) -> Vec3f"""
        return _osg.TexEnvCombine_getConstantColorAsLightDirection(self)

    def apply(self, *args):
        """apply(TexEnvCombine self, State state)"""
        return _osg.TexEnvCombine_apply(self, *args)

TexEnvCombine_swigregister = _osg.TexEnvCombine_swigregister
TexEnvCombine_swigregister(TexEnvCombine)

OSG_TEXENVFILTER = _osg.OSG_TEXENVFILTER
GL_MAX_TEXTURE_LOD_BIAS_EXT = _osg.GL_MAX_TEXTURE_LOD_BIAS_EXT
GL_TEXTURE_FILTER_CONTROL_EXT = _osg.GL_TEXTURE_FILTER_CONTROL_EXT
GL_TEXTURE_LOD_BIAS_EXT = _osg.GL_TEXTURE_LOD_BIAS_EXT
class TexEnvFilter(StateAttribute):
    """Proxy of C++ osg::TexEnvFilter class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexEnvFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexEnvFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TexEnvFilter self, float lodBias=0.0) -> TexEnvFilter
        __init__(osg::TexEnvFilter self) -> TexEnvFilter
        __init__(osg::TexEnvFilter self, TexEnvFilter texenv, CopyOp copyop=SHALLOW_COPY) -> TexEnvFilter
        __init__(osg::TexEnvFilter self, TexEnvFilter texenv) -> TexEnvFilter
        """
        this = _osg.new_TexEnvFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TexEnvFilter self) -> Object"""
        return _osg.TexEnvFilter_cloneType(self)

    def clone(self, *args):
        """clone(TexEnvFilter self, CopyOp copyop) -> Object"""
        return _osg.TexEnvFilter_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TexEnvFilter self, Object obj) -> bool"""
        return _osg.TexEnvFilter_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TexEnvFilter self) -> char const *"""
        return _osg.TexEnvFilter_libraryName(self)

    def className(self):
        """className(TexEnvFilter self) -> char const *"""
        return _osg.TexEnvFilter_className(self)

    def getType(self):
        """getType(TexEnvFilter self) -> osg::StateAttribute::Type"""
        return _osg.TexEnvFilter_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(TexEnvFilter self) -> bool"""
        return _osg.TexEnvFilter_isTextureAttribute(self)

    def compare(self, *args):
        """compare(TexEnvFilter self, StateAttribute sa) -> int"""
        return _osg.TexEnvFilter_compare(self, *args)

    def setLodBias(self, *args):
        """setLodBias(TexEnvFilter self, float lodBias)"""
        return _osg.TexEnvFilter_setLodBias(self, *args)

    def getLodBias(self):
        """getLodBias(TexEnvFilter self) -> float"""
        return _osg.TexEnvFilter_getLodBias(self)

    def apply(self, *args):
        """apply(TexEnvFilter self, State state)"""
        return _osg.TexEnvFilter_apply(self, *args)

TexEnvFilter_swigregister = _osg.TexEnvFilter_swigregister
TexEnvFilter_swigregister(TexEnvFilter)

OSG_TEXGEN = _osg.OSG_TEXGEN
GL_NORMAL_MAP_ARB = _osg.GL_NORMAL_MAP_ARB
GL_REFLECTION_MAP_ARB = _osg.GL_REFLECTION_MAP_ARB
class TexGen(StateAttribute):
    """Proxy of C++ osg::TexGen class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexGen, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexGen, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TexGen self) -> TexGen
        __init__(osg::TexGen self, TexGen texgen, CopyOp copyop=SHALLOW_COPY) -> TexGen
        __init__(osg::TexGen self, TexGen texgen) -> TexGen
        """
        this = _osg.new_TexGen(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TexGen self) -> Object"""
        return _osg.TexGen_cloneType(self)

    def clone(self, *args):
        """clone(TexGen self, CopyOp copyop) -> Object"""
        return _osg.TexGen_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TexGen self, Object obj) -> bool"""
        return _osg.TexGen_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TexGen self) -> char const *"""
        return _osg.TexGen_libraryName(self)

    def className(self):
        """className(TexGen self) -> char const *"""
        return _osg.TexGen_className(self)

    def getType(self):
        """getType(TexGen self) -> osg::StateAttribute::Type"""
        return _osg.TexGen_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(TexGen self) -> bool"""
        return _osg.TexGen_isTextureAttribute(self)

    def compare(self, *args):
        """compare(TexGen self, StateAttribute sa) -> int"""
        return _osg.TexGen_compare(self, *args)

    def apply(self, *args):
        """apply(TexGen self, State state)"""
        return _osg.TexGen_apply(self, *args)

    OBJECT_LINEAR = _osg.TexGen_OBJECT_LINEAR
    EYE_LINEAR = _osg.TexGen_EYE_LINEAR
    SPHERE_MAP = _osg.TexGen_SPHERE_MAP
    NORMAL_MAP = _osg.TexGen_NORMAL_MAP
    REFLECTION_MAP = _osg.TexGen_REFLECTION_MAP
    def setMode(self, *args):
        """setMode(TexGen self, osg::TexGen::Mode mode)"""
        return _osg.TexGen_setMode(self, *args)

    def getMode(self):
        """getMode(TexGen self) -> osg::TexGen::Mode"""
        return _osg.TexGen_getMode(self)

    S = _osg.TexGen_S
    T = _osg.TexGen_T
    R = _osg.TexGen_R
    Q = _osg.TexGen_Q
    def setPlane(self, *args):
        """setPlane(TexGen self, osg::TexGen::Coord which, Plane plane)"""
        return _osg.TexGen_setPlane(self, *args)

    def getPlane(self, *args):
        """
        getPlane(TexGen self, osg::TexGen::Coord which) -> Plane
        getPlane(TexGen self, osg::TexGen::Coord which) -> Plane
        """
        return _osg.TexGen_getPlane(self, *args)

    def setPlanesFromMatrix(self, *args):
        """setPlanesFromMatrix(TexGen self, Matrixd matrix)"""
        return _osg.TexGen_setPlanesFromMatrix(self, *args)

TexGen_swigregister = _osg.TexGen_swigregister
TexGen_swigregister(TexGen)

OSG_ALPHAFUNC = _osg.OSG_ALPHAFUNC
class AlphaFunc(StateAttribute):
    """Proxy of C++ osg::AlphaFunc class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlphaFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlphaFunc, name)
    __repr__ = _swig_repr
    NEVER = _osg.AlphaFunc_NEVER
    LESS = _osg.AlphaFunc_LESS
    EQUAL = _osg.AlphaFunc_EQUAL
    LEQUAL = _osg.AlphaFunc_LEQUAL
    GREATER = _osg.AlphaFunc_GREATER
    NOTEQUAL = _osg.AlphaFunc_NOTEQUAL
    GEQUAL = _osg.AlphaFunc_GEQUAL
    ALWAYS = _osg.AlphaFunc_ALWAYS
    def __init__(self, *args): 
        """
        __init__(osg::AlphaFunc self) -> AlphaFunc
        __init__(osg::AlphaFunc self, osg::AlphaFunc::ComparisonFunction func, float ref) -> AlphaFunc
        __init__(osg::AlphaFunc self, AlphaFunc af, CopyOp copyop=SHALLOW_COPY) -> AlphaFunc
        __init__(osg::AlphaFunc self, AlphaFunc af) -> AlphaFunc
        """
        this = _osg.new_AlphaFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(AlphaFunc self) -> Object"""
        return _osg.AlphaFunc_cloneType(self)

    def clone(self, *args):
        """clone(AlphaFunc self, CopyOp copyop) -> Object"""
        return _osg.AlphaFunc_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(AlphaFunc self, Object obj) -> bool"""
        return _osg.AlphaFunc_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(AlphaFunc self) -> char const *"""
        return _osg.AlphaFunc_libraryName(self)

    def className(self):
        """className(AlphaFunc self) -> char const *"""
        return _osg.AlphaFunc_className(self)

    def getType(self):
        """getType(AlphaFunc self) -> osg::StateAttribute::Type"""
        return _osg.AlphaFunc_getType(self)

    def compare(self, *args):
        """compare(AlphaFunc self, StateAttribute sa) -> int"""
        return _osg.AlphaFunc_compare(self, *args)

    def setFunction(self, *args):
        """
        setFunction(AlphaFunc self, osg::AlphaFunc::ComparisonFunction func, float ref)
        setFunction(AlphaFunc self, osg::AlphaFunc::ComparisonFunction func)
        """
        return _osg.AlphaFunc_setFunction(self, *args)

    def getFunction(self):
        """getFunction(AlphaFunc self) -> osg::AlphaFunc::ComparisonFunction"""
        return _osg.AlphaFunc_getFunction(self)

    def setReferenceValue(self, *args):
        """setReferenceValue(AlphaFunc self, float value)"""
        return _osg.AlphaFunc_setReferenceValue(self, *args)

    def getReferenceValue(self):
        """getReferenceValue(AlphaFunc self) -> float"""
        return _osg.AlphaFunc_getReferenceValue(self)

    def apply(self, *args):
        """apply(AlphaFunc self, State state)"""
        return _osg.AlphaFunc_apply(self, *args)

AlphaFunc_swigregister = _osg.AlphaFunc_swigregister
AlphaFunc_swigregister(AlphaFunc)

OSG_BLENDFUNC = _osg.OSG_BLENDFUNC
GL_CONSTANT_COLOR = _osg.GL_CONSTANT_COLOR
GL_ONE_MINUS_CONSTANT_COLOR = _osg.GL_ONE_MINUS_CONSTANT_COLOR
GL_CONSTANT_ALPHA = _osg.GL_CONSTANT_ALPHA
GL_ONE_MINUS_CONSTANT_ALPHA = _osg.GL_ONE_MINUS_CONSTANT_ALPHA
GL_BLEND_COLOR = _osg.GL_BLEND_COLOR
GL_BLEND_DST_RGB = _osg.GL_BLEND_DST_RGB
GL_BLEND_SRC_RGB = _osg.GL_BLEND_SRC_RGB
GL_BLEND_DST_ALPHA = _osg.GL_BLEND_DST_ALPHA
GL_BLEND_SRC_ALPHA = _osg.GL_BLEND_SRC_ALPHA
class BlendFunc(StateAttribute):
    """Proxy of C++ osg::BlendFunc class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::BlendFunc self) -> BlendFunc
        __init__(osg::BlendFunc self, GLenum source, GLenum destination) -> BlendFunc
        __init__(osg::BlendFunc self, GLenum source, GLenum destination, GLenum source_alpha, GLenum destination_alpha) -> BlendFunc
        __init__(osg::BlendFunc self, BlendFunc trans, CopyOp copyop=SHALLOW_COPY) -> BlendFunc
        __init__(osg::BlendFunc self, BlendFunc trans) -> BlendFunc
        """
        this = _osg.new_BlendFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(BlendFunc self) -> Object"""
        return _osg.BlendFunc_cloneType(self)

    def clone(self, *args):
        """clone(BlendFunc self, CopyOp copyop) -> Object"""
        return _osg.BlendFunc_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(BlendFunc self, Object obj) -> bool"""
        return _osg.BlendFunc_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(BlendFunc self) -> char const *"""
        return _osg.BlendFunc_libraryName(self)

    def className(self):
        """className(BlendFunc self) -> char const *"""
        return _osg.BlendFunc_className(self)

    def getType(self):
        """getType(BlendFunc self) -> osg::StateAttribute::Type"""
        return _osg.BlendFunc_getType(self)

    def compare(self, *args):
        """compare(BlendFunc self, StateAttribute sa) -> int"""
        return _osg.BlendFunc_compare(self, *args)

    DST_ALPHA = _osg.BlendFunc_DST_ALPHA
    DST_COLOR = _osg.BlendFunc_DST_COLOR
    ONE = _osg.BlendFunc_ONE
    ONE_MINUS_DST_ALPHA = _osg.BlendFunc_ONE_MINUS_DST_ALPHA
    ONE_MINUS_DST_COLOR = _osg.BlendFunc_ONE_MINUS_DST_COLOR
    ONE_MINUS_SRC_ALPHA = _osg.BlendFunc_ONE_MINUS_SRC_ALPHA
    ONE_MINUS_SRC_COLOR = _osg.BlendFunc_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = _osg.BlendFunc_SRC_ALPHA
    SRC_ALPHA_SATURATE = _osg.BlendFunc_SRC_ALPHA_SATURATE
    SRC_COLOR = _osg.BlendFunc_SRC_COLOR
    CONSTANT_COLOR = _osg.BlendFunc_CONSTANT_COLOR
    ONE_MINUS_CONSTANT_COLOR = _osg.BlendFunc_ONE_MINUS_CONSTANT_COLOR
    CONSTANT_ALPHA = _osg.BlendFunc_CONSTANT_ALPHA
    ONE_MINUS_CONSTANT_ALPHA = _osg.BlendFunc_ONE_MINUS_CONSTANT_ALPHA
    ZERO = _osg.BlendFunc_ZERO
    def setFunction(self, *args):
        """
        setFunction(BlendFunc self, GLenum source, GLenum destination)
        setFunction(BlendFunc self, GLenum source_rgb, GLenum destination_rgb, GLenum source_alpha, GLenum destination_alpha)
        """
        return _osg.BlendFunc_setFunction(self, *args)

    def setSource(self, *args):
        """setSource(BlendFunc self, GLenum source)"""
        return _osg.BlendFunc_setSource(self, *args)

    def getSource(self):
        """getSource(BlendFunc self) -> GLenum"""
        return _osg.BlendFunc_getSource(self)

    def setSourceRGB(self, *args):
        """setSourceRGB(BlendFunc self, GLenum source)"""
        return _osg.BlendFunc_setSourceRGB(self, *args)

    def getSourceRGB(self):
        """getSourceRGB(BlendFunc self) -> GLenum"""
        return _osg.BlendFunc_getSourceRGB(self)

    def setSourceAlpha(self, *args):
        """setSourceAlpha(BlendFunc self, GLenum source)"""
        return _osg.BlendFunc_setSourceAlpha(self, *args)

    def getSourceAlpha(self):
        """getSourceAlpha(BlendFunc self) -> GLenum"""
        return _osg.BlendFunc_getSourceAlpha(self)

    def setDestination(self, *args):
        """setDestination(BlendFunc self, GLenum destination)"""
        return _osg.BlendFunc_setDestination(self, *args)

    def getDestination(self):
        """getDestination(BlendFunc self) -> GLenum"""
        return _osg.BlendFunc_getDestination(self)

    def setDestinationRGB(self, *args):
        """setDestinationRGB(BlendFunc self, GLenum destination)"""
        return _osg.BlendFunc_setDestinationRGB(self, *args)

    def getDestinationRGB(self):
        """getDestinationRGB(BlendFunc self) -> GLenum"""
        return _osg.BlendFunc_getDestinationRGB(self)

    def setDestinationAlpha(self, *args):
        """setDestinationAlpha(BlendFunc self, GLenum destination)"""
        return _osg.BlendFunc_setDestinationAlpha(self, *args)

    def getDestinationAlpha(self):
        """getDestinationAlpha(BlendFunc self) -> GLenum"""
        return _osg.BlendFunc_getDestinationAlpha(self)

    def apply(self, *args):
        """apply(BlendFunc self, State state)"""
        return _osg.BlendFunc_apply(self, *args)

BlendFunc_swigregister = _osg.BlendFunc_swigregister
BlendFunc_swigregister(BlendFunc)

OSG_BLENDEQUATION = _osg.OSG_BLENDEQUATION
GL_MIN = _osg.GL_MIN
GL_MAX = _osg.GL_MAX
GL_FUNC_ADD = _osg.GL_FUNC_ADD
GL_FUNC_SUBTRACT = _osg.GL_FUNC_SUBTRACT
GL_FUNC_REVERSE_SUBTRACT = _osg.GL_FUNC_REVERSE_SUBTRACT
GL_ALPHA_MIN_SGIX = _osg.GL_ALPHA_MIN_SGIX
GL_ALPHA_MAX_SGIX = _osg.GL_ALPHA_MAX_SGIX
class BlendEquation(StateAttribute):
    """Proxy of C++ osg::BlendEquation class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendEquation, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendEquation, name)
    __repr__ = _swig_repr
    RGBA_MIN = _osg.BlendEquation_RGBA_MIN
    RGBA_MAX = _osg.BlendEquation_RGBA_MAX
    ALPHA_MIN = _osg.BlendEquation_ALPHA_MIN
    ALPHA_MAX = _osg.BlendEquation_ALPHA_MAX
    LOGIC_OP = _osg.BlendEquation_LOGIC_OP
    FUNC_ADD = _osg.BlendEquation_FUNC_ADD
    FUNC_SUBTRACT = _osg.BlendEquation_FUNC_SUBTRACT
    FUNC_REVERSE_SUBTRACT = _osg.BlendEquation_FUNC_REVERSE_SUBTRACT
    def __init__(self, *args): 
        """
        __init__(osg::BlendEquation self) -> BlendEquation
        __init__(osg::BlendEquation self, osg::BlendEquation::Equation equation) -> BlendEquation
        __init__(osg::BlendEquation self, osg::BlendEquation::Equation equationRGB, osg::BlendEquation::Equation equationAlpha) -> BlendEquation
        __init__(osg::BlendEquation self, BlendEquation trans, CopyOp copyop=SHALLOW_COPY) -> BlendEquation
        __init__(osg::BlendEquation self, BlendEquation trans) -> BlendEquation
        """
        this = _osg.new_BlendEquation(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(BlendEquation self) -> Object"""
        return _osg.BlendEquation_cloneType(self)

    def clone(self, *args):
        """clone(BlendEquation self, CopyOp copyop) -> Object"""
        return _osg.BlendEquation_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(BlendEquation self, Object obj) -> bool"""
        return _osg.BlendEquation_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(BlendEquation self) -> char const *"""
        return _osg.BlendEquation_libraryName(self)

    def className(self):
        """className(BlendEquation self) -> char const *"""
        return _osg.BlendEquation_className(self)

    def getType(self):
        """getType(BlendEquation self) -> osg::StateAttribute::Type"""
        return _osg.BlendEquation_getType(self)

    def compare(self, *args):
        """compare(BlendEquation self, StateAttribute sa) -> int"""
        return _osg.BlendEquation_compare(self, *args)

    def setEquation(self, *args):
        """setEquation(BlendEquation self, osg::BlendEquation::Equation equation)"""
        return _osg.BlendEquation_setEquation(self, *args)

    def getEquation(self):
        """getEquation(BlendEquation self) -> osg::BlendEquation::Equation"""
        return _osg.BlendEquation_getEquation(self)

    def setEquationRGB(self, *args):
        """setEquationRGB(BlendEquation self, osg::BlendEquation::Equation equation)"""
        return _osg.BlendEquation_setEquationRGB(self, *args)

    def getEquationRGB(self):
        """getEquationRGB(BlendEquation self) -> osg::BlendEquation::Equation"""
        return _osg.BlendEquation_getEquationRGB(self)

    def setEquationAlpha(self, *args):
        """setEquationAlpha(BlendEquation self, osg::BlendEquation::Equation equation)"""
        return _osg.BlendEquation_setEquationAlpha(self, *args)

    def getEquationAlpha(self):
        """getEquationAlpha(BlendEquation self) -> osg::BlendEquation::Equation"""
        return _osg.BlendEquation_getEquationAlpha(self)

    def apply(self, *args):
        """apply(BlendEquation self, State state)"""
        return _osg.BlendEquation_apply(self, *args)

BlendEquation_swigregister = _osg.BlendEquation_swigregister
BlendEquation_swigregister(BlendEquation)

OSG_BLENDCOLOR = _osg.OSG_BLENDCOLOR
class BlendColor(StateAttribute):
    """Proxy of C++ osg::BlendColor class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendColor, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendColor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::BlendColor self) -> BlendColor
        __init__(osg::BlendColor self, Vec4f constantColor) -> BlendColor
        __init__(osg::BlendColor self, BlendColor trans, CopyOp copyop=SHALLOW_COPY) -> BlendColor
        __init__(osg::BlendColor self, BlendColor trans) -> BlendColor
        """
        this = _osg.new_BlendColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(BlendColor self) -> Object"""
        return _osg.BlendColor_cloneType(self)

    def clone(self, *args):
        """clone(BlendColor self, CopyOp copyop) -> Object"""
        return _osg.BlendColor_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(BlendColor self, Object obj) -> bool"""
        return _osg.BlendColor_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(BlendColor self) -> char const *"""
        return _osg.BlendColor_libraryName(self)

    def className(self):
        """className(BlendColor self) -> char const *"""
        return _osg.BlendColor_className(self)

    def getType(self):
        """getType(BlendColor self) -> osg::StateAttribute::Type"""
        return _osg.BlendColor_getType(self)

    def compare(self, *args):
        """compare(BlendColor self, StateAttribute sa) -> int"""
        return _osg.BlendColor_compare(self, *args)

    def setConstantColor(self, *args):
        """setConstantColor(BlendColor self, Vec4f color)"""
        return _osg.BlendColor_setConstantColor(self, *args)

    def getConstantColor(self, *args):
        """
        getConstantColor(BlendColor self) -> Vec4f
        getConstantColor(BlendColor self) -> Vec4f
        """
        return _osg.BlendColor_getConstantColor(self, *args)

    def apply(self, *args):
        """apply(BlendColor self, State state)"""
        return _osg.BlendColor_apply(self, *args)

BlendColor_swigregister = _osg.BlendColor_swigregister
BlendColor_swigregister(BlendColor)

OSG_BUFFEROBJECT = _osg.OSG_BUFFEROBJECT
GL_ARRAY_BUFFER_ARB = _osg.GL_ARRAY_BUFFER_ARB
GL_ELEMENT_ARRAY_BUFFER_ARB = _osg.GL_ELEMENT_ARRAY_BUFFER_ARB
GL_ARRAY_BUFFER_BINDING_ARB = _osg.GL_ARRAY_BUFFER_BINDING_ARB
GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = _osg.GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = _osg.GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = _osg.GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
GL_COLOR_ARRAY_BUFFER_BINDING_ARB = _osg.GL_COLOR_ARRAY_BUFFER_BINDING_ARB
GL_INDEX_ARRAY_BUFFER_BINDING_ARB = _osg.GL_INDEX_ARRAY_BUFFER_BINDING_ARB
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = _osg.GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = _osg.GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = _osg.GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = _osg.GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = _osg.GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
GL_STREAM_DRAW_ARB = _osg.GL_STREAM_DRAW_ARB
GL_STREAM_READ_ARB = _osg.GL_STREAM_READ_ARB
GL_STREAM_COPY_ARB = _osg.GL_STREAM_COPY_ARB
GL_STATIC_DRAW_ARB = _osg.GL_STATIC_DRAW_ARB
GL_STATIC_READ_ARB = _osg.GL_STATIC_READ_ARB
GL_STATIC_COPY_ARB = _osg.GL_STATIC_COPY_ARB
GL_DYNAMIC_DRAW_ARB = _osg.GL_DYNAMIC_DRAW_ARB
GL_DYNAMIC_READ_ARB = _osg.GL_DYNAMIC_READ_ARB
GL_DYNAMIC_COPY_ARB = _osg.GL_DYNAMIC_COPY_ARB
GL_READ_ONLY_ARB = _osg.GL_READ_ONLY_ARB
GL_WRITE_ONLY_ARB = _osg.GL_WRITE_ONLY_ARB
GL_READ_WRITE_ARB = _osg.GL_READ_WRITE_ARB
GL_BUFFER_SIZE_ARB = _osg.GL_BUFFER_SIZE_ARB
GL_BUFFER_USAGE_ARB = _osg.GL_BUFFER_USAGE_ARB
GL_BUFFER_ACCESS_ARB = _osg.GL_BUFFER_ACCESS_ARB
GL_BUFFER_MAPPED_ARB = _osg.GL_BUFFER_MAPPED_ARB
GL_BUFFER_MAP_POINTER_ARB = _osg.GL_BUFFER_MAP_POINTER_ARB
GL_STREAM_DRAW = _osg.GL_STREAM_DRAW
GL_STREAM_READ = _osg.GL_STREAM_READ
GL_STREAM_COPY = _osg.GL_STREAM_COPY
GL_STATIC_DRAW = _osg.GL_STATIC_DRAW
GL_STATIC_READ = _osg.GL_STATIC_READ
GL_STATIC_COPY = _osg.GL_STATIC_COPY
GL_DYNAMIC_DRAW = _osg.GL_DYNAMIC_DRAW
GL_DYNAMIC_READ = _osg.GL_DYNAMIC_READ
GL_DYNAMIC_COPY = _osg.GL_DYNAMIC_COPY
GL_PIXEL_PACK_BUFFER = _osg.GL_PIXEL_PACK_BUFFER
GL_PIXEL_UNPACK_BUFFER = _osg.GL_PIXEL_UNPACK_BUFFER
GL_PIXEL_PACK_BUFFER_BINDING = _osg.GL_PIXEL_PACK_BUFFER_BINDING
GL_PIXEL_UNPACK_BUFFER_BINDING = _osg.GL_PIXEL_UNPACK_BUFFER_BINDING
GL_PIXEL_PACK_BUFFER_ARB = _osg.GL_PIXEL_PACK_BUFFER_ARB
GL_PIXEL_UNPACK_BUFFER_ARB = _osg.GL_PIXEL_UNPACK_BUFFER_ARB
GL_PIXEL_PACK_BUFFER_BINDING_ARB = _osg.GL_PIXEL_PACK_BUFFER_BINDING_ARB
GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = _osg.GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
class BufferObjectProfile(_object):
    """Proxy of C++ osg::BufferObjectProfile class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferObjectProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferObjectProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::BufferObjectProfile self) -> BufferObjectProfile
        __init__(osg::BufferObjectProfile self, GLenum target, GLenum usage, unsigned int size) -> BufferObjectProfile
        __init__(osg::BufferObjectProfile self, BufferObjectProfile bpo) -> BufferObjectProfile
        """
        this = _osg.new_BufferObjectProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(self, *args):
        """__lt__(BufferObjectProfile self, BufferObjectProfile rhs) -> bool"""
        return _osg.BufferObjectProfile___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(BufferObjectProfile self, BufferObjectProfile rhs) -> bool"""
        return _osg.BufferObjectProfile___eq__(self, *args)

    def setProfile(self, *args):
        """setProfile(BufferObjectProfile self, GLenum target, GLenum usage, unsigned int size)"""
        return _osg.BufferObjectProfile_setProfile(self, *args)

    __swig_setmethods__["_target"] = _osg.BufferObjectProfile__target_set
    __swig_getmethods__["_target"] = _osg.BufferObjectProfile__target_get
    if _newclass:_target = _swig_property(_osg.BufferObjectProfile__target_get, _osg.BufferObjectProfile__target_set)
    __swig_setmethods__["_usage"] = _osg.BufferObjectProfile__usage_set
    __swig_getmethods__["_usage"] = _osg.BufferObjectProfile__usage_get
    if _newclass:_usage = _swig_property(_osg.BufferObjectProfile__usage_get, _osg.BufferObjectProfile__usage_set)
    __swig_setmethods__["_size"] = _osg.BufferObjectProfile__size_set
    __swig_getmethods__["_size"] = _osg.BufferObjectProfile__size_get
    if _newclass:_size = _swig_property(_osg.BufferObjectProfile__size_get, _osg.BufferObjectProfile__size_set)
    __swig_destroy__ = _osg.delete_BufferObjectProfile
    __del__ = lambda self : None;
BufferObjectProfile_swigregister = _osg.BufferObjectProfile_swigregister
BufferObjectProfile_swigregister(BufferObjectProfile)

class GLBufferObject(Referenced):
    """Proxy of C++ osg::GLBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::GLBufferObject self, unsigned int contextID, BufferObject bufferObject, unsigned int glObjectID=0) -> GLBufferObject
        __init__(osg::GLBufferObject self, unsigned int contextID, BufferObject bufferObject) -> GLBufferObject
        """
        this = _osg.new_GLBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def setProfile(self, *args):
        """setProfile(GLBufferObject self, BufferObjectProfile profile)"""
        return _osg.GLBufferObject_setProfile(self, *args)

    def getProfile(self):
        """getProfile(GLBufferObject self) -> BufferObjectProfile"""
        return _osg.GLBufferObject_getProfile(self)

    def setBufferObject(self, *args):
        """setBufferObject(GLBufferObject self, BufferObject bufferObject)"""
        return _osg.GLBufferObject_setBufferObject(self, *args)

    def getBufferObject(self):
        """getBufferObject(GLBufferObject self) -> BufferObject"""
        return _osg.GLBufferObject_getBufferObject(self)

    def getContextID(self):
        """getContextID(GLBufferObject self) -> unsigned int"""
        return _osg.GLBufferObject_getContextID(self)

    def getGLObjectID(self, *args):
        """
        getGLObjectID(GLBufferObject self) -> GLuint
        getGLObjectID(GLBufferObject self) -> GLuint
        """
        return _osg.GLBufferObject_getGLObjectID(self, *args)

    def getOffset(self, *args):
        """getOffset(GLBufferObject self, unsigned int i) -> GLsizeiptrARB"""
        return _osg.GLBufferObject_getOffset(self, *args)

    def bindBuffer(self):
        """bindBuffer(GLBufferObject self)"""
        return _osg.GLBufferObject_bindBuffer(self)

    def unbindBuffer(self):
        """unbindBuffer(GLBufferObject self)"""
        return _osg.GLBufferObject_unbindBuffer(self)

    def isDirty(self):
        """isDirty(GLBufferObject self) -> bool"""
        return _osg.GLBufferObject_isDirty(self)

    def dirty(self):
        """dirty(GLBufferObject self)"""
        return _osg.GLBufferObject_dirty(self)

    def clear(self):
        """clear(GLBufferObject self)"""
        return _osg.GLBufferObject_clear(self)

    def compileBuffer(self):
        """compileBuffer(GLBufferObject self)"""
        return _osg.GLBufferObject_compileBuffer(self)

    def deleteGLObject(self):
        """deleteGLObject(GLBufferObject self)"""
        return _osg.GLBufferObject_deleteGLObject(self)

    def assign(self, *args):
        """assign(GLBufferObject self, BufferObject bufferObject)"""
        return _osg.GLBufferObject_assign(self, *args)

    def isPBOSupported(self):
        """isPBOSupported(GLBufferObject self) -> bool"""
        return _osg.GLBufferObject_isPBOSupported(self)

    def createGLBufferObject(*args):
        """createGLBufferObject(unsigned int contextID, BufferObject bufferObject) -> GLBufferObject"""
        return _osg.GLBufferObject_createGLBufferObject(*args)

    if _newclass:createGLBufferObject = staticmethod(createGLBufferObject)
    __swig_getmethods__["createGLBufferObject"] = lambda x: createGLBufferObject
    def deleteAllBufferObjects(*args):
        """deleteAllBufferObjects(unsigned int contextID)"""
        return _osg.GLBufferObject_deleteAllBufferObjects(*args)

    if _newclass:deleteAllBufferObjects = staticmethod(deleteAllBufferObjects)
    __swig_getmethods__["deleteAllBufferObjects"] = lambda x: deleteAllBufferObjects
    def discardAllBufferObjects(*args):
        """discardAllBufferObjects(unsigned int contextID)"""
        return _osg.GLBufferObject_discardAllBufferObjects(*args)

    if _newclass:discardAllBufferObjects = staticmethod(discardAllBufferObjects)
    __swig_getmethods__["discardAllBufferObjects"] = lambda x: discardAllBufferObjects
    def flushAllDeletedBufferObjects(*args):
        """flushAllDeletedBufferObjects(unsigned int contextID)"""
        return _osg.GLBufferObject_flushAllDeletedBufferObjects(*args)

    if _newclass:flushAllDeletedBufferObjects = staticmethod(flushAllDeletedBufferObjects)
    __swig_getmethods__["flushAllDeletedBufferObjects"] = lambda x: flushAllDeletedBufferObjects
    def discardAllDeletedBufferObjects(*args):
        """discardAllDeletedBufferObjects(unsigned int contextID)"""
        return _osg.GLBufferObject_discardAllDeletedBufferObjects(*args)

    if _newclass:discardAllDeletedBufferObjects = staticmethod(discardAllDeletedBufferObjects)
    __swig_getmethods__["discardAllDeletedBufferObjects"] = lambda x: discardAllDeletedBufferObjects
    def flushDeletedBufferObjects(*args):
        """flushDeletedBufferObjects(unsigned int contextID, double currentTime, double & availbleTime)"""
        return _osg.GLBufferObject_flushDeletedBufferObjects(*args)

    if _newclass:flushDeletedBufferObjects = staticmethod(flushDeletedBufferObjects)
    __swig_getmethods__["flushDeletedBufferObjects"] = lambda x: flushDeletedBufferObjects
    def releaseGLBufferObject(*args):
        """releaseGLBufferObject(unsigned int contextID, GLBufferObject to)"""
        return _osg.GLBufferObject_releaseGLBufferObject(*args)

    if _newclass:releaseGLBufferObject = staticmethod(releaseGLBufferObject)
    __swig_getmethods__["releaseGLBufferObject"] = lambda x: releaseGLBufferObject
    def hasAllBufferDataBeenRead(self):
        """hasAllBufferDataBeenRead(GLBufferObject self) -> bool"""
        return _osg.GLBufferObject_hasAllBufferDataBeenRead(self)

    def setBufferDataHasBeenRead(self, *args):
        """setBufferDataHasBeenRead(GLBufferObject self, BufferData bd)"""
        return _osg.GLBufferObject_setBufferDataHasBeenRead(self, *args)

    __swig_setmethods__["_set"] = _osg.GLBufferObject__set_set
    __swig_getmethods__["_set"] = _osg.GLBufferObject__set_get
    if _newclass:_set = _swig_property(_osg.GLBufferObject__set_get, _osg.GLBufferObject__set_set)
    __swig_setmethods__["_previous"] = _osg.GLBufferObject__previous_set
    __swig_getmethods__["_previous"] = _osg.GLBufferObject__previous_get
    if _newclass:_previous = _swig_property(_osg.GLBufferObject__previous_get, _osg.GLBufferObject__previous_set)
    __swig_setmethods__["_next"] = _osg.GLBufferObject__next_set
    __swig_getmethods__["_next"] = _osg.GLBufferObject__next_get
    if _newclass:_next = _swig_property(_osg.GLBufferObject__next_get, _osg.GLBufferObject__next_set)
    __swig_setmethods__["_frameLastUsed"] = _osg.GLBufferObject__frameLastUsed_set
    __swig_getmethods__["_frameLastUsed"] = _osg.GLBufferObject__frameLastUsed_get
    if _newclass:_frameLastUsed = _swig_property(_osg.GLBufferObject__frameLastUsed_get, _osg.GLBufferObject__frameLastUsed_set)
GLBufferObject_swigregister = _osg.GLBufferObject_swigregister
GLBufferObject_swigregister(GLBufferObject)

def GLBufferObject_createGLBufferObject(*args):
  """GLBufferObject_createGLBufferObject(unsigned int contextID, BufferObject bufferObject) -> GLBufferObject"""
  return _osg.GLBufferObject_createGLBufferObject(*args)

def GLBufferObject_deleteAllBufferObjects(*args):
  """GLBufferObject_deleteAllBufferObjects(unsigned int contextID)"""
  return _osg.GLBufferObject_deleteAllBufferObjects(*args)

def GLBufferObject_discardAllBufferObjects(*args):
  """GLBufferObject_discardAllBufferObjects(unsigned int contextID)"""
  return _osg.GLBufferObject_discardAllBufferObjects(*args)

def GLBufferObject_flushAllDeletedBufferObjects(*args):
  """GLBufferObject_flushAllDeletedBufferObjects(unsigned int contextID)"""
  return _osg.GLBufferObject_flushAllDeletedBufferObjects(*args)

def GLBufferObject_discardAllDeletedBufferObjects(*args):
  """GLBufferObject_discardAllDeletedBufferObjects(unsigned int contextID)"""
  return _osg.GLBufferObject_discardAllDeletedBufferObjects(*args)

def GLBufferObject_flushDeletedBufferObjects(*args):
  """GLBufferObject_flushDeletedBufferObjects(unsigned int contextID, double currentTime, double & availbleTime)"""
  return _osg.GLBufferObject_flushDeletedBufferObjects(*args)

def GLBufferObject_releaseGLBufferObject(*args):
  """GLBufferObject_releaseGLBufferObject(unsigned int contextID, GLBufferObject to)"""
  return _osg.GLBufferObject_releaseGLBufferObject(*args)

class GLBufferObjectSet(Referenced):
    """Proxy of C++ osg::GLBufferObjectSet class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLBufferObjectSet, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLBufferObjectSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osg::GLBufferObjectSet self, GLBufferObjectManager parent, BufferObjectProfile profile) -> GLBufferObjectSet"""
        this = _osg.new_GLBufferObjectSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def getProfile(self):
        """getProfile(GLBufferObjectSet self) -> BufferObjectProfile"""
        return _osg.GLBufferObjectSet_getProfile(self)

    def handlePendingOrphandedGLBufferObjects(self):
        """handlePendingOrphandedGLBufferObjects(GLBufferObjectSet self)"""
        return _osg.GLBufferObjectSet_handlePendingOrphandedGLBufferObjects(self)

    def deleteAllGLBufferObjects(self):
        """deleteAllGLBufferObjects(GLBufferObjectSet self)"""
        return _osg.GLBufferObjectSet_deleteAllGLBufferObjects(self)

    def discardAllGLBufferObjects(self):
        """discardAllGLBufferObjects(GLBufferObjectSet self)"""
        return _osg.GLBufferObjectSet_discardAllGLBufferObjects(self)

    def flushAllDeletedGLBufferObjects(self):
        """flushAllDeletedGLBufferObjects(GLBufferObjectSet self)"""
        return _osg.GLBufferObjectSet_flushAllDeletedGLBufferObjects(self)

    def discardAllDeletedGLBufferObjects(self):
        """discardAllDeletedGLBufferObjects(GLBufferObjectSet self)"""
        return _osg.GLBufferObjectSet_discardAllDeletedGLBufferObjects(self)

    def flushDeletedGLBufferObjects(self, *args):
        """flushDeletedGLBufferObjects(GLBufferObjectSet self, double currentTime, double & availableTime)"""
        return _osg.GLBufferObjectSet_flushDeletedGLBufferObjects(self, *args)

    def takeFromOrphans(self, *args):
        """takeFromOrphans(GLBufferObjectSet self, BufferObject bufferObject) -> GLBufferObject"""
        return _osg.GLBufferObjectSet_takeFromOrphans(self, *args)

    def takeOrGenerate(self, *args):
        """takeOrGenerate(GLBufferObjectSet self, BufferObject bufferObject) -> GLBufferObject"""
        return _osg.GLBufferObjectSet_takeOrGenerate(self, *args)

    def moveToBack(self, *args):
        """moveToBack(GLBufferObjectSet self, GLBufferObject to)"""
        return _osg.GLBufferObjectSet_moveToBack(self, *args)

    def addToBack(self, *args):
        """addToBack(GLBufferObjectSet self, GLBufferObject to)"""
        return _osg.GLBufferObjectSet_addToBack(self, *args)

    def orphan(self, *args):
        """orphan(GLBufferObjectSet self, GLBufferObject to)"""
        return _osg.GLBufferObjectSet_orphan(self, *args)

    def remove(self, *args):
        """remove(GLBufferObjectSet self, GLBufferObject to)"""
        return _osg.GLBufferObjectSet_remove(self, *args)

    def moveToSet(self, *args):
        """moveToSet(GLBufferObjectSet self, GLBufferObject to, GLBufferObjectSet set)"""
        return _osg.GLBufferObjectSet_moveToSet(self, *args)

    def size(self):
        """size(GLBufferObjectSet self) -> unsigned int"""
        return _osg.GLBufferObjectSet_size(self)

    def makeSpace(self, *args):
        """makeSpace(GLBufferObjectSet self, unsigned int & size) -> bool"""
        return _osg.GLBufferObjectSet_makeSpace(self, *args)

    def checkConsistency(self):
        """checkConsistency(GLBufferObjectSet self) -> bool"""
        return _osg.GLBufferObjectSet_checkConsistency(self)

    def getParent(self):
        """getParent(GLBufferObjectSet self) -> GLBufferObjectManager"""
        return _osg.GLBufferObjectSet_getParent(self)

    def computeNumGLBufferObjectsInList(self):
        """computeNumGLBufferObjectsInList(GLBufferObjectSet self) -> unsigned int"""
        return _osg.GLBufferObjectSet_computeNumGLBufferObjectsInList(self)

    def getNumOfGLBufferObjects(self):
        """getNumOfGLBufferObjects(GLBufferObjectSet self) -> unsigned int"""
        return _osg.GLBufferObjectSet_getNumOfGLBufferObjects(self)

    def getNumOrphans(self):
        """getNumOrphans(GLBufferObjectSet self) -> unsigned int"""
        return _osg.GLBufferObjectSet_getNumOrphans(self)

    def getNumPendingOrphans(self):
        """getNumPendingOrphans(GLBufferObjectSet self) -> unsigned int"""
        return _osg.GLBufferObjectSet_getNumPendingOrphans(self)

GLBufferObjectSet_swigregister = _osg.GLBufferObjectSet_swigregister
GLBufferObjectSet_swigregister(GLBufferObjectSet)

class GLBufferObjectManager(Referenced):
    """Proxy of C++ osg::GLBufferObjectManager class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLBufferObjectManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLBufferObjectManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osg::GLBufferObjectManager self, unsigned int contextID) -> GLBufferObjectManager"""
        this = _osg.new_GLBufferObjectManager(*args)
        try: self.this.append(this)
        except: self.this = this
    def getContextID(self):
        """getContextID(GLBufferObjectManager self) -> unsigned int"""
        return _osg.GLBufferObjectManager_getContextID(self)

    def setNumberActiveGLBufferObjects(self, *args):
        """setNumberActiveGLBufferObjects(GLBufferObjectManager self, unsigned int size)"""
        return _osg.GLBufferObjectManager_setNumberActiveGLBufferObjects(self, *args)

    def getNumberActiveGLBufferObjects(self, *args):
        """
        getNumberActiveGLBufferObjects(GLBufferObjectManager self) -> unsigned int
        getNumberActiveGLBufferObjects(GLBufferObjectManager self) -> unsigned int
        """
        return _osg.GLBufferObjectManager_getNumberActiveGLBufferObjects(self, *args)

    def setNumberOrphanedGLBufferObjects(self, *args):
        """setNumberOrphanedGLBufferObjects(GLBufferObjectManager self, unsigned int size)"""
        return _osg.GLBufferObjectManager_setNumberOrphanedGLBufferObjects(self, *args)

    def getNumberOrphanedGLBufferObjects(self, *args):
        """
        getNumberOrphanedGLBufferObjects(GLBufferObjectManager self) -> unsigned int
        getNumberOrphanedGLBufferObjects(GLBufferObjectManager self) -> unsigned int
        """
        return _osg.GLBufferObjectManager_getNumberOrphanedGLBufferObjects(self, *args)

    def setCurrGLBufferObjectPoolSize(self, *args):
        """setCurrGLBufferObjectPoolSize(GLBufferObjectManager self, unsigned int size)"""
        return _osg.GLBufferObjectManager_setCurrGLBufferObjectPoolSize(self, *args)

    def getCurrGLBufferObjectPoolSize(self, *args):
        """
        getCurrGLBufferObjectPoolSize(GLBufferObjectManager self) -> unsigned int
        getCurrGLBufferObjectPoolSize(GLBufferObjectManager self) -> unsigned int
        """
        return _osg.GLBufferObjectManager_getCurrGLBufferObjectPoolSize(self, *args)

    def setMaxGLBufferObjectPoolSize(self, *args):
        """setMaxGLBufferObjectPoolSize(GLBufferObjectManager self, unsigned int size)"""
        return _osg.GLBufferObjectManager_setMaxGLBufferObjectPoolSize(self, *args)

    def getMaxGLBufferObjectPoolSize(self):
        """getMaxGLBufferObjectPoolSize(GLBufferObjectManager self) -> unsigned int"""
        return _osg.GLBufferObjectManager_getMaxGLBufferObjectPoolSize(self)

    def hasSpace(self, *args):
        """hasSpace(GLBufferObjectManager self, unsigned int size) -> bool"""
        return _osg.GLBufferObjectManager_hasSpace(self, *args)

    def makeSpace(self, *args):
        """makeSpace(GLBufferObjectManager self, unsigned int size) -> bool"""
        return _osg.GLBufferObjectManager_makeSpace(self, *args)

    def generateGLBufferObject(self, *args):
        """generateGLBufferObject(GLBufferObjectManager self, BufferObject bufferObject) -> GLBufferObject"""
        return _osg.GLBufferObjectManager_generateGLBufferObject(self, *args)

    def handlePendingOrphandedGLBufferObjects(self):
        """handlePendingOrphandedGLBufferObjects(GLBufferObjectManager self)"""
        return _osg.GLBufferObjectManager_handlePendingOrphandedGLBufferObjects(self)

    def deleteAllGLBufferObjects(self):
        """deleteAllGLBufferObjects(GLBufferObjectManager self)"""
        return _osg.GLBufferObjectManager_deleteAllGLBufferObjects(self)

    def discardAllGLBufferObjects(self):
        """discardAllGLBufferObjects(GLBufferObjectManager self)"""
        return _osg.GLBufferObjectManager_discardAllGLBufferObjects(self)

    def flushAllDeletedGLBufferObjects(self):
        """flushAllDeletedGLBufferObjects(GLBufferObjectManager self)"""
        return _osg.GLBufferObjectManager_flushAllDeletedGLBufferObjects(self)

    def discardAllDeletedGLBufferObjects(self):
        """discardAllDeletedGLBufferObjects(GLBufferObjectManager self)"""
        return _osg.GLBufferObjectManager_discardAllDeletedGLBufferObjects(self)

    def flushDeletedGLBufferObjects(self, *args):
        """flushDeletedGLBufferObjects(GLBufferObjectManager self, double currentTime, double & availableTime)"""
        return _osg.GLBufferObjectManager_flushDeletedGLBufferObjects(self, *args)

    def releaseGLBufferObject(self, *args):
        """releaseGLBufferObject(GLBufferObjectManager self, GLBufferObject to)"""
        return _osg.GLBufferObjectManager_releaseGLBufferObject(self, *args)

    def getGLBufferObjectSet(self, *args):
        """getGLBufferObjectSet(GLBufferObjectManager self, BufferObjectProfile profile) -> GLBufferObjectSet"""
        return _osg.GLBufferObjectManager_getGLBufferObjectSet(self, *args)

    def newFrame(self, *args):
        """newFrame(GLBufferObjectManager self, FrameStamp fs)"""
        return _osg.GLBufferObjectManager_newFrame(self, *args)

    def resetStats(self):
        """resetStats(GLBufferObjectManager self)"""
        return _osg.GLBufferObjectManager_resetStats(self)

    def reportStats(self, *args):
        """reportStats(GLBufferObjectManager self, std::ostream & out)"""
        return _osg.GLBufferObjectManager_reportStats(self, *args)

    def recomputeStats(self, *args):
        """recomputeStats(GLBufferObjectManager self, std::ostream & out)"""
        return _osg.GLBufferObjectManager_recomputeStats(self, *args)

    def getFrameNumber(self):
        """getFrameNumber(GLBufferObjectManager self) -> unsigned int &"""
        return _osg.GLBufferObjectManager_getFrameNumber(self)

    def getNumberFrames(self):
        """getNumberFrames(GLBufferObjectManager self) -> unsigned int &"""
        return _osg.GLBufferObjectManager_getNumberFrames(self)

    def getNumberDeleted(self):
        """getNumberDeleted(GLBufferObjectManager self) -> unsigned int &"""
        return _osg.GLBufferObjectManager_getNumberDeleted(self)

    def getDeleteTime(self):
        """getDeleteTime(GLBufferObjectManager self) -> double &"""
        return _osg.GLBufferObjectManager_getDeleteTime(self)

    def getNumberGenerated(self):
        """getNumberGenerated(GLBufferObjectManager self) -> unsigned int &"""
        return _osg.GLBufferObjectManager_getNumberGenerated(self)

    def getGenerateTime(self):
        """getGenerateTime(GLBufferObjectManager self) -> double &"""
        return _osg.GLBufferObjectManager_getGenerateTime(self)

    def getNumberApplied(self):
        """getNumberApplied(GLBufferObjectManager self) -> unsigned int &"""
        return _osg.GLBufferObjectManager_getNumberApplied(self)

    def getApplyTime(self):
        """getApplyTime(GLBufferObjectManager self) -> double &"""
        return _osg.GLBufferObjectManager_getApplyTime(self)

    def getGLBufferObjectManager(*args):
        """getGLBufferObjectManager(unsigned int contextID) -> osg::ref_ptr< osg::GLBufferObjectManager > &"""
        return _osg.GLBufferObjectManager_getGLBufferObjectManager(*args)

    if _newclass:getGLBufferObjectManager = staticmethod(getGLBufferObjectManager)
    __swig_getmethods__["getGLBufferObjectManager"] = lambda x: getGLBufferObjectManager
    __swig_destroy__ = _osg.delete_GLBufferObjectManager
    __del__ = lambda self : None;
GLBufferObjectManager_swigregister = _osg.GLBufferObjectManager_swigregister
GLBufferObjectManager_swigregister(GLBufferObjectManager)

def GLBufferObjectManager_getGLBufferObjectManager(*args):
  """GLBufferObjectManager_getGLBufferObjectManager(unsigned int contextID) -> osg::ref_ptr< osg::GLBufferObjectManager > &"""
  return _osg.GLBufferObjectManager_getGLBufferObjectManager(*args)

class BufferObject(Object):
    """Proxy of C++ osg::BufferObject class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isSameKindAs(self, *args):
        """isSameKindAs(BufferObject self, Object obj) -> bool"""
        return _osg.BufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(BufferObject self) -> char const *"""
        return _osg.BufferObject_libraryName(self)

    def className(self):
        """className(BufferObject self) -> char const *"""
        return _osg.BufferObject_className(self)

    def setTarget(self, *args):
        """setTarget(BufferObject self, GLenum target)"""
        return _osg.BufferObject_setTarget(self, *args)

    def getTarget(self):
        """getTarget(BufferObject self) -> GLenum"""
        return _osg.BufferObject_getTarget(self)

    def setUsage(self, *args):
        """setUsage(BufferObject self, GLenum usage)"""
        return _osg.BufferObject_setUsage(self, *args)

    def getUsage(self):
        """getUsage(BufferObject self) -> GLenum"""
        return _osg.BufferObject_getUsage(self)

    def getProfile(self, *args):
        """
        getProfile(BufferObject self) -> BufferObjectProfile
        getProfile(BufferObject self) -> BufferObjectProfile
        """
        return _osg.BufferObject_getProfile(self, *args)

    def setCopyDataAndReleaseGLBufferObject(self, *args):
        """setCopyDataAndReleaseGLBufferObject(BufferObject self, bool copyAndRelease)"""
        return _osg.BufferObject_setCopyDataAndReleaseGLBufferObject(self, *args)

    def getCopyDataAndReleaseGLBufferObject(self):
        """getCopyDataAndReleaseGLBufferObject(BufferObject self) -> bool"""
        return _osg.BufferObject_getCopyDataAndReleaseGLBufferObject(self)

    def dirty(self):
        """dirty(BufferObject self)"""
        return _osg.BufferObject_dirty(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(BufferObject self, unsigned int maxSize)"""
        return _osg.BufferObject_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(BufferObject self, State state=None)
        releaseGLObjects(BufferObject self)
        """
        return _osg.BufferObject_releaseGLObjects(self, state)

    def addBufferData(self, *args):
        """addBufferData(BufferObject self, BufferData bd) -> unsigned int"""
        return _osg.BufferObject_addBufferData(self, *args)

    def removeBufferData(self, *args):
        """
        removeBufferData(BufferObject self, unsigned int index)
        removeBufferData(BufferObject self, BufferData bd)
        """
        return _osg.BufferObject_removeBufferData(self, *args)

    def setBufferData(self, *args):
        """setBufferData(BufferObject self, unsigned int index, BufferData bd)"""
        return _osg.BufferObject_setBufferData(self, *args)

    def getBufferData(self, *args):
        """
        getBufferData(BufferObject self, unsigned int index) -> BufferData
        getBufferData(BufferObject self, unsigned int index) -> BufferData
        """
        return _osg.BufferObject_getBufferData(self, *args)

    def getNumBufferData(self):
        """getNumBufferData(BufferObject self) -> unsigned int"""
        return _osg.BufferObject_getNumBufferData(self)

    def setGLBufferObject(self, *args):
        """setGLBufferObject(BufferObject self, unsigned int contextID, GLBufferObject glbo)"""
        return _osg.BufferObject_setGLBufferObject(self, *args)

    def getGLBufferObject(self, *args):
        """getGLBufferObject(BufferObject self, unsigned int contextID) -> GLBufferObject"""
        return _osg.BufferObject_getGLBufferObject(self, *args)

    def getOrCreateGLBufferObject(self, *args):
        """getOrCreateGLBufferObject(BufferObject self, unsigned int contextID) -> GLBufferObject"""
        return _osg.BufferObject_getOrCreateGLBufferObject(self, *args)

    def computeRequiredBufferSize(self):
        """computeRequiredBufferSize(BufferObject self) -> unsigned int"""
        return _osg.BufferObject_computeRequiredBufferSize(self)

    def deleteBufferObject(*args):
        """deleteBufferObject(unsigned int contextID, GLuint globj)"""
        return _osg.BufferObject_deleteBufferObject(*args)

    if _newclass:deleteBufferObject = staticmethod(deleteBufferObject)
    __swig_getmethods__["deleteBufferObject"] = lambda x: deleteBufferObject
BufferObject_swigregister = _osg.BufferObject_swigregister
BufferObject_swigregister(BufferObject)

def BufferObject_deleteBufferObject(*args):
  """BufferObject_deleteBufferObject(unsigned int contextID, GLuint globj)"""
  return _osg.BufferObject_deleteBufferObject(*args)

class BufferData(Object):
    """Proxy of C++ osg::BufferData class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferData, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isSameKindAs(self, *args):
        """isSameKindAs(BufferData self, Object obj) -> bool"""
        return _osg.BufferData_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(BufferData self) -> char const *"""
        return _osg.BufferData_libraryName(self)

    def className(self):
        """className(BufferData self) -> char const *"""
        return _osg.BufferData_className(self)

    def getDataPointer(self):
        """getDataPointer(BufferData self) -> GLvoid const *"""
        return _osg.BufferData_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(BufferData self) -> unsigned int"""
        return _osg.BufferData_getTotalDataSize(self)

    def asArray(self, *args):
        """
        asArray(BufferData self) -> Array
        asArray(BufferData self) -> Array
        """
        return _osg.BufferData_asArray(self, *args)

    def asPrimitiveSet(self, *args):
        """
        asPrimitiveSet(BufferData self) -> PrimitiveSet
        asPrimitiveSet(BufferData self) -> PrimitiveSet
        """
        return _osg.BufferData_asPrimitiveSet(self, *args)

    def asImage(self, *args):
        """
        asImage(BufferData self) -> Image
        asImage(BufferData self) -> Image
        """
        return _osg.BufferData_asImage(self, *args)

    def setBufferObject(self, *args):
        """setBufferObject(BufferData self, BufferObject bufferObject)"""
        return _osg.BufferData_setBufferObject(self, *args)

    def getBufferObject(self, *args):
        """
        getBufferObject(BufferData self) -> BufferObject
        getBufferObject(BufferData self) -> BufferObject
        """
        return _osg.BufferData_getBufferObject(self, *args)

    def setBufferIndex(self, *args):
        """setBufferIndex(BufferData self, unsigned int index)"""
        return _osg.BufferData_setBufferIndex(self, *args)

    def getBufferIndex(self):
        """getBufferIndex(BufferData self) -> unsigned int"""
        return _osg.BufferData_getBufferIndex(self)

    def getGLBufferObject(self, *args):
        """getGLBufferObject(BufferData self, unsigned int contextID) -> GLBufferObject"""
        return _osg.BufferData_getGLBufferObject(self, *args)

    def getOrCreateGLBufferObject(self, *args):
        """getOrCreateGLBufferObject(BufferData self, unsigned int contextID) -> GLBufferObject"""
        return _osg.BufferData_getOrCreateGLBufferObject(self, *args)

    def setModifiedCallback(self, *args):
        """setModifiedCallback(BufferData self, osg::BufferData::ModifiedCallback * md)"""
        return _osg.BufferData_setModifiedCallback(self, *args)

    def getModifiedCallback(self, *args):
        """
        getModifiedCallback(BufferData self) -> osg::BufferData::ModifiedCallback
        getModifiedCallback(BufferData self) -> osg::BufferData::ModifiedCallback const *
        """
        return _osg.BufferData_getModifiedCallback(self, *args)

    def dirty(self):
        """dirty(BufferData self)"""
        return _osg.BufferData_dirty(self)

    def setModifiedCount(self, *args):
        """setModifiedCount(BufferData self, unsigned int value)"""
        return _osg.BufferData_setModifiedCount(self, *args)

    def getModifiedCount(self):
        """getModifiedCount(BufferData self) -> unsigned int"""
        return _osg.BufferData_getModifiedCount(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(BufferData self, unsigned int maxSize)"""
        return _osg.BufferData_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(BufferData self, State state=None)
        releaseGLObjects(BufferData self)
        """
        return _osg.BufferData_releaseGLObjects(self, state)

    def getNumClients(self):
        """getNumClients(BufferData self) -> unsigned int"""
        return _osg.BufferData_getNumClients(self)

    def addClient(self, *args):
        """addClient(BufferData self, Object arg2)"""
        return _osg.BufferData_addClient(self, *args)

    def removeClient(self, *args):
        """removeClient(BufferData self, Object arg2)"""
        return _osg.BufferData_removeClient(self, *args)

BufferData_swigregister = _osg.BufferData_swigregister
BufferData_swigregister(BufferData)

class VertexBufferObject(BufferObject):
    """Proxy of C++ osg::VertexBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::VertexBufferObject self) -> VertexBufferObject
        __init__(osg::VertexBufferObject self, VertexBufferObject vbo, CopyOp copyop=SHALLOW_COPY) -> VertexBufferObject
        __init__(osg::VertexBufferObject self, VertexBufferObject vbo) -> VertexBufferObject
        """
        this = _osg.new_VertexBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(VertexBufferObject self) -> Object"""
        return _osg.VertexBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(VertexBufferObject self, CopyOp copyop) -> Object"""
        return _osg.VertexBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(VertexBufferObject self, Object obj) -> bool"""
        return _osg.VertexBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(VertexBufferObject self) -> char const *"""
        return _osg.VertexBufferObject_libraryName(self)

    def className(self):
        """className(VertexBufferObject self) -> char const *"""
        return _osg.VertexBufferObject_className(self)

    def addArray(self, *args):
        """addArray(VertexBufferObject self, Array array) -> unsigned int"""
        return _osg.VertexBufferObject_addArray(self, *args)

    def removeArray(self, *args):
        """removeArray(VertexBufferObject self, Array array)"""
        return _osg.VertexBufferObject_removeArray(self, *args)

    def setArray(self, *args):
        """setArray(VertexBufferObject self, unsigned int i, Array array)"""
        return _osg.VertexBufferObject_setArray(self, *args)

    def getArray(self, *args):
        """
        getArray(VertexBufferObject self, unsigned int i) -> Array
        getArray(VertexBufferObject self, unsigned int i) -> Array
        """
        return _osg.VertexBufferObject_getArray(self, *args)

VertexBufferObject_swigregister = _osg.VertexBufferObject_swigregister
VertexBufferObject_swigregister(VertexBufferObject)

class ElementBufferObject(BufferObject):
    """Proxy of C++ osg::ElementBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElementBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ElementBufferObject self) -> ElementBufferObject
        __init__(osg::ElementBufferObject self, ElementBufferObject pbo, CopyOp copyop=SHALLOW_COPY) -> ElementBufferObject
        __init__(osg::ElementBufferObject self, ElementBufferObject pbo) -> ElementBufferObject
        """
        this = _osg.new_ElementBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ElementBufferObject self) -> Object"""
        return _osg.ElementBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(ElementBufferObject self, CopyOp copyop) -> Object"""
        return _osg.ElementBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ElementBufferObject self, Object obj) -> bool"""
        return _osg.ElementBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ElementBufferObject self) -> char const *"""
        return _osg.ElementBufferObject_libraryName(self)

    def className(self):
        """className(ElementBufferObject self) -> char const *"""
        return _osg.ElementBufferObject_className(self)

    def addDrawElements(self, *args):
        """addDrawElements(ElementBufferObject self, DrawElements PrimitiveSet) -> unsigned int"""
        return _osg.ElementBufferObject_addDrawElements(self, *args)

    def removeDrawElements(self, *args):
        """removeDrawElements(ElementBufferObject self, DrawElements PrimitiveSet)"""
        return _osg.ElementBufferObject_removeDrawElements(self, *args)

    def setDrawElements(self, *args):
        """setDrawElements(ElementBufferObject self, unsigned int i, DrawElements PrimitiveSet)"""
        return _osg.ElementBufferObject_setDrawElements(self, *args)

    def getDrawElements(self, *args):
        """
        getDrawElements(ElementBufferObject self, unsigned int i) -> DrawElements
        getDrawElements(ElementBufferObject self, unsigned int i) -> DrawElements
        """
        return _osg.ElementBufferObject_getDrawElements(self, *args)

ElementBufferObject_swigregister = _osg.ElementBufferObject_swigregister
ElementBufferObject_swigregister(ElementBufferObject)

class PixelBufferObject(BufferObject):
    """Proxy of C++ osg::PixelBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::PixelBufferObject self, Image image=None) -> PixelBufferObject
        __init__(osg::PixelBufferObject self) -> PixelBufferObject
        __init__(osg::PixelBufferObject self, PixelBufferObject pbo, CopyOp copyop=SHALLOW_COPY) -> PixelBufferObject
        __init__(osg::PixelBufferObject self, PixelBufferObject pbo) -> PixelBufferObject
        """
        this = _osg.new_PixelBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(PixelBufferObject self) -> Object"""
        return _osg.PixelBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(PixelBufferObject self, CopyOp copyop) -> Object"""
        return _osg.PixelBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(PixelBufferObject self, Object obj) -> bool"""
        return _osg.PixelBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(PixelBufferObject self) -> char const *"""
        return _osg.PixelBufferObject_libraryName(self)

    def className(self):
        """className(PixelBufferObject self) -> char const *"""
        return _osg.PixelBufferObject_className(self)

    def setImage(self, *args):
        """setImage(PixelBufferObject self, Image image)"""
        return _osg.PixelBufferObject_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(PixelBufferObject self) -> Image
        getImage(PixelBufferObject self) -> Image
        """
        return _osg.PixelBufferObject_getImage(self, *args)

    def isPBOSupported(self, *args):
        """isPBOSupported(PixelBufferObject self, unsigned int contextID) -> bool"""
        return _osg.PixelBufferObject_isPBOSupported(self, *args)

PixelBufferObject_swigregister = _osg.PixelBufferObject_swigregister
PixelBufferObject_swigregister(PixelBufferObject)

class PixelDataBufferObject(BufferObject):
    """Proxy of C++ osg::PixelDataBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelDataBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelDataBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::PixelDataBufferObject self) -> PixelDataBufferObject
        __init__(osg::PixelDataBufferObject self, PixelDataBufferObject pbo, CopyOp copyop=SHALLOW_COPY) -> PixelDataBufferObject
        __init__(osg::PixelDataBufferObject self, PixelDataBufferObject pbo) -> PixelDataBufferObject
        """
        this = _osg.new_PixelDataBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(PixelDataBufferObject self) -> Object"""
        return _osg.PixelDataBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(PixelDataBufferObject self, CopyOp copyop) -> Object"""
        return _osg.PixelDataBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(PixelDataBufferObject self, Object obj) -> bool"""
        return _osg.PixelDataBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(PixelDataBufferObject self) -> char const *"""
        return _osg.PixelDataBufferObject_libraryName(self)

    def className(self):
        """className(PixelDataBufferObject self) -> char const *"""
        return _osg.PixelDataBufferObject_className(self)

    def setDataSize(self, *args):
        """setDataSize(PixelDataBufferObject self, unsigned int size)"""
        return _osg.PixelDataBufferObject_setDataSize(self, *args)

    def getDataSize(self):
        """getDataSize(PixelDataBufferObject self) -> unsigned int"""
        return _osg.PixelDataBufferObject_getDataSize(self)

    def compileBuffer(self, *args):
        """compileBuffer(PixelDataBufferObject self, State state)"""
        return _osg.PixelDataBufferObject_compileBuffer(self, *args)

    def bindBufferInReadMode(self, *args):
        """bindBufferInReadMode(PixelDataBufferObject self, State state)"""
        return _osg.PixelDataBufferObject_bindBufferInReadMode(self, *args)

    def bindBufferInWriteMode(self, *args):
        """bindBufferInWriteMode(PixelDataBufferObject self, State state)"""
        return _osg.PixelDataBufferObject_bindBufferInWriteMode(self, *args)

    def unbindBuffer(self, *args):
        """unbindBuffer(PixelDataBufferObject self, unsigned int contextID)"""
        return _osg.PixelDataBufferObject_unbindBuffer(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(PixelDataBufferObject self, unsigned int maxSize)"""
        return _osg.PixelDataBufferObject_resizeGLObjectBuffers(self, *args)

    NONE = _osg.PixelDataBufferObject_NONE
    READ = _osg.PixelDataBufferObject_READ
    WRITE = _osg.PixelDataBufferObject_WRITE
    def getMode(self, *args):
        """getMode(PixelDataBufferObject self, unsigned int contextID) -> osg::PixelDataBufferObject::Mode"""
        return _osg.PixelDataBufferObject_getMode(self, *args)

PixelDataBufferObject_swigregister = _osg.PixelDataBufferObject_swigregister
PixelDataBufferObject_swigregister(PixelDataBufferObject)

class UniformBufferObject(BufferObject):
    """Proxy of C++ osg::UniformBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniformBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::UniformBufferObject self) -> UniformBufferObject
        __init__(osg::UniformBufferObject self, UniformBufferObject ubo, CopyOp copyop=SHALLOW_COPY) -> UniformBufferObject
        __init__(osg::UniformBufferObject self, UniformBufferObject ubo) -> UniformBufferObject
        """
        this = _osg.new_UniformBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(UniformBufferObject self) -> Object"""
        return _osg.UniformBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(UniformBufferObject self, CopyOp copyop) -> Object"""
        return _osg.UniformBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(UniformBufferObject self, Object obj) -> bool"""
        return _osg.UniformBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(UniformBufferObject self) -> char const *"""
        return _osg.UniformBufferObject_libraryName(self)

    def className(self):
        """className(UniformBufferObject self) -> char const *"""
        return _osg.UniformBufferObject_className(self)

UniformBufferObject_swigregister = _osg.UniformBufferObject_swigregister
UniformBufferObject_swigregister(UniformBufferObject)

class AtomicCounterBufferObject(BufferObject):
    """Proxy of C++ osg::AtomicCounterBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomicCounterBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomicCounterBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::AtomicCounterBufferObject self) -> AtomicCounterBufferObject
        __init__(osg::AtomicCounterBufferObject self, AtomicCounterBufferObject ubo, CopyOp copyop=SHALLOW_COPY) -> AtomicCounterBufferObject
        __init__(osg::AtomicCounterBufferObject self, AtomicCounterBufferObject ubo) -> AtomicCounterBufferObject
        """
        this = _osg.new_AtomicCounterBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(AtomicCounterBufferObject self) -> Object"""
        return _osg.AtomicCounterBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(AtomicCounterBufferObject self, CopyOp copyop) -> Object"""
        return _osg.AtomicCounterBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(AtomicCounterBufferObject self, Object obj) -> bool"""
        return _osg.AtomicCounterBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(AtomicCounterBufferObject self) -> char const *"""
        return _osg.AtomicCounterBufferObject_libraryName(self)

    def className(self):
        """className(AtomicCounterBufferObject self) -> char const *"""
        return _osg.AtomicCounterBufferObject_className(self)

AtomicCounterBufferObject_swigregister = _osg.AtomicCounterBufferObject_swigregister
AtomicCounterBufferObject_swigregister(AtomicCounterBufferObject)

OSG_IMAGE = _osg.OSG_IMAGE
GL_BGR = _osg.GL_BGR
GL_BGRA = _osg.GL_BGRA
GL_UNSIGNED_BYTE_3_3_2 = _osg.GL_UNSIGNED_BYTE_3_3_2
GL_UNSIGNED_BYTE_2_3_3_REV = _osg.GL_UNSIGNED_BYTE_2_3_3_REV
GL_UNSIGNED_SHORT_5_6_5 = _osg.GL_UNSIGNED_SHORT_5_6_5
GL_UNSIGNED_SHORT_5_6_5_REV = _osg.GL_UNSIGNED_SHORT_5_6_5_REV
GL_UNSIGNED_SHORT_4_4_4_4 = _osg.GL_UNSIGNED_SHORT_4_4_4_4
GL_UNSIGNED_SHORT_4_4_4_4_REV = _osg.GL_UNSIGNED_SHORT_4_4_4_4_REV
GL_UNSIGNED_SHORT_5_5_5_1 = _osg.GL_UNSIGNED_SHORT_5_5_5_1
GL_UNSIGNED_SHORT_1_5_5_5_REV = _osg.GL_UNSIGNED_SHORT_1_5_5_5_REV
GL_UNSIGNED_INT_8_8_8_8 = _osg.GL_UNSIGNED_INT_8_8_8_8
GL_UNSIGNED_INT_8_8_8_8_REV = _osg.GL_UNSIGNED_INT_8_8_8_8_REV
GL_UNSIGNED_INT_10_10_10_2 = _osg.GL_UNSIGNED_INT_10_10_10_2
GL_UNSIGNED_INT_2_10_10_10_REV = _osg.GL_UNSIGNED_INT_2_10_10_10_REV
GL_COMPRESSED_ALPHA = _osg.GL_COMPRESSED_ALPHA
GL_COMPRESSED_LUMINANCE = _osg.GL_COMPRESSED_LUMINANCE
GL_COMPRESSED_LUMINANCE_ALPHA = _osg.GL_COMPRESSED_LUMINANCE_ALPHA
GL_COMPRESSED_INTENSITY = _osg.GL_COMPRESSED_INTENSITY
GL_COMPRESSED_RGB = _osg.GL_COMPRESSED_RGB
GL_COMPRESSED_RGBA = _osg.GL_COMPRESSED_RGBA
GL_ABGR_EXT = _osg.GL_ABGR_EXT
GL_PACK_SKIP_IMAGES = _osg.GL_PACK_SKIP_IMAGES
GL_PACK_IMAGE_HEIGHT = _osg.GL_PACK_IMAGE_HEIGHT
GL_UNPACK_SKIP_IMAGES = _osg.GL_UNPACK_SKIP_IMAGES
GL_UNPACK_IMAGE_HEIGHT = _osg.GL_UNPACK_IMAGE_HEIGHT
GL_ETC1_RGB8_OES = _osg.GL_ETC1_RGB8_OES
GL_DEPTH_COMPONENT16 = _osg.GL_DEPTH_COMPONENT16
GL_DEPTH_COMPONENT24 = _osg.GL_DEPTH_COMPONENT24
GL_DEPTH_COMPONENT32 = _osg.GL_DEPTH_COMPONENT32
GL_DEPTH_COMPONENT32F = _osg.GL_DEPTH_COMPONENT32F
GL_DEPTH_COMPONENT32F_NV = _osg.GL_DEPTH_COMPONENT32F_NV
class Image(BufferData):
    """Proxy of C++ osg::Image class"""
    __swig_setmethods__ = {}
    for _s in [BufferData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Image self) -> Image
        __init__(osg::Image self, Image image, CopyOp copyop=SHALLOW_COPY) -> Image
        __init__(osg::Image self, Image image) -> Image
        """
        this = _osg.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Image self) -> Object"""
        return _osg.Image_cloneType(self)

    def clone(self, *args):
        """clone(Image self, CopyOp copyop) -> Object"""
        return _osg.Image_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Image self, Object obj) -> bool"""
        return _osg.Image_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Image self) -> char const *"""
        return _osg.Image_libraryName(self)

    def className(self):
        """className(Image self) -> char const *"""
        return _osg.Image_className(self)

    def asImage(self, *args):
        """
        asImage(Image self) -> Image
        asImage(Image self) -> Image
        """
        return _osg.Image_asImage(self, *args)

    def getDataPointer(self):
        """getDataPointer(Image self) -> GLvoid const *"""
        return _osg.Image_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(Image self) -> unsigned int"""
        return _osg.Image_getTotalDataSize(self)

    def compare(self, *args):
        """compare(Image self, Image rhs) -> int"""
        return _osg.Image_compare(self, *args)

    def setFileName(self, *args):
        """setFileName(Image self, std::string const & fileName)"""
        return _osg.Image_setFileName(self, *args)

    def getFileName(self):
        """getFileName(Image self) -> std::string const &"""
        return _osg.Image_getFileName(self)

    NO_PREFERENCE = _osg.Image_NO_PREFERENCE
    STORE_INLINE = _osg.Image_STORE_INLINE
    EXTERNAL_FILE = _osg.Image_EXTERNAL_FILE
    def setWriteHint(self, *args):
        """setWriteHint(Image self, osg::Image::WriteHint writeHint)"""
        return _osg.Image_setWriteHint(self, *args)

    def getWriteHint(self):
        """getWriteHint(Image self) -> osg::Image::WriteHint"""
        return _osg.Image_getWriteHint(self)

    NO_DELETE = _osg.Image_NO_DELETE
    USE_NEW_DELETE = _osg.Image_USE_NEW_DELETE
    USE_MALLOC_FREE = _osg.Image_USE_MALLOC_FREE
    def setAllocationMode(self, *args):
        """setAllocationMode(Image self, osg::Image::AllocationMode mode)"""
        return _osg.Image_setAllocationMode(self, *args)

    def getAllocationMode(self):
        """getAllocationMode(Image self) -> osg::Image::AllocationMode"""
        return _osg.Image_getAllocationMode(self)

    def allocateImage(self, *args):
        """
        allocateImage(Image self, int s, int t, int r, GLenum pixelFormat, GLenum type, int packing=1)
        allocateImage(Image self, int s, int t, int r, GLenum pixelFormat, GLenum type)
        """
        return _osg.Image_allocateImage(self, *args)

    def setImage(self, *args):
        """
        setImage(Image self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, GLenum type, 
            unsigned char * data, osg::Image::AllocationMode mode, int packing=1, int rowLength=0)
        setImage(Image self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, GLenum type, 
            unsigned char * data, osg::Image::AllocationMode mode, int packing=1)
        setImage(Image self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, GLenum type, 
            unsigned char * data, osg::Image::AllocationMode mode)
        """
        return _osg.Image_setImage(self, *args)

    def readPixels(self, *args):
        """
        readPixels(Image self, int x, int y, int width, int height, GLenum pixelFormat, GLenum type, int packing=1)
        readPixels(Image self, int x, int y, int width, int height, GLenum pixelFormat, GLenum type)
        """
        return _osg.Image_readPixels(self, *args)

    def readImageFromCurrentTexture(self, *args):
        """
        readImageFromCurrentTexture(Image self, unsigned int contextID, bool copyMipMapsIfAvailable, GLenum type=0x1401, unsigned int face=0)
        readImageFromCurrentTexture(Image self, unsigned int contextID, bool copyMipMapsIfAvailable, GLenum type=0x1401)
        readImageFromCurrentTexture(Image self, unsigned int contextID, bool copyMipMapsIfAvailable)
        """
        return _osg.Image_readImageFromCurrentTexture(self, *args)

    def swap(self, *args):
        """swap(Image self, Image rhs)"""
        return _osg.Image_swap(self, *args)

    def scaleImage(self, *args):
        """
        scaleImage(Image self, int s, int t, int r)
        scaleImage(Image self, int s, int t, int r, GLenum newDataType)
        """
        return _osg.Image_scaleImage(self, *args)

    def copySubImage(self, *args):
        """copySubImage(Image self, int s_offset, int t_offset, int r_offset, Image source)"""
        return _osg.Image_copySubImage(self, *args)

    BOTTOM_LEFT = _osg.Image_BOTTOM_LEFT
    TOP_LEFT = _osg.Image_TOP_LEFT
    def setOrigin(self, *args):
        """setOrigin(Image self, osg::Image::Origin origin)"""
        return _osg.Image_setOrigin(self, *args)

    def getOrigin(self):
        """getOrigin(Image self) -> osg::Image::Origin"""
        return _osg.Image_getOrigin(self)

    def s(self):
        """s(Image self) -> int"""
        return _osg.Image_s(self)

    def t(self):
        """t(Image self) -> int"""
        return _osg.Image_t(self)

    def r(self):
        """r(Image self) -> int"""
        return _osg.Image_r(self)

    def setRowLength(self, *args):
        """setRowLength(Image self, int length)"""
        return _osg.Image_setRowLength(self, *args)

    def getRowLength(self):
        """getRowLength(Image self) -> int"""
        return _osg.Image_getRowLength(self)

    def setInternalTextureFormat(self, *args):
        """setInternalTextureFormat(Image self, GLint internalFormat)"""
        return _osg.Image_setInternalTextureFormat(self, *args)

    def getInternalTextureFormat(self):
        """getInternalTextureFormat(Image self) -> GLint"""
        return _osg.Image_getInternalTextureFormat(self)

    def setPixelFormat(self, *args):
        """setPixelFormat(Image self, GLenum pixelFormat)"""
        return _osg.Image_setPixelFormat(self, *args)

    def getPixelFormat(self):
        """getPixelFormat(Image self) -> GLenum"""
        return _osg.Image_getPixelFormat(self)

    def setDataType(self, *args):
        """setDataType(Image self, GLenum dataType)"""
        return _osg.Image_setDataType(self, *args)

    def getDataType(self):
        """getDataType(Image self) -> GLenum"""
        return _osg.Image_getDataType(self)

    def setPacking(self, *args):
        """setPacking(Image self, unsigned int packing)"""
        return _osg.Image_setPacking(self, *args)

    def getPacking(self):
        """getPacking(Image self) -> unsigned int"""
        return _osg.Image_getPacking(self)

    def isCompressed(self):
        """isCompressed(Image self) -> bool"""
        return _osg.Image_isCompressed(self)

    def setPixelAspectRatio(self, *args):
        """setPixelAspectRatio(Image self, float pixelAspectRatio)"""
        return _osg.Image_setPixelAspectRatio(self, *args)

    def getPixelAspectRatio(self):
        """getPixelAspectRatio(Image self) -> float"""
        return _osg.Image_getPixelAspectRatio(self)

    def getPixelSizeInBits(self):
        """getPixelSizeInBits(Image self) -> unsigned int"""
        return _osg.Image_getPixelSizeInBits(self)

    def getRowSizeInBytes(self):
        """getRowSizeInBytes(Image self) -> unsigned int"""
        return _osg.Image_getRowSizeInBytes(self)

    def getRowStepInBytes(self):
        """getRowStepInBytes(Image self) -> unsigned int"""
        return _osg.Image_getRowStepInBytes(self)

    def getImageSizeInBytes(self):
        """getImageSizeInBytes(Image self) -> unsigned int"""
        return _osg.Image_getImageSizeInBytes(self)

    def getImageStepInBytes(self):
        """getImageStepInBytes(Image self) -> unsigned int"""
        return _osg.Image_getImageStepInBytes(self)

    def getTotalSizeInBytes(self):
        """getTotalSizeInBytes(Image self) -> unsigned int"""
        return _osg.Image_getTotalSizeInBytes(self)

    def getTotalSizeInBytesIncludingMipmaps(self):
        """getTotalSizeInBytesIncludingMipmaps(Image self) -> unsigned int"""
        return _osg.Image_getTotalSizeInBytesIncludingMipmaps(self)

    def valid(self):
        """valid(Image self) -> bool"""
        return _osg.Image_valid(self)

    def data(self, *args):
        """
        data(Image self) -> unsigned char
        data(Image self) -> unsigned char const
        data(Image self, unsigned int column, unsigned int row=0, unsigned int image=0) -> unsigned char
        data(Image self, unsigned int column, unsigned int row=0) -> unsigned char
        data(Image self, unsigned int column) -> unsigned char
        data(Image self, unsigned int column, unsigned int row=0, unsigned int image=0) -> unsigned char const
        data(Image self, unsigned int column, unsigned int row=0) -> unsigned char const
        data(Image self, unsigned int column) -> unsigned char const *
        """
        return _osg.Image_data(self, *args)

    def isDataContiguous(self):
        """isDataContiguous(Image self) -> bool"""
        return _osg.Image_isDataContiguous(self)

    def getColor(self, *args):
        """
        getColor(Image self, unsigned int s, unsigned int t=0, unsigned int r=0) -> Vec4f
        getColor(Image self, unsigned int s, unsigned int t=0) -> Vec4f
        getColor(Image self, unsigned int s) -> Vec4f
        getColor(Image self, Vec2f texcoord) -> Vec4f
        getColor(Image self, Vec3f texcoord) -> Vec4f
        """
        return _osg.Image_getColor(self, *args)

    def flipHorizontal(self):
        """flipHorizontal(Image self)"""
        return _osg.Image_flipHorizontal(self)

    def flipVertical(self):
        """flipVertical(Image self)"""
        return _osg.Image_flipVertical(self)

    def flipDepth(self):
        """flipDepth(Image self)"""
        return _osg.Image_flipDepth(self)

    def ensureValidSizeForTexturing(self, *args):
        """ensureValidSizeForTexturing(Image self, GLint maxTextureSize)"""
        return _osg.Image_ensureValidSizeForTexturing(self, *args)

    def isPackedType(*args):
        """isPackedType(GLenum type) -> bool"""
        return _osg.Image_isPackedType(*args)

    if _newclass:isPackedType = staticmethod(isPackedType)
    __swig_getmethods__["isPackedType"] = lambda x: isPackedType
    def computePixelFormat(*args):
        """computePixelFormat(GLenum pixelFormat) -> GLenum"""
        return _osg.Image_computePixelFormat(*args)

    if _newclass:computePixelFormat = staticmethod(computePixelFormat)
    __swig_getmethods__["computePixelFormat"] = lambda x: computePixelFormat
    def computeFormatDataType(*args):
        """computeFormatDataType(GLenum pixelFormat) -> GLenum"""
        return _osg.Image_computeFormatDataType(*args)

    if _newclass:computeFormatDataType = staticmethod(computeFormatDataType)
    __swig_getmethods__["computeFormatDataType"] = lambda x: computeFormatDataType
    def computeBlockSize(*args):
        """computeBlockSize(GLenum pixelFormat, GLenum packing) -> unsigned int"""
        return _osg.Image_computeBlockSize(*args)

    if _newclass:computeBlockSize = staticmethod(computeBlockSize)
    __swig_getmethods__["computeBlockSize"] = lambda x: computeBlockSize
    def computeNumComponents(*args):
        """computeNumComponents(GLenum pixelFormat) -> unsigned int"""
        return _osg.Image_computeNumComponents(*args)

    if _newclass:computeNumComponents = staticmethod(computeNumComponents)
    __swig_getmethods__["computeNumComponents"] = lambda x: computeNumComponents
    def computePixelSizeInBits(*args):
        """computePixelSizeInBits(GLenum pixelFormat, GLenum type) -> unsigned int"""
        return _osg.Image_computePixelSizeInBits(*args)

    if _newclass:computePixelSizeInBits = staticmethod(computePixelSizeInBits)
    __swig_getmethods__["computePixelSizeInBits"] = lambda x: computePixelSizeInBits
    def computeRowWidthInBytes(*args):
        """computeRowWidthInBytes(int width, GLenum pixelFormat, GLenum type, int packing) -> unsigned int"""
        return _osg.Image_computeRowWidthInBytes(*args)

    if _newclass:computeRowWidthInBytes = staticmethod(computeRowWidthInBytes)
    __swig_getmethods__["computeRowWidthInBytes"] = lambda x: computeRowWidthInBytes
    def computeImageSizeInBytes(*args):
        """
        computeImageSizeInBytes(int width, int height, int depth, GLenum pixelFormat, GLenum type, int packing=1, 
            int slice_packing=1, int image_packing=1) -> unsigned int
        computeImageSizeInBytes(int width, int height, int depth, GLenum pixelFormat, GLenum type, int packing=1, 
            int slice_packing=1) -> unsigned int
        computeImageSizeInBytes(int width, int height, int depth, GLenum pixelFormat, GLenum type, int packing=1) -> unsigned int
        computeImageSizeInBytes(int width, int height, int depth, GLenum pixelFormat, GLenum type) -> unsigned int
        """
        return _osg.Image_computeImageSizeInBytes(*args)

    if _newclass:computeImageSizeInBytes = staticmethod(computeImageSizeInBytes)
    __swig_getmethods__["computeImageSizeInBytes"] = lambda x: computeImageSizeInBytes
    def computeNearestPowerOfTwo(*args):
        """
        computeNearestPowerOfTwo(int s, float bias=0.5) -> int
        computeNearestPowerOfTwo(int s) -> int
        """
        return _osg.Image_computeNearestPowerOfTwo(*args)

    if _newclass:computeNearestPowerOfTwo = staticmethod(computeNearestPowerOfTwo)
    __swig_getmethods__["computeNearestPowerOfTwo"] = lambda x: computeNearestPowerOfTwo
    def computeNumberOfMipmapLevels(*args):
        """
        computeNumberOfMipmapLevels(int s, int t=1, int r=1) -> int
        computeNumberOfMipmapLevels(int s, int t=1) -> int
        computeNumberOfMipmapLevels(int s) -> int
        """
        return _osg.Image_computeNumberOfMipmapLevels(*args)

    if _newclass:computeNumberOfMipmapLevels = staticmethod(computeNumberOfMipmapLevels)
    __swig_getmethods__["computeNumberOfMipmapLevels"] = lambda x: computeNumberOfMipmapLevels
    def isMipmap(self):
        """isMipmap(Image self) -> bool"""
        return _osg.Image_isMipmap(self)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(Image self) -> unsigned int"""
        return _osg.Image_getNumMipmapLevels(self)

    def setMipmapLevels(self, *args):
        """setMipmapLevels(Image self, vectorGLuint mipmapDataVector)"""
        return _osg.Image_setMipmapLevels(self, *args)

    def getMipmapLevels(self):
        """getMipmapLevels(Image self) -> vectorGLuint"""
        return _osg.Image_getMipmapLevels(self)

    def getMipmapOffset(self, *args):
        """getMipmapOffset(Image self, unsigned int mipmapLevel) -> unsigned int"""
        return _osg.Image_getMipmapOffset(self, *args)

    def getMipmapData(self, *args):
        """
        getMipmapData(Image self, unsigned int mipmapLevel) -> unsigned char
        getMipmapData(Image self, unsigned int mipmapLevel) -> unsigned char const *
        """
        return _osg.Image_getMipmapData(self, *args)

    def supportsTextureSubloading(self):
        """supportsTextureSubloading(Image self) -> bool"""
        return _osg.Image_supportsTextureSubloading(self)

    def isImageTranslucent(self):
        """isImageTranslucent(Image self) -> bool"""
        return _osg.Image_isImageTranslucent(self)

    def setPixelBufferObject(self, *args):
        """setPixelBufferObject(Image self, PixelBufferObject buffer)"""
        return _osg.Image_setPixelBufferObject(self, *args)

    def getPixelBufferObject(self, *args):
        """
        getPixelBufferObject(Image self) -> PixelBufferObject
        getPixelBufferObject(Image self) -> PixelBufferObject
        """
        return _osg.Image_getPixelBufferObject(self, *args)

    def requiresUpdateCall(self):
        """requiresUpdateCall(Image self) -> bool"""
        return _osg.Image_requiresUpdateCall(self)

    def update(self, *args):
        """update(Image self, NodeVisitor arg2)"""
        return _osg.Image_update(self, *args)

    def sendFocusHint(self, *args):
        """sendFocusHint(Image self, bool arg2) -> bool"""
        return _osg.Image_sendFocusHint(self, *args)

    def sendPointerEvent(self, *args):
        """sendPointerEvent(Image self, int arg2, int arg3, int arg4) -> bool"""
        return _osg.Image_sendPointerEvent(self, *args)

    def sendKeyEvent(self, *args):
        """sendKeyEvent(Image self, int arg2, bool arg3) -> bool"""
        return _osg.Image_sendKeyEvent(self, *args)

    def setFrameLastRendered(self, *args):
        """setFrameLastRendered(Image self, FrameStamp arg2)"""
        return _osg.Image_setFrameLastRendered(self, *args)

    def addDimensionsChangedCallback(self, *args):
        """addDimensionsChangedCallback(Image self, osg::Image::DimensionsChangedCallback * cb)"""
        return _osg.Image_addDimensionsChangedCallback(self, *args)

    def removeDimensionsChangedCallback(self, *args):
        """removeDimensionsChangedCallback(Image self, osg::Image::DimensionsChangedCallback * cb)"""
        return _osg.Image_removeDimensionsChangedCallback(self, *args)

Image_swigregister = _osg.Image_swigregister
Image_swigregister(Image)

def Image_isPackedType(*args):
  """Image_isPackedType(GLenum type) -> bool"""
  return _osg.Image_isPackedType(*args)

def Image_computePixelFormat(*args):
  """Image_computePixelFormat(GLenum pixelFormat) -> GLenum"""
  return _osg.Image_computePixelFormat(*args)

def Image_computeFormatDataType(*args):
  """Image_computeFormatDataType(GLenum pixelFormat) -> GLenum"""
  return _osg.Image_computeFormatDataType(*args)

def Image_computeBlockSize(*args):
  """Image_computeBlockSize(GLenum pixelFormat, GLenum packing) -> unsigned int"""
  return _osg.Image_computeBlockSize(*args)

def Image_computeNumComponents(*args):
  """Image_computeNumComponents(GLenum pixelFormat) -> unsigned int"""
  return _osg.Image_computeNumComponents(*args)

def Image_computePixelSizeInBits(*args):
  """Image_computePixelSizeInBits(GLenum pixelFormat, GLenum type) -> unsigned int"""
  return _osg.Image_computePixelSizeInBits(*args)

def Image_computeRowWidthInBytes(*args):
  """Image_computeRowWidthInBytes(int width, GLenum pixelFormat, GLenum type, int packing) -> unsigned int"""
  return _osg.Image_computeRowWidthInBytes(*args)

def Image_computeImageSizeInBytes(*args):
  """
    computeImageSizeInBytes(int width, int height, int depth, GLenum pixelFormat, GLenum type, int packing=1, 
        int slice_packing=1, int image_packing=1) -> unsigned int
    computeImageSizeInBytes(int width, int height, int depth, GLenum pixelFormat, GLenum type, int packing=1, 
        int slice_packing=1) -> unsigned int
    computeImageSizeInBytes(int width, int height, int depth, GLenum pixelFormat, GLenum type, int packing=1) -> unsigned int
    Image_computeImageSizeInBytes(int width, int height, int depth, GLenum pixelFormat, GLenum type) -> unsigned int
    """
  return _osg.Image_computeImageSizeInBytes(*args)

def Image_computeNearestPowerOfTwo(*args):
  """
    computeNearestPowerOfTwo(int s, float bias=0.5) -> int
    Image_computeNearestPowerOfTwo(int s) -> int
    """
  return _osg.Image_computeNearestPowerOfTwo(*args)

def Image_computeNumberOfMipmapLevels(*args):
  """
    computeNumberOfMipmapLevels(int s, int t=1, int r=1) -> int
    computeNumberOfMipmapLevels(int s, int t=1) -> int
    Image_computeNumberOfMipmapLevels(int s) -> int
    """
  return _osg.Image_computeNumberOfMipmapLevels(*args)


def createGeodeForImage(*args):
  """
    createGeodeForImage(Image image) -> Geode
    createGeodeForImage(Image image, float s, float t) -> Geode
    """
  return _osg.createGeodeForImage(*args)
OSG_IMAGESTREAM = _osg.OSG_IMAGESTREAM
class ImageStream(Image):
    """Proxy of C++ osg::ImageStream class"""
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageStream, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ImageStream self) -> ImageStream
        __init__(osg::ImageStream self, ImageStream image, CopyOp copyop=SHALLOW_COPY) -> ImageStream
        __init__(osg::ImageStream self, ImageStream image) -> ImageStream
        """
        this = _osg.new_ImageStream(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ImageStream self) -> Object"""
        return _osg.ImageStream_cloneType(self)

    def clone(self, *args):
        """clone(ImageStream self, CopyOp copyop) -> Object"""
        return _osg.ImageStream_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ImageStream self, Object obj) -> bool"""
        return _osg.ImageStream_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ImageStream self) -> char const *"""
        return _osg.ImageStream_libraryName(self)

    def className(self):
        """className(ImageStream self) -> char const *"""
        return _osg.ImageStream_className(self)

    def compare(self, *args):
        """compare(ImageStream self, Image rhs) -> int"""
        return _osg.ImageStream_compare(self, *args)

    INVALID = _osg.ImageStream_INVALID
    PLAYING = _osg.ImageStream_PLAYING
    PAUSED = _osg.ImageStream_PAUSED
    REWINDING = _osg.ImageStream_REWINDING
    def seek(self, *args):
        """seek(ImageStream self, double arg2)"""
        return _osg.ImageStream_seek(self, *args)

    def play(self):
        """play(ImageStream self)"""
        return _osg.ImageStream_play(self)

    def pause(self):
        """pause(ImageStream self)"""
        return _osg.ImageStream_pause(self)

    def rewind(self):
        """rewind(ImageStream self)"""
        return _osg.ImageStream_rewind(self)

    def quit(self, arg2=True):
        """
        quit(ImageStream self, bool arg2=True)
        quit(ImageStream self)
        """
        return _osg.ImageStream_quit(self, arg2)

    def getStatus(self):
        """getStatus(ImageStream self) -> osg::ImageStream::StreamStatus"""
        return _osg.ImageStream_getStatus(self)

    NO_LOOPING = _osg.ImageStream_NO_LOOPING
    LOOPING = _osg.ImageStream_LOOPING
    def setLoopingMode(self, *args):
        """setLoopingMode(ImageStream self, osg::ImageStream::LoopingMode mode)"""
        return _osg.ImageStream_setLoopingMode(self, *args)

    def getLoopingMode(self):
        """getLoopingMode(ImageStream self) -> osg::ImageStream::LoopingMode"""
        return _osg.ImageStream_getLoopingMode(self)

    def getCreationTime(self):
        """getCreationTime(ImageStream self) -> double"""
        return _osg.ImageStream_getCreationTime(self)

    def getLength(self):
        """getLength(ImageStream self) -> double"""
        return _osg.ImageStream_getLength(self)

    def getFrameRate(self):
        """getFrameRate(ImageStream self) -> double"""
        return _osg.ImageStream_getFrameRate(self)

    def getCurrentTime(self):
        """getCurrentTime(ImageStream self) -> double"""
        return _osg.ImageStream_getCurrentTime(self)

    def setReferenceTime(self, *args):
        """setReferenceTime(ImageStream self, double arg2)"""
        return _osg.ImageStream_setReferenceTime(self, *args)

    def getReferenceTime(self):
        """getReferenceTime(ImageStream self) -> double"""
        return _osg.ImageStream_getReferenceTime(self)

    def setTimeMultiplier(self, *args):
        """setTimeMultiplier(ImageStream self, double arg2)"""
        return _osg.ImageStream_setTimeMultiplier(self, *args)

    def getTimeMultiplier(self):
        """getTimeMultiplier(ImageStream self) -> double"""
        return _osg.ImageStream_getTimeMultiplier(self)

    def setVolume(self, *args):
        """setVolume(ImageStream self, float arg2)"""
        return _osg.ImageStream_setVolume(self, *args)

    def getVolume(self):
        """getVolume(ImageStream self) -> float"""
        return _osg.ImageStream_getVolume(self)

    def getAudioBalance(self):
        """getAudioBalance(ImageStream self) -> float"""
        return _osg.ImageStream_getAudioBalance(self)

    def setAudioBalance(self, *args):
        """setAudioBalance(ImageStream self, float arg2)"""
        return _osg.ImageStream_setAudioBalance(self, *args)

    def setAudioStreams(self, *args):
        """setAudioStreams(ImageStream self, osg::ImageStream::AudioStreams const & asl)"""
        return _osg.ImageStream_setAudioStreams(self, *args)

    def getAudioStreams(self, *args):
        """
        getAudioStreams(ImageStream self) -> osg::ImageStream::AudioStreams
        getAudioStreams(ImageStream self) -> osg::ImageStream::AudioStreams const &
        """
        return _osg.ImageStream_getAudioStreams(self, *args)

    def createSuitableTexture(self):
        """createSuitableTexture(ImageStream self) -> Texture"""
        return _osg.ImageStream_createSuitableTexture(self)

ImageStream_swigregister = _osg.ImageStream_swigregister
ImageStream_swigregister(ImageStream)

OSG_IMAGESEQUENCE = _osg.OSG_IMAGESEQUENCE
class ImageSequence(ImageStream):
    """Proxy of C++ osg::ImageSequence class"""
    __swig_setmethods__ = {}
    for _s in [ImageStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSequence, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSequence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ImageSequence self) -> ImageSequence
        __init__(osg::ImageSequence self, ImageSequence ImageSequence, CopyOp copyop=SHALLOW_COPY) -> ImageSequence
        __init__(osg::ImageSequence self, ImageSequence ImageSequence) -> ImageSequence
        """
        this = _osg.new_ImageSequence(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ImageSequence self) -> Object"""
        return _osg.ImageSequence_cloneType(self)

    def clone(self, *args):
        """clone(ImageSequence self, CopyOp copyop) -> Object"""
        return _osg.ImageSequence_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ImageSequence self, Object obj) -> bool"""
        return _osg.ImageSequence_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ImageSequence self) -> char const *"""
        return _osg.ImageSequence_libraryName(self)

    def className(self):
        """className(ImageSequence self) -> char const *"""
        return _osg.ImageSequence_className(self)

    def compare(self, *args):
        """compare(ImageSequence self, Image rhs) -> int"""
        return _osg.ImageSequence_compare(self, *args)

    def setReferenceTime(self, *args):
        """setReferenceTime(ImageSequence self, double t)"""
        return _osg.ImageSequence_setReferenceTime(self, *args)

    def getReferenceTime(self):
        """getReferenceTime(ImageSequence self) -> double"""
        return _osg.ImageSequence_getReferenceTime(self)

    def setTimeMultiplier(self, *args):
        """setTimeMultiplier(ImageSequence self, double tm)"""
        return _osg.ImageSequence_setTimeMultiplier(self, *args)

    def getTimeMultiplier(self):
        """getTimeMultiplier(ImageSequence self) -> double"""
        return _osg.ImageSequence_getTimeMultiplier(self)

    def seek(self, *args):
        """seek(ImageSequence self, double time)"""
        return _osg.ImageSequence_seek(self, *args)

    def play(self):
        """play(ImageSequence self)"""
        return _osg.ImageSequence_play(self)

    def pause(self):
        """pause(ImageSequence self)"""
        return _osg.ImageSequence_pause(self)

    def rewind(self):
        """rewind(ImageSequence self)"""
        return _osg.ImageSequence_rewind(self)

    PRE_LOAD_ALL_IMAGES = _osg.ImageSequence_PRE_LOAD_ALL_IMAGES
    PAGE_AND_RETAIN_IMAGES = _osg.ImageSequence_PAGE_AND_RETAIN_IMAGES
    PAGE_AND_DISCARD_USED_IMAGES = _osg.ImageSequence_PAGE_AND_DISCARD_USED_IMAGES
    LOAD_AND_RETAIN_IN_UPDATE_TRAVERSAL = _osg.ImageSequence_LOAD_AND_RETAIN_IN_UPDATE_TRAVERSAL
    LOAD_AND_DISCARD_IN_UPDATE_TRAVERSAL = _osg.ImageSequence_LOAD_AND_DISCARD_IN_UPDATE_TRAVERSAL
    def setMode(self, *args):
        """setMode(ImageSequence self, osg::ImageSequence::Mode mode)"""
        return _osg.ImageSequence_setMode(self, *args)

    def getMode(self):
        """getMode(ImageSequence self) -> osg::ImageSequence::Mode"""
        return _osg.ImageSequence_getMode(self)

    def setLength(self, *args):
        """setLength(ImageSequence self, double length)"""
        return _osg.ImageSequence_setLength(self, *args)

    def getLength(self):
        """getLength(ImageSequence self) -> double"""
        return _osg.ImageSequence_getLength(self)

    def addImageFile(self, *args):
        """addImageFile(ImageSequence self, std::string const & fileName)"""
        return _osg.ImageSequence_addImageFile(self, *args)

    def setImageFile(self, *args):
        """setImageFile(ImageSequence self, unsigned int pos, std::string const & fileName)"""
        return _osg.ImageSequence_setImageFile(self, *args)

    def getImageFile(self, *args):
        """getImageFile(ImageSequence self, unsigned int pos) -> std::string"""
        return _osg.ImageSequence_getImageFile(self, *args)

    def addImage(self, *args):
        """addImage(ImageSequence self, Image image)"""
        return _osg.ImageSequence_addImage(self, *args)

    def setImage(self, *args):
        """
        setImage(ImageSequence self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, GLenum type, 
            unsigned char * data, osg::Image::AllocationMode mode, int packing=1)
        setImage(ImageSequence self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, GLenum type, 
            unsigned char * data, osg::Image::AllocationMode mode)
        setImage(ImageSequence self, unsigned int pos, Image image)
        """
        return _osg.ImageSequence_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(ImageSequence self, unsigned int pos) -> Image
        getImage(ImageSequence self, unsigned int pos) -> Image
        """
        return _osg.ImageSequence_getImage(self, *args)

    def getNumImageData(self):
        """getNumImageData(ImageSequence self) -> unsigned int"""
        return _osg.ImageSequence_getNumImageData(self)

    def getImageDataList(self, *args):
        """
        getImageDataList(ImageSequence self) -> osg::ImageSequence::ImageDataList
        getImageDataList(ImageSequence self) -> osg::ImageSequence::ImageDataList const &
        """
        return _osg.ImageSequence_getImageDataList(self, *args)

    def requiresUpdateCall(self):
        """requiresUpdateCall(ImageSequence self) -> bool"""
        return _osg.ImageSequence_requiresUpdateCall(self)

    def update(self, *args):
        """update(ImageSequence self, NodeVisitor nv)"""
        return _osg.ImageSequence_update(self, *args)

    def setReadOptions(self, *args):
        """setReadOptions(ImageSequence self, Referenced options)"""
        return _osg.ImageSequence_setReadOptions(self, *args)

    def getReadOptions(self, *args):
        """
        getReadOptions(ImageSequence self) -> Referenced
        getReadOptions(ImageSequence self) -> Referenced
        """
        return _osg.ImageSequence_getReadOptions(self, *args)

ImageSequence_swigregister = _osg.ImageSequence_swigregister
ImageSequence_swigregister(ImageSequence)

OSG_OPERATIONTHREAD = _osg.OSG_OPERATIONTHREAD
class RefBlock(Referenced):
    """Proxy of C++ osg::RefBlock class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefBlock, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefBlock, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::RefBlock self) -> RefBlock"""
        this = _osg.new_RefBlock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_RefBlock
    __del__ = lambda self : None;
RefBlock_swigregister = _osg.RefBlock_swigregister
RefBlock_swigregister(RefBlock)

class RefBlockCount(Referenced):
    """Proxy of C++ osg::RefBlockCount class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefBlockCount, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefBlockCount, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osg::RefBlockCount self, unsigned int blockCount) -> RefBlockCount"""
        this = _osg.new_RefBlockCount(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_RefBlockCount
    __del__ = lambda self : None;
RefBlockCount_swigregister = _osg.RefBlockCount_swigregister
RefBlockCount_swigregister(RefBlockCount)

class Operation(Referenced):
    """Proxy of C++ osg::Operation class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operation, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Operation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setName(self, *args):
        """setName(Operation self, std::string const & name)"""
        return _osg.Operation_setName(self, *args)

    def getName(self):
        """getName(Operation self) -> std::string const &"""
        return _osg.Operation_getName(self)

    def setKeep(self, *args):
        """setKeep(Operation self, bool keep)"""
        return _osg.Operation_setKeep(self, *args)

    def getKeep(self):
        """getKeep(Operation self) -> bool"""
        return _osg.Operation_getKeep(self)

    def release(self):
        """release(Operation self)"""
        return _osg.Operation_release(self)

    def __call__(self, *args):
        """__call__(Operation self, Object arg2)"""
        return _osg.Operation___call__(self, *args)

Operation_swigregister = _osg.Operation_swigregister
Operation_swigregister(Operation)

class OperationQueue(Referenced):
    """Proxy of C++ osg::OperationQueue class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationQueue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::OperationQueue self) -> OperationQueue"""
        this = _osg.new_OperationQueue()
        try: self.this.append(this)
        except: self.this = this
    def getNextOperation(self, blockIfEmpty=False):
        """
        getNextOperation(OperationQueue self, bool blockIfEmpty=False) -> osg::ref_ptr< osg::Operation >
        getNextOperation(OperationQueue self) -> osg::ref_ptr< osg::Operation >
        """
        return _osg.OperationQueue_getNextOperation(self, blockIfEmpty)

    def empty(self):
        """empty(OperationQueue self) -> bool"""
        return _osg.OperationQueue_empty(self)

    def getNumOperationsInQueue(self):
        """getNumOperationsInQueue(OperationQueue self) -> unsigned int"""
        return _osg.OperationQueue_getNumOperationsInQueue(self)

    def add(self, *args):
        """add(OperationQueue self, Operation operation)"""
        return _osg.OperationQueue_add(self, *args)

    def remove(self, *args):
        """
        remove(OperationQueue self, Operation operation)
        remove(OperationQueue self, std::string const & name)
        """
        return _osg.OperationQueue_remove(self, *args)

    def removeAllOperations(self):
        """removeAllOperations(OperationQueue self)"""
        return _osg.OperationQueue_removeAllOperations(self)

    def runOperations(self, callingObject=None):
        """
        runOperations(OperationQueue self, Object callingObject=None)
        runOperations(OperationQueue self)
        """
        return _osg.OperationQueue_runOperations(self, callingObject)

    def releaseAllOperations(self):
        """releaseAllOperations(OperationQueue self)"""
        return _osg.OperationQueue_releaseAllOperations(self)

    def releaseOperationsBlock(self):
        """releaseOperationsBlock(OperationQueue self)"""
        return _osg.OperationQueue_releaseOperationsBlock(self)

    def getOperationThreads(self):
        """getOperationThreads(OperationQueue self) -> osg::OperationQueue::OperationThreads const &"""
        return _osg.OperationQueue_getOperationThreads(self)

OperationQueue_swigregister = _osg.OperationQueue_swigregister
OperationQueue_swigregister(OperationQueue)

class OperationThread(Referenced):
    """Proxy of C++ osg::OperationThread class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationThread, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationThread, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::OperationThread self) -> OperationThread"""
        this = _osg.new_OperationThread()
        try: self.this.append(this)
        except: self.this = this
    def setParent(self, *args):
        """setParent(OperationThread self, Object parent)"""
        return _osg.OperationThread_setParent(self, *args)

    def getParent(self, *args):
        """
        getParent(OperationThread self) -> Object
        getParent(OperationThread self) -> Object
        """
        return _osg.OperationThread_getParent(self, *args)

    def setOperationQueue(self, *args):
        """setOperationQueue(OperationThread self, OperationQueue opq)"""
        return _osg.OperationThread_setOperationQueue(self, *args)

    def getOperationQueue(self, *args):
        """
        getOperationQueue(OperationThread self) -> OperationQueue
        getOperationQueue(OperationThread self) -> OperationQueue
        """
        return _osg.OperationThread_getOperationQueue(self, *args)

    def add(self, *args):
        """add(OperationThread self, Operation operation)"""
        return _osg.OperationThread_add(self, *args)

    def remove(self, *args):
        """
        remove(OperationThread self, Operation operation)
        remove(OperationThread self, std::string const & name)
        """
        return _osg.OperationThread_remove(self, *args)

    def removeAllOperations(self):
        """removeAllOperations(OperationThread self)"""
        return _osg.OperationThread_removeAllOperations(self)

    def getCurrentOperation(self):
        """getCurrentOperation(OperationThread self) -> osg::ref_ptr< osg::Operation >"""
        return _osg.OperationThread_getCurrentOperation(self)

    def run(self):
        """run(OperationThread self)"""
        return _osg.OperationThread_run(self)

    def setDone(self, *args):
        """setDone(OperationThread self, bool done)"""
        return _osg.OperationThread_setDone(self, *args)

    def getDone(self):
        """getDone(OperationThread self) -> bool"""
        return _osg.OperationThread_getDone(self)

    def cancel(self):
        """cancel(OperationThread self) -> int"""
        return _osg.OperationThread_cancel(self)

OperationThread_swigregister = _osg.OperationThread_swigregister
OperationThread_swigregister(OperationThread)

OSG_GRAPHICSTHREAD = _osg.OSG_GRAPHICSTHREAD
class GraphicsThread(OperationThread):
    """Proxy of C++ osg::GraphicsThread class"""
    __swig_setmethods__ = {}
    for _s in [OperationThread]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsThread, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationThread]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsThread, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::GraphicsThread self) -> GraphicsThread"""
        this = _osg.new_GraphicsThread()
        try: self.this.append(this)
        except: self.this = this
    def run(self):
        """run(GraphicsThread self)"""
        return _osg.GraphicsThread_run(self)

    __swig_destroy__ = _osg.delete_GraphicsThread
    __del__ = lambda self : None;
GraphicsThread_swigregister = _osg.GraphicsThread_swigregister
GraphicsThread_swigregister(GraphicsThread)

class GraphicsOperation(Operation):
    """Proxy of C++ osg::GraphicsOperation class"""
    __swig_setmethods__ = {}
    for _s in [Operation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [Operation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsOperation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def __call__(self, *args):
        """
        __call__(GraphicsOperation self, Object object)
        __call__(GraphicsOperation self, GraphicsContext context)
        """
        return _osg.GraphicsOperation___call__(self, *args)

    __swig_destroy__ = _osg.delete_GraphicsOperation
    __del__ = lambda self : None;
GraphicsOperation_swigregister = _osg.GraphicsOperation_swigregister
GraphicsOperation_swigregister(GraphicsOperation)

class SwapBuffersOperation(GraphicsOperation):
    """Proxy of C++ osg::SwapBuffersOperation class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapBuffersOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwapBuffersOperation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::SwapBuffersOperation self) -> SwapBuffersOperation"""
        this = _osg.new_SwapBuffersOperation()
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """__call__(SwapBuffersOperation self, GraphicsContext context)"""
        return _osg.SwapBuffersOperation___call__(self, *args)

    __swig_destroy__ = _osg.delete_SwapBuffersOperation
    __del__ = lambda self : None;
SwapBuffersOperation_swigregister = _osg.SwapBuffersOperation_swigregister
SwapBuffersOperation_swigregister(SwapBuffersOperation)

class BarrierOperation(Operation):
    """Proxy of C++ osg::BarrierOperation class"""
    __swig_setmethods__ = {}
    for _s in [Operation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarrierOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [Operation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarrierOperation, name)
    __repr__ = _swig_repr
    NO_OPERATION = _osg.BarrierOperation_NO_OPERATION
    GL_FLUSH = _osg.BarrierOperation_GL_FLUSH
    GL_FINISH = _osg.BarrierOperation_GL_FINISH
    def __init__(self, *args): 
        """
        __init__(osg::BarrierOperation self, int numThreads, osg::BarrierOperation::PreBlockOp op=NO_OPERATION, bool keep=True) -> BarrierOperation
        __init__(osg::BarrierOperation self, int numThreads, osg::BarrierOperation::PreBlockOp op=NO_OPERATION) -> BarrierOperation
        __init__(osg::BarrierOperation self, int numThreads) -> BarrierOperation
        """
        this = _osg.new_BarrierOperation(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self):
        """release(BarrierOperation self)"""
        return _osg.BarrierOperation_release(self)

    def __call__(self, *args):
        """__call__(BarrierOperation self, Object object)"""
        return _osg.BarrierOperation___call__(self, *args)

    __swig_setmethods__["_preBlockOp"] = _osg.BarrierOperation__preBlockOp_set
    __swig_getmethods__["_preBlockOp"] = _osg.BarrierOperation__preBlockOp_get
    if _newclass:_preBlockOp = _swig_property(_osg.BarrierOperation__preBlockOp_get, _osg.BarrierOperation__preBlockOp_set)
    __swig_destroy__ = _osg.delete_BarrierOperation
    __del__ = lambda self : None;
BarrierOperation_swigregister = _osg.BarrierOperation_swigregister
BarrierOperation_swigregister(BarrierOperation)

class ReleaseContext_Block_MakeCurrentOperation(GraphicsOperation,RefBlock):
    """Proxy of C++ osg::ReleaseContext_Block_MakeCurrentOperation class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation,RefBlock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReleaseContext_Block_MakeCurrentOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation,RefBlock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReleaseContext_Block_MakeCurrentOperation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::ReleaseContext_Block_MakeCurrentOperation self) -> ReleaseContext_Block_MakeCurrentOperation"""
        this = _osg.new_ReleaseContext_Block_MakeCurrentOperation()
        try: self.this.append(this)
        except: self.this = this
    def release(self):
        """release(ReleaseContext_Block_MakeCurrentOperation self)"""
        return _osg.ReleaseContext_Block_MakeCurrentOperation_release(self)

    def __call__(self, *args):
        """__call__(ReleaseContext_Block_MakeCurrentOperation self, GraphicsContext context)"""
        return _osg.ReleaseContext_Block_MakeCurrentOperation___call__(self, *args)

    __swig_destroy__ = _osg.delete_ReleaseContext_Block_MakeCurrentOperation
    __del__ = lambda self : None;
ReleaseContext_Block_MakeCurrentOperation_swigregister = _osg.ReleaseContext_Block_MakeCurrentOperation_swigregister
ReleaseContext_Block_MakeCurrentOperation_swigregister(ReleaseContext_Block_MakeCurrentOperation)

class BlockAndFlushOperation(GraphicsOperation):
    """Proxy of C++ osg::BlockAndFlushOperation class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockAndFlushOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockAndFlushOperation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::BlockAndFlushOperation self) -> BlockAndFlushOperation"""
        this = _osg.new_BlockAndFlushOperation()
        try: self.this.append(this)
        except: self.this = this
    def release(self):
        """release(BlockAndFlushOperation self)"""
        return _osg.BlockAndFlushOperation_release(self)

    def __call__(self, *args):
        """__call__(BlockAndFlushOperation self, GraphicsContext arg2)"""
        return _osg.BlockAndFlushOperation___call__(self, *args)

    __swig_destroy__ = _osg.delete_BlockAndFlushOperation
    __del__ = lambda self : None;
BlockAndFlushOperation_swigregister = _osg.BlockAndFlushOperation_swigregister
BlockAndFlushOperation_swigregister(BlockAndFlushOperation)

class FlushDeletedGLObjectsOperation(GraphicsOperation):
    """Proxy of C++ osg::FlushDeletedGLObjectsOperation class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlushDeletedGLObjectsOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlushDeletedGLObjectsOperation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::FlushDeletedGLObjectsOperation self, double availableTime, bool keep=False) -> FlushDeletedGLObjectsOperation
        __init__(osg::FlushDeletedGLObjectsOperation self, double availableTime) -> FlushDeletedGLObjectsOperation
        """
        this = _osg.new_FlushDeletedGLObjectsOperation(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """__call__(FlushDeletedGLObjectsOperation self, GraphicsContext arg2)"""
        return _osg.FlushDeletedGLObjectsOperation___call__(self, *args)

    __swig_setmethods__["_availableTime"] = _osg.FlushDeletedGLObjectsOperation__availableTime_set
    __swig_getmethods__["_availableTime"] = _osg.FlushDeletedGLObjectsOperation__availableTime_get
    if _newclass:_availableTime = _swig_property(_osg.FlushDeletedGLObjectsOperation__availableTime_get, _osg.FlushDeletedGLObjectsOperation__availableTime_set)
    __swig_destroy__ = _osg.delete_FlushDeletedGLObjectsOperation
    __del__ = lambda self : None;
FlushDeletedGLObjectsOperation_swigregister = _osg.FlushDeletedGLObjectsOperation_swigregister
FlushDeletedGLObjectsOperation_swigregister(FlushDeletedGLObjectsOperation)

class RunOperations(GraphicsOperation):
    """Proxy of C++ osg::RunOperations class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunOperations, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RunOperations, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::RunOperations self) -> RunOperations"""
        this = _osg.new_RunOperations()
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """__call__(RunOperations self, GraphicsContext context)"""
        return _osg.RunOperations___call__(self, *args)

    __swig_destroy__ = _osg.delete_RunOperations
    __del__ = lambda self : None;
RunOperations_swigregister = _osg.RunOperations_swigregister
RunOperations_swigregister(RunOperations)

class EndOfDynamicDrawBlock(_object):
    """Proxy of C++ osg::EndOfDynamicDrawBlock class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndOfDynamicDrawBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EndOfDynamicDrawBlock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osg::EndOfDynamicDrawBlock self, unsigned int arg2) -> EndOfDynamicDrawBlock"""
        this = _osg.new_EndOfDynamicDrawBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    def completed(self, *args):
        """completed(EndOfDynamicDrawBlock self, State state)"""
        return _osg.EndOfDynamicDrawBlock_completed(self, *args)

EndOfDynamicDrawBlock_swigregister = _osg.EndOfDynamicDrawBlock_swigregister
EndOfDynamicDrawBlock_swigregister(EndOfDynamicDrawBlock)

OSG_GRAPHICSCONTEXT = _osg.OSG_GRAPHICSCONTEXT
class GraphicsContext(Object):
    """Proxy of C++ osg::GraphicsContext class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsContext, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setWindowingSystemInterface(*args):
        """setWindowingSystemInterface(osg::GraphicsContext::WindowingSystemInterface * wsInterface)"""
        return _osg.GraphicsContext_setWindowingSystemInterface(*args)

    if _newclass:setWindowingSystemInterface = staticmethod(setWindowingSystemInterface)
    __swig_getmethods__["setWindowingSystemInterface"] = lambda x: setWindowingSystemInterface
    def getWindowingSystemInterface():
        """getWindowingSystemInterface() -> osg::GraphicsContext::WindowingSystemInterface *"""
        return _osg.GraphicsContext_getWindowingSystemInterface()

    if _newclass:getWindowingSystemInterface = staticmethod(getWindowingSystemInterface)
    __swig_getmethods__["getWindowingSystemInterface"] = lambda x: getWindowingSystemInterface
    def createGraphicsContext(*args):
        """createGraphicsContext(osg::GraphicsContext::Traits * traits) -> GraphicsContext"""
        return _osg.GraphicsContext_createGraphicsContext(*args)

    if _newclass:createGraphicsContext = staticmethod(createGraphicsContext)
    __swig_getmethods__["createGraphicsContext"] = lambda x: createGraphicsContext
    def createNewContextID():
        """createNewContextID() -> unsigned int"""
        return _osg.GraphicsContext_createNewContextID()

    if _newclass:createNewContextID = staticmethod(createNewContextID)
    __swig_getmethods__["createNewContextID"] = lambda x: createNewContextID
    def getMaxContextID():
        """getMaxContextID() -> unsigned int"""
        return _osg.GraphicsContext_getMaxContextID()

    if _newclass:getMaxContextID = staticmethod(getMaxContextID)
    __swig_getmethods__["getMaxContextID"] = lambda x: getMaxContextID
    def incrementContextIDUsageCount(*args):
        """incrementContextIDUsageCount(unsigned int contextID)"""
        return _osg.GraphicsContext_incrementContextIDUsageCount(*args)

    if _newclass:incrementContextIDUsageCount = staticmethod(incrementContextIDUsageCount)
    __swig_getmethods__["incrementContextIDUsageCount"] = lambda x: incrementContextIDUsageCount
    def decrementContextIDUsageCount(*args):
        """decrementContextIDUsageCount(unsigned int contextID)"""
        return _osg.GraphicsContext_decrementContextIDUsageCount(*args)

    if _newclass:decrementContextIDUsageCount = staticmethod(decrementContextIDUsageCount)
    __swig_getmethods__["decrementContextIDUsageCount"] = lambda x: decrementContextIDUsageCount
    def getAllRegisteredGraphicsContexts():
        """getAllRegisteredGraphicsContexts() -> osg::GraphicsContext::GraphicsContexts"""
        return _osg.GraphicsContext_getAllRegisteredGraphicsContexts()

    if _newclass:getAllRegisteredGraphicsContexts = staticmethod(getAllRegisteredGraphicsContexts)
    __swig_getmethods__["getAllRegisteredGraphicsContexts"] = lambda x: getAllRegisteredGraphicsContexts
    def getRegisteredGraphicsContexts(*args):
        """getRegisteredGraphicsContexts(unsigned int contextID) -> osg::GraphicsContext::GraphicsContexts"""
        return _osg.GraphicsContext_getRegisteredGraphicsContexts(*args)

    if _newclass:getRegisteredGraphicsContexts = staticmethod(getRegisteredGraphicsContexts)
    __swig_getmethods__["getRegisteredGraphicsContexts"] = lambda x: getRegisteredGraphicsContexts
    def setCompileContext(*args):
        """setCompileContext(unsigned int contextID, GraphicsContext gc)"""
        return _osg.GraphicsContext_setCompileContext(*args)

    if _newclass:setCompileContext = staticmethod(setCompileContext)
    __swig_getmethods__["setCompileContext"] = lambda x: setCompileContext
    def getOrCreateCompileContext(*args):
        """getOrCreateCompileContext(unsigned int contextID) -> GraphicsContext"""
        return _osg.GraphicsContext_getOrCreateCompileContext(*args)

    if _newclass:getOrCreateCompileContext = staticmethod(getOrCreateCompileContext)
    __swig_getmethods__["getOrCreateCompileContext"] = lambda x: getOrCreateCompileContext
    def getCompileContext(*args):
        """getCompileContext(unsigned int contextID) -> GraphicsContext"""
        return _osg.GraphicsContext_getCompileContext(*args)

    if _newclass:getCompileContext = staticmethod(getCompileContext)
    __swig_getmethods__["getCompileContext"] = lambda x: getCompileContext
    def removeAllOperations(self):
        """removeAllOperations(GraphicsContext self)"""
        return _osg.GraphicsContext_removeAllOperations(self)

    def runOperations(self):
        """runOperations(GraphicsContext self)"""
        return _osg.GraphicsContext_runOperations(self)

    def getOperationsQueue(self):
        """getOperationsQueue(GraphicsContext self) -> osg::GraphicsContext::GraphicsOperationQueue &"""
        return _osg.GraphicsContext_getOperationsQueue(self)

    def getOperationsMutex(self):
        """getOperationsMutex(GraphicsContext self) -> OpenThreads::Mutex *"""
        return _osg.GraphicsContext_getOperationsMutex(self)

    def getOperationsBlock(self):
        """getOperationsBlock(GraphicsContext self) -> RefBlock"""
        return _osg.GraphicsContext_getOperationsBlock(self)

    def getTraits(self):
        """getTraits(GraphicsContext self) -> osg::GraphicsContext::Traits const *"""
        return _osg.GraphicsContext_getTraits(self)

    def valid(self):
        """valid(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_valid(self)

    def setState(self, *args):
        """setState(GraphicsContext self, State state)"""
        return _osg.GraphicsContext_setState(self, *args)

    def getState(self, *args):
        """
        getState(GraphicsContext self) -> State
        getState(GraphicsContext self) -> State
        """
        return _osg.GraphicsContext_getState(self, *args)

    def setClearColor(self, *args):
        """setClearColor(GraphicsContext self, Vec4f color)"""
        return _osg.GraphicsContext_setClearColor(self, *args)

    def getClearColor(self):
        """getClearColor(GraphicsContext self) -> Vec4f"""
        return _osg.GraphicsContext_getClearColor(self)

    def setClearMask(self, *args):
        """setClearMask(GraphicsContext self, GLbitfield mask)"""
        return _osg.GraphicsContext_setClearMask(self, *args)

    def getClearMask(self):
        """getClearMask(GraphicsContext self) -> GLbitfield"""
        return _osg.GraphicsContext_getClearMask(self)

    def clear(self):
        """clear(GraphicsContext self)"""
        return _osg.GraphicsContext_clear(self)

    def getTimeSinceLastClear(self):
        """getTimeSinceLastClear(GraphicsContext self) -> double"""
        return _osg.GraphicsContext_getTimeSinceLastClear(self)

    def realize(self):
        """realize(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_realize(self)

    def close(self, callCloseImplementation=True):
        """
        close(GraphicsContext self, bool callCloseImplementation=True)
        close(GraphicsContext self)
        """
        return _osg.GraphicsContext_close(self, callCloseImplementation)

    def swapBuffers(self):
        """swapBuffers(GraphicsContext self)"""
        return _osg.GraphicsContext_swapBuffers(self)

    def isRealized(self):
        """isRealized(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_isRealized(self)

    def makeCurrent(self):
        """makeCurrent(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_makeCurrent(self)

    def makeContextCurrent(self, *args):
        """makeContextCurrent(GraphicsContext self, GraphicsContext readContext) -> bool"""
        return _osg.GraphicsContext_makeContextCurrent(self, *args)

    def releaseContext(self):
        """releaseContext(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_releaseContext(self)

    def isCurrent(self):
        """isCurrent(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_isCurrent(self)

    def bindPBufferToTexture(self, *args):
        """bindPBufferToTexture(GraphicsContext self, GLenum buffer)"""
        return _osg.GraphicsContext_bindPBufferToTexture(self, *args)

    def createGraphicsThread(self):
        """createGraphicsThread(GraphicsContext self)"""
        return _osg.GraphicsContext_createGraphicsThread(self)

    def setGraphicsThread(self, *args):
        """setGraphicsThread(GraphicsContext self, GraphicsThread gt)"""
        return _osg.GraphicsContext_setGraphicsThread(self, *args)

    def getGraphicsThread(self, *args):
        """
        getGraphicsThread(GraphicsContext self) -> GraphicsThread
        getGraphicsThread(GraphicsContext self) -> GraphicsThread
        """
        return _osg.GraphicsContext_getGraphicsThread(self, *args)

    def realizeImplementation(self):
        """realizeImplementation(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_realizeImplementation(self)

    def isRealizedImplementation(self):
        """isRealizedImplementation(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_isRealizedImplementation(self)

    def closeImplementation(self):
        """closeImplementation(GraphicsContext self)"""
        return _osg.GraphicsContext_closeImplementation(self)

    def makeCurrentImplementation(self):
        """makeCurrentImplementation(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_makeCurrentImplementation(self)

    def makeContextCurrentImplementation(self, *args):
        """makeContextCurrentImplementation(GraphicsContext self, GraphicsContext readContext) -> bool"""
        return _osg.GraphicsContext_makeContextCurrentImplementation(self, *args)

    def releaseContextImplementation(self):
        """releaseContextImplementation(GraphicsContext self) -> bool"""
        return _osg.GraphicsContext_releaseContextImplementation(self)

    def bindPBufferToTextureImplementation(self, *args):
        """bindPBufferToTextureImplementation(GraphicsContext self, GLenum buffer)"""
        return _osg.GraphicsContext_bindPBufferToTextureImplementation(self, *args)

    def setSwapCallback(self, *args):
        """setSwapCallback(GraphicsContext self, osg::GraphicsContext::SwapCallback * rc)"""
        return _osg.GraphicsContext_setSwapCallback(self, *args)

    def getSwapCallback(self, *args):
        """
        getSwapCallback(GraphicsContext self) -> osg::GraphicsContext::SwapCallback
        getSwapCallback(GraphicsContext self) -> osg::GraphicsContext::SwapCallback const *
        """
        return _osg.GraphicsContext_getSwapCallback(self, *args)

    def swapBuffersCallbackOrImplemenation(self):
        """swapBuffersCallbackOrImplemenation(GraphicsContext self)"""
        return _osg.GraphicsContext_swapBuffersCallbackOrImplemenation(self)

    def swapBuffersImplementation(self):
        """swapBuffersImplementation(GraphicsContext self)"""
        return _osg.GraphicsContext_swapBuffersImplementation(self)

    def resized(self, *args):
        """resized(GraphicsContext self, int x, int y, int width, int height)"""
        return _osg.GraphicsContext_resized(self, *args)

    def resizedImplementation(self, *args):
        """resizedImplementation(GraphicsContext self, int x, int y, int width, int height)"""
        return _osg.GraphicsContext_resizedImplementation(self, *args)

    def getCameras(self, *args):
        """
        getCameras(GraphicsContext self) -> osg::GraphicsContext::Cameras
        getCameras(GraphicsContext self) -> osg::GraphicsContext::Cameras const &
        """
        return _osg.GraphicsContext_getCameras(self, *args)

    def setDefaultFboId(self, *args):
        """setDefaultFboId(GraphicsContext self, GLuint i)"""
        return _osg.GraphicsContext_setDefaultFboId(self, *args)

    def getDefaultFboId(self):
        """getDefaultFboId(GraphicsContext self) -> GLuint"""
        return _osg.GraphicsContext_getDefaultFboId(self)

    def isSameKindAs(self, *args):
        """isSameKindAs(GraphicsContext self, Object object) -> bool"""
        return _osg.GraphicsContext_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(GraphicsContext self) -> char const *"""
        return _osg.GraphicsContext_libraryName(self)

    def className(self):
        """className(GraphicsContext self) -> char const *"""
        return _osg.GraphicsContext_className(self)

GraphicsContext_swigregister = _osg.GraphicsContext_swigregister
GraphicsContext_swigregister(GraphicsContext)

def GraphicsContext_setWindowingSystemInterface(*args):
  """GraphicsContext_setWindowingSystemInterface(osg::GraphicsContext::WindowingSystemInterface * wsInterface)"""
  return _osg.GraphicsContext_setWindowingSystemInterface(*args)

def GraphicsContext_getWindowingSystemInterface():
  """GraphicsContext_getWindowingSystemInterface() -> osg::GraphicsContext::WindowingSystemInterface *"""
  return _osg.GraphicsContext_getWindowingSystemInterface()

def GraphicsContext_createGraphicsContext(*args):
  """GraphicsContext_createGraphicsContext(osg::GraphicsContext::Traits * traits) -> GraphicsContext"""
  return _osg.GraphicsContext_createGraphicsContext(*args)

def GraphicsContext_createNewContextID():
  """GraphicsContext_createNewContextID() -> unsigned int"""
  return _osg.GraphicsContext_createNewContextID()

def GraphicsContext_getMaxContextID():
  """GraphicsContext_getMaxContextID() -> unsigned int"""
  return _osg.GraphicsContext_getMaxContextID()

def GraphicsContext_incrementContextIDUsageCount(*args):
  """GraphicsContext_incrementContextIDUsageCount(unsigned int contextID)"""
  return _osg.GraphicsContext_incrementContextIDUsageCount(*args)

def GraphicsContext_decrementContextIDUsageCount(*args):
  """GraphicsContext_decrementContextIDUsageCount(unsigned int contextID)"""
  return _osg.GraphicsContext_decrementContextIDUsageCount(*args)

def GraphicsContext_getAllRegisteredGraphicsContexts():
  """GraphicsContext_getAllRegisteredGraphicsContexts() -> osg::GraphicsContext::GraphicsContexts"""
  return _osg.GraphicsContext_getAllRegisteredGraphicsContexts()

def GraphicsContext_getRegisteredGraphicsContexts(*args):
  """GraphicsContext_getRegisteredGraphicsContexts(unsigned int contextID) -> osg::GraphicsContext::GraphicsContexts"""
  return _osg.GraphicsContext_getRegisteredGraphicsContexts(*args)

def GraphicsContext_setCompileContext(*args):
  """GraphicsContext_setCompileContext(unsigned int contextID, GraphicsContext gc)"""
  return _osg.GraphicsContext_setCompileContext(*args)

def GraphicsContext_getOrCreateCompileContext(*args):
  """GraphicsContext_getOrCreateCompileContext(unsigned int contextID) -> GraphicsContext"""
  return _osg.GraphicsContext_getOrCreateCompileContext(*args)

def GraphicsContext_getCompileContext(*args):
  """GraphicsContext_getCompileContext(unsigned int contextID) -> GraphicsContext"""
  return _osg.GraphicsContext_getCompileContext(*args)

class SwapCallback(Referenced):
    """Proxy of C++ SwapCallback class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwapCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def swapBuffersImplementation(self, *args):
        """swapBuffersImplementation(SwapCallback self, GraphicsContext gc)"""
        return _osg.SwapCallback_swapBuffersImplementation(self, *args)

    __swig_destroy__ = _osg.delete_SwapCallback
    __del__ = lambda self : None;
SwapCallback_swigregister = _osg.SwapCallback_swigregister
SwapCallback_swigregister(SwapCallback)

class ScreenIdentifier(_object):
    """Proxy of C++ ScreenIdentifier class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenIdentifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenIdentifier, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(ScreenIdentifier self) -> ScreenIdentifier
        __init__(ScreenIdentifier self, int in_screenNum) -> ScreenIdentifier
        __init__(ScreenIdentifier self, std::string const & in_hostName, int in_displayNum, int in_screenNum) -> ScreenIdentifier
        """
        this = _osg.new_ScreenIdentifier(*args)
        try: self.this.append(this)
        except: self.this = this
    def displayName(self):
        """displayName(ScreenIdentifier self) -> std::string"""
        return _osg.ScreenIdentifier_displayName(self)

    def readDISPLAY(self):
        """readDISPLAY(ScreenIdentifier self)"""
        return _osg.ScreenIdentifier_readDISPLAY(self)

    def setScreenIdentifier(self, *args):
        """setScreenIdentifier(ScreenIdentifier self, std::string const & displayName)"""
        return _osg.ScreenIdentifier_setScreenIdentifier(self, *args)

    def setUndefinedScreenDetailsToDefaultScreen(self):
        """setUndefinedScreenDetailsToDefaultScreen(ScreenIdentifier self)"""
        return _osg.ScreenIdentifier_setUndefinedScreenDetailsToDefaultScreen(self)

    __swig_setmethods__["hostName"] = _osg.ScreenIdentifier_hostName_set
    __swig_getmethods__["hostName"] = _osg.ScreenIdentifier_hostName_get
    if _newclass:hostName = _swig_property(_osg.ScreenIdentifier_hostName_get, _osg.ScreenIdentifier_hostName_set)
    __swig_setmethods__["displayNum"] = _osg.ScreenIdentifier_displayNum_set
    __swig_getmethods__["displayNum"] = _osg.ScreenIdentifier_displayNum_get
    if _newclass:displayNum = _swig_property(_osg.ScreenIdentifier_displayNum_get, _osg.ScreenIdentifier_displayNum_set)
    __swig_setmethods__["screenNum"] = _osg.ScreenIdentifier_screenNum_set
    __swig_getmethods__["screenNum"] = _osg.ScreenIdentifier_screenNum_get
    if _newclass:screenNum = _swig_property(_osg.ScreenIdentifier_screenNum_get, _osg.ScreenIdentifier_screenNum_set)
    __swig_destroy__ = _osg.delete_ScreenIdentifier
    __del__ = lambda self : None;
ScreenIdentifier_swigregister = _osg.ScreenIdentifier_swigregister
ScreenIdentifier_swigregister(ScreenIdentifier)

class Traits(Referenced,ScreenIdentifier):
    """Proxy of C++ Traits class"""
    __swig_setmethods__ = {}
    for _s in [Referenced,ScreenIdentifier]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Traits, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced,ScreenIdentifier]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Traits, name)
    __repr__ = _swig_repr
    def __init__(self, ds=None): 
        """
        __init__(Traits self, DisplaySettings ds=None) -> Traits
        __init__(Traits self) -> Traits
        """
        this = _osg.new_Traits(ds)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["x"] = _osg.Traits_x_set
    __swig_getmethods__["x"] = _osg.Traits_x_get
    if _newclass:x = _swig_property(_osg.Traits_x_get, _osg.Traits_x_set)
    __swig_setmethods__["y"] = _osg.Traits_y_set
    __swig_getmethods__["y"] = _osg.Traits_y_get
    if _newclass:y = _swig_property(_osg.Traits_y_get, _osg.Traits_y_set)
    __swig_setmethods__["width"] = _osg.Traits_width_set
    __swig_getmethods__["width"] = _osg.Traits_width_get
    if _newclass:width = _swig_property(_osg.Traits_width_get, _osg.Traits_width_set)
    __swig_setmethods__["height"] = _osg.Traits_height_set
    __swig_getmethods__["height"] = _osg.Traits_height_get
    if _newclass:height = _swig_property(_osg.Traits_height_get, _osg.Traits_height_set)
    __swig_setmethods__["windowName"] = _osg.Traits_windowName_set
    __swig_getmethods__["windowName"] = _osg.Traits_windowName_get
    if _newclass:windowName = _swig_property(_osg.Traits_windowName_get, _osg.Traits_windowName_set)
    __swig_setmethods__["windowDecoration"] = _osg.Traits_windowDecoration_set
    __swig_getmethods__["windowDecoration"] = _osg.Traits_windowDecoration_get
    if _newclass:windowDecoration = _swig_property(_osg.Traits_windowDecoration_get, _osg.Traits_windowDecoration_set)
    __swig_setmethods__["supportsResize"] = _osg.Traits_supportsResize_set
    __swig_getmethods__["supportsResize"] = _osg.Traits_supportsResize_get
    if _newclass:supportsResize = _swig_property(_osg.Traits_supportsResize_get, _osg.Traits_supportsResize_set)
    __swig_setmethods__["red"] = _osg.Traits_red_set
    __swig_getmethods__["red"] = _osg.Traits_red_get
    if _newclass:red = _swig_property(_osg.Traits_red_get, _osg.Traits_red_set)
    __swig_setmethods__["blue"] = _osg.Traits_blue_set
    __swig_getmethods__["blue"] = _osg.Traits_blue_get
    if _newclass:blue = _swig_property(_osg.Traits_blue_get, _osg.Traits_blue_set)
    __swig_setmethods__["green"] = _osg.Traits_green_set
    __swig_getmethods__["green"] = _osg.Traits_green_get
    if _newclass:green = _swig_property(_osg.Traits_green_get, _osg.Traits_green_set)
    __swig_setmethods__["alpha"] = _osg.Traits_alpha_set
    __swig_getmethods__["alpha"] = _osg.Traits_alpha_get
    if _newclass:alpha = _swig_property(_osg.Traits_alpha_get, _osg.Traits_alpha_set)
    __swig_setmethods__["depth"] = _osg.Traits_depth_set
    __swig_getmethods__["depth"] = _osg.Traits_depth_get
    if _newclass:depth = _swig_property(_osg.Traits_depth_get, _osg.Traits_depth_set)
    __swig_setmethods__["stencil"] = _osg.Traits_stencil_set
    __swig_getmethods__["stencil"] = _osg.Traits_stencil_get
    if _newclass:stencil = _swig_property(_osg.Traits_stencil_get, _osg.Traits_stencil_set)
    __swig_setmethods__["sampleBuffers"] = _osg.Traits_sampleBuffers_set
    __swig_getmethods__["sampleBuffers"] = _osg.Traits_sampleBuffers_get
    if _newclass:sampleBuffers = _swig_property(_osg.Traits_sampleBuffers_get, _osg.Traits_sampleBuffers_set)
    __swig_setmethods__["samples"] = _osg.Traits_samples_set
    __swig_getmethods__["samples"] = _osg.Traits_samples_get
    if _newclass:samples = _swig_property(_osg.Traits_samples_get, _osg.Traits_samples_set)
    __swig_setmethods__["pbuffer"] = _osg.Traits_pbuffer_set
    __swig_getmethods__["pbuffer"] = _osg.Traits_pbuffer_get
    if _newclass:pbuffer = _swig_property(_osg.Traits_pbuffer_get, _osg.Traits_pbuffer_set)
    __swig_setmethods__["quadBufferStereo"] = _osg.Traits_quadBufferStereo_set
    __swig_getmethods__["quadBufferStereo"] = _osg.Traits_quadBufferStereo_get
    if _newclass:quadBufferStereo = _swig_property(_osg.Traits_quadBufferStereo_get, _osg.Traits_quadBufferStereo_set)
    __swig_setmethods__["doubleBuffer"] = _osg.Traits_doubleBuffer_set
    __swig_getmethods__["doubleBuffer"] = _osg.Traits_doubleBuffer_get
    if _newclass:doubleBuffer = _swig_property(_osg.Traits_doubleBuffer_get, _osg.Traits_doubleBuffer_set)
    __swig_setmethods__["target"] = _osg.Traits_target_set
    __swig_getmethods__["target"] = _osg.Traits_target_get
    if _newclass:target = _swig_property(_osg.Traits_target_get, _osg.Traits_target_set)
    __swig_setmethods__["format"] = _osg.Traits_format_set
    __swig_getmethods__["format"] = _osg.Traits_format_get
    if _newclass:format = _swig_property(_osg.Traits_format_get, _osg.Traits_format_set)
    __swig_setmethods__["level"] = _osg.Traits_level_set
    __swig_getmethods__["level"] = _osg.Traits_level_get
    if _newclass:level = _swig_property(_osg.Traits_level_get, _osg.Traits_level_set)
    __swig_setmethods__["face"] = _osg.Traits_face_set
    __swig_getmethods__["face"] = _osg.Traits_face_get
    if _newclass:face = _swig_property(_osg.Traits_face_get, _osg.Traits_face_set)
    __swig_setmethods__["mipMapGeneration"] = _osg.Traits_mipMapGeneration_set
    __swig_getmethods__["mipMapGeneration"] = _osg.Traits_mipMapGeneration_get
    if _newclass:mipMapGeneration = _swig_property(_osg.Traits_mipMapGeneration_get, _osg.Traits_mipMapGeneration_set)
    __swig_setmethods__["vsync"] = _osg.Traits_vsync_set
    __swig_getmethods__["vsync"] = _osg.Traits_vsync_get
    if _newclass:vsync = _swig_property(_osg.Traits_vsync_get, _osg.Traits_vsync_set)
    __swig_setmethods__["swapGroupEnabled"] = _osg.Traits_swapGroupEnabled_set
    __swig_getmethods__["swapGroupEnabled"] = _osg.Traits_swapGroupEnabled_get
    if _newclass:swapGroupEnabled = _swig_property(_osg.Traits_swapGroupEnabled_get, _osg.Traits_swapGroupEnabled_set)
    __swig_setmethods__["swapGroup"] = _osg.Traits_swapGroup_set
    __swig_getmethods__["swapGroup"] = _osg.Traits_swapGroup_get
    if _newclass:swapGroup = _swig_property(_osg.Traits_swapGroup_get, _osg.Traits_swapGroup_set)
    __swig_setmethods__["swapBarrier"] = _osg.Traits_swapBarrier_set
    __swig_getmethods__["swapBarrier"] = _osg.Traits_swapBarrier_get
    if _newclass:swapBarrier = _swig_property(_osg.Traits_swapBarrier_get, _osg.Traits_swapBarrier_set)
    __swig_setmethods__["useMultiThreadedOpenGLEngine"] = _osg.Traits_useMultiThreadedOpenGLEngine_set
    __swig_getmethods__["useMultiThreadedOpenGLEngine"] = _osg.Traits_useMultiThreadedOpenGLEngine_get
    if _newclass:useMultiThreadedOpenGLEngine = _swig_property(_osg.Traits_useMultiThreadedOpenGLEngine_get, _osg.Traits_useMultiThreadedOpenGLEngine_set)
    __swig_setmethods__["useCursor"] = _osg.Traits_useCursor_set
    __swig_getmethods__["useCursor"] = _osg.Traits_useCursor_get
    if _newclass:useCursor = _swig_property(_osg.Traits_useCursor_get, _osg.Traits_useCursor_set)
    __swig_setmethods__["glContextVersion"] = _osg.Traits_glContextVersion_set
    __swig_getmethods__["glContextVersion"] = _osg.Traits_glContextVersion_get
    if _newclass:glContextVersion = _swig_property(_osg.Traits_glContextVersion_get, _osg.Traits_glContextVersion_set)
    __swig_setmethods__["glContextFlags"] = _osg.Traits_glContextFlags_set
    __swig_getmethods__["glContextFlags"] = _osg.Traits_glContextFlags_get
    if _newclass:glContextFlags = _swig_property(_osg.Traits_glContextFlags_get, _osg.Traits_glContextFlags_set)
    __swig_setmethods__["glContextProfileMask"] = _osg.Traits_glContextProfileMask_set
    __swig_getmethods__["glContextProfileMask"] = _osg.Traits_glContextProfileMask_get
    if _newclass:glContextProfileMask = _swig_property(_osg.Traits_glContextProfileMask_get, _osg.Traits_glContextProfileMask_set)
    def getContextVersion(self, *args):
        """getContextVersion(Traits self, unsigned int & major, unsigned int & minor) -> bool"""
        return _osg.Traits_getContextVersion(self, *args)

    __swig_setmethods__["sharedContext"] = _osg.Traits_sharedContext_set
    __swig_getmethods__["sharedContext"] = _osg.Traits_sharedContext_get
    if _newclass:sharedContext = _swig_property(_osg.Traits_sharedContext_get, _osg.Traits_sharedContext_set)
    __swig_setmethods__["inheritedWindowData"] = _osg.Traits_inheritedWindowData_set
    __swig_getmethods__["inheritedWindowData"] = _osg.Traits_inheritedWindowData_get
    if _newclass:inheritedWindowData = _swig_property(_osg.Traits_inheritedWindowData_get, _osg.Traits_inheritedWindowData_set)
    __swig_setmethods__["setInheritedWindowPixelFormat"] = _osg.Traits_setInheritedWindowPixelFormat_set
    __swig_getmethods__["setInheritedWindowPixelFormat"] = _osg.Traits_setInheritedWindowPixelFormat_get
    if _newclass:setInheritedWindowPixelFormat = _swig_property(_osg.Traits_setInheritedWindowPixelFormat_get, _osg.Traits_setInheritedWindowPixelFormat_set)
    __swig_setmethods__["overrideRedirect"] = _osg.Traits_overrideRedirect_set
    __swig_getmethods__["overrideRedirect"] = _osg.Traits_overrideRedirect_get
    if _newclass:overrideRedirect = _swig_property(_osg.Traits_overrideRedirect_get, _osg.Traits_overrideRedirect_set)
    __swig_setmethods__["swapMethod"] = _osg.Traits_swapMethod_set
    __swig_getmethods__["swapMethod"] = _osg.Traits_swapMethod_get
    if _newclass:swapMethod = _swig_property(_osg.Traits_swapMethod_get, _osg.Traits_swapMethod_set)
    __swig_destroy__ = _osg.delete_Traits
    __del__ = lambda self : None;
Traits_swigregister = _osg.Traits_swigregister
Traits_swigregister(Traits)

class WindowingSystemInterface(Referenced):
    """Proxy of C++ WindowingSystemInterface class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowingSystemInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WindowingSystemInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getNumScreens(self, *args):
        """
        getNumScreens(WindowingSystemInterface self, ScreenIdentifier screenIdentifier=ScreenIdentifier()) -> unsigned int
        getNumScreens(WindowingSystemInterface self) -> unsigned int
        """
        return _osg.WindowingSystemInterface_getNumScreens(self, *args)

    def getScreenResolution(self, *args):
        """getScreenResolution(WindowingSystemInterface self, ScreenIdentifier screenIdentifier, unsigned int & width, unsigned int & height)"""
        return _osg.WindowingSystemInterface_getScreenResolution(self, *args)

    def setScreenResolution(self, *args):
        """setScreenResolution(WindowingSystemInterface self, ScreenIdentifier arg2, unsigned int arg3, unsigned int arg4) -> bool"""
        return _osg.WindowingSystemInterface_setScreenResolution(self, *args)

    def setScreenRefreshRate(self, *args):
        """setScreenRefreshRate(WindowingSystemInterface self, ScreenIdentifier arg2, double arg3) -> bool"""
        return _osg.WindowingSystemInterface_setScreenRefreshRate(self, *args)

    def createGraphicsContext(self, *args):
        """createGraphicsContext(WindowingSystemInterface self, Traits traits) -> GraphicsContext"""
        return _osg.WindowingSystemInterface_createGraphicsContext(self, *args)

    __swig_destroy__ = _osg.delete_WindowingSystemInterface
    __del__ = lambda self : None;
WindowingSystemInterface_swigregister = _osg.WindowingSystemInterface_swigregister
WindowingSystemInterface_swigregister(WindowingSystemInterface)

#get the original definitions back into their classes
GraphicsContext.Traits = Traits
GraphicsContext.ScreenIdentifier = ScreenIdentifier
GraphicsContext.WindowingSystemInterface = WindowingSystemInterface
GraphicsContext.SwapCallback = SwapCallback

OSG_TEXTURE = _osg.OSG_TEXTURE
GL_TEXTURE_MAX_ANISOTROPY_EXT = _osg.GL_TEXTURE_MAX_ANISOTROPY_EXT
GL_TEXTURE_SWIZZLE_RGBA = _osg.GL_TEXTURE_SWIZZLE_RGBA
GL_COMPRESSED_ALPHA_ARB = _osg.GL_COMPRESSED_ALPHA_ARB
GL_COMPRESSED_LUMINANCE_ARB = _osg.GL_COMPRESSED_LUMINANCE_ARB
GL_COMPRESSED_LUMINANCE_ALPHA_ARB = _osg.GL_COMPRESSED_LUMINANCE_ALPHA_ARB
GL_COMPRESSED_INTENSITY_ARB = _osg.GL_COMPRESSED_INTENSITY_ARB
GL_COMPRESSED_RGB_ARB = _osg.GL_COMPRESSED_RGB_ARB
GL_COMPRESSED_RGBA_ARB = _osg.GL_COMPRESSED_RGBA_ARB
GL_TEXTURE_COMPRESSION_HINT_ARB = _osg.GL_TEXTURE_COMPRESSION_HINT_ARB
GL_TEXTURE_COMPRESSED_ARB = _osg.GL_TEXTURE_COMPRESSED_ARB
GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = _osg.GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
GL_COMPRESSED_TEXTURE_FORMATS_ARB = _osg.GL_COMPRESSED_TEXTURE_FORMATS_ARB
GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = _osg.GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
GL_COMPRESSED_RGB_S3TC_DXT1_EXT = _osg.GL_COMPRESSED_RGB_S3TC_DXT1_EXT
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = _osg.GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = _osg.GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = _osg.GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
GL_COMPRESSED_RED_RGTC1_EXT = _osg.GL_COMPRESSED_RED_RGTC1_EXT
GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = _osg.GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
GL_COMPRESSED_RED_GREEN_RGTC2_EXT = _osg.GL_COMPRESSED_RED_GREEN_RGTC2_EXT
GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = _osg.GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = _osg.GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = _osg.GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = _osg.GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = _osg.GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
GL_RGBA32F_ARB = _osg.GL_RGBA32F_ARB
GL_RGB32F_ARB = _osg.GL_RGB32F_ARB
GL_ALPHA32F_ARB = _osg.GL_ALPHA32F_ARB
GL_INTENSITY32F_ARB = _osg.GL_INTENSITY32F_ARB
GL_LUMINANCE32F_ARB = _osg.GL_LUMINANCE32F_ARB
GL_LUMINANCE_ALPHA32F_ARB = _osg.GL_LUMINANCE_ALPHA32F_ARB
GL_RGBA16F_ARB = _osg.GL_RGBA16F_ARB
GL_RGB16F_ARB = _osg.GL_RGB16F_ARB
GL_ALPHA16F_ARB = _osg.GL_ALPHA16F_ARB
GL_INTENSITY16F_ARB = _osg.GL_INTENSITY16F_ARB
GL_LUMINANCE16F_ARB = _osg.GL_LUMINANCE16F_ARB
GL_LUMINANCE_ALPHA16F_ARB = _osg.GL_LUMINANCE_ALPHA16F_ARB
GL_HALF_FLOAT = _osg.GL_HALF_FLOAT
GL_HILO_NV = _osg.GL_HILO_NV
GL_DSDT_NV = _osg.GL_DSDT_NV
GL_DSDT_MAG_NV = _osg.GL_DSDT_MAG_NV
GL_DSDT_MAG_VIB_NV = _osg.GL_DSDT_MAG_VIB_NV
GL_HILO16_NV = _osg.GL_HILO16_NV
GL_SIGNED_HILO_NV = _osg.GL_SIGNED_HILO_NV
GL_SIGNED_HILO16_NV = _osg.GL_SIGNED_HILO16_NV
GL_SIGNED_RGBA_NV = _osg.GL_SIGNED_RGBA_NV
GL_SIGNED_RGBA8_NV = _osg.GL_SIGNED_RGBA8_NV
GL_SIGNED_RGB_NV = _osg.GL_SIGNED_RGB_NV
GL_SIGNED_RGB8_NV = _osg.GL_SIGNED_RGB8_NV
GL_SIGNED_LUMINANCE_NV = _osg.GL_SIGNED_LUMINANCE_NV
GL_SIGNED_LUMINANCE8_NV = _osg.GL_SIGNED_LUMINANCE8_NV
GL_SIGNED_LUMINANCE_ALPHA_NV = _osg.GL_SIGNED_LUMINANCE_ALPHA_NV
GL_SIGNED_LUMINANCE8_ALPHA8_NV = _osg.GL_SIGNED_LUMINANCE8_ALPHA8_NV
GL_SIGNED_ALPHA_NV = _osg.GL_SIGNED_ALPHA_NV
GL_SIGNED_ALPHA8_NV = _osg.GL_SIGNED_ALPHA8_NV
GL_SIGNED_INTENSITY_NV = _osg.GL_SIGNED_INTENSITY_NV
GL_SIGNED_INTENSITY8_NV = _osg.GL_SIGNED_INTENSITY8_NV
GL_DSDT8_NV = _osg.GL_DSDT8_NV
GL_DSDT8_MAG8_NV = _osg.GL_DSDT8_MAG8_NV
GL_DSDT8_MAG8_INTENSITY8_NV = _osg.GL_DSDT8_MAG8_INTENSITY8_NV
GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = _osg.GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = _osg.GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
GL_FLOAT_R_NV = _osg.GL_FLOAT_R_NV
GL_FLOAT_RG_NV = _osg.GL_FLOAT_RG_NV
GL_FLOAT_RGB_NV = _osg.GL_FLOAT_RGB_NV
GL_FLOAT_RGBA_NV = _osg.GL_FLOAT_RGBA_NV
GL_FLOAT_R16_NV = _osg.GL_FLOAT_R16_NV
GL_FLOAT_R32_NV = _osg.GL_FLOAT_R32_NV
GL_FLOAT_RG16_NV = _osg.GL_FLOAT_RG16_NV
GL_FLOAT_RG32_NV = _osg.GL_FLOAT_RG32_NV
GL_FLOAT_RGB16_NV = _osg.GL_FLOAT_RGB16_NV
GL_FLOAT_RGB32_NV = _osg.GL_FLOAT_RGB32_NV
GL_FLOAT_RGBA16_NV = _osg.GL_FLOAT_RGBA16_NV
GL_FLOAT_RGBA32_NV = _osg.GL_FLOAT_RGBA32_NV
GL_RGBA_FLOAT32_ATI = _osg.GL_RGBA_FLOAT32_ATI
GL_RGB_FLOAT32_ATI = _osg.GL_RGB_FLOAT32_ATI
GL_ALPHA_FLOAT32_ATI = _osg.GL_ALPHA_FLOAT32_ATI
GL_INTENSITY_FLOAT32_ATI = _osg.GL_INTENSITY_FLOAT32_ATI
GL_LUMINANCE_FLOAT32_ATI = _osg.GL_LUMINANCE_FLOAT32_ATI
GL_LUMINANCE_ALPHA_FLOAT32_ATI = _osg.GL_LUMINANCE_ALPHA_FLOAT32_ATI
GL_RGBA_FLOAT16_ATI = _osg.GL_RGBA_FLOAT16_ATI
GL_RGB_FLOAT16_ATI = _osg.GL_RGB_FLOAT16_ATI
GL_ALPHA_FLOAT16_ATI = _osg.GL_ALPHA_FLOAT16_ATI
GL_INTENSITY_FLOAT16_ATI = _osg.GL_INTENSITY_FLOAT16_ATI
GL_LUMINANCE_FLOAT16_ATI = _osg.GL_LUMINANCE_FLOAT16_ATI
GL_LUMINANCE_ALPHA_FLOAT16_ATI = _osg.GL_LUMINANCE_ALPHA_FLOAT16_ATI
GL_MIRRORED_REPEAT_IBM = _osg.GL_MIRRORED_REPEAT_IBM
GL_CLAMP_TO_EDGE = _osg.GL_CLAMP_TO_EDGE
GL_CLAMP_TO_BORDER_ARB = _osg.GL_CLAMP_TO_BORDER_ARB
GL_GENERATE_MIPMAP_SGIS = _osg.GL_GENERATE_MIPMAP_SGIS
GL_GENERATE_MIPMAP_HINT_SGIS = _osg.GL_GENERATE_MIPMAP_HINT_SGIS
GL_TEXTURE_3D = _osg.GL_TEXTURE_3D
GL_TEXTURE_2D_ARRAY_EXT = _osg.GL_TEXTURE_2D_ARRAY_EXT
GL_PROXY_TEXTURE_2D_ARRAY_EXT = _osg.GL_PROXY_TEXTURE_2D_ARRAY_EXT
GL_TEXTURE_BINDING_2D_ARRAY_EXT = _osg.GL_TEXTURE_BINDING_2D_ARRAY_EXT
GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = _osg.GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = _osg.GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
GL_SAMPLER_2D_ARRAY_EXT = _osg.GL_SAMPLER_2D_ARRAY_EXT
GL_SAMPLER_2D_ARRAY_SHADOW_EXT = _osg.GL_SAMPLER_2D_ARRAY_SHADOW_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = _osg.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
GL_TEXTURE_CUBE_MAP = _osg.GL_TEXTURE_CUBE_MAP
GL_TEXTURE_BINDING_CUBE_MAP = _osg.GL_TEXTURE_BINDING_CUBE_MAP
GL_TEXTURE_CUBE_MAP_POSITIVE_X = _osg.GL_TEXTURE_CUBE_MAP_POSITIVE_X
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = _osg.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = _osg.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = _osg.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = _osg.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = _osg.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
GL_PROXY_TEXTURE_CUBE_MAP = _osg.GL_PROXY_TEXTURE_CUBE_MAP
GL_MAX_CUBE_MAP_TEXTURE_SIZE = _osg.GL_MAX_CUBE_MAP_TEXTURE_SIZE
GL_TEXTURE_BINDING_3D = _osg.GL_TEXTURE_BINDING_3D
GL_DEPTH_TEXTURE_MODE_ARB = _osg.GL_DEPTH_TEXTURE_MODE_ARB
GL_TEXTURE_COMPARE_MODE_ARB = _osg.GL_TEXTURE_COMPARE_MODE_ARB
GL_TEXTURE_COMPARE_FUNC_ARB = _osg.GL_TEXTURE_COMPARE_FUNC_ARB
GL_COMPARE_R_TO_TEXTURE_ARB = _osg.GL_COMPARE_R_TO_TEXTURE_ARB
TEXTURE_COMPARE_FAIL_VALUE_ARB = _osg.TEXTURE_COMPARE_FAIL_VALUE_ARB
GL_MAX_TEXTURE_UNITS = _osg.GL_MAX_TEXTURE_UNITS
GL_TEXTURE_DEPTH = _osg.GL_TEXTURE_DEPTH
GL_TEXTURE_2D_MULTISAMPLE = _osg.GL_TEXTURE_2D_MULTISAMPLE
GL_RGBA32UI_EXT = _osg.GL_RGBA32UI_EXT
GL_RGB32UI_EXT = _osg.GL_RGB32UI_EXT
GL_ALPHA32UI_EXT = _osg.GL_ALPHA32UI_EXT
GL_INTENSITY32UI_EXT = _osg.GL_INTENSITY32UI_EXT
GL_LUMINANCE32UI_EXT = _osg.GL_LUMINANCE32UI_EXT
GL_LUMINANCE_ALPHA32UI_EXT = _osg.GL_LUMINANCE_ALPHA32UI_EXT
GL_RGBA16UI_EXT = _osg.GL_RGBA16UI_EXT
GL_RGB16UI_EXT = _osg.GL_RGB16UI_EXT
GL_ALPHA16UI_EXT = _osg.GL_ALPHA16UI_EXT
GL_INTENSITY16UI_EXT = _osg.GL_INTENSITY16UI_EXT
GL_LUMINANCE16UI_EXT = _osg.GL_LUMINANCE16UI_EXT
GL_LUMINANCE_ALPHA16UI_EXT = _osg.GL_LUMINANCE_ALPHA16UI_EXT
GL_RGBA8UI_EXT = _osg.GL_RGBA8UI_EXT
GL_RGB8UI_EXT = _osg.GL_RGB8UI_EXT
GL_ALPHA8UI_EXT = _osg.GL_ALPHA8UI_EXT
GL_INTENSITY8UI_EXT = _osg.GL_INTENSITY8UI_EXT
GL_LUMINANCE8UI_EXT = _osg.GL_LUMINANCE8UI_EXT
GL_LUMINANCE_ALPHA8UI_EXT = _osg.GL_LUMINANCE_ALPHA8UI_EXT
GL_RGBA32I_EXT = _osg.GL_RGBA32I_EXT
GL_RGB32I_EXT = _osg.GL_RGB32I_EXT
GL_ALPHA32I_EXT = _osg.GL_ALPHA32I_EXT
GL_INTENSITY32I_EXT = _osg.GL_INTENSITY32I_EXT
GL_LUMINANCE32I_EXT = _osg.GL_LUMINANCE32I_EXT
GL_LUMINANCE_ALPHA32I_EXT = _osg.GL_LUMINANCE_ALPHA32I_EXT
GL_RGBA16I_EXT = _osg.GL_RGBA16I_EXT
GL_RGB16I_EXT = _osg.GL_RGB16I_EXT
GL_ALPHA16I_EXT = _osg.GL_ALPHA16I_EXT
GL_INTENSITY16I_EXT = _osg.GL_INTENSITY16I_EXT
GL_LUMINANCE16I_EXT = _osg.GL_LUMINANCE16I_EXT
GL_LUMINANCE_ALPHA16I_EXT = _osg.GL_LUMINANCE_ALPHA16I_EXT
GL_RGBA8I_EXT = _osg.GL_RGBA8I_EXT
GL_RGB8I_EXT = _osg.GL_RGB8I_EXT
GL_ALPHA8I_EXT = _osg.GL_ALPHA8I_EXT
GL_INTENSITY8I_EXT = _osg.GL_INTENSITY8I_EXT
GL_LUMINANCE8I_EXT = _osg.GL_LUMINANCE8I_EXT
GL_LUMINANCE_ALPHA8I_EXT = _osg.GL_LUMINANCE_ALPHA8I_EXT
GL_RED_INTEGER_EXT = _osg.GL_RED_INTEGER_EXT
GL_GREEN_INTEGER_EXT = _osg.GL_GREEN_INTEGER_EXT
GL_BLUE_INTEGER_EXT = _osg.GL_BLUE_INTEGER_EXT
GL_ALPHA_INTEGER_EXT = _osg.GL_ALPHA_INTEGER_EXT
GL_RGB_INTEGER_EXT = _osg.GL_RGB_INTEGER_EXT
GL_RGBA_INTEGER_EXT = _osg.GL_RGBA_INTEGER_EXT
GL_BGR_INTEGER_EXT = _osg.GL_BGR_INTEGER_EXT
GL_BGRA_INTEGER_EXT = _osg.GL_BGRA_INTEGER_EXT
GL_LUMINANCE_INTEGER_EXT = _osg.GL_LUMINANCE_INTEGER_EXT
GL_LUMINANCE_ALPHA_INTEGER_EXT = _osg.GL_LUMINANCE_ALPHA_INTEGER_EXT
GL_RGBA_INTEGER_MODE_EXT = _osg.GL_RGBA_INTEGER_MODE_EXT
GL_RG = _osg.GL_RG
GL_RG_INTEGER = _osg.GL_RG_INTEGER
GL_R8 = _osg.GL_R8
GL_R16 = _osg.GL_R16
GL_RG8 = _osg.GL_RG8
GL_RG16 = _osg.GL_RG16
GL_R16F = _osg.GL_R16F
GL_R32F = _osg.GL_R32F
GL_RG16F = _osg.GL_RG16F
GL_RG32F = _osg.GL_RG32F
GL_R8I = _osg.GL_R8I
GL_R8UI = _osg.GL_R8UI
GL_R16I = _osg.GL_R16I
GL_R16UI = _osg.GL_R16UI
GL_R32I = _osg.GL_R32I
GL_R32UI = _osg.GL_R32UI
GL_RG8I = _osg.GL_RG8I
GL_RG8UI = _osg.GL_RG8UI
GL_RG16I = _osg.GL_RG16I
GL_RG16UI = _osg.GL_RG16UI
GL_RG32I = _osg.GL_RG32I
GL_RG32UI = _osg.GL_RG32UI
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = _osg.GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
GL_ELEMENT_ARRAY_BARRIER_BIT = _osg.GL_ELEMENT_ARRAY_BARRIER_BIT
GL_UNIFORM_BARRIER_BIT = _osg.GL_UNIFORM_BARRIER_BIT
GL_TEXTURE_FETCH_BARRIER_BIT = _osg.GL_TEXTURE_FETCH_BARRIER_BIT
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = _osg.GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
GL_COMMAND_BARRIER_BIT = _osg.GL_COMMAND_BARRIER_BIT
GL_PIXEL_BUFFER_BARRIER_BIT = _osg.GL_PIXEL_BUFFER_BARRIER_BIT
GL_TEXTURE_UPDATE_BARRIER_BIT = _osg.GL_TEXTURE_UPDATE_BARRIER_BIT
GL_BUFFER_UPDATE_BARRIER_BIT = _osg.GL_BUFFER_UPDATE_BARRIER_BIT
GL_FRAMEBUFFER_BARRIER_BIT = _osg.GL_FRAMEBUFFER_BARRIER_BIT
GL_TRANSFORM_FEEDBACK_BARRIER_BIT = _osg.GL_TRANSFORM_FEEDBACK_BARRIER_BIT
GL_ATOMIC_COUNTER_BARRIER_BIT = _osg.GL_ATOMIC_COUNTER_BARRIER_BIT
GL_ALL_BARRIER_BITS = _osg.GL_ALL_BARRIER_BITS
GL_MAX_IMAGE_UNITS = _osg.GL_MAX_IMAGE_UNITS
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = _osg.GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
GL_IMAGE_BINDING_NAME = _osg.GL_IMAGE_BINDING_NAME
GL_IMAGE_BINDING_LEVEL = _osg.GL_IMAGE_BINDING_LEVEL
GL_IMAGE_BINDING_LAYERED = _osg.GL_IMAGE_BINDING_LAYERED
GL_IMAGE_BINDING_LAYER = _osg.GL_IMAGE_BINDING_LAYER
GL_IMAGE_BINDING_ACCESS = _osg.GL_IMAGE_BINDING_ACCESS
GL_IMAGE_1D = _osg.GL_IMAGE_1D
GL_IMAGE_2D = _osg.GL_IMAGE_2D
GL_IMAGE_3D = _osg.GL_IMAGE_3D
GL_IMAGE_2D_RECT = _osg.GL_IMAGE_2D_RECT
GL_IMAGE_CUBE = _osg.GL_IMAGE_CUBE
GL_IMAGE_BUFFER = _osg.GL_IMAGE_BUFFER
GL_IMAGE_1D_ARRAY = _osg.GL_IMAGE_1D_ARRAY
GL_IMAGE_2D_ARRAY = _osg.GL_IMAGE_2D_ARRAY
GL_IMAGE_CUBE_MAP_ARRAY = _osg.GL_IMAGE_CUBE_MAP_ARRAY
GL_IMAGE_2D_MULTISAMPLE = _osg.GL_IMAGE_2D_MULTISAMPLE
GL_IMAGE_2D_MULTISAMPLE_ARRAY = _osg.GL_IMAGE_2D_MULTISAMPLE_ARRAY
GL_INT_IMAGE_1D = _osg.GL_INT_IMAGE_1D
GL_INT_IMAGE_2D = _osg.GL_INT_IMAGE_2D
GL_INT_IMAGE_3D = _osg.GL_INT_IMAGE_3D
GL_INT_IMAGE_2D_RECT = _osg.GL_INT_IMAGE_2D_RECT
GL_INT_IMAGE_CUBE = _osg.GL_INT_IMAGE_CUBE
GL_INT_IMAGE_BUFFER = _osg.GL_INT_IMAGE_BUFFER
GL_INT_IMAGE_1D_ARRAY = _osg.GL_INT_IMAGE_1D_ARRAY
GL_INT_IMAGE_2D_ARRAY = _osg.GL_INT_IMAGE_2D_ARRAY
GL_INT_IMAGE_CUBE_MAP_ARRAY = _osg.GL_INT_IMAGE_CUBE_MAP_ARRAY
GL_INT_IMAGE_2D_MULTISAMPLE = _osg.GL_INT_IMAGE_2D_MULTISAMPLE
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = _osg.GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
GL_UNSIGNED_INT_IMAGE_1D = _osg.GL_UNSIGNED_INT_IMAGE_1D
GL_UNSIGNED_INT_IMAGE_2D = _osg.GL_UNSIGNED_INT_IMAGE_2D
GL_UNSIGNED_INT_IMAGE_3D = _osg.GL_UNSIGNED_INT_IMAGE_3D
GL_UNSIGNED_INT_IMAGE_2D_RECT = _osg.GL_UNSIGNED_INT_IMAGE_2D_RECT
GL_UNSIGNED_INT_IMAGE_CUBE = _osg.GL_UNSIGNED_INT_IMAGE_CUBE
GL_UNSIGNED_INT_IMAGE_BUFFER = _osg.GL_UNSIGNED_INT_IMAGE_BUFFER
GL_UNSIGNED_INT_IMAGE_1D_ARRAY = _osg.GL_UNSIGNED_INT_IMAGE_1D_ARRAY
GL_UNSIGNED_INT_IMAGE_2D_ARRAY = _osg.GL_UNSIGNED_INT_IMAGE_2D_ARRAY
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = _osg.GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = _osg.GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = _osg.GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
GL_MAX_IMAGE_SAMPLES = _osg.GL_MAX_IMAGE_SAMPLES
GL_IMAGE_BINDING_FORMAT = _osg.GL_IMAGE_BINDING_FORMAT
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = _osg.GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = _osg.GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = _osg.GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
GL_MAX_VERTEX_IMAGE_UNIFORMS = _osg.GL_MAX_VERTEX_IMAGE_UNIFORMS
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = _osg.GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = _osg.GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
GL_MAX_GEOMETRY_IMAGE_UNIFORMS = _osg.GL_MAX_GEOMETRY_IMAGE_UNIFORMS
GL_MAX_FRAGMENT_IMAGE_UNIFORMS = _osg.GL_MAX_FRAGMENT_IMAGE_UNIFORMS
GL_MAX_COMBINED_IMAGE_UNIFORMS = _osg.GL_MAX_COMBINED_IMAGE_UNIFORMS
class Texture(StateAttribute):
    """Proxy of C++ osg::Texture class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(Texture self) -> Object"""
        return _osg.Texture_cloneType(self)

    def clone(self, *args):
        """clone(Texture self, CopyOp copyop) -> Object"""
        return _osg.Texture_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Texture self, Object obj) -> bool"""
        return _osg.Texture_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Texture self) -> char const *"""
        return _osg.Texture_libraryName(self)

    def className(self):
        """className(Texture self) -> char const *"""
        return _osg.Texture_className(self)

    def asTexture(self, *args):
        """
        asTexture(Texture self) -> Texture
        asTexture(Texture self) -> Texture
        """
        return _osg.Texture_asTexture(self, *args)

    def getType(self):
        """getType(Texture self) -> osg::StateAttribute::Type"""
        return _osg.Texture_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(Texture self) -> bool"""
        return _osg.Texture_isTextureAttribute(self)

    def getTextureTarget(self):
        """getTextureTarget(Texture self) -> GLenum"""
        return _osg.Texture_getTextureTarget(self)

    def getTextureWidth(self):
        """getTextureWidth(Texture self) -> int"""
        return _osg.Texture_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(Texture self) -> int"""
        return _osg.Texture_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(Texture self) -> int"""
        return _osg.Texture_getTextureDepth(self)

    WRAP_S = _osg.Texture_WRAP_S
    WRAP_T = _osg.Texture_WRAP_T
    WRAP_R = _osg.Texture_WRAP_R
    CLAMP = _osg.Texture_CLAMP
    CLAMP_TO_EDGE = _osg.Texture_CLAMP_TO_EDGE
    CLAMP_TO_BORDER = _osg.Texture_CLAMP_TO_BORDER
    REPEAT = _osg.Texture_REPEAT
    MIRROR = _osg.Texture_MIRROR
    def setWrap(self, *args):
        """setWrap(Texture self, osg::Texture::WrapParameter which, osg::Texture::WrapMode wrap)"""
        return _osg.Texture_setWrap(self, *args)

    def getWrap(self, *args):
        """getWrap(Texture self, osg::Texture::WrapParameter which) -> osg::Texture::WrapMode"""
        return _osg.Texture_getWrap(self, *args)

    def setBorderColor(self, *args):
        """setBorderColor(Texture self, Vec4d color)"""
        return _osg.Texture_setBorderColor(self, *args)

    def getBorderColor(self):
        """getBorderColor(Texture self) -> Vec4d"""
        return _osg.Texture_getBorderColor(self)

    def setBorderWidth(self, *args):
        """setBorderWidth(Texture self, GLint width)"""
        return _osg.Texture_setBorderWidth(self, *args)

    def getBorderWidth(self):
        """getBorderWidth(Texture self) -> GLint"""
        return _osg.Texture_getBorderWidth(self)

    MIN_FILTER = _osg.Texture_MIN_FILTER
    MAG_FILTER = _osg.Texture_MAG_FILTER
    LINEAR = _osg.Texture_LINEAR
    LINEAR_MIPMAP_LINEAR = _osg.Texture_LINEAR_MIPMAP_LINEAR
    LINEAR_MIPMAP_NEAREST = _osg.Texture_LINEAR_MIPMAP_NEAREST
    NEAREST = _osg.Texture_NEAREST
    NEAREST_MIPMAP_LINEAR = _osg.Texture_NEAREST_MIPMAP_LINEAR
    NEAREST_MIPMAP_NEAREST = _osg.Texture_NEAREST_MIPMAP_NEAREST
    def setFilter(self, *args):
        """setFilter(Texture self, osg::Texture::FilterParameter which, osg::Texture::FilterMode filter)"""
        return _osg.Texture_setFilter(self, *args)

    def getFilter(self, *args):
        """getFilter(Texture self, osg::Texture::FilterParameter which) -> osg::Texture::FilterMode"""
        return _osg.Texture_getFilter(self, *args)

    def setMaxAnisotropy(self, *args):
        """setMaxAnisotropy(Texture self, float anis)"""
        return _osg.Texture_setMaxAnisotropy(self, *args)

    def getMaxAnisotropy(self):
        """getMaxAnisotropy(Texture self) -> float"""
        return _osg.Texture_getMaxAnisotropy(self)

    def setSwizzle(self, *args):
        """setSwizzle(Texture self, Vec4i const & swizzle)"""
        return _osg.Texture_setSwizzle(self, *args)

    def getSwizzle(self):
        """getSwizzle(Texture self) -> Vec4i const &"""
        return _osg.Texture_getSwizzle(self)

    def setUseHardwareMipMapGeneration(self, *args):
        """setUseHardwareMipMapGeneration(Texture self, bool useHardwareMipMapGeneration)"""
        return _osg.Texture_setUseHardwareMipMapGeneration(self, *args)

    def getUseHardwareMipMapGeneration(self):
        """getUseHardwareMipMapGeneration(Texture self) -> bool"""
        return _osg.Texture_getUseHardwareMipMapGeneration(self)

    def setUnRefImageDataAfterApply(self, *args):
        """setUnRefImageDataAfterApply(Texture self, bool flag)"""
        return _osg.Texture_setUnRefImageDataAfterApply(self, *args)

    def getUnRefImageDataAfterApply(self):
        """getUnRefImageDataAfterApply(Texture self) -> bool"""
        return _osg.Texture_getUnRefImageDataAfterApply(self)

    def setClientStorageHint(self, *args):
        """setClientStorageHint(Texture self, bool flag)"""
        return _osg.Texture_setClientStorageHint(self, *args)

    def getClientStorageHint(self):
        """getClientStorageHint(Texture self) -> bool"""
        return _osg.Texture_getClientStorageHint(self)

    def setResizeNonPowerOfTwoHint(self, *args):
        """setResizeNonPowerOfTwoHint(Texture self, bool flag)"""
        return _osg.Texture_setResizeNonPowerOfTwoHint(self, *args)

    def getResizeNonPowerOfTwoHint(self):
        """getResizeNonPowerOfTwoHint(Texture self) -> bool"""
        return _osg.Texture_getResizeNonPowerOfTwoHint(self)

    USE_IMAGE_DATA_FORMAT = _osg.Texture_USE_IMAGE_DATA_FORMAT
    USE_USER_DEFINED_FORMAT = _osg.Texture_USE_USER_DEFINED_FORMAT
    USE_ARB_COMPRESSION = _osg.Texture_USE_ARB_COMPRESSION
    USE_S3TC_DXT1_COMPRESSION = _osg.Texture_USE_S3TC_DXT1_COMPRESSION
    USE_S3TC_DXT3_COMPRESSION = _osg.Texture_USE_S3TC_DXT3_COMPRESSION
    USE_S3TC_DXT5_COMPRESSION = _osg.Texture_USE_S3TC_DXT5_COMPRESSION
    USE_PVRTC_2BPP_COMPRESSION = _osg.Texture_USE_PVRTC_2BPP_COMPRESSION
    USE_PVRTC_4BPP_COMPRESSION = _osg.Texture_USE_PVRTC_4BPP_COMPRESSION
    USE_ETC_COMPRESSION = _osg.Texture_USE_ETC_COMPRESSION
    USE_RGTC1_COMPRESSION = _osg.Texture_USE_RGTC1_COMPRESSION
    USE_RGTC2_COMPRESSION = _osg.Texture_USE_RGTC2_COMPRESSION
    USE_S3TC_DXT1c_COMPRESSION = _osg.Texture_USE_S3TC_DXT1c_COMPRESSION
    USE_S3TC_DXT1a_COMPRESSION = _osg.Texture_USE_S3TC_DXT1a_COMPRESSION
    def setInternalFormatMode(self, *args):
        """setInternalFormatMode(Texture self, osg::Texture::InternalFormatMode mode)"""
        return _osg.Texture_setInternalFormatMode(self, *args)

    def getInternalFormatMode(self):
        """getInternalFormatMode(Texture self) -> osg::Texture::InternalFormatMode"""
        return _osg.Texture_getInternalFormatMode(self)

    def setInternalFormat(self, *args):
        """setInternalFormat(Texture self, GLint internalFormat)"""
        return _osg.Texture_setInternalFormat(self, *args)

    def getInternalFormat(self):
        """getInternalFormat(Texture self) -> GLint"""
        return _osg.Texture_getInternalFormat(self)

    def setSourceFormat(self, *args):
        """setSourceFormat(Texture self, GLenum sourceFormat)"""
        return _osg.Texture_setSourceFormat(self, *args)

    def getSourceFormat(self):
        """getSourceFormat(Texture self) -> GLenum"""
        return _osg.Texture_getSourceFormat(self)

    def setSourceType(self, *args):
        """setSourceType(Texture self, GLenum sourceType)"""
        return _osg.Texture_setSourceType(self, *args)

    def getSourceType(self):
        """getSourceType(Texture self) -> GLenum"""
        return _osg.Texture_getSourceType(self)

    NORMALIZED = _osg.Texture_NORMALIZED
    FLOAT = _osg.Texture_FLOAT
    SIGNED_INTEGER = _osg.Texture_SIGNED_INTEGER
    UNSIGNED_INTEGER = _osg.Texture_UNSIGNED_INTEGER
    def getInternalFormatType(self):
        """getInternalFormatType(Texture self) -> osg::Texture::InternalFormatType"""
        return _osg.Texture_getInternalFormatType(self)

    def getTextureObject(self, *args):
        """getTextureObject(Texture self, unsigned int contextID) -> osg::Texture::TextureObject *"""
        return _osg.Texture_getTextureObject(self, *args)

    def setTextureObject(self, *args):
        """setTextureObject(Texture self, unsigned int contextID, osg::Texture::TextureObject * to)"""
        return _osg.Texture_setTextureObject(self, *args)

    def dirtyTextureObject(self):
        """dirtyTextureObject(Texture self)"""
        return _osg.Texture_dirtyTextureObject(self)

    def areAllTextureObjectsLoaded(self):
        """areAllTextureObjectsLoaded(Texture self) -> bool"""
        return _osg.Texture_areAllTextureObjectsLoaded(self)

    def getTextureParameterDirty(self, *args):
        """getTextureParameterDirty(Texture self, unsigned int contextID) -> unsigned int &"""
        return _osg.Texture_getTextureParameterDirty(self, *args)

    def dirtyTextureParameters(self):
        """dirtyTextureParameters(Texture self)"""
        return _osg.Texture_dirtyTextureParameters(self)

    def allocateMipmapLevels(self):
        """allocateMipmapLevels(Texture self)"""
        return _osg.Texture_allocateMipmapLevels(self)

    NOT_USED = _osg.Texture_NOT_USED
    READ_ONLY = _osg.Texture_READ_ONLY
    WRITE_ONLY = _osg.Texture_WRITE_ONLY
    READ_WRITE = _osg.Texture_READ_WRITE
    def bindToImageUnit(self, *args):
        """
        bindToImageUnit(Texture self, unsigned int unit, GLenum access, GLenum format=0, int level=0, bool layered=False, 
            int layer=0)
        bindToImageUnit(Texture self, unsigned int unit, GLenum access, GLenum format=0, int level=0, bool layered=False)
        bindToImageUnit(Texture self, unsigned int unit, GLenum access, GLenum format=0, int level=0)
        bindToImageUnit(Texture self, unsigned int unit, GLenum access, GLenum format=0)
        bindToImageUnit(Texture self, unsigned int unit, GLenum access)
        """
        return _osg.Texture_bindToImageUnit(self, *args)

    def getImageAttachment(self, *args):
        """
        getImageAttachment(Texture self) -> osg::Texture::ImageAttachment
        getImageAttachment(Texture self) -> osg::Texture::ImageAttachment const &
        """
        return _osg.Texture_getImageAttachment(self, *args)

    def setShadowComparison(self, *args):
        """setShadowComparison(Texture self, bool flag)"""
        return _osg.Texture_setShadowComparison(self, *args)

    def getShadowComparison(self):
        """getShadowComparison(Texture self) -> bool"""
        return _osg.Texture_getShadowComparison(self)

    NEVER = _osg.Texture_NEVER
    LESS = _osg.Texture_LESS
    EQUAL = _osg.Texture_EQUAL
    LEQUAL = _osg.Texture_LEQUAL
    GREATER = _osg.Texture_GREATER
    NOTEQUAL = _osg.Texture_NOTEQUAL
    GEQUAL = _osg.Texture_GEQUAL
    ALWAYS = _osg.Texture_ALWAYS
    def setShadowCompareFunc(self, *args):
        """setShadowCompareFunc(Texture self, osg::Texture::ShadowCompareFunc func)"""
        return _osg.Texture_setShadowCompareFunc(self, *args)

    def getShadowCompareFunc(self):
        """getShadowCompareFunc(Texture self) -> osg::Texture::ShadowCompareFunc"""
        return _osg.Texture_getShadowCompareFunc(self)

    LUMINANCE = _osg.Texture_LUMINANCE
    INTENSITY = _osg.Texture_INTENSITY
    ALPHA = _osg.Texture_ALPHA
    def setShadowTextureMode(self, *args):
        """setShadowTextureMode(Texture self, osg::Texture::ShadowTextureMode mode)"""
        return _osg.Texture_setShadowTextureMode(self, *args)

    def getShadowTextureMode(self):
        """getShadowTextureMode(Texture self) -> osg::Texture::ShadowTextureMode"""
        return _osg.Texture_getShadowTextureMode(self)

    def setShadowAmbient(self, *args):
        """setShadowAmbient(Texture self, float shadow_ambient)"""
        return _osg.Texture_setShadowAmbient(self, *args)

    def getShadowAmbient(self):
        """getShadowAmbient(Texture self) -> float"""
        return _osg.Texture_getShadowAmbient(self)

    def setImage(self, *args):
        """setImage(Texture self, unsigned int face, Image image)"""
        return _osg.Texture_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(Texture self, unsigned int face) -> Image
        getImage(Texture self, unsigned int face) -> Image
        """
        return _osg.Texture_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(Texture self) -> unsigned int"""
        return _osg.Texture_getNumImages(self)

    def setReadPBuffer(self, *args):
        """setReadPBuffer(Texture self, GraphicsContext context)"""
        return _osg.Texture_setReadPBuffer(self, *args)

    def getReadPBuffer(self, *args):
        """
        getReadPBuffer(Texture self) -> GraphicsContext
        getReadPBuffer(Texture self) -> GraphicsContext
        """
        return _osg.Texture_getReadPBuffer(self, *args)

    def apply(self, *args):
        """apply(Texture self, State state)"""
        return _osg.Texture_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(Texture self, State state)"""
        return _osg.Texture_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Texture self, unsigned int maxSize)"""
        return _osg.Texture_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(Texture self, State state=None)
        releaseGLObjects(Texture self)
        """
        return _osg.Texture_releaseGLObjects(self, state)

    def isCompressedInternalFormat(*args):
        """
        isCompressedInternalFormat() -> bool
        isCompressedInternalFormat(GLint internalFormat) -> bool
        """
        return _osg.Texture_isCompressedInternalFormat(*args)

    if _newclass:isCompressedInternalFormat = staticmethod(isCompressedInternalFormat)
    __swig_getmethods__["isCompressedInternalFormat"] = lambda x: isCompressedInternalFormat
    def getCompressedSize(*args):
        """
        getCompressedSize(GLenum internalFormat, GLint width, GLint height, GLint depth, GLint & blockSize, 
            GLint & size)
        """
        return _osg.Texture_getCompressedSize(*args)

    if _newclass:getCompressedSize = staticmethod(getCompressedSize)
    __swig_getmethods__["getCompressedSize"] = lambda x: getCompressedSize
    def applyTexImage2D_load(self, *args):
        """applyTexImage2D_load(Texture self, State state, GLenum target, Image image, GLsizei width, GLsizei height, GLsizei numMipmapLevels)"""
        return _osg.Texture_applyTexImage2D_load(self, *args)

    def applyTexImage2D_subload(self, *args):
        """
        applyTexImage2D_subload(Texture self, State state, GLenum target, Image image, GLsizei width, GLsizei height, GLint inInternalFormat, 
            GLsizei numMipmapLevels)
        """
        return _osg.Texture_applyTexImage2D_subload(self, *args)

    GENERATE_MIPMAP_NONE = _osg.Texture_GENERATE_MIPMAP_NONE
    GENERATE_MIPMAP = _osg.Texture_GENERATE_MIPMAP
    GENERATE_MIPMAP_TEX_PARAMETER = _osg.Texture_GENERATE_MIPMAP_TEX_PARAMETER
    def generateTextureObject(*args):
        """
        generateTextureObject(Texture texture, unsigned int contextID, GLenum target) -> osg::Texture::TextureObject
        generateTextureObject(Texture texture, unsigned int contextID, GLenum target, GLint numMipmapLevels, GLenum internalFormat, 
            GLsizei width, GLsizei height, GLsizei depth, GLint border) -> osg::Texture::TextureObject *
        """
        return _osg.Texture_generateTextureObject(*args)

    if _newclass:generateTextureObject = staticmethod(generateTextureObject)
    __swig_getmethods__["generateTextureObject"] = lambda x: generateTextureObject
    def deleteAllTextureObjects(*args):
        """deleteAllTextureObjects(unsigned int contextID)"""
        return _osg.Texture_deleteAllTextureObjects(*args)

    if _newclass:deleteAllTextureObjects = staticmethod(deleteAllTextureObjects)
    __swig_getmethods__["deleteAllTextureObjects"] = lambda x: deleteAllTextureObjects
    def discardAllTextureObjects(*args):
        """discardAllTextureObjects(unsigned int contextID)"""
        return _osg.Texture_discardAllTextureObjects(*args)

    if _newclass:discardAllTextureObjects = staticmethod(discardAllTextureObjects)
    __swig_getmethods__["discardAllTextureObjects"] = lambda x: discardAllTextureObjects
    def flushAllDeletedTextureObjects(*args):
        """flushAllDeletedTextureObjects(unsigned int contextID)"""
        return _osg.Texture_flushAllDeletedTextureObjects(*args)

    if _newclass:flushAllDeletedTextureObjects = staticmethod(flushAllDeletedTextureObjects)
    __swig_getmethods__["flushAllDeletedTextureObjects"] = lambda x: flushAllDeletedTextureObjects
    def discardAllDeletedTextureObjects(*args):
        """discardAllDeletedTextureObjects(unsigned int contextID)"""
        return _osg.Texture_discardAllDeletedTextureObjects(*args)

    if _newclass:discardAllDeletedTextureObjects = staticmethod(discardAllDeletedTextureObjects)
    __swig_getmethods__["discardAllDeletedTextureObjects"] = lambda x: discardAllDeletedTextureObjects
    def flushDeletedTextureObjects(*args):
        """flushDeletedTextureObjects(unsigned int contextID, double currentTime, double & availableTime)"""
        return _osg.Texture_flushDeletedTextureObjects(*args)

    if _newclass:flushDeletedTextureObjects = staticmethod(flushDeletedTextureObjects)
    __swig_getmethods__["flushDeletedTextureObjects"] = lambda x: flushDeletedTextureObjects
    def releaseTextureObject(*args):
        """releaseTextureObject(unsigned int contextID, osg::Texture::TextureObject * to)"""
        return _osg.Texture_releaseTextureObject(*args)

    if _newclass:releaseTextureObject = staticmethod(releaseTextureObject)
    __swig_getmethods__["releaseTextureObject"] = lambda x: releaseTextureObject
Texture_swigregister = _osg.Texture_swigregister
Texture_swigregister(Texture)

def Texture_isCompressedInternalFormat(*args):
  """
    isCompressedInternalFormat() -> bool
    Texture_isCompressedInternalFormat(GLint internalFormat) -> bool
    """
  return _osg.Texture_isCompressedInternalFormat(*args)

def Texture_getCompressedSize(*args):
  """
    Texture_getCompressedSize(GLenum internalFormat, GLint width, GLint height, GLint depth, GLint & blockSize, 
        GLint & size)
    """
  return _osg.Texture_getCompressedSize(*args)

def Texture_generateTextureObject(*args):
  """
    generateTextureObject(Texture texture, unsigned int contextID, GLenum target) -> osg::Texture::TextureObject
    Texture_generateTextureObject(Texture texture, unsigned int contextID, GLenum target, GLint numMipmapLevels, GLenum internalFormat, 
        GLsizei width, GLsizei height, GLsizei depth, GLint border) -> osg::Texture::TextureObject *
    """
  return _osg.Texture_generateTextureObject(*args)

def Texture_deleteAllTextureObjects(*args):
  """Texture_deleteAllTextureObjects(unsigned int contextID)"""
  return _osg.Texture_deleteAllTextureObjects(*args)

def Texture_discardAllTextureObjects(*args):
  """Texture_discardAllTextureObjects(unsigned int contextID)"""
  return _osg.Texture_discardAllTextureObjects(*args)

def Texture_flushAllDeletedTextureObjects(*args):
  """Texture_flushAllDeletedTextureObjects(unsigned int contextID)"""
  return _osg.Texture_flushAllDeletedTextureObjects(*args)

def Texture_discardAllDeletedTextureObjects(*args):
  """Texture_discardAllDeletedTextureObjects(unsigned int contextID)"""
  return _osg.Texture_discardAllDeletedTextureObjects(*args)

def Texture_flushDeletedTextureObjects(*args):
  """Texture_flushDeletedTextureObjects(unsigned int contextID, double currentTime, double & availableTime)"""
  return _osg.Texture_flushDeletedTextureObjects(*args)

def Texture_releaseTextureObject(*args):
  """Texture_releaseTextureObject(unsigned int contextID, osg::Texture::TextureObject * to)"""
  return _osg.Texture_releaseTextureObject(*args)

OSG_TEXMAT = _osg.OSG_TEXMAT
class TexMat(StateAttribute):
    """Proxy of C++ osg::TexMat class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexMat, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexMat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TexMat self) -> TexMat
        __init__(osg::TexMat self, Matrixd matrix) -> TexMat
        __init__(osg::TexMat self, TexMat texmat, CopyOp copyop=SHALLOW_COPY) -> TexMat
        __init__(osg::TexMat self, TexMat texmat) -> TexMat
        """
        this = _osg.new_TexMat(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TexMat self) -> Object"""
        return _osg.TexMat_cloneType(self)

    def clone(self, *args):
        """clone(TexMat self, CopyOp copyop) -> Object"""
        return _osg.TexMat_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TexMat self, Object obj) -> bool"""
        return _osg.TexMat_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TexMat self) -> char const *"""
        return _osg.TexMat_libraryName(self)

    def className(self):
        """className(TexMat self) -> char const *"""
        return _osg.TexMat_className(self)

    def getType(self):
        """getType(TexMat self) -> osg::StateAttribute::Type"""
        return _osg.TexMat_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(TexMat self) -> bool"""
        return _osg.TexMat_isTextureAttribute(self)

    def compare(self, *args):
        """compare(TexMat self, StateAttribute sa) -> int"""
        return _osg.TexMat_compare(self, *args)

    def setMatrix(self, *args):
        """setMatrix(TexMat self, Matrixd matrix)"""
        return _osg.TexMat_setMatrix(self, *args)

    def getMatrix(self, *args):
        """
        getMatrix(TexMat self) -> Matrixd
        getMatrix(TexMat self) -> Matrixd
        """
        return _osg.TexMat_getMatrix(self, *args)

    def setScaleByTextureRectangleSize(self, *args):
        """setScaleByTextureRectangleSize(TexMat self, bool flag)"""
        return _osg.TexMat_setScaleByTextureRectangleSize(self, *args)

    def getScaleByTextureRectangleSize(self):
        """getScaleByTextureRectangleSize(TexMat self) -> bool"""
        return _osg.TexMat_getScaleByTextureRectangleSize(self)

    def apply(self, *args):
        """apply(TexMat self, State state)"""
        return _osg.TexMat_apply(self, *args)

TexMat_swigregister = _osg.TexMat_swigregister
TexMat_swigregister(TexMat)

OSG_TEXTURE1D = _osg.OSG_TEXTURE1D
class Texture1D(Texture):
    """Proxy of C++ osg::Texture1D class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Texture1D self) -> Texture1D
        __init__(osg::Texture1D self, Image image) -> Texture1D
        __init__(osg::Texture1D self, Texture1D text, CopyOp copyop=SHALLOW_COPY) -> Texture1D
        __init__(osg::Texture1D self, Texture1D text) -> Texture1D
        """
        this = _osg.new_Texture1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Texture1D self) -> Object"""
        return _osg.Texture1D_cloneType(self)

    def clone(self, *args):
        """clone(Texture1D self, CopyOp copyop) -> Object"""
        return _osg.Texture1D_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Texture1D self, Object obj) -> bool"""
        return _osg.Texture1D_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Texture1D self) -> char const *"""
        return _osg.Texture1D_libraryName(self)

    def className(self):
        """className(Texture1D self) -> char const *"""
        return _osg.Texture1D_className(self)

    def getType(self):
        """getType(Texture1D self) -> osg::StateAttribute::Type"""
        return _osg.Texture1D_getType(self)

    def compare(self, *args):
        """compare(Texture1D self, StateAttribute rhs) -> int"""
        return _osg.Texture1D_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(Texture1D self) -> GLenum"""
        return _osg.Texture1D_getTextureTarget(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(Texture1D self, unsigned int contextID) -> unsigned int &"""
        return _osg.Texture1D_getModifiedCount(self, *args)

    def setImage(self, *args):
        """
        setImage(Texture1D self, Image image)
        setImage(Texture1D self, unsigned int arg2, Image image)
        """
        return _osg.Texture1D_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(Texture1D self) -> Image
        getImage(Texture1D self) -> Image
        getImage(Texture1D self, unsigned int arg2) -> Image
        getImage(Texture1D self, unsigned int arg2) -> Image
        """
        return _osg.Texture1D_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(Texture1D self) -> unsigned int"""
        return _osg.Texture1D_getNumImages(self)

    def setTextureWidth(self, *args):
        """setTextureWidth(Texture1D self, int width)"""
        return _osg.Texture1D_setTextureWidth(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(Texture1D self) -> int"""
        return _osg.Texture1D_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(Texture1D self) -> int"""
        return _osg.Texture1D_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(Texture1D self) -> int"""
        return _osg.Texture1D_getTextureDepth(self)

    def setNumMipmapLevels(self, *args):
        """setNumMipmapLevels(Texture1D self, unsigned int num)"""
        return _osg.Texture1D_setNumMipmapLevels(self, *args)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(Texture1D self) -> unsigned int"""
        return _osg.Texture1D_getNumMipmapLevels(self)

    def copyTexImage1D(self, *args):
        """copyTexImage1D(Texture1D self, State state, int x, int y, int width)"""
        return _osg.Texture1D_copyTexImage1D(self, *args)

    def copyTexSubImage1D(self, *args):
        """copyTexSubImage1D(Texture1D self, State state, int xoffset, int x, int y, int width)"""
        return _osg.Texture1D_copyTexSubImage1D(self, *args)

    def apply(self, *args):
        """apply(Texture1D self, State state)"""
        return _osg.Texture1D_apply(self, *args)

Texture1D_swigregister = _osg.Texture1D_swigregister
Texture1D_swigregister(Texture1D)

OSG_TEXTURE2D = _osg.OSG_TEXTURE2D
class Texture2D(Texture):
    """Proxy of C++ osg::Texture2D class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Texture2D self) -> Texture2D
        __init__(osg::Texture2D self, Image image) -> Texture2D
        __init__(osg::Texture2D self, Texture2D text, CopyOp copyop=SHALLOW_COPY) -> Texture2D
        __init__(osg::Texture2D self, Texture2D text) -> Texture2D
        """
        this = _osg.new_Texture2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Texture2D self) -> Object"""
        return _osg.Texture2D_cloneType(self)

    def clone(self, *args):
        """clone(Texture2D self, CopyOp copyop) -> Object"""
        return _osg.Texture2D_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Texture2D self, Object obj) -> bool"""
        return _osg.Texture2D_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Texture2D self) -> char const *"""
        return _osg.Texture2D_libraryName(self)

    def className(self):
        """className(Texture2D self) -> char const *"""
        return _osg.Texture2D_className(self)

    def getType(self):
        """getType(Texture2D self) -> osg::StateAttribute::Type"""
        return _osg.Texture2D_getType(self)

    def compare(self, *args):
        """compare(Texture2D self, StateAttribute rhs) -> int"""
        return _osg.Texture2D_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(Texture2D self) -> GLenum"""
        return _osg.Texture2D_getTextureTarget(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(Texture2D self, unsigned int contextID) -> unsigned int &"""
        return _osg.Texture2D_getModifiedCount(self, *args)

    def setImage(self, *args):
        """
        setImage(Texture2D self, Image image)
        setImage(Texture2D self, unsigned int arg2, Image image)
        """
        return _osg.Texture2D_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(Texture2D self) -> Image
        getImage(Texture2D self) -> Image
        getImage(Texture2D self, unsigned int arg2) -> Image
        getImage(Texture2D self, unsigned int arg2) -> Image
        """
        return _osg.Texture2D_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(Texture2D self) -> unsigned int"""
        return _osg.Texture2D_getNumImages(self)

    def setTextureSize(self, *args):
        """setTextureSize(Texture2D self, int width, int height)"""
        return _osg.Texture2D_setTextureSize(self, *args)

    def setTextureWidth(self, *args):
        """setTextureWidth(Texture2D self, int width)"""
        return _osg.Texture2D_setTextureWidth(self, *args)

    def setTextureHeight(self, *args):
        """setTextureHeight(Texture2D self, int height)"""
        return _osg.Texture2D_setTextureHeight(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(Texture2D self) -> int"""
        return _osg.Texture2D_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(Texture2D self) -> int"""
        return _osg.Texture2D_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(Texture2D self) -> int"""
        return _osg.Texture2D_getTextureDepth(self)

    def setNumMipmapLevels(self, *args):
        """setNumMipmapLevels(Texture2D self, unsigned int num)"""
        return _osg.Texture2D_setNumMipmapLevels(self, *args)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(Texture2D self) -> unsigned int"""
        return _osg.Texture2D_getNumMipmapLevels(self)

    def copyTexImage2D(self, *args):
        """copyTexImage2D(Texture2D self, State state, int x, int y, int width, int height)"""
        return _osg.Texture2D_copyTexImage2D(self, *args)

    def copyTexSubImage2D(self, *args):
        """copyTexSubImage2D(Texture2D self, State state, int xoffset, int yoffset, int x, int y, int width, int height)"""
        return _osg.Texture2D_copyTexSubImage2D(self, *args)

    def apply(self, *args):
        """apply(Texture2D self, State state)"""
        return _osg.Texture2D_apply(self, *args)

Texture2D_swigregister = _osg.Texture2D_swigregister
Texture2D_swigregister(Texture2D)

OSG_TEXTURE3D = _osg.OSG_TEXTURE3D
GL_MAX_3D_TEXTURE_SIZE = _osg.GL_MAX_3D_TEXTURE_SIZE
class Texture3D(Texture):
    """Proxy of C++ osg::Texture3D class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Texture3D self) -> Texture3D
        __init__(osg::Texture3D self, Image image) -> Texture3D
        __init__(osg::Texture3D self, Texture3D text, CopyOp copyop=SHALLOW_COPY) -> Texture3D
        __init__(osg::Texture3D self, Texture3D text) -> Texture3D
        """
        this = _osg.new_Texture3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Texture3D self) -> Object"""
        return _osg.Texture3D_cloneType(self)

    def clone(self, *args):
        """clone(Texture3D self, CopyOp copyop) -> Object"""
        return _osg.Texture3D_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Texture3D self, Object obj) -> bool"""
        return _osg.Texture3D_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Texture3D self) -> char const *"""
        return _osg.Texture3D_libraryName(self)

    def className(self):
        """className(Texture3D self) -> char const *"""
        return _osg.Texture3D_className(self)

    def getType(self):
        """getType(Texture3D self) -> osg::StateAttribute::Type"""
        return _osg.Texture3D_getType(self)

    def compare(self, *args):
        """compare(Texture3D self, StateAttribute rhs) -> int"""
        return _osg.Texture3D_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(Texture3D self) -> GLenum"""
        return _osg.Texture3D_getTextureTarget(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(Texture3D self, unsigned int contextID) -> unsigned int &"""
        return _osg.Texture3D_getModifiedCount(self, *args)

    def setImage(self, *args):
        """
        setImage(Texture3D self, Image image)
        setImage(Texture3D self, unsigned int arg2, Image image)
        """
        return _osg.Texture3D_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(Texture3D self) -> Image
        getImage(Texture3D self) -> Image
        getImage(Texture3D self, unsigned int arg2) -> Image
        getImage(Texture3D self, unsigned int arg2) -> Image
        """
        return _osg.Texture3D_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(Texture3D self) -> unsigned int"""
        return _osg.Texture3D_getNumImages(self)

    def setTextureSize(self, *args):
        """setTextureSize(Texture3D self, int width, int height, int depth)"""
        return _osg.Texture3D_setTextureSize(self, *args)

    def getTextureSize(self, *args):
        """getTextureSize(Texture3D self, int & width, int & height, int & depth)"""
        return _osg.Texture3D_getTextureSize(self, *args)

    def setTextureWidth(self, *args):
        """setTextureWidth(Texture3D self, int width)"""
        return _osg.Texture3D_setTextureWidth(self, *args)

    def setTextureHeight(self, *args):
        """setTextureHeight(Texture3D self, int height)"""
        return _osg.Texture3D_setTextureHeight(self, *args)

    def setTextureDepth(self, *args):
        """setTextureDepth(Texture3D self, int depth)"""
        return _osg.Texture3D_setTextureDepth(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(Texture3D self) -> int"""
        return _osg.Texture3D_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(Texture3D self) -> int"""
        return _osg.Texture3D_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(Texture3D self) -> int"""
        return _osg.Texture3D_getTextureDepth(self)

    def setNumMipmapLevels(self, *args):
        """setNumMipmapLevels(Texture3D self, unsigned int num)"""
        return _osg.Texture3D_setNumMipmapLevels(self, *args)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(Texture3D self) -> unsigned int"""
        return _osg.Texture3D_getNumMipmapLevels(self)

    def copyTexSubImage3D(self, *args):
        """copyTexSubImage3D(Texture3D self, State state, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)"""
        return _osg.Texture3D_copyTexSubImage3D(self, *args)

    def apply(self, *args):
        """apply(Texture3D self, State state)"""
        return _osg.Texture3D_apply(self, *args)

Texture3D_swigregister = _osg.Texture3D_swigregister
Texture3D_swigregister(Texture3D)

OSG_TEXTURECUBEMAP = _osg.OSG_TEXTURECUBEMAP
class TextureCubeMap(Texture):
    """Proxy of C++ osg::TextureCubeMap class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureCubeMap, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextureCubeMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TextureCubeMap self) -> TextureCubeMap
        __init__(osg::TextureCubeMap self, TextureCubeMap cm, CopyOp copyop=SHALLOW_COPY) -> TextureCubeMap
        __init__(osg::TextureCubeMap self, TextureCubeMap cm) -> TextureCubeMap
        """
        this = _osg.new_TextureCubeMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TextureCubeMap self) -> Object"""
        return _osg.TextureCubeMap_cloneType(self)

    def clone(self, *args):
        """clone(TextureCubeMap self, CopyOp copyop) -> Object"""
        return _osg.TextureCubeMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TextureCubeMap self, Object obj) -> bool"""
        return _osg.TextureCubeMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TextureCubeMap self) -> char const *"""
        return _osg.TextureCubeMap_libraryName(self)

    def className(self):
        """className(TextureCubeMap self) -> char const *"""
        return _osg.TextureCubeMap_className(self)

    def getType(self):
        """getType(TextureCubeMap self) -> osg::StateAttribute::Type"""
        return _osg.TextureCubeMap_getType(self)

    def compare(self, *args):
        """compare(TextureCubeMap self, StateAttribute rhs) -> int"""
        return _osg.TextureCubeMap_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(TextureCubeMap self) -> GLenum"""
        return _osg.TextureCubeMap_getTextureTarget(self)

    POSITIVE_X = _osg.TextureCubeMap_POSITIVE_X
    NEGATIVE_X = _osg.TextureCubeMap_NEGATIVE_X
    POSITIVE_Y = _osg.TextureCubeMap_POSITIVE_Y
    NEGATIVE_Y = _osg.TextureCubeMap_NEGATIVE_Y
    POSITIVE_Z = _osg.TextureCubeMap_POSITIVE_Z
    NEGATIVE_Z = _osg.TextureCubeMap_NEGATIVE_Z
    def setImage(self, *args):
        """setImage(TextureCubeMap self, unsigned int face, Image image)"""
        return _osg.TextureCubeMap_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(TextureCubeMap self, unsigned int face) -> Image
        getImage(TextureCubeMap self, unsigned int face) -> Image
        """
        return _osg.TextureCubeMap_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(TextureCubeMap self) -> unsigned int"""
        return _osg.TextureCubeMap_getNumImages(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(TextureCubeMap self, unsigned int face, unsigned int contextID) -> unsigned int &"""
        return _osg.TextureCubeMap_getModifiedCount(self, *args)

    def setTextureSize(self, *args):
        """setTextureSize(TextureCubeMap self, int width, int height)"""
        return _osg.TextureCubeMap_setTextureSize(self, *args)

    def setTextureWidth(self, *args):
        """setTextureWidth(TextureCubeMap self, int width)"""
        return _osg.TextureCubeMap_setTextureWidth(self, *args)

    def setTextureHeight(self, *args):
        """setTextureHeight(TextureCubeMap self, int height)"""
        return _osg.TextureCubeMap_setTextureHeight(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(TextureCubeMap self) -> int"""
        return _osg.TextureCubeMap_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(TextureCubeMap self) -> int"""
        return _osg.TextureCubeMap_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(TextureCubeMap self) -> int"""
        return _osg.TextureCubeMap_getTextureDepth(self)

    def setNumMipmapLevels(self, *args):
        """setNumMipmapLevels(TextureCubeMap self, unsigned int num)"""
        return _osg.TextureCubeMap_setNumMipmapLevels(self, *args)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(TextureCubeMap self) -> unsigned int"""
        return _osg.TextureCubeMap_getNumMipmapLevels(self)

    def copyTexSubImageCubeMap(self, *args):
        """copyTexSubImageCubeMap(TextureCubeMap self, State state, int face, int xoffset, int yoffset, int x, int y, int width, int height)"""
        return _osg.TextureCubeMap_copyTexSubImageCubeMap(self, *args)

    def apply(self, *args):
        """apply(TextureCubeMap self, State state)"""
        return _osg.TextureCubeMap_apply(self, *args)

TextureCubeMap_swigregister = _osg.TextureCubeMap_swigregister
TextureCubeMap_swigregister(TextureCubeMap)

OSG_TEXTURERECTANGLE = _osg.OSG_TEXTURERECTANGLE
GL_TEXTURE_RECTANGLE_NV = _osg.GL_TEXTURE_RECTANGLE_NV
GL_TEXTURE_RECTANGLE = _osg.GL_TEXTURE_RECTANGLE
class TextureRectangle(Texture):
    """Proxy of C++ osg::TextureRectangle class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureRectangle, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextureRectangle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TextureRectangle self) -> TextureRectangle
        __init__(osg::TextureRectangle self, Image image) -> TextureRectangle
        __init__(osg::TextureRectangle self, TextureRectangle text, CopyOp copyop=SHALLOW_COPY) -> TextureRectangle
        __init__(osg::TextureRectangle self, TextureRectangle text) -> TextureRectangle
        """
        this = _osg.new_TextureRectangle(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TextureRectangle self) -> Object"""
        return _osg.TextureRectangle_cloneType(self)

    def clone(self, *args):
        """clone(TextureRectangle self, CopyOp copyop) -> Object"""
        return _osg.TextureRectangle_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TextureRectangle self, Object obj) -> bool"""
        return _osg.TextureRectangle_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TextureRectangle self) -> char const *"""
        return _osg.TextureRectangle_libraryName(self)

    def className(self):
        """className(TextureRectangle self) -> char const *"""
        return _osg.TextureRectangle_className(self)

    def getType(self):
        """getType(TextureRectangle self) -> osg::StateAttribute::Type"""
        return _osg.TextureRectangle_getType(self)

    def compare(self, *args):
        """compare(TextureRectangle self, StateAttribute rhs) -> int"""
        return _osg.TextureRectangle_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(TextureRectangle self) -> GLenum"""
        return _osg.TextureRectangle_getTextureTarget(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(TextureRectangle self, unsigned int contextID) -> unsigned int &"""
        return _osg.TextureRectangle_getModifiedCount(self, *args)

    def setImage(self, *args):
        """
        setImage(TextureRectangle self, Image image)
        setImage(TextureRectangle self, unsigned int arg2, Image image)
        """
        return _osg.TextureRectangle_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(TextureRectangle self) -> Image
        getImage(TextureRectangle self) -> Image
        getImage(TextureRectangle self, unsigned int arg2) -> Image
        getImage(TextureRectangle self, unsigned int arg2) -> Image
        """
        return _osg.TextureRectangle_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(TextureRectangle self) -> unsigned int"""
        return _osg.TextureRectangle_getNumImages(self)

    def setTextureSize(self, *args):
        """setTextureSize(TextureRectangle self, int width, int height)"""
        return _osg.TextureRectangle_setTextureSize(self, *args)

    def setTextureWidth(self, *args):
        """setTextureWidth(TextureRectangle self, int width)"""
        return _osg.TextureRectangle_setTextureWidth(self, *args)

    def setTextureHeight(self, *args):
        """setTextureHeight(TextureRectangle self, int height)"""
        return _osg.TextureRectangle_setTextureHeight(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(TextureRectangle self) -> int"""
        return _osg.TextureRectangle_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(TextureRectangle self) -> int"""
        return _osg.TextureRectangle_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(TextureRectangle self) -> int"""
        return _osg.TextureRectangle_getTextureDepth(self)

    def copyTexImage2D(self, *args):
        """copyTexImage2D(TextureRectangle self, State state, int x, int y, int width, int height)"""
        return _osg.TextureRectangle_copyTexImage2D(self, *args)

    def copyTexSubImage2D(self, *args):
        """copyTexSubImage2D(TextureRectangle self, State state, int xoffset, int yoffset, int x, int y, int width, int height)"""
        return _osg.TextureRectangle_copyTexSubImage2D(self, *args)

    def apply(self, *args):
        """apply(TextureRectangle self, State state)"""
        return _osg.TextureRectangle_apply(self, *args)

TextureRectangle_swigregister = _osg.TextureRectangle_swigregister
TextureRectangle_swigregister(TextureRectangle)

OSG_VERTEXPROGRAM = _osg.OSG_VERTEXPROGRAM
GL_VERTEX_PROGRAM_ARB = _osg.GL_VERTEX_PROGRAM_ARB
GL_VERTEX_PROGRAM_POINT_SIZE_ARB = _osg.GL_VERTEX_PROGRAM_POINT_SIZE_ARB
GL_VERTEX_PROGRAM_TWO_SIDE_ARB = _osg.GL_VERTEX_PROGRAM_TWO_SIDE_ARB
GL_COLOR_SUM_ARB = _osg.GL_COLOR_SUM_ARB
GL_PROGRAM_FORMAT_ASCII_ARB = _osg.GL_PROGRAM_FORMAT_ASCII_ARB
GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
GL_CURRENT_VERTEX_ATTRIB_ARB = _osg.GL_CURRENT_VERTEX_ATTRIB_ARB
GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
GL_PROGRAM_LENGTH_ARB = _osg.GL_PROGRAM_LENGTH_ARB
GL_PROGRAM_FORMAT_ARB = _osg.GL_PROGRAM_FORMAT_ARB
GL_PROGRAM_BINDING_ARB = _osg.GL_PROGRAM_BINDING_ARB
GL_PROGRAM_INSTRUCTIONS_ARB = _osg.GL_PROGRAM_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_INSTRUCTIONS_ARB = _osg.GL_MAX_PROGRAM_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = _osg.GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = _osg.GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_PROGRAM_TEMPORARIES_ARB = _osg.GL_PROGRAM_TEMPORARIES_ARB
GL_MAX_PROGRAM_TEMPORARIES_ARB = _osg.GL_MAX_PROGRAM_TEMPORARIES_ARB
GL_PROGRAM_NATIVE_TEMPORARIES_ARB = _osg.GL_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = _osg.GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_PROGRAM_PARAMETERS_ARB = _osg.GL_PROGRAM_PARAMETERS_ARB
GL_MAX_PROGRAM_PARAMETERS_ARB = _osg.GL_MAX_PROGRAM_PARAMETERS_ARB
GL_PROGRAM_NATIVE_PARAMETERS_ARB = _osg.GL_PROGRAM_NATIVE_PARAMETERS_ARB
GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = _osg.GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
GL_PROGRAM_ATTRIBS_ARB = _osg.GL_PROGRAM_ATTRIBS_ARB
GL_MAX_PROGRAM_ATTRIBS_ARB = _osg.GL_MAX_PROGRAM_ATTRIBS_ARB
GL_PROGRAM_NATIVE_ATTRIBS_ARB = _osg.GL_PROGRAM_NATIVE_ATTRIBS_ARB
GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = _osg.GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
GL_PROGRAM_ADDRESS_REGISTERS_ARB = _osg.GL_PROGRAM_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = _osg.GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = _osg.GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = _osg.GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = _osg.GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = _osg.GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = _osg.GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
GL_PROGRAM_STRING_ARB = _osg.GL_PROGRAM_STRING_ARB
GL_PROGRAM_ERROR_POSITION_ARB = _osg.GL_PROGRAM_ERROR_POSITION_ARB
GL_CURRENT_MATRIX_ARB = _osg.GL_CURRENT_MATRIX_ARB
GL_TRANSPOSE_CURRENT_MATRIX_ARB = _osg.GL_TRANSPOSE_CURRENT_MATRIX_ARB
GL_CURRENT_MATRIX_STACK_DEPTH_ARB = _osg.GL_CURRENT_MATRIX_STACK_DEPTH_ARB
GL_MAX_VERTEX_ATTRIBS_ARB = _osg.GL_MAX_VERTEX_ATTRIBS_ARB
GL_MAX_PROGRAM_MATRICES_ARB = _osg.GL_MAX_PROGRAM_MATRICES_ARB
GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = _osg.GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
GL_PROGRAM_ERROR_STRING_ARB = _osg.GL_PROGRAM_ERROR_STRING_ARB
GL_MATRIX0_ARB = _osg.GL_MATRIX0_ARB
GL_MATRIX1_ARB = _osg.GL_MATRIX1_ARB
GL_MATRIX2_ARB = _osg.GL_MATRIX2_ARB
GL_MATRIX3_ARB = _osg.GL_MATRIX3_ARB
GL_MATRIX4_ARB = _osg.GL_MATRIX4_ARB
GL_MATRIX5_ARB = _osg.GL_MATRIX5_ARB
GL_MATRIX6_ARB = _osg.GL_MATRIX6_ARB
GL_MATRIX7_ARB = _osg.GL_MATRIX7_ARB
GL_MATRIX8_ARB = _osg.GL_MATRIX8_ARB
GL_MATRIX9_ARB = _osg.GL_MATRIX9_ARB
GL_MATRIX10_ARB = _osg.GL_MATRIX10_ARB
GL_MATRIX11_ARB = _osg.GL_MATRIX11_ARB
GL_MATRIX12_ARB = _osg.GL_MATRIX12_ARB
GL_MATRIX13_ARB = _osg.GL_MATRIX13_ARB
GL_MATRIX14_ARB = _osg.GL_MATRIX14_ARB
GL_MATRIX15_ARB = _osg.GL_MATRIX15_ARB
GL_MATRIX16_ARB = _osg.GL_MATRIX16_ARB
GL_MATRIX17_ARB = _osg.GL_MATRIX17_ARB
GL_MATRIX18_ARB = _osg.GL_MATRIX18_ARB
GL_MATRIX19_ARB = _osg.GL_MATRIX19_ARB
GL_MATRIX20_ARB = _osg.GL_MATRIX20_ARB
GL_MATRIX21_ARB = _osg.GL_MATRIX21_ARB
GL_MATRIX22_ARB = _osg.GL_MATRIX22_ARB
GL_MATRIX23_ARB = _osg.GL_MATRIX23_ARB
GL_MATRIX24_ARB = _osg.GL_MATRIX24_ARB
GL_MATRIX25_ARB = _osg.GL_MATRIX25_ARB
GL_MATRIX26_ARB = _osg.GL_MATRIX26_ARB
GL_MATRIX27_ARB = _osg.GL_MATRIX27_ARB
GL_MATRIX28_ARB = _osg.GL_MATRIX28_ARB
GL_MATRIX29_ARB = _osg.GL_MATRIX29_ARB
GL_MATRIX30_ARB = _osg.GL_MATRIX30_ARB
GL_MATRIX31_ARB = _osg.GL_MATRIX31_ARB
class VertexProgram(StateAttribute):
    """Proxy of C++ osg::VertexProgram class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexProgram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::VertexProgram self) -> VertexProgram
        __init__(osg::VertexProgram self, VertexProgram vp, CopyOp copyop=SHALLOW_COPY) -> VertexProgram
        __init__(osg::VertexProgram self, VertexProgram vp) -> VertexProgram
        """
        this = _osg.new_VertexProgram(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(VertexProgram self) -> Object"""
        return _osg.VertexProgram_cloneType(self)

    def clone(self, *args):
        """clone(VertexProgram self, CopyOp copyop) -> Object"""
        return _osg.VertexProgram_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(VertexProgram self, Object obj) -> bool"""
        return _osg.VertexProgram_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(VertexProgram self) -> char const *"""
        return _osg.VertexProgram_libraryName(self)

    def className(self):
        """className(VertexProgram self) -> char const *"""
        return _osg.VertexProgram_className(self)

    def getType(self):
        """getType(VertexProgram self) -> osg::StateAttribute::Type"""
        return _osg.VertexProgram_getType(self)

    def compare(self, *args):
        """compare(VertexProgram self, StateAttribute sa) -> int"""
        return _osg.VertexProgram_compare(self, *args)

    def getVertexProgramID(self, *args):
        """getVertexProgramID(VertexProgram self, unsigned int contextID) -> GLuint &"""
        return _osg.VertexProgram_getVertexProgramID(self, *args)

    def setVertexProgram(self, *args):
        """
        setVertexProgram(VertexProgram self, char const * program)
        setVertexProgram(VertexProgram self, std::string const & program)
        """
        return _osg.VertexProgram_setVertexProgram(self, *args)

    def getVertexProgram(self):
        """getVertexProgram(VertexProgram self) -> std::string const &"""
        return _osg.VertexProgram_getVertexProgram(self)

    def setProgramLocalParameter(self, *args):
        """setProgramLocalParameter(VertexProgram self, GLuint const index, Vec4f p)"""
        return _osg.VertexProgram_setProgramLocalParameter(self, *args)

    def setLocalParameters(self, *args):
        """setLocalParameters(VertexProgram self, osg::VertexProgram::LocalParamList const & lpl)"""
        return _osg.VertexProgram_setLocalParameters(self, *args)

    def getLocalParameters(self, *args):
        """
        getLocalParameters(VertexProgram self) -> osg::VertexProgram::LocalParamList
        getLocalParameters(VertexProgram self) -> osg::VertexProgram::LocalParamList const &
        """
        return _osg.VertexProgram_getLocalParameters(self, *args)

    def setMatrix(self, *args):
        """setMatrix(VertexProgram self, GLenum const mode, Matrixd matrix)"""
        return _osg.VertexProgram_setMatrix(self, *args)

    def setMatrices(self, *args):
        """setMatrices(VertexProgram self, osg::VertexProgram::MatrixList const & matrices)"""
        return _osg.VertexProgram_setMatrices(self, *args)

    def getMatrices(self, *args):
        """
        getMatrices(VertexProgram self) -> osg::VertexProgram::MatrixList
        getMatrices(VertexProgram self) -> osg::VertexProgram::MatrixList const &
        """
        return _osg.VertexProgram_getMatrices(self, *args)

    def dirtyVertexProgramObject(self):
        """dirtyVertexProgramObject(VertexProgram self)"""
        return _osg.VertexProgram_dirtyVertexProgramObject(self)

    def deleteVertexProgramObject(*args):
        """deleteVertexProgramObject(unsigned int contextID, GLuint handle)"""
        return _osg.VertexProgram_deleteVertexProgramObject(*args)

    if _newclass:deleteVertexProgramObject = staticmethod(deleteVertexProgramObject)
    __swig_getmethods__["deleteVertexProgramObject"] = lambda x: deleteVertexProgramObject
    def flushDeletedVertexProgramObjects(*args):
        """flushDeletedVertexProgramObjects(unsigned int contextID, double currentTime, double & availableTime)"""
        return _osg.VertexProgram_flushDeletedVertexProgramObjects(*args)

    if _newclass:flushDeletedVertexProgramObjects = staticmethod(flushDeletedVertexProgramObjects)
    __swig_getmethods__["flushDeletedVertexProgramObjects"] = lambda x: flushDeletedVertexProgramObjects
    def discardDeletedVertexProgramObjects(*args):
        """discardDeletedVertexProgramObjects(unsigned int contextID)"""
        return _osg.VertexProgram_discardDeletedVertexProgramObjects(*args)

    if _newclass:discardDeletedVertexProgramObjects = staticmethod(discardDeletedVertexProgramObjects)
    __swig_getmethods__["discardDeletedVertexProgramObjects"] = lambda x: discardDeletedVertexProgramObjects
    def apply(self, *args):
        """apply(VertexProgram self, State state)"""
        return _osg.VertexProgram_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(VertexProgram self, State state)"""
        return _osg.VertexProgram_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(VertexProgram self, unsigned int maxSize)"""
        return _osg.VertexProgram_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(VertexProgram self, State state=None)
        releaseGLObjects(VertexProgram self)
        """
        return _osg.VertexProgram_releaseGLObjects(self, state)

VertexProgram_swigregister = _osg.VertexProgram_swigregister
VertexProgram_swigregister(VertexProgram)

def VertexProgram_deleteVertexProgramObject(*args):
  """VertexProgram_deleteVertexProgramObject(unsigned int contextID, GLuint handle)"""
  return _osg.VertexProgram_deleteVertexProgramObject(*args)

def VertexProgram_flushDeletedVertexProgramObjects(*args):
  """VertexProgram_flushDeletedVertexProgramObjects(unsigned int contextID, double currentTime, double & availableTime)"""
  return _osg.VertexProgram_flushDeletedVertexProgramObjects(*args)

def VertexProgram_discardDeletedVertexProgramObjects(*args):
  """VertexProgram_discardDeletedVertexProgramObjects(unsigned int contextID)"""
  return _osg.VertexProgram_discardDeletedVertexProgramObjects(*args)

OSG_COLORMASK = _osg.OSG_COLORMASK
class ColorMask(StateAttribute):
    """Proxy of C++ osg::ColorMask class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorMask, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorMask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ColorMask self) -> ColorMask
        __init__(osg::ColorMask self, bool red, bool green, bool blue, bool alpha) -> ColorMask
        __init__(osg::ColorMask self, ColorMask cm, CopyOp copyop=SHALLOW_COPY) -> ColorMask
        __init__(osg::ColorMask self, ColorMask cm) -> ColorMask
        """
        this = _osg.new_ColorMask(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ColorMask self) -> Object"""
        return _osg.ColorMask_cloneType(self)

    def clone(self, *args):
        """clone(ColorMask self, CopyOp copyop) -> Object"""
        return _osg.ColorMask_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ColorMask self, Object obj) -> bool"""
        return _osg.ColorMask_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ColorMask self) -> char const *"""
        return _osg.ColorMask_libraryName(self)

    def className(self):
        """className(ColorMask self) -> char const *"""
        return _osg.ColorMask_className(self)

    def getType(self):
        """getType(ColorMask self) -> osg::StateAttribute::Type"""
        return _osg.ColorMask_getType(self)

    def compare(self, *args):
        """compare(ColorMask self, StateAttribute sa) -> int"""
        return _osg.ColorMask_compare(self, *args)

    def setMask(self, *args):
        """setMask(ColorMask self, bool red, bool green, bool blue, bool alpha)"""
        return _osg.ColorMask_setMask(self, *args)

    def setRedMask(self, *args):
        """setRedMask(ColorMask self, bool mask)"""
        return _osg.ColorMask_setRedMask(self, *args)

    def getRedMask(self):
        """getRedMask(ColorMask self) -> bool"""
        return _osg.ColorMask_getRedMask(self)

    def setGreenMask(self, *args):
        """setGreenMask(ColorMask self, bool mask)"""
        return _osg.ColorMask_setGreenMask(self, *args)

    def getGreenMask(self):
        """getGreenMask(ColorMask self) -> bool"""
        return _osg.ColorMask_getGreenMask(self)

    def setBlueMask(self, *args):
        """setBlueMask(ColorMask self, bool mask)"""
        return _osg.ColorMask_setBlueMask(self, *args)

    def getBlueMask(self):
        """getBlueMask(ColorMask self) -> bool"""
        return _osg.ColorMask_getBlueMask(self)

    def setAlphaMask(self, *args):
        """setAlphaMask(ColorMask self, bool mask)"""
        return _osg.ColorMask_setAlphaMask(self, *args)

    def getAlphaMask(self):
        """getAlphaMask(ColorMask self) -> bool"""
        return _osg.ColorMask_getAlphaMask(self)

    def apply(self, *args):
        """apply(ColorMask self, State state)"""
        return _osg.ColorMask_apply(self, *args)

ColorMask_swigregister = _osg.ColorMask_swigregister
ColorMask_swigregister(ColorMask)

OSG_CLAMPCOLOR = _osg.OSG_CLAMPCOLOR
GL_RGBA_FLOAT_MODE_ARB = _osg.GL_RGBA_FLOAT_MODE_ARB
GL_CLAMP_VERTEX_COLOR_ARB = _osg.GL_CLAMP_VERTEX_COLOR_ARB
GL_CLAMP_FRAGMENT_COLOR_ARB = _osg.GL_CLAMP_FRAGMENT_COLOR_ARB
GL_CLAMP_READ_COLOR_ARB = _osg.GL_CLAMP_READ_COLOR_ARB
GL_FIXED_ONLY_ARB = _osg.GL_FIXED_ONLY_ARB
GL_FIXED_ONLY = _osg.GL_FIXED_ONLY
GL_CLAMP_VERTEX_COLOR = _osg.GL_CLAMP_VERTEX_COLOR
GL_CLAMP_READ_COLOR = _osg.GL_CLAMP_READ_COLOR
GL_CLAMP_FRAGMENT_COLOR = _osg.GL_CLAMP_FRAGMENT_COLOR
class ClampColor(StateAttribute):
    """Proxy of C++ osg::ClampColor class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClampColor, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClampColor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ClampColor self) -> ClampColor
        __init__(osg::ClampColor self, GLenum vertexMode, GLenum fragmentMode, GLenum readMode) -> ClampColor
        __init__(osg::ClampColor self, ClampColor rhs, CopyOp copyop=SHALLOW_COPY) -> ClampColor
        __init__(osg::ClampColor self, ClampColor rhs) -> ClampColor
        """
        this = _osg.new_ClampColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ClampColor self) -> Object"""
        return _osg.ClampColor_cloneType(self)

    def clone(self, *args):
        """clone(ClampColor self, CopyOp copyop) -> Object"""
        return _osg.ClampColor_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ClampColor self, Object obj) -> bool"""
        return _osg.ClampColor_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ClampColor self) -> char const *"""
        return _osg.ClampColor_libraryName(self)

    def className(self):
        """className(ClampColor self) -> char const *"""
        return _osg.ClampColor_className(self)

    def getType(self):
        """getType(ClampColor self) -> osg::StateAttribute::Type"""
        return _osg.ClampColor_getType(self)

    def compare(self, *args):
        """compare(ClampColor self, StateAttribute sa) -> int"""
        return _osg.ClampColor_compare(self, *args)

    def setClampVertexColor(self, *args):
        """setClampVertexColor(ClampColor self, GLenum mode)"""
        return _osg.ClampColor_setClampVertexColor(self, *args)

    def getClampVertexColor(self):
        """getClampVertexColor(ClampColor self) -> GLenum"""
        return _osg.ClampColor_getClampVertexColor(self)

    def setClampFragmentColor(self, *args):
        """setClampFragmentColor(ClampColor self, GLenum mode)"""
        return _osg.ClampColor_setClampFragmentColor(self, *args)

    def getClampFragmentColor(self):
        """getClampFragmentColor(ClampColor self) -> GLenum"""
        return _osg.ClampColor_getClampFragmentColor(self)

    def setClampReadColor(self, *args):
        """setClampReadColor(ClampColor self, GLenum mode)"""
        return _osg.ClampColor_setClampReadColor(self, *args)

    def getClampReadColor(self):
        """getClampReadColor(ClampColor self) -> GLenum"""
        return _osg.ClampColor_getClampReadColor(self)

    def apply(self, *args):
        """apply(ClampColor self, State state)"""
        return _osg.ClampColor_apply(self, *args)

ClampColor_swigregister = _osg.ClampColor_swigregister
ClampColor_swigregister(ClampColor)

OSG_VIEWPORT = _osg.OSG_VIEWPORT
class Viewport(StateAttribute):
    """Proxy of C++ osg::Viewport class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Viewport, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Viewport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Viewport self) -> Viewport
        __init__(osg::Viewport self, osg::Viewport::value_type x, osg::Viewport::value_type y, osg::Viewport::value_type width, 
            osg::Viewport::value_type height) -> Viewport
        __init__(osg::Viewport self, Viewport vp, CopyOp copyop=SHALLOW_COPY) -> Viewport
        __init__(osg::Viewport self, Viewport vp) -> Viewport
        """
        this = _osg.new_Viewport(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Viewport self) -> Object"""
        return _osg.Viewport_cloneType(self)

    def clone(self, *args):
        """clone(Viewport self, CopyOp copyop) -> Object"""
        return _osg.Viewport_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Viewport self, Object obj) -> bool"""
        return _osg.Viewport_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Viewport self) -> char const *"""
        return _osg.Viewport_libraryName(self)

    def className(self):
        """className(Viewport self) -> char const *"""
        return _osg.Viewport_className(self)

    def getType(self):
        """getType(Viewport self) -> osg::StateAttribute::Type"""
        return _osg.Viewport_getType(self)

    def compare(self, *args):
        """compare(Viewport self, StateAttribute sa) -> int"""
        return _osg.Viewport_compare(self, *args)

    def setViewport(self, *args):
        """
        setViewport(Viewport self, osg::Viewport::value_type x, osg::Viewport::value_type y, osg::Viewport::value_type width, 
            osg::Viewport::value_type height)
        """
        return _osg.Viewport_setViewport(self, *args)

    def valid(self):
        """valid(Viewport self) -> bool"""
        return _osg.Viewport_valid(self)

    def aspectRatio(self):
        """aspectRatio(Viewport self) -> double"""
        return _osg.Viewport_aspectRatio(self)

    def computeWindowMatrix(self):
        """computeWindowMatrix(Viewport self) -> Matrixd"""
        return _osg.Viewport_computeWindowMatrix(self)

    def apply(self, *args):
        """apply(Viewport self, State state)"""
        return _osg.Viewport_apply(self, *args)

    def getX(self):
        """getX(Viewport self) -> osg::Viewport::value_type"""
        return _osg.Viewport_getX(self)

    def getY(self):
        """getY(Viewport self) -> osg::Viewport::value_type"""
        return _osg.Viewport_getY(self)

    def getWidth(self):
        """getWidth(Viewport self) -> osg::Viewport::value_type"""
        return _osg.Viewport_getWidth(self)

    def getHeight(self):
        """getHeight(Viewport self) -> osg::Viewport::value_type"""
        return _osg.Viewport_getHeight(self)

Viewport_swigregister = _osg.Viewport_swigregister
Viewport_swigregister(Viewport)

OSG_SHADER = _osg.OSG_SHADER
class ShaderBinary(Object):
    """Proxy of C++ osg::ShaderBinary class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShaderBinary, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShaderBinary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ShaderBinary self) -> ShaderBinary
        __init__(osg::ShaderBinary self, ShaderBinary rhs, CopyOp copyop=SHALLOW_COPY) -> ShaderBinary
        __init__(osg::ShaderBinary self, ShaderBinary rhs) -> ShaderBinary
        """
        this = _osg.new_ShaderBinary(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ShaderBinary self) -> Object"""
        return _osg.ShaderBinary_cloneType(self)

    def clone(self, *args):
        """clone(ShaderBinary self, CopyOp copyop) -> Object"""
        return _osg.ShaderBinary_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ShaderBinary self, Object obj) -> bool"""
        return _osg.ShaderBinary_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ShaderBinary self) -> char const *"""
        return _osg.ShaderBinary_libraryName(self)

    def className(self):
        """className(ShaderBinary self) -> char const *"""
        return _osg.ShaderBinary_className(self)

    def allocate(self, *args):
        """allocate(ShaderBinary self, unsigned int size)"""
        return _osg.ShaderBinary_allocate(self, *args)

    def assign(self, *args):
        """assign(ShaderBinary self, unsigned int size, unsigned char const * data)"""
        return _osg.ShaderBinary_assign(self, *args)

    def getSize(self):
        """getSize(ShaderBinary self) -> unsigned int"""
        return _osg.ShaderBinary_getSize(self)

    def getData(self, *args):
        """
        getData(ShaderBinary self) -> unsigned char
        getData(ShaderBinary self) -> unsigned char const *
        """
        return _osg.ShaderBinary_getData(self, *args)

    def readShaderBinaryFile(*args):
        """readShaderBinaryFile(std::string const & fileName) -> ShaderBinary"""
        return _osg.ShaderBinary_readShaderBinaryFile(*args)

    if _newclass:readShaderBinaryFile = staticmethod(readShaderBinaryFile)
    __swig_getmethods__["readShaderBinaryFile"] = lambda x: readShaderBinaryFile
    __swig_destroy__ = _osg.delete_ShaderBinary
    __del__ = lambda self : None;
ShaderBinary_swigregister = _osg.ShaderBinary_swigregister
ShaderBinary_swigregister(ShaderBinary)

def ShaderBinary_readShaderBinaryFile(*args):
  """ShaderBinary_readShaderBinaryFile(std::string const & fileName) -> ShaderBinary"""
  return _osg.ShaderBinary_readShaderBinaryFile(*args)

class Shader(Object):
    """Proxy of C++ osg::Shader class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shader, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Shader, name)
    __repr__ = _swig_repr
    VERTEX = _osg.Shader_VERTEX
    TESSCONTROL = _osg.Shader_TESSCONTROL
    TESSEVALUATION = _osg.Shader_TESSEVALUATION
    GEOMETRY = _osg.Shader_GEOMETRY
    FRAGMENT = _osg.Shader_FRAGMENT
    COMPUTE = _osg.Shader_COMPUTE
    UNDEFINED = _osg.Shader_UNDEFINED
    def __init__(self, *args): 
        """
        __init__(osg::Shader self, osg::Shader::Type type=UNDEFINED) -> Shader
        __init__(osg::Shader self) -> Shader
        __init__(osg::Shader self, osg::Shader::Type type, std::string const & source) -> Shader
        __init__(osg::Shader self, osg::Shader::Type type, ShaderBinary shaderBinary) -> Shader
        __init__(osg::Shader self, Shader rhs, CopyOp copyop=SHALLOW_COPY) -> Shader
        __init__(osg::Shader self, Shader rhs) -> Shader
        """
        this = _osg.new_Shader(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Shader self) -> Object"""
        return _osg.Shader_cloneType(self)

    def clone(self, *args):
        """clone(Shader self, CopyOp copyop) -> Object"""
        return _osg.Shader_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Shader self, Object obj) -> bool"""
        return _osg.Shader_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Shader self) -> char const *"""
        return _osg.Shader_libraryName(self)

    def className(self):
        """className(Shader self) -> char const *"""
        return _osg.Shader_className(self)

    def compare(self, *args):
        """compare(Shader self, Shader rhs) -> int"""
        return _osg.Shader_compare(self, *args)

    def setType(self, *args):
        """setType(Shader self, osg::Shader::Type t) -> bool"""
        return _osg.Shader_setType(self, *args)

    def getType(self):
        """getType(Shader self) -> osg::Shader::Type"""
        return _osg.Shader_getType(self)

    def getTypename(self):
        """getTypename(Shader self) -> char const *"""
        return _osg.Shader_getTypename(self)

    def setFileName(self, *args):
        """setFileName(Shader self, std::string const & fileName)"""
        return _osg.Shader_setFileName(self, *args)

    def getFileName(self):
        """getFileName(Shader self) -> std::string const &"""
        return _osg.Shader_getFileName(self)

    def setShaderSource(self, *args):
        """setShaderSource(Shader self, std::string const & sourceText)"""
        return _osg.Shader_setShaderSource(self, *args)

    def getShaderSource(self):
        """getShaderSource(Shader self) -> std::string const &"""
        return _osg.Shader_getShaderSource(self)

    def setShaderBinary(self, *args):
        """setShaderBinary(Shader self, ShaderBinary shaderBinary)"""
        return _osg.Shader_setShaderBinary(self, *args)

    def getShaderBinary(self, *args):
        """
        getShaderBinary(Shader self) -> ShaderBinary
        getShaderBinary(Shader self) -> ShaderBinary
        """
        return _osg.Shader_getShaderBinary(self, *args)

    def readShaderFile(*args):
        """readShaderFile(osg::Shader::Type type, std::string const & fileName) -> Shader"""
        return _osg.Shader_readShaderFile(*args)

    if _newclass:readShaderFile = staticmethod(readShaderFile)
    __swig_getmethods__["readShaderFile"] = lambda x: readShaderFile
    def loadShaderSourceFromFile(self, *args):
        """loadShaderSourceFromFile(Shader self, std::string const & fileName) -> bool"""
        return _osg.Shader_loadShaderSourceFromFile(self, *args)

    def addCodeInjection(self, *args):
        """addCodeInjection(Shader self, float position, std::string const & code)"""
        return _osg.Shader_addCodeInjection(self, *args)

    def getCodeInjectionMap(self, *args):
        """
        getCodeInjectionMap(Shader self) -> osg::Shader::CodeInjectionMap
        getCodeInjectionMap(Shader self) -> osg::Shader::CodeInjectionMap const &
        """
        return _osg.Shader_getCodeInjectionMap(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Shader self, unsigned int maxSize)"""
        return _osg.Shader_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(Shader self, State state=None)
        releaseGLObjects(Shader self)
        """
        return _osg.Shader_releaseGLObjects(self, state)

    def dirtyShader(self):
        """dirtyShader(Shader self)"""
        return _osg.Shader_dirtyShader(self)

    def compileShader(self, *args):
        """compileShader(Shader self, State state)"""
        return _osg.Shader_compileShader(self, *args)

    def attachShader(self, *args):
        """attachShader(Shader self, unsigned int contextID, GLuint program)"""
        return _osg.Shader_attachShader(self, *args)

    def detachShader(self, *args):
        """detachShader(Shader self, unsigned int contextID, GLuint program)"""
        return _osg.Shader_detachShader(self, *args)

    def getGlShaderInfoLog(self, *args):
        """getGlShaderInfoLog(Shader self, unsigned int contextID, std::string & log) -> bool"""
        return _osg.Shader_getGlShaderInfoLog(self, *args)

    def deleteGlShader(*args):
        """deleteGlShader(unsigned int contextID, GLuint shader)"""
        return _osg.Shader_deleteGlShader(*args)

    if _newclass:deleteGlShader = staticmethod(deleteGlShader)
    __swig_getmethods__["deleteGlShader"] = lambda x: deleteGlShader
    def flushDeletedGlShaders(*args):
        """flushDeletedGlShaders(unsigned int contextID, double currentTime, double & availableTime)"""
        return _osg.Shader_flushDeletedGlShaders(*args)

    if _newclass:flushDeletedGlShaders = staticmethod(flushDeletedGlShaders)
    __swig_getmethods__["flushDeletedGlShaders"] = lambda x: flushDeletedGlShaders
    def discardDeletedGlShaders(*args):
        """discardDeletedGlShaders(unsigned int contextID)"""
        return _osg.Shader_discardDeletedGlShaders(*args)

    if _newclass:discardDeletedGlShaders = staticmethod(discardDeletedGlShaders)
    __swig_getmethods__["discardDeletedGlShaders"] = lambda x: discardDeletedGlShaders
    def getTypeId(*args):
        """getTypeId(std::string const & tname) -> osg::Shader::Type"""
        return _osg.Shader_getTypeId(*args)

    if _newclass:getTypeId = staticmethod(getTypeId)
    __swig_getmethods__["getTypeId"] = lambda x: getTypeId
Shader_swigregister = _osg.Shader_swigregister
Shader_swigregister(Shader)

def Shader_readShaderFile(*args):
  """Shader_readShaderFile(osg::Shader::Type type, std::string const & fileName) -> Shader"""
  return _osg.Shader_readShaderFile(*args)

def Shader_deleteGlShader(*args):
  """Shader_deleteGlShader(unsigned int contextID, GLuint shader)"""
  return _osg.Shader_deleteGlShader(*args)

def Shader_flushDeletedGlShaders(*args):
  """Shader_flushDeletedGlShaders(unsigned int contextID, double currentTime, double & availableTime)"""
  return _osg.Shader_flushDeletedGlShaders(*args)

def Shader_discardDeletedGlShaders(*args):
  """Shader_discardDeletedGlShaders(unsigned int contextID)"""
  return _osg.Shader_discardDeletedGlShaders(*args)

def Shader_getTypeId(*args):
  """Shader_getTypeId(std::string const & tname) -> osg::Shader::Type"""
  return _osg.Shader_getTypeId(*args)

class ShaderComponent(Object):
    """Proxy of C++ osg::ShaderComponent class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShaderComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShaderComponent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ShaderComponent self) -> ShaderComponent
        __init__(osg::ShaderComponent self, ShaderComponent sc, CopyOp copyop=SHALLOW_COPY) -> ShaderComponent
        __init__(osg::ShaderComponent self, ShaderComponent sc) -> ShaderComponent
        """
        this = _osg.new_ShaderComponent(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ShaderComponent self) -> Object"""
        return _osg.ShaderComponent_cloneType(self)

    def clone(self, *args):
        """clone(ShaderComponent self, CopyOp copyop) -> Object"""
        return _osg.ShaderComponent_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ShaderComponent self, Object obj) -> bool"""
        return _osg.ShaderComponent_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ShaderComponent self) -> char const *"""
        return _osg.ShaderComponent_libraryName(self)

    def className(self):
        """className(ShaderComponent self) -> char const *"""
        return _osg.ShaderComponent_className(self)

    def addShader(self, *args):
        """addShader(ShaderComponent self, Shader shader) -> unsigned int"""
        return _osg.ShaderComponent_addShader(self, *args)

    def removeShader(self, *args):
        """removeShader(ShaderComponent self, unsigned int i)"""
        return _osg.ShaderComponent_removeShader(self, *args)

    def getShader(self, *args):
        """
        getShader(ShaderComponent self, unsigned int i) -> Shader
        getShader(ShaderComponent self, unsigned int i) -> Shader
        """
        return _osg.ShaderComponent_getShader(self, *args)

    def getNumShaders(self):
        """getNumShaders(ShaderComponent self) -> unsigned int"""
        return _osg.ShaderComponent_getNumShaders(self)

    def compileGLObjects(self, *args):
        """compileGLObjects(ShaderComponent self, State state)"""
        return _osg.ShaderComponent_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(ShaderComponent self, unsigned int maxSize)"""
        return _osg.ShaderComponent_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(ShaderComponent self, State state=None)
        releaseGLObjects(ShaderComponent self)
        """
        return _osg.ShaderComponent_releaseGLObjects(self, state)

    __swig_destroy__ = _osg.delete_ShaderComponent
    __del__ = lambda self : None;
ShaderComponent_swigregister = _osg.ShaderComponent_swigregister
ShaderComponent_swigregister(ShaderComponent)

OSG_PROGRAM = _osg.OSG_PROGRAM
class Program(StateAttribute):
    """Proxy of C++ osg::Program class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Program, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Program, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Program self) -> Program
        __init__(osg::Program self, Program rhs, CopyOp copyop=SHALLOW_COPY) -> Program
        __init__(osg::Program self, Program rhs) -> Program
        """
        this = _osg.new_Program(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Program self) -> Object"""
        return _osg.Program_cloneType(self)

    def clone(self, *args):
        """clone(Program self, CopyOp copyop) -> Object"""
        return _osg.Program_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Program self, Object obj) -> bool"""
        return _osg.Program_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Program self) -> char const *"""
        return _osg.Program_libraryName(self)

    def className(self):
        """className(Program self) -> char const *"""
        return _osg.Program_className(self)

    def getType(self):
        """getType(Program self) -> osg::StateAttribute::Type"""
        return _osg.Program_getType(self)

    def compare(self, *args):
        """compare(Program self, StateAttribute sa) -> int"""
        return _osg.Program_compare(self, *args)

    def apply(self, *args):
        """apply(Program self, State state)"""
        return _osg.Program_apply(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Program self, bool threadSafe)"""
        return _osg.Program_setThreadSafeRefUnref(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(Program self, State state)"""
        return _osg.Program_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Program self, unsigned int maxSize)"""
        return _osg.Program_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(Program self, State state=None)
        releaseGLObjects(Program self)
        """
        return _osg.Program_releaseGLObjects(self, state)

    def dirtyProgram(self):
        """dirtyProgram(Program self)"""
        return _osg.Program_dirtyProgram(self)

    def addShader(self, *args):
        """addShader(Program self, Shader shader) -> bool"""
        return _osg.Program_addShader(self, *args)

    def getNumShaders(self):
        """getNumShaders(Program self) -> unsigned int"""
        return _osg.Program_getNumShaders(self)

    def getShader(self, *args):
        """
        getShader(Program self, unsigned int i) -> Shader
        getShader(Program self, unsigned int i) -> Shader
        """
        return _osg.Program_getShader(self, *args)

    def removeShader(self, *args):
        """removeShader(Program self, Shader shader) -> bool"""
        return _osg.Program_removeShader(self, *args)

    def setParameter(self, *args):
        """setParameter(Program self, GLenum pname, GLint value)"""
        return _osg.Program_setParameter(self, *args)

    def getParameter(self, *args):
        """getParameter(Program self, GLenum pname) -> GLint"""
        return _osg.Program_getParameter(self, *args)

    def setComputeGroups(self, *args):
        """setComputeGroups(Program self, GLint numGroupsX, GLint numGroupsY, GLint numGroupsZ)"""
        return _osg.Program_setComputeGroups(self, *args)

    def getComputeGroups(self, *args):
        """getComputeGroups(Program self, GLint & numGroupsX, GLint & numGroupsY, GLint & numGroupsZ)"""
        return _osg.Program_getComputeGroups(self, *args)

    def addBindAttribLocation(self, *args):
        """addBindAttribLocation(Program self, std::string const & name, GLuint index)"""
        return _osg.Program_addBindAttribLocation(self, *args)

    def removeBindAttribLocation(self, *args):
        """removeBindAttribLocation(Program self, std::string const & name)"""
        return _osg.Program_removeBindAttribLocation(self, *args)

    def addBindFragDataLocation(self, *args):
        """addBindFragDataLocation(Program self, std::string const & name, GLuint index)"""
        return _osg.Program_addBindFragDataLocation(self, *args)

    def removeBindFragDataLocation(self, *args):
        """removeBindFragDataLocation(Program self, std::string const & name)"""
        return _osg.Program_removeBindFragDataLocation(self, *args)

    def addBindUniformBlock(self, *args):
        """addBindUniformBlock(Program self, std::string const & name, GLuint index)"""
        return _osg.Program_addBindUniformBlock(self, *args)

    def removeBindUniformBlock(self, *args):
        """removeBindUniformBlock(Program self, std::string const & name)"""
        return _osg.Program_removeBindUniformBlock(self, *args)

    def getAttribBindingList(self):
        """getAttribBindingList(Program self) -> osg::Program::AttribBindingList const &"""
        return _osg.Program_getAttribBindingList(self)

    def getFragDataBindingList(self):
        """getFragDataBindingList(Program self) -> osg::Program::FragDataBindingList const &"""
        return _osg.Program_getFragDataBindingList(self)

    def getUniformBlockBindingList(self):
        """getUniformBlockBindingList(Program self) -> osg::Program::UniformBlockBindingList const &"""
        return _osg.Program_getUniformBlockBindingList(self)

    def isFixedFunction(self):
        """isFixedFunction(Program self) -> bool"""
        return _osg.Program_isFixedFunction(self)

    def getGlProgramInfoLog(self, *args):
        """getGlProgramInfoLog(Program self, unsigned int contextID, std::string & log) -> bool"""
        return _osg.Program_getGlProgramInfoLog(self, *args)

    def deleteGlProgram(*args):
        """deleteGlProgram(unsigned int contextID, GLuint program)"""
        return _osg.Program_deleteGlProgram(*args)

    if _newclass:deleteGlProgram = staticmethod(deleteGlProgram)
    __swig_getmethods__["deleteGlProgram"] = lambda x: deleteGlProgram
    def flushDeletedGlPrograms(*args):
        """flushDeletedGlPrograms(unsigned int contextID, double currentTime, double & availableTime)"""
        return _osg.Program_flushDeletedGlPrograms(*args)

    if _newclass:flushDeletedGlPrograms = staticmethod(flushDeletedGlPrograms)
    __swig_getmethods__["flushDeletedGlPrograms"] = lambda x: flushDeletedGlPrograms
    def discardDeletedGlPrograms(*args):
        """discardDeletedGlPrograms(unsigned int contextID)"""
        return _osg.Program_discardDeletedGlPrograms(*args)

    if _newclass:discardDeletedGlPrograms = staticmethod(discardDeletedGlPrograms)
    __swig_getmethods__["discardDeletedGlPrograms"] = lambda x: discardDeletedGlPrograms
    def getActiveUniforms(self, *args):
        """getActiveUniforms(Program self, unsigned int contextID) -> osg::Program::ActiveUniformMap const &"""
        return _osg.Program_getActiveUniforms(self, *args)

    def getActiveAttribs(self, *args):
        """getActiveAttribs(Program self, unsigned int contextID) -> osg::Program::ActiveVarInfoMap const &"""
        return _osg.Program_getActiveAttribs(self, *args)

    def getPCP(self, *args):
        """getPCP(Program self, unsigned int contextID) -> osg::Program::PerContextProgram *"""
        return _osg.Program_getPCP(self, *args)

    def getHandle(self, *args):
        """getHandle(Program self, int contextID) -> GLuint"""
        return _osg.Program_getHandle(self, *args)

    def getUniformLocation(self, *args):
        """getUniformLocation(Program self, int contextID, std::string name) -> GLint"""
        return _osg.Program_getUniformLocation(self, *args)

    def getAttribLocation(self, *args):
        """getAttribLocation(Program self, int contextID, std::string name) -> GLint"""
        return _osg.Program_getAttribLocation(self, *args)

Program_swigregister = _osg.Program_swigregister
Program_swigregister(Program)

def Program_deleteGlProgram(*args):
  """Program_deleteGlProgram(unsigned int contextID, GLuint program)"""
  return _osg.Program_deleteGlProgram(*args)

def Program_flushDeletedGlPrograms(*args):
  """Program_flushDeletedGlPrograms(unsigned int contextID, double currentTime, double & availableTime)"""
  return _osg.Program_flushDeletedGlPrograms(*args)

def Program_discardDeletedGlPrograms(*args):
  """Program_discardDeletedGlPrograms(unsigned int contextID)"""
  return _osg.Program_discardDeletedGlPrograms(*args)

OSG_DisplaySettings = _osg.OSG_DisplaySettings
class DisplaySettings(Referenced):
    """Proxy of C++ osg::DisplaySettings class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplaySettings, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplaySettings, name)
    __repr__ = _swig_repr
    def instance():
        """instance() -> osg::ref_ptr< osg::DisplaySettings > &"""
        return _osg.DisplaySettings_instance()

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def __init__(self, *args): 
        """
        __init__(osg::DisplaySettings self) -> DisplaySettings
        __init__(osg::DisplaySettings self, ArgumentParser arguments) -> DisplaySettings
        __init__(osg::DisplaySettings self, DisplaySettings vs) -> DisplaySettings
        """
        this = _osg.new_DisplaySettings(*args)
        try: self.this.append(this)
        except: self.this = this
    def setDisplaySettings(self, *args):
        """setDisplaySettings(DisplaySettings self, DisplaySettings vs)"""
        return _osg.DisplaySettings_setDisplaySettings(self, *args)

    def merge(self, *args):
        """merge(DisplaySettings self, DisplaySettings vs)"""
        return _osg.DisplaySettings_merge(self, *args)

    def setDefaults(self):
        """setDefaults(DisplaySettings self)"""
        return _osg.DisplaySettings_setDefaults(self)

    def readEnvironmentalVariables(self):
        """readEnvironmentalVariables(DisplaySettings self)"""
        return _osg.DisplaySettings_readEnvironmentalVariables(self)

    def readCommandLine(self, *args):
        """readCommandLine(DisplaySettings self, ArgumentParser arguments)"""
        return _osg.DisplaySettings_readCommandLine(self, *args)

    MONITOR = _osg.DisplaySettings_MONITOR
    POWERWALL = _osg.DisplaySettings_POWERWALL
    REALITY_CENTER = _osg.DisplaySettings_REALITY_CENTER
    HEAD_MOUNTED_DISPLAY = _osg.DisplaySettings_HEAD_MOUNTED_DISPLAY
    def setDisplayType(self, *args):
        """setDisplayType(DisplaySettings self, osg::DisplaySettings::DisplayType type)"""
        return _osg.DisplaySettings_setDisplayType(self, *args)

    def getDisplayType(self):
        """getDisplayType(DisplaySettings self) -> osg::DisplaySettings::DisplayType"""
        return _osg.DisplaySettings_getDisplayType(self)

    def setStereo(self, *args):
        """setStereo(DisplaySettings self, bool on)"""
        return _osg.DisplaySettings_setStereo(self, *args)

    def getStereo(self):
        """getStereo(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getStereo(self)

    QUAD_BUFFER = _osg.DisplaySettings_QUAD_BUFFER
    ANAGLYPHIC = _osg.DisplaySettings_ANAGLYPHIC
    HORIZONTAL_SPLIT = _osg.DisplaySettings_HORIZONTAL_SPLIT
    VERTICAL_SPLIT = _osg.DisplaySettings_VERTICAL_SPLIT
    LEFT_EYE = _osg.DisplaySettings_LEFT_EYE
    RIGHT_EYE = _osg.DisplaySettings_RIGHT_EYE
    HORIZONTAL_INTERLACE = _osg.DisplaySettings_HORIZONTAL_INTERLACE
    VERTICAL_INTERLACE = _osg.DisplaySettings_VERTICAL_INTERLACE
    CHECKERBOARD = _osg.DisplaySettings_CHECKERBOARD
    def setStereoMode(self, *args):
        """setStereoMode(DisplaySettings self, osg::DisplaySettings::StereoMode mode)"""
        return _osg.DisplaySettings_setStereoMode(self, *args)

    def getStereoMode(self):
        """getStereoMode(DisplaySettings self) -> osg::DisplaySettings::StereoMode"""
        return _osg.DisplaySettings_getStereoMode(self)

    def setEyeSeparation(self, *args):
        """setEyeSeparation(DisplaySettings self, float eyeSeparation)"""
        return _osg.DisplaySettings_setEyeSeparation(self, *args)

    def getEyeSeparation(self):
        """getEyeSeparation(DisplaySettings self) -> float"""
        return _osg.DisplaySettings_getEyeSeparation(self)

    LEFT_EYE_LEFT_VIEWPORT = _osg.DisplaySettings_LEFT_EYE_LEFT_VIEWPORT
    LEFT_EYE_RIGHT_VIEWPORT = _osg.DisplaySettings_LEFT_EYE_RIGHT_VIEWPORT
    def setSplitStereoHorizontalEyeMapping(self, *args):
        """setSplitStereoHorizontalEyeMapping(DisplaySettings self, osg::DisplaySettings::SplitStereoHorizontalEyeMapping m)"""
        return _osg.DisplaySettings_setSplitStereoHorizontalEyeMapping(self, *args)

    def getSplitStereoHorizontalEyeMapping(self):
        """getSplitStereoHorizontalEyeMapping(DisplaySettings self) -> osg::DisplaySettings::SplitStereoHorizontalEyeMapping"""
        return _osg.DisplaySettings_getSplitStereoHorizontalEyeMapping(self)

    def setSplitStereoHorizontalSeparation(self, *args):
        """setSplitStereoHorizontalSeparation(DisplaySettings self, int s)"""
        return _osg.DisplaySettings_setSplitStereoHorizontalSeparation(self, *args)

    def getSplitStereoHorizontalSeparation(self):
        """getSplitStereoHorizontalSeparation(DisplaySettings self) -> int"""
        return _osg.DisplaySettings_getSplitStereoHorizontalSeparation(self)

    LEFT_EYE_TOP_VIEWPORT = _osg.DisplaySettings_LEFT_EYE_TOP_VIEWPORT
    LEFT_EYE_BOTTOM_VIEWPORT = _osg.DisplaySettings_LEFT_EYE_BOTTOM_VIEWPORT
    def setSplitStereoVerticalEyeMapping(self, *args):
        """setSplitStereoVerticalEyeMapping(DisplaySettings self, osg::DisplaySettings::SplitStereoVerticalEyeMapping m)"""
        return _osg.DisplaySettings_setSplitStereoVerticalEyeMapping(self, *args)

    def getSplitStereoVerticalEyeMapping(self):
        """getSplitStereoVerticalEyeMapping(DisplaySettings self) -> osg::DisplaySettings::SplitStereoVerticalEyeMapping"""
        return _osg.DisplaySettings_getSplitStereoVerticalEyeMapping(self)

    def setSplitStereoVerticalSeparation(self, *args):
        """setSplitStereoVerticalSeparation(DisplaySettings self, int s)"""
        return _osg.DisplaySettings_setSplitStereoVerticalSeparation(self, *args)

    def getSplitStereoVerticalSeparation(self):
        """getSplitStereoVerticalSeparation(DisplaySettings self) -> int"""
        return _osg.DisplaySettings_getSplitStereoVerticalSeparation(self)

    def setSplitStereoAutoAdjustAspectRatio(self, *args):
        """setSplitStereoAutoAdjustAspectRatio(DisplaySettings self, bool flag)"""
        return _osg.DisplaySettings_setSplitStereoAutoAdjustAspectRatio(self, *args)

    def getSplitStereoAutoAdjustAspectRatio(self):
        """getSplitStereoAutoAdjustAspectRatio(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getSplitStereoAutoAdjustAspectRatio(self)

    def setScreenWidth(self, *args):
        """setScreenWidth(DisplaySettings self, float width)"""
        return _osg.DisplaySettings_setScreenWidth(self, *args)

    def getScreenWidth(self):
        """getScreenWidth(DisplaySettings self) -> float"""
        return _osg.DisplaySettings_getScreenWidth(self)

    def setScreenHeight(self, *args):
        """setScreenHeight(DisplaySettings self, float height)"""
        return _osg.DisplaySettings_setScreenHeight(self, *args)

    def getScreenHeight(self):
        """getScreenHeight(DisplaySettings self) -> float"""
        return _osg.DisplaySettings_getScreenHeight(self)

    def setScreenDistance(self, *args):
        """setScreenDistance(DisplaySettings self, float distance)"""
        return _osg.DisplaySettings_setScreenDistance(self, *args)

    def getScreenDistance(self):
        """getScreenDistance(DisplaySettings self) -> float"""
        return _osg.DisplaySettings_getScreenDistance(self)

    def setDoubleBuffer(self, *args):
        """setDoubleBuffer(DisplaySettings self, bool flag)"""
        return _osg.DisplaySettings_setDoubleBuffer(self, *args)

    def getDoubleBuffer(self):
        """getDoubleBuffer(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getDoubleBuffer(self)

    def setRGB(self, *args):
        """setRGB(DisplaySettings self, bool flag)"""
        return _osg.DisplaySettings_setRGB(self, *args)

    def getRGB(self):
        """getRGB(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getRGB(self)

    def setDepthBuffer(self, *args):
        """setDepthBuffer(DisplaySettings self, bool flag)"""
        return _osg.DisplaySettings_setDepthBuffer(self, *args)

    def getDepthBuffer(self):
        """getDepthBuffer(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getDepthBuffer(self)

    def setMinimumNumAlphaBits(self, *args):
        """setMinimumNumAlphaBits(DisplaySettings self, unsigned int bits)"""
        return _osg.DisplaySettings_setMinimumNumAlphaBits(self, *args)

    def getMinimumNumAlphaBits(self):
        """getMinimumNumAlphaBits(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAlphaBits(self)

    def getAlphaBuffer(self):
        """getAlphaBuffer(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getAlphaBuffer(self)

    def setMinimumNumStencilBits(self, *args):
        """setMinimumNumStencilBits(DisplaySettings self, unsigned int bits)"""
        return _osg.DisplaySettings_setMinimumNumStencilBits(self, *args)

    def getMinimumNumStencilBits(self):
        """getMinimumNumStencilBits(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumStencilBits(self)

    def getStencilBuffer(self):
        """getStencilBuffer(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getStencilBuffer(self)

    def setMinimumNumAccumBits(self, *args):
        """setMinimumNumAccumBits(DisplaySettings self, unsigned int red, unsigned int green, unsigned int blue, unsigned int alpha)"""
        return _osg.DisplaySettings_setMinimumNumAccumBits(self, *args)

    def getMinimumNumAccumRedBits(self):
        """getMinimumNumAccumRedBits(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAccumRedBits(self)

    def getMinimumNumAccumGreenBits(self):
        """getMinimumNumAccumGreenBits(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAccumGreenBits(self)

    def getMinimumNumAccumBlueBits(self):
        """getMinimumNumAccumBlueBits(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAccumBlueBits(self)

    def getMinimumNumAccumAlphaBits(self):
        """getMinimumNumAccumAlphaBits(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAccumAlphaBits(self)

    def getAccumBuffer(self):
        """getAccumBuffer(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getAccumBuffer(self)

    def setMaxNumberOfGraphicsContexts(self, *args):
        """setMaxNumberOfGraphicsContexts(DisplaySettings self, unsigned int num)"""
        return _osg.DisplaySettings_setMaxNumberOfGraphicsContexts(self, *args)

    def getMaxNumberOfGraphicsContexts(self):
        """getMaxNumberOfGraphicsContexts(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getMaxNumberOfGraphicsContexts(self)

    def setNumMultiSamples(self, *args):
        """setNumMultiSamples(DisplaySettings self, unsigned int samples)"""
        return _osg.DisplaySettings_setNumMultiSamples(self, *args)

    def getNumMultiSamples(self):
        """getNumMultiSamples(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getNumMultiSamples(self)

    def getMultiSamples(self):
        """getMultiSamples(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getMultiSamples(self)

    def setCompileContextsHint(self, *args):
        """setCompileContextsHint(DisplaySettings self, bool useCompileContexts)"""
        return _osg.DisplaySettings_setCompileContextsHint(self, *args)

    def getCompileContextsHint(self):
        """getCompileContextsHint(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getCompileContextsHint(self)

    def setSerializeDrawDispatch(self, *args):
        """setSerializeDrawDispatch(DisplaySettings self, bool serializeDrawDispatch)"""
        return _osg.DisplaySettings_setSerializeDrawDispatch(self, *args)

    def getSerializeDrawDispatch(self):
        """getSerializeDrawDispatch(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getSerializeDrawDispatch(self)

    def setUseSceneViewForStereoHint(self, *args):
        """setUseSceneViewForStereoHint(DisplaySettings self, bool hint)"""
        return _osg.DisplaySettings_setUseSceneViewForStereoHint(self, *args)

    def getUseSceneViewForStereoHint(self):
        """getUseSceneViewForStereoHint(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getUseSceneViewForStereoHint(self)

    def setNumOfDatabaseThreadsHint(self, *args):
        """setNumOfDatabaseThreadsHint(DisplaySettings self, unsigned int numThreads)"""
        return _osg.DisplaySettings_setNumOfDatabaseThreadsHint(self, *args)

    def getNumOfDatabaseThreadsHint(self):
        """getNumOfDatabaseThreadsHint(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getNumOfDatabaseThreadsHint(self)

    def setNumOfHttpDatabaseThreadsHint(self, *args):
        """setNumOfHttpDatabaseThreadsHint(DisplaySettings self, unsigned int numThreads)"""
        return _osg.DisplaySettings_setNumOfHttpDatabaseThreadsHint(self, *args)

    def getNumOfHttpDatabaseThreadsHint(self):
        """getNumOfHttpDatabaseThreadsHint(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getNumOfHttpDatabaseThreadsHint(self)

    def setApplication(self, *args):
        """setApplication(DisplaySettings self, std::string const & application)"""
        return _osg.DisplaySettings_setApplication(self, *args)

    def getApplication(self):
        """getApplication(DisplaySettings self) -> std::string const &"""
        return _osg.DisplaySettings_getApplication(self)

    def setMaxTexturePoolSize(self, *args):
        """setMaxTexturePoolSize(DisplaySettings self, unsigned int size)"""
        return _osg.DisplaySettings_setMaxTexturePoolSize(self, *args)

    def getMaxTexturePoolSize(self):
        """getMaxTexturePoolSize(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getMaxTexturePoolSize(self)

    def setMaxBufferObjectPoolSize(self, *args):
        """setMaxBufferObjectPoolSize(DisplaySettings self, unsigned int size)"""
        return _osg.DisplaySettings_setMaxBufferObjectPoolSize(self, *args)

    def getMaxBufferObjectPoolSize(self):
        """getMaxBufferObjectPoolSize(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getMaxBufferObjectPoolSize(self)

    IMPLICIT_DEPTH_BUFFER_ATTACHMENT = _osg.DisplaySettings_IMPLICIT_DEPTH_BUFFER_ATTACHMENT
    IMPLICIT_STENCIL_BUFFER_ATTACHMENT = _osg.DisplaySettings_IMPLICIT_STENCIL_BUFFER_ATTACHMENT
    IMPLICIT_COLOR_BUFFER_ATTACHMENT = _osg.DisplaySettings_IMPLICIT_COLOR_BUFFER_ATTACHMENT
    DEFAULT_IMPLICIT_BUFFER_ATTACHMENT = _osg.DisplaySettings_DEFAULT_IMPLICIT_BUFFER_ATTACHMENT
    def setImplicitBufferAttachmentMask(self, *args):
        """
        setImplicitBufferAttachmentMask(DisplaySettings self, osg::DisplaySettings::ImplicitBufferAttachmentMask renderMask=DEFAULT_IMPLICIT_BUFFER_ATTACHMENT, 
            osg::DisplaySettings::ImplicitBufferAttachmentMask resolveMask=DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(DisplaySettings self, osg::DisplaySettings::ImplicitBufferAttachmentMask renderMask=DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(DisplaySettings self)
        """
        return _osg.DisplaySettings_setImplicitBufferAttachmentMask(self, *args)

    def setImplicitBufferAttachmentRenderMask(self, *args):
        """setImplicitBufferAttachmentRenderMask(DisplaySettings self, osg::DisplaySettings::ImplicitBufferAttachmentMask implicitBufferAttachmentRenderMask)"""
        return _osg.DisplaySettings_setImplicitBufferAttachmentRenderMask(self, *args)

    def setImplicitBufferAttachmentResolveMask(self, *args):
        """setImplicitBufferAttachmentResolveMask(DisplaySettings self, osg::DisplaySettings::ImplicitBufferAttachmentMask implicitBufferAttachmentResolveMask)"""
        return _osg.DisplaySettings_setImplicitBufferAttachmentResolveMask(self, *args)

    def getImplicitBufferAttachmentRenderMask(self):
        """getImplicitBufferAttachmentRenderMask(DisplaySettings self) -> osg::DisplaySettings::ImplicitBufferAttachmentMask"""
        return _osg.DisplaySettings_getImplicitBufferAttachmentRenderMask(self)

    def getImplicitBufferAttachmentResolveMask(self):
        """getImplicitBufferAttachmentResolveMask(DisplaySettings self) -> osg::DisplaySettings::ImplicitBufferAttachmentMask"""
        return _osg.DisplaySettings_getImplicitBufferAttachmentResolveMask(self)

    SWAP_DEFAULT = _osg.DisplaySettings_SWAP_DEFAULT
    SWAP_EXCHANGE = _osg.DisplaySettings_SWAP_EXCHANGE
    SWAP_COPY = _osg.DisplaySettings_SWAP_COPY
    SWAP_UNDEFINED = _osg.DisplaySettings_SWAP_UNDEFINED
    def setSwapMethod(self, *args):
        """setSwapMethod(DisplaySettings self, osg::DisplaySettings::SwapMethod swapMethod)"""
        return _osg.DisplaySettings_setSwapMethod(self, *args)

    def getSwapMethod(self):
        """getSwapMethod(DisplaySettings self) -> osg::DisplaySettings::SwapMethod"""
        return _osg.DisplaySettings_getSwapMethod(self)

    def setGLContextVersion(self, *args):
        """setGLContextVersion(DisplaySettings self, std::string const & version)"""
        return _osg.DisplaySettings_setGLContextVersion(self, *args)

    def getGLContextVersion(self):
        """getGLContextVersion(DisplaySettings self) -> std::string const"""
        return _osg.DisplaySettings_getGLContextVersion(self)

    def setGLContextFlags(self, *args):
        """setGLContextFlags(DisplaySettings self, unsigned int flags)"""
        return _osg.DisplaySettings_setGLContextFlags(self, *args)

    def getGLContextFlags(self):
        """getGLContextFlags(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getGLContextFlags(self)

    def setGLContextProfileMask(self, *args):
        """setGLContextProfileMask(DisplaySettings self, unsigned int mask)"""
        return _osg.DisplaySettings_setGLContextProfileMask(self, *args)

    def getGLContextProfileMask(self):
        """getGLContextProfileMask(DisplaySettings self) -> unsigned int"""
        return _osg.DisplaySettings_getGLContextProfileMask(self)

    def setKeystoneHint(self, *args):
        """setKeystoneHint(DisplaySettings self, bool enabled)"""
        return _osg.DisplaySettings_setKeystoneHint(self, *args)

    def getKeystoneHint(self):
        """getKeystoneHint(DisplaySettings self) -> bool"""
        return _osg.DisplaySettings_getKeystoneHint(self)

    def setKeystoneFileNames(self, *args):
        """setKeystoneFileNames(DisplaySettings self, osg::DisplaySettings::FileNames const & filenames)"""
        return _osg.DisplaySettings_setKeystoneFileNames(self, *args)

    def getKeystoneFileNames(self, *args):
        """
        getKeystoneFileNames(DisplaySettings self) -> osg::DisplaySettings::FileNames
        getKeystoneFileNames(DisplaySettings self) -> osg::DisplaySettings::FileNames const &
        """
        return _osg.DisplaySettings_getKeystoneFileNames(self, *args)

    def setKeystones(self, *args):
        """setKeystones(DisplaySettings self, osg::DisplaySettings::Objects const & objects)"""
        return _osg.DisplaySettings_setKeystones(self, *args)

    def getKeystones(self, *args):
        """
        getKeystones(DisplaySettings self) -> osg::DisplaySettings::Objects
        getKeystones(DisplaySettings self) -> osg::DisplaySettings::Objects const &
        """
        return _osg.DisplaySettings_getKeystones(self, *args)

    def computeLeftEyeProjectionImplementation(self, *args):
        """computeLeftEyeProjectionImplementation(DisplaySettings self, Matrixd projection) -> Matrixd"""
        return _osg.DisplaySettings_computeLeftEyeProjectionImplementation(self, *args)

    def computeLeftEyeViewImplementation(self, *args):
        """
        computeLeftEyeViewImplementation(DisplaySettings self, Matrixd view, double eyeSeperationScale=1.0) -> Matrixd
        computeLeftEyeViewImplementation(DisplaySettings self, Matrixd view) -> Matrixd
        """
        return _osg.DisplaySettings_computeLeftEyeViewImplementation(self, *args)

    def computeRightEyeProjectionImplementation(self, *args):
        """computeRightEyeProjectionImplementation(DisplaySettings self, Matrixd projection) -> Matrixd"""
        return _osg.DisplaySettings_computeRightEyeProjectionImplementation(self, *args)

    def computeRightEyeViewImplementation(self, *args):
        """
        computeRightEyeViewImplementation(DisplaySettings self, Matrixd view, double eyeSeperationScale=1.0) -> Matrixd
        computeRightEyeViewImplementation(DisplaySettings self, Matrixd view) -> Matrixd
        """
        return _osg.DisplaySettings_computeRightEyeViewImplementation(self, *args)

DisplaySettings_swigregister = _osg.DisplaySettings_swigregister
DisplaySettings_swigregister(DisplaySettings)

def DisplaySettings_instance():
  """DisplaySettings_instance() -> osg::ref_ptr< osg::DisplaySettings > &"""
  return _osg.DisplaySettings_instance()

OSG_STATE = _osg.OSG_STATE
GL_FOG_COORDINATE_ARRAY = _osg.GL_FOG_COORDINATE_ARRAY
GL_SECONDARY_COLOR_ARRAY = _osg.GL_SECONDARY_COLOR_ARRAY
class VertexAttribAlias(_object):
    """Proxy of C++ osg::VertexAttribAlias class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexAttribAlias, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VertexAttribAlias, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::VertexAttribAlias self) -> VertexAttribAlias
        __init__(osg::VertexAttribAlias self, VertexAttribAlias rhs) -> VertexAttribAlias
        __init__(osg::VertexAttribAlias self, GLuint location, std::string const glName, std::string const osgName, std::string const & declaration) -> VertexAttribAlias
        """
        this = _osg.new_VertexAttribAlias(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["_location"] = _osg.VertexAttribAlias__location_set
    __swig_getmethods__["_location"] = _osg.VertexAttribAlias__location_get
    if _newclass:_location = _swig_property(_osg.VertexAttribAlias__location_get, _osg.VertexAttribAlias__location_set)
    __swig_setmethods__["_glName"] = _osg.VertexAttribAlias__glName_set
    __swig_getmethods__["_glName"] = _osg.VertexAttribAlias__glName_get
    if _newclass:_glName = _swig_property(_osg.VertexAttribAlias__glName_get, _osg.VertexAttribAlias__glName_set)
    __swig_setmethods__["_osgName"] = _osg.VertexAttribAlias__osgName_set
    __swig_getmethods__["_osgName"] = _osg.VertexAttribAlias__osgName_get
    if _newclass:_osgName = _swig_property(_osg.VertexAttribAlias__osgName_get, _osg.VertexAttribAlias__osgName_set)
    __swig_setmethods__["_declaration"] = _osg.VertexAttribAlias__declaration_set
    __swig_getmethods__["_declaration"] = _osg.VertexAttribAlias__declaration_get
    if _newclass:_declaration = _swig_property(_osg.VertexAttribAlias__declaration_get, _osg.VertexAttribAlias__declaration_set)
    __swig_destroy__ = _osg.delete_VertexAttribAlias
    __del__ = lambda self : None;
VertexAttribAlias_swigregister = _osg.VertexAttribAlias_swigregister
VertexAttribAlias_swigregister(VertexAttribAlias)

class State(Referenced):
    """Proxy of C++ osg::State class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::State self) -> State"""
        this = _osg.new_State()
        try: self.this.append(this)
        except: self.this = this
    def setGraphicsContext(self, *args):
        """setGraphicsContext(State self, GraphicsContext context)"""
        return _osg.State_setGraphicsContext(self, *args)

    def getGraphicsContext(self, *args):
        """
        getGraphicsContext(State self) -> GraphicsContext
        getGraphicsContext(State self) -> GraphicsContext
        """
        return _osg.State_getGraphicsContext(self, *args)

    def setContextID(self, *args):
        """setContextID(State self, unsigned int contextID)"""
        return _osg.State_setContextID(self, *args)

    def getContextID(self):
        """getContextID(State self) -> unsigned int"""
        return _osg.State_getContextID(self)

    def setShaderCompositionEnabled(self, *args):
        """setShaderCompositionEnabled(State self, bool flag)"""
        return _osg.State_setShaderCompositionEnabled(self, *args)

    def getShaderCompositionEnabled(self):
        """getShaderCompositionEnabled(State self) -> bool"""
        return _osg.State_getShaderCompositionEnabled(self)

    def setShaderComposer(self, *args):
        """setShaderComposer(State self, osg::ShaderComposer * sc)"""
        return _osg.State_setShaderComposer(self, *args)

    def getShaderComposer(self, *args):
        """
        getShaderComposer(State self) -> osg::ShaderComposer
        getShaderComposer(State self) -> osg::ShaderComposer const *
        """
        return _osg.State_getShaderComposer(self, *args)

    def getCurrentShaderCompositionUniformList(self):
        """getCurrentShaderCompositionUniformList(State self) -> osg::StateSet::UniformList &"""
        return _osg.State_getCurrentShaderCompositionUniformList(self)

    def applyShaderCompositionUniform(self, *args):
        """
        applyShaderCompositionUniform(State self, Uniform uniform, osg::StateAttribute::OverrideValue value=ON)
        applyShaderCompositionUniform(State self, Uniform uniform)
        """
        return _osg.State_applyShaderCompositionUniform(self, *args)

    def pushStateSet(self, *args):
        """pushStateSet(State self, StateSet dstate)"""
        return _osg.State_pushStateSet(self, *args)

    def popStateSet(self):
        """popStateSet(State self)"""
        return _osg.State_popStateSet(self)

    def popAllStateSets(self):
        """popAllStateSets(State self)"""
        return _osg.State_popAllStateSets(self)

    def insertStateSet(self, *args):
        """insertStateSet(State self, unsigned int pos, StateSet dstate)"""
        return _osg.State_insertStateSet(self, *args)

    def removeStateSet(self, *args):
        """removeStateSet(State self, unsigned int pos)"""
        return _osg.State_removeStateSet(self, *args)

    def getStateSetStackSize(self):
        """getStateSetStackSize(State self) -> unsigned int"""
        return _osg.State_getStateSetStackSize(self)

    def popStateSetStackToSize(self, *args):
        """popStateSetStackToSize(State self, unsigned int size)"""
        return _osg.State_popStateSetStackToSize(self, *args)

    def getStateSetStack(self):
        """getStateSetStack(State self) -> osg::State::StateSetStack &"""
        return _osg.State_getStateSetStack(self)

    def captureCurrentState(self, *args):
        """captureCurrentState(State self, StateSet stateset)"""
        return _osg.State_captureCurrentState(self, *args)

    def reset(self):
        """reset(State self)"""
        return _osg.State_reset(self)

    def getCurrentViewport(self):
        """getCurrentViewport(State self) -> Viewport"""
        return _osg.State_getCurrentViewport(self)

    def setInitialViewMatrix(self, *args):
        """setInitialViewMatrix(State self, RefMatrixd matrix)"""
        return _osg.State_setInitialViewMatrix(self, *args)

    def getInitialViewMatrix(self):
        """getInitialViewMatrix(State self) -> Matrixd"""
        return _osg.State_getInitialViewMatrix(self)

    def getInitialInverseViewMatrix(self):
        """getInitialInverseViewMatrix(State self) -> Matrixd"""
        return _osg.State_getInitialInverseViewMatrix(self)

    def applyProjectionMatrix(self, *args):
        """applyProjectionMatrix(State self, RefMatrixd matrix)"""
        return _osg.State_applyProjectionMatrix(self, *args)

    def getProjectionMatrix(self):
        """getProjectionMatrix(State self) -> Matrixd"""
        return _osg.State_getProjectionMatrix(self)

    def applyModelViewMatrix(self, *args):
        """
        applyModelViewMatrix(State self, RefMatrixd matrix)
        applyModelViewMatrix(State self, Matrixd arg2)
        """
        return _osg.State_applyModelViewMatrix(self, *args)

    def getModelViewMatrix(self):
        """getModelViewMatrix(State self) -> Matrixd"""
        return _osg.State_getModelViewMatrix(self)

    def setUseModelViewAndProjectionUniforms(self, *args):
        """setUseModelViewAndProjectionUniforms(State self, bool flag)"""
        return _osg.State_setUseModelViewAndProjectionUniforms(self, *args)

    def getUseModelViewAndProjectionUniforms(self):
        """getUseModelViewAndProjectionUniforms(State self) -> bool"""
        return _osg.State_getUseModelViewAndProjectionUniforms(self)

    def updateModelViewAndProjectionMatrixUniforms(self):
        """updateModelViewAndProjectionMatrixUniforms(State self)"""
        return _osg.State_updateModelViewAndProjectionMatrixUniforms(self)

    def applyModelViewAndProjectionUniformsIfRequired(self):
        """applyModelViewAndProjectionUniformsIfRequired(State self)"""
        return _osg.State_applyModelViewAndProjectionUniformsIfRequired(self)

    def getModelViewMatrixUniform(self):
        """getModelViewMatrixUniform(State self) -> Uniform"""
        return _osg.State_getModelViewMatrixUniform(self)

    def getProjectionMatrixUniform(self):
        """getProjectionMatrixUniform(State self) -> Uniform"""
        return _osg.State_getProjectionMatrixUniform(self)

    def getModelViewProjectionMatrixUniform(self):
        """getModelViewProjectionMatrixUniform(State self) -> Uniform"""
        return _osg.State_getModelViewProjectionMatrixUniform(self)

    def getNormalMatrixUniform(self):
        """getNormalMatrixUniform(State self) -> Uniform"""
        return _osg.State_getNormalMatrixUniform(self)

    def getViewFrustum(self):
        """getViewFrustum(State self) -> Polytope"""
        return _osg.State_getViewFrustum(self)

    def setUseVertexAttributeAliasing(self, *args):
        """setUseVertexAttributeAliasing(State self, bool flag)"""
        return _osg.State_setUseVertexAttributeAliasing(self, *args)

    def getUseVertexAttributeAliasing(self):
        """getUseVertexAttributeAliasing(State self) -> bool"""
        return _osg.State_getUseVertexAttributeAliasing(self)

    def resetVertexAttributeAlias(self, compactAliasing=True):
        """
        resetVertexAttributeAlias(State self, bool compactAliasing=True)
        resetVertexAttributeAlias(State self)
        """
        return _osg.State_resetVertexAttributeAlias(self, compactAliasing)

    def setVertexAlias(self, *args):
        """setVertexAlias(State self, VertexAttribAlias alias)"""
        return _osg.State_setVertexAlias(self, *args)

    def getVertexAlias(self):
        """getVertexAlias(State self) -> VertexAttribAlias"""
        return _osg.State_getVertexAlias(self)

    def setNormalAlias(self, *args):
        """setNormalAlias(State self, VertexAttribAlias alias)"""
        return _osg.State_setNormalAlias(self, *args)

    def getNormalAlias(self):
        """getNormalAlias(State self) -> VertexAttribAlias"""
        return _osg.State_getNormalAlias(self)

    def setColorAlias(self, *args):
        """setColorAlias(State self, VertexAttribAlias alias)"""
        return _osg.State_setColorAlias(self, *args)

    def getColorAlias(self):
        """getColorAlias(State self) -> VertexAttribAlias"""
        return _osg.State_getColorAlias(self)

    def setSecondaryColorAlias(self, *args):
        """setSecondaryColorAlias(State self, VertexAttribAlias alias)"""
        return _osg.State_setSecondaryColorAlias(self, *args)

    def getSecondaryColorAlias(self):
        """getSecondaryColorAlias(State self) -> VertexAttribAlias"""
        return _osg.State_getSecondaryColorAlias(self)

    def setFogCoordAlias(self, *args):
        """setFogCoordAlias(State self, VertexAttribAlias alias)"""
        return _osg.State_setFogCoordAlias(self, *args)

    def getFogCoordAlias(self):
        """getFogCoordAlias(State self) -> VertexAttribAlias"""
        return _osg.State_getFogCoordAlias(self)

    def setTexCoordAliasList(self, *args):
        """setTexCoordAliasList(State self, osg::State::VertexAttribAliasList const & aliasList)"""
        return _osg.State_setTexCoordAliasList(self, *args)

    def getTexCoordAliasList(self):
        """getTexCoordAliasList(State self) -> osg::State::VertexAttribAliasList const &"""
        return _osg.State_getTexCoordAliasList(self)

    def setAttributeBindingList(self, *args):
        """setAttributeBindingList(State self, osg::Program::AttribBindingList const & attribBindingList)"""
        return _osg.State_setAttributeBindingList(self, *args)

    def getAttributeBindingList(self):
        """getAttributeBindingList(State self) -> osg::Program::AttribBindingList const &"""
        return _osg.State_getAttributeBindingList(self)

    def convertVertexShaderSourceToOsgBuiltIns(self, *args):
        """convertVertexShaderSourceToOsgBuiltIns(State self, std::string & source) -> bool"""
        return _osg.State_convertVertexShaderSourceToOsgBuiltIns(self, *args)

    def apply(self, *args):
        """
        apply(State self, StateSet dstate)
        apply(State self)
        """
        return _osg.State_apply(self, *args)

    def applyShaderComposition(self):
        """applyShaderComposition(State self)"""
        return _osg.State_applyShaderComposition(self)

    def setModeValidity(self, *args):
        """setModeValidity(State self, osg::StateAttribute::GLMode mode, bool valid)"""
        return _osg.State_setModeValidity(self, *args)

    def getModeValidity(self, *args):
        """getModeValidity(State self, osg::StateAttribute::GLMode mode) -> bool"""
        return _osg.State_getModeValidity(self, *args)

    def setGlobalDefaultModeValue(self, *args):
        """setGlobalDefaultModeValue(State self, osg::StateAttribute::GLMode mode, bool enabled)"""
        return _osg.State_setGlobalDefaultModeValue(self, *args)

    def getGlobalDefaultModeValue(self, *args):
        """getGlobalDefaultModeValue(State self, osg::StateAttribute::GLMode mode) -> bool"""
        return _osg.State_getGlobalDefaultModeValue(self, *args)

    def applyMode(self, *args):
        """applyMode(State self, osg::StateAttribute::GLMode mode, bool enabled) -> bool"""
        return _osg.State_applyMode(self, *args)

    def setGlobalDefaultTextureModeValue(self, *args):
        """setGlobalDefaultTextureModeValue(State self, unsigned int unit, osg::StateAttribute::GLMode mode, bool enabled)"""
        return _osg.State_setGlobalDefaultTextureModeValue(self, *args)

    def getGlobalDefaultTextureModeValue(self, *args):
        """getGlobalDefaultTextureModeValue(State self, unsigned int unit, osg::StateAttribute::GLMode mode) -> bool"""
        return _osg.State_getGlobalDefaultTextureModeValue(self, *args)

    def applyTextureMode(self, *args):
        """applyTextureMode(State self, unsigned int unit, osg::StateAttribute::GLMode mode, bool enabled) -> bool"""
        return _osg.State_applyTextureMode(self, *args)

    def setGlobalDefaultAttribute(self, *args):
        """setGlobalDefaultAttribute(State self, StateAttribute attribute)"""
        return _osg.State_setGlobalDefaultAttribute(self, *args)

    def getGlobalDefaultAttribute(self, *args):
        """
        getGlobalDefaultAttribute(State self, osg::StateAttribute::Type type, unsigned int member=0) -> StateAttribute
        getGlobalDefaultAttribute(State self, osg::StateAttribute::Type type) -> StateAttribute
        """
        return _osg.State_getGlobalDefaultAttribute(self, *args)

    def applyAttribute(self, *args):
        """applyAttribute(State self, StateAttribute attribute) -> bool"""
        return _osg.State_applyAttribute(self, *args)

    def setGlobalDefaultTextureAttribute(self, *args):
        """setGlobalDefaultTextureAttribute(State self, unsigned int unit, StateAttribute attribute)"""
        return _osg.State_setGlobalDefaultTextureAttribute(self, *args)

    def getGlobalDefaultTextureAttribute(self, *args):
        """
        getGlobalDefaultTextureAttribute(State self, unsigned int unit, osg::StateAttribute::Type type, unsigned int member=0) -> StateAttribute
        getGlobalDefaultTextureAttribute(State self, unsigned int unit, osg::StateAttribute::Type type) -> StateAttribute
        """
        return _osg.State_getGlobalDefaultTextureAttribute(self, *args)

    def applyTextureAttribute(self, *args):
        """applyTextureAttribute(State self, unsigned int unit, StateAttribute attribute) -> bool"""
        return _osg.State_applyTextureAttribute(self, *args)

    def haveAppliedMode(self, *args):
        """
        haveAppliedMode(State self, osg::StateAttribute::GLMode mode, osg::StateAttribute::GLModeValue value)
        haveAppliedMode(State self, osg::StateAttribute::GLMode mode)
        """
        return _osg.State_haveAppliedMode(self, *args)

    def haveAppliedAttribute(self, *args):
        """
        haveAppliedAttribute(State self, StateAttribute attribute)
        haveAppliedAttribute(State self, osg::StateAttribute::Type type, unsigned int member=0)
        haveAppliedAttribute(State self, osg::StateAttribute::Type type)
        """
        return _osg.State_haveAppliedAttribute(self, *args)

    def getLastAppliedMode(self, *args):
        """getLastAppliedMode(State self, osg::StateAttribute::GLMode mode) -> bool"""
        return _osg.State_getLastAppliedMode(self, *args)

    def getLastAppliedAttribute(self, *args):
        """
        getLastAppliedAttribute(State self, osg::StateAttribute::Type type, unsigned int member=0) -> StateAttribute
        getLastAppliedAttribute(State self, osg::StateAttribute::Type type) -> StateAttribute
        """
        return _osg.State_getLastAppliedAttribute(self, *args)

    def haveAppliedTextureMode(self, *args):
        """
        haveAppliedTextureMode(State self, unsigned int unit, osg::StateAttribute::GLMode mode, osg::StateAttribute::GLModeValue value)
        haveAppliedTextureMode(State self, unsigned int unit, osg::StateAttribute::GLMode mode)
        """
        return _osg.State_haveAppliedTextureMode(self, *args)

    def haveAppliedTextureAttribute(self, *args):
        """
        haveAppliedTextureAttribute(State self, unsigned int unit, StateAttribute attribute)
        haveAppliedTextureAttribute(State self, unsigned int unit, osg::StateAttribute::Type type, unsigned int member=0)
        haveAppliedTextureAttribute(State self, unsigned int unit, osg::StateAttribute::Type type)
        """
        return _osg.State_haveAppliedTextureAttribute(self, *args)

    def getLastAppliedTextureMode(self, *args):
        """getLastAppliedTextureMode(State self, unsigned int unit, osg::StateAttribute::GLMode mode) -> bool"""
        return _osg.State_getLastAppliedTextureMode(self, *args)

    def getLastAppliedTextureAttribute(self, *args):
        """
        getLastAppliedTextureAttribute(State self, unsigned int unit, osg::StateAttribute::Type type, unsigned int member=0) -> StateAttribute
        getLastAppliedTextureAttribute(State self, unsigned int unit, osg::StateAttribute::Type type) -> StateAttribute
        """
        return _osg.State_getLastAppliedTextureAttribute(self, *args)

    def dirtyAllModes(self):
        """dirtyAllModes(State self)"""
        return _osg.State_dirtyAllModes(self)

    def dirtyAllAttributes(self):
        """dirtyAllAttributes(State self)"""
        return _osg.State_dirtyAllAttributes(self)

    def disableAllVertexArrays(self):
        """disableAllVertexArrays(State self)"""
        return _osg.State_disableAllVertexArrays(self)

    def dirtyAllVertexArrays(self):
        """dirtyAllVertexArrays(State self)"""
        return _osg.State_dirtyAllVertexArrays(self)

    def setCurrentVertexBufferObject(self, *args):
        """setCurrentVertexBufferObject(State self, GLBufferObject vbo)"""
        return _osg.State_setCurrentVertexBufferObject(self, *args)

    def getCurrentVertexBufferObject(self):
        """getCurrentVertexBufferObject(State self) -> GLBufferObject"""
        return _osg.State_getCurrentVertexBufferObject(self)

    def bindVertexBufferObject(self, *args):
        """bindVertexBufferObject(State self, GLBufferObject vbo)"""
        return _osg.State_bindVertexBufferObject(self, *args)

    def unbindVertexBufferObject(self):
        """unbindVertexBufferObject(State self)"""
        return _osg.State_unbindVertexBufferObject(self)

    def setCurrentElementBufferObject(self, *args):
        """setCurrentElementBufferObject(State self, GLBufferObject ebo)"""
        return _osg.State_setCurrentElementBufferObject(self, *args)

    def getCurrentElementBufferObject(self):
        """getCurrentElementBufferObject(State self) -> GLBufferObject"""
        return _osg.State_getCurrentElementBufferObject(self)

    def bindElementBufferObject(self, *args):
        """bindElementBufferObject(State self, GLBufferObject ebo)"""
        return _osg.State_bindElementBufferObject(self, *args)

    def unbindElementBufferObject(self):
        """unbindElementBufferObject(State self)"""
        return _osg.State_unbindElementBufferObject(self)

    def setCurrentPixelBufferObject(self, *args):
        """setCurrentPixelBufferObject(State self, GLBufferObject pbo)"""
        return _osg.State_setCurrentPixelBufferObject(self, *args)

    def getCurrentPixelBufferObject(self):
        """getCurrentPixelBufferObject(State self) -> GLBufferObject"""
        return _osg.State_getCurrentPixelBufferObject(self)

    def bindPixelBufferObject(self, *args):
        """bindPixelBufferObject(State self, GLBufferObject pbo)"""
        return _osg.State_bindPixelBufferObject(self, *args)

    def unbindPixelBufferObject(self):
        """unbindPixelBufferObject(State self)"""
        return _osg.State_unbindPixelBufferObject(self)

    __swig_setmethods__["_quadIndicesGLushort"] = _osg.State__quadIndicesGLushort_set
    __swig_getmethods__["_quadIndicesGLushort"] = _osg.State__quadIndicesGLushort_get
    if _newclass:_quadIndicesGLushort = _swig_property(_osg.State__quadIndicesGLushort_get, _osg.State__quadIndicesGLushort_set)
    __swig_setmethods__["_quadIndicesGLuint"] = _osg.State__quadIndicesGLuint_set
    __swig_getmethods__["_quadIndicesGLuint"] = _osg.State__quadIndicesGLuint_get
    if _newclass:_quadIndicesGLuint = _swig_property(_osg.State__quadIndicesGLuint_get, _osg.State__quadIndicesGLuint_set)
    def drawQuads(self, *args):
        """
        drawQuads(State self, GLint first, GLsizei count, GLsizei primCount=0)
        drawQuads(State self, GLint first, GLsizei count)
        """
        return _osg.State_drawQuads(self, *args)

    def glDrawArraysInstanced(self, *args):
        """glDrawArraysInstanced(State self, GLenum mode, GLint first, GLsizei count, GLsizei primcount)"""
        return _osg.State_glDrawArraysInstanced(self, *args)

    def glDrawElementsInstanced(self, *args):
        """glDrawElementsInstanced(State self, GLenum mode, GLsizei count, GLenum type, GLvoid const * indices, GLsizei primcount)"""
        return _osg.State_glDrawElementsInstanced(self, *args)

    def Vertex(self, *args):
        """
        Vertex(State self, float x, float y, float z, float w=1.0)
        Vertex(State self, float x, float y, float z)
        """
        return _osg.State_Vertex(self, *args)

    def Color(self, *args):
        """
        Color(State self, float r, float g, float b, float a=1.0)
        Color(State self, float r, float g, float b)
        """
        return _osg.State_Color(self, *args)

    def Normal(self, *args):
        """Normal(State self, float x, float y, float z)"""
        return _osg.State_Normal(self, *args)

    def TexCoord(self, *args):
        """
        TexCoord(State self, float x, float y=0.0, float z=0.0, float w=1.0)
        TexCoord(State self, float x, float y=0.0, float z=0.0)
        TexCoord(State self, float x, float y=0.0)
        TexCoord(State self, float x)
        """
        return _osg.State_TexCoord(self, *args)

    def MultiTexCoord(self, *args):
        """
        MultiTexCoord(State self, unsigned int unit, float x, float y=0.0, float z=0.0, float w=1.0)
        MultiTexCoord(State self, unsigned int unit, float x, float y=0.0, float z=0.0)
        MultiTexCoord(State self, unsigned int unit, float x, float y=0.0)
        MultiTexCoord(State self, unsigned int unit, float x)
        """
        return _osg.State_MultiTexCoord(self, *args)

    def VerteAttrib(self, *args):
        """
        VerteAttrib(State self, unsigned int location, float x, float y=0.0, float z=0.0, float w=0.0)
        VerteAttrib(State self, unsigned int location, float x, float y=0.0, float z=0.0)
        VerteAttrib(State self, unsigned int location, float x, float y=0.0)
        VerteAttrib(State self, unsigned int location, float x)
        """
        return _osg.State_VerteAttrib(self, *args)

    def lazyDisablingOfVertexAttributes(self):
        """lazyDisablingOfVertexAttributes(State self)"""
        return _osg.State_lazyDisablingOfVertexAttributes(self)

    def applyDisablingOfVertexAttributes(self):
        """applyDisablingOfVertexAttributes(State self)"""
        return _osg.State_applyDisablingOfVertexAttributes(self)

    def setInterleavedArrays(self, *args):
        """setInterleavedArrays(State self, GLenum format, GLsizei stride, GLvoid const * pointer)"""
        return _osg.State_setInterleavedArrays(self, *args)

    def setVertexPointer(self, *args):
        """
        setVertexPointer(State self, Array array)
        setVertexPointer(State self, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr, GLboolean normalized=0x0)
        setVertexPointer(State self, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr)
        """
        return _osg.State_setVertexPointer(self, *args)

    def disableVertexPointer(self):
        """disableVertexPointer(State self)"""
        return _osg.State_disableVertexPointer(self)

    def dirtyVertexPointer(self):
        """dirtyVertexPointer(State self)"""
        return _osg.State_dirtyVertexPointer(self)

    def setNormalPointer(self, *args):
        """
        setNormalPointer(State self, Array array)
        setNormalPointer(State self, GLenum type, GLsizei stride, GLvoid const * ptr, GLboolean normalized=0x0)
        setNormalPointer(State self, GLenum type, GLsizei stride, GLvoid const * ptr)
        """
        return _osg.State_setNormalPointer(self, *args)

    def disableNormalPointer(self):
        """disableNormalPointer(State self)"""
        return _osg.State_disableNormalPointer(self)

    def dirtyNormalPointer(self):
        """dirtyNormalPointer(State self)"""
        return _osg.State_dirtyNormalPointer(self)

    def setColorPointer(self, *args):
        """
        setColorPointer(State self, Array array)
        setColorPointer(State self, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr, GLboolean normalized=0x1)
        setColorPointer(State self, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr)
        """
        return _osg.State_setColorPointer(self, *args)

    def disableColorPointer(self):
        """disableColorPointer(State self)"""
        return _osg.State_disableColorPointer(self)

    def dirtyColorPointer(self):
        """dirtyColorPointer(State self)"""
        return _osg.State_dirtyColorPointer(self)

    def isSecondaryColorSupported(self):
        """isSecondaryColorSupported(State self) -> bool"""
        return _osg.State_isSecondaryColorSupported(self)

    def setSecondaryColorPointer(self, *args):
        """
        setSecondaryColorPointer(State self, Array array)
        setSecondaryColorPointer(State self, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr, GLboolean normalized=0x1)
        setSecondaryColorPointer(State self, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr)
        """
        return _osg.State_setSecondaryColorPointer(self, *args)

    def disableSecondaryColorPointer(self):
        """disableSecondaryColorPointer(State self)"""
        return _osg.State_disableSecondaryColorPointer(self)

    def dirtySecondaryColorPointer(self):
        """dirtySecondaryColorPointer(State self)"""
        return _osg.State_dirtySecondaryColorPointer(self)

    def isFogCoordSupported(self):
        """isFogCoordSupported(State self) -> bool"""
        return _osg.State_isFogCoordSupported(self)

    def setFogCoordPointer(self, *args):
        """
        setFogCoordPointer(State self, Array array)
        setFogCoordPointer(State self, GLenum type, GLsizei stride, GLvoid const * ptr, GLboolean normalized=0x0)
        setFogCoordPointer(State self, GLenum type, GLsizei stride, GLvoid const * ptr)
        """
        return _osg.State_setFogCoordPointer(self, *args)

    def disableFogCoordPointer(self):
        """disableFogCoordPointer(State self)"""
        return _osg.State_disableFogCoordPointer(self)

    def dirtyFogCoordPointer(self):
        """dirtyFogCoordPointer(State self)"""
        return _osg.State_dirtyFogCoordPointer(self)

    def setTexCoordPointer(self, *args):
        """
        setTexCoordPointer(State self, unsigned int unit, Array array)
        setTexCoordPointer(State self, unsigned int unit, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr, GLboolean normalized=0x0)
        setTexCoordPointer(State self, unsigned int unit, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr)
        """
        return _osg.State_setTexCoordPointer(self, *args)

    def disableTexCoordPointer(self, *args):
        """disableTexCoordPointer(State self, unsigned int unit)"""
        return _osg.State_disableTexCoordPointer(self, *args)

    def dirtyTexCoordPointer(self, *args):
        """dirtyTexCoordPointer(State self, unsigned int unit)"""
        return _osg.State_dirtyTexCoordPointer(self, *args)

    def disableTexCoordPointersAboveAndIncluding(self, *args):
        """disableTexCoordPointersAboveAndIncluding(State self, unsigned int unit)"""
        return _osg.State_disableTexCoordPointersAboveAndIncluding(self, *args)

    def dirtyTexCoordPointersAboveAndIncluding(self, *args):
        """dirtyTexCoordPointersAboveAndIncluding(State self, unsigned int unit)"""
        return _osg.State_dirtyTexCoordPointersAboveAndIncluding(self, *args)

    def getMaxTextureCoords(self):
        """getMaxTextureCoords(State self) -> GLint"""
        return _osg.State_getMaxTextureCoords(self)

    def getMaxTextureUnits(self):
        """getMaxTextureUnits(State self) -> GLint"""
        return _osg.State_getMaxTextureUnits(self)

    def setActiveTextureUnit(self, *args):
        """setActiveTextureUnit(State self, unsigned int unit) -> bool"""
        return _osg.State_setActiveTextureUnit(self, *args)

    def getActiveTextureUnit(self):
        """getActiveTextureUnit(State self) -> unsigned int"""
        return _osg.State_getActiveTextureUnit(self)

    def setClientActiveTextureUnit(self, *args):
        """setClientActiveTextureUnit(State self, unsigned int unit) -> bool"""
        return _osg.State_setClientActiveTextureUnit(self, *args)

    def getClientActiveTextureUnit(self):
        """getClientActiveTextureUnit(State self) -> unsigned int"""
        return _osg.State_getClientActiveTextureUnit(self)

    def setVertexAttribPointer(self, *args):
        """
        setVertexAttribPointer(State self, unsigned int unit, Array array)
        setVertexAttribPointer(State self, unsigned int index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, 
            GLvoid const * ptr)
        """
        return _osg.State_setVertexAttribPointer(self, *args)

    def setVertexAttribIPointer(self, *args):
        """
        setVertexAttribIPointer(State self, unsigned int unit, Array array)
        setVertexAttribIPointer(State self, unsigned int index, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr)
        """
        return _osg.State_setVertexAttribIPointer(self, *args)

    def setVertexAttribLPointer(self, *args):
        """
        setVertexAttribLPointer(State self, unsigned int unit, Array array)
        setVertexAttribLPointer(State self, unsigned int index, GLint size, GLenum type, GLsizei stride, GLvoid const * ptr)
        """
        return _osg.State_setVertexAttribLPointer(self, *args)

    def disableVertexAttribPointer(self, *args):
        """disableVertexAttribPointer(State self, unsigned int index)"""
        return _osg.State_disableVertexAttribPointer(self, *args)

    def disableVertexAttribPointersAboveAndIncluding(self, *args):
        """disableVertexAttribPointersAboveAndIncluding(State self, unsigned int index)"""
        return _osg.State_disableVertexAttribPointersAboveAndIncluding(self, *args)

    def dirtyVertexAttribPointer(self, *args):
        """dirtyVertexAttribPointer(State self, unsigned int index)"""
        return _osg.State_dirtyVertexAttribPointer(self, *args)

    def dirtyVertexAttribPointersAboveAndIncluding(self, *args):
        """dirtyVertexAttribPointersAboveAndIncluding(State self, unsigned int index)"""
        return _osg.State_dirtyVertexAttribPointersAboveAndIncluding(self, *args)

    def isVertexBufferObjectSupported(self):
        """isVertexBufferObjectSupported(State self) -> bool"""
        return _osg.State_isVertexBufferObjectSupported(self)

    def setLastAppliedProgramObject(self, *args):
        """setLastAppliedProgramObject(State self, osg::Program::PerContextProgram const * program)"""
        return _osg.State_setLastAppliedProgramObject(self, *args)

    def getLastAppliedProgramObject(self):
        """getLastAppliedProgramObject(State self) -> osg::Program::PerContextProgram const *"""
        return _osg.State_getLastAppliedProgramObject(self)

    def getUniformLocation(self, *args):
        """
        getUniformLocation(State self, unsigned int uniformNameID) -> GLint
        getUniformLocation(State self, std::string const & uniformName) -> GLint
        """
        return _osg.State_getUniformLocation(self, *args)

    def getAttribLocation(self, *args):
        """getAttribLocation(State self, std::string const & name) -> GLint"""
        return _osg.State_getAttribLocation(self, *args)

    def getAttributeVec(self, *args):
        """getAttributeVec(State self, StateAttribute attribute) -> osg::State::AttributeVec &"""
        return _osg.State_getAttributeVec(self, *args)

    def setFrameStamp(self, *args):
        """setFrameStamp(State self, FrameStamp fs)"""
        return _osg.State_setFrameStamp(self, *args)

    def getFrameStamp(self, *args):
        """
        getFrameStamp(State self) -> FrameStamp
        getFrameStamp(State self) -> FrameStamp
        """
        return _osg.State_getFrameStamp(self, *args)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(State self, DisplaySettings vs)"""
        return _osg.State_setDisplaySettings(self, *args)

    def getDisplaySettings(self):
        """getDisplaySettings(State self) -> DisplaySettings"""
        return _osg.State_getDisplaySettings(self)

    def setAbortRenderingPtr(self, *args):
        """setAbortRenderingPtr(State self, bool * abortPtr)"""
        return _osg.State_setAbortRenderingPtr(self, *args)

    def getAbortRendering(self):
        """getAbortRendering(State self) -> bool"""
        return _osg.State_getAbortRendering(self)

    def setDynamicObjectCount(self, *args):
        """
        setDynamicObjectCount(State self, unsigned int count, bool callCallbackOnZero=False)
        setDynamicObjectCount(State self, unsigned int count)
        """
        return _osg.State_setDynamicObjectCount(self, *args)

    def getDynamicObjectCount(self):
        """getDynamicObjectCount(State self) -> unsigned int"""
        return _osg.State_getDynamicObjectCount(self)

    def decrementDynamicObjectCount(self):
        """decrementDynamicObjectCount(State self)"""
        return _osg.State_decrementDynamicObjectCount(self)

    def setMaxTexturePoolSize(self, *args):
        """setMaxTexturePoolSize(State self, unsigned int size)"""
        return _osg.State_setMaxTexturePoolSize(self, *args)

    def getMaxTexturePoolSize(self):
        """getMaxTexturePoolSize(State self) -> unsigned int"""
        return _osg.State_getMaxTexturePoolSize(self)

    def setMaxBufferObjectPoolSize(self, *args):
        """setMaxBufferObjectPoolSize(State self, unsigned int size)"""
        return _osg.State_setMaxBufferObjectPoolSize(self, *args)

    def getMaxBufferObjectPoolSize(self):
        """getMaxBufferObjectPoolSize(State self) -> unsigned int"""
        return _osg.State_getMaxBufferObjectPoolSize(self)

    NEVER_CHECK_GL_ERRORS = _osg.State_NEVER_CHECK_GL_ERRORS
    ONCE_PER_FRAME = _osg.State_ONCE_PER_FRAME
    ONCE_PER_ATTRIBUTE = _osg.State_ONCE_PER_ATTRIBUTE
    def setCheckForGLErrors(self, *args):
        """setCheckForGLErrors(State self, osg::State::CheckForGLErrors check)"""
        return _osg.State_setCheckForGLErrors(self, *args)

    def getCheckForGLErrors(self):
        """getCheckForGLErrors(State self) -> osg::State::CheckForGLErrors"""
        return _osg.State_getCheckForGLErrors(self)

    def checkGLErrors(self, *args):
        """
        checkGLErrors(State self, char const * str) -> bool
        checkGLErrors(State self, osg::StateAttribute::GLMode mode) -> bool
        checkGLErrors(State self, StateAttribute attribute) -> bool
        """
        return _osg.State_checkGLErrors(self, *args)

    def _print(self, *args):
        """_print(State self, std::ostream & fout)"""
        return _osg.State__print(self, *args)

    def initializeExtensionProcs(self):
        """initializeExtensionProcs(State self)"""
        return _osg.State_initializeExtensionProcs(self)

    def objectDeleted(self, *args):
        """objectDeleted(State self, void * object)"""
        return _osg.State_objectDeleted(self, *args)

    def getGLBeginEndAdapter(self):
        """getGLBeginEndAdapter(State self) -> GLBeginEndAdapter &"""
        return _osg.State_getGLBeginEndAdapter(self)

    def getArrayDispatchers(self):
        """getArrayDispatchers(State self) -> ArrayDispatchers &"""
        return _osg.State_getArrayDispatchers(self)

    def setGraphicsCostEstimator(self, *args):
        """setGraphicsCostEstimator(State self, GraphicsCostEstimator * gce)"""
        return _osg.State_setGraphicsCostEstimator(self, *args)

    def getGraphicsCostEstimator(self, *args):
        """
        getGraphicsCostEstimator(State self) -> GraphicsCostEstimator
        getGraphicsCostEstimator(State self) -> GraphicsCostEstimator const *
        """
        return _osg.State_getGraphicsCostEstimator(self, *args)

    def getStartTick(self):
        """getStartTick(State self) -> Timer_t"""
        return _osg.State_getStartTick(self)

    def setStartTick(self, *args):
        """setStartTick(State self, Timer_t tick)"""
        return _osg.State_setStartTick(self, *args)

    def getGpuTick(self):
        """getGpuTick(State self) -> Timer_t"""
        return _osg.State_getGpuTick(self)

    def getGpuTime(self):
        """getGpuTime(State self) -> double"""
        return _osg.State_getGpuTime(self)

    def getGpuTimestamp(self):
        """getGpuTimestamp(State self) -> GLuint64EXT"""
        return _osg.State_getGpuTimestamp(self)

    def setGpuTimestamp(self, *args):
        """setGpuTimestamp(State self, Timer_t tick, GLuint64EXT timestamp)"""
        return _osg.State_setGpuTimestamp(self, *args)

    def getTimestampBits(self):
        """getTimestampBits(State self) -> int"""
        return _osg.State_getTimestampBits(self)

    def setTimestampBits(self, *args):
        """setTimestampBits(State self, int bits)"""
        return _osg.State_setTimestampBits(self, *args)

    def frameCompleted(self):
        """frameCompleted(State self)"""
        return _osg.State_frameCompleted(self)

State_swigregister = _osg.State_swigregister
State_swigregister(State)

OSG_NODECALLBACK = _osg.OSG_NODECALLBACK
class NodeCallback(Object):
    """Proxy of C++ osg::NodeCallback class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::NodeCallback self) -> NodeCallback
        __init__(osg::NodeCallback self, NodeCallback nc, CopyOp arg3) -> NodeCallback
        """
        if self.__class__ == NodeCallback:
            _self = None
        else:
            _self = self
        this = _osg.new_NodeCallback(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(NodeCallback self) -> Object"""
        return _osg.NodeCallback_cloneType(self)

    def clone(self, *args):
        """clone(NodeCallback self, CopyOp copyop) -> Object"""
        return _osg.NodeCallback_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(NodeCallback self, Object obj) -> bool"""
        return _osg.NodeCallback_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(NodeCallback self) -> char const *"""
        return _osg.NodeCallback_libraryName(self)

    def className(self):
        """className(NodeCallback self) -> char const *"""
        return _osg.NodeCallback_className(self)

    def __call__(self, *args):
        """__call__(NodeCallback self, Node node, NodeVisitor nv)"""
        return _osg.NodeCallback___call__(self, *args)

    def traverse(self, *args):
        """traverse(NodeCallback self, Node node, NodeVisitor nv)"""
        return _osg.NodeCallback_traverse(self, *args)

    def setNestedCallback(self, *args):
        """setNestedCallback(NodeCallback self, NodeCallback nc)"""
        return _osg.NodeCallback_setNestedCallback(self, *args)

    def getNestedCallback(self, *args):
        """
        getNestedCallback(NodeCallback self) -> NodeCallback
        getNestedCallback(NodeCallback self) -> NodeCallback
        """
        return _osg.NodeCallback_getNestedCallback(self, *args)

    def addNestedCallback(self, *args):
        """addNestedCallback(NodeCallback self, NodeCallback nc)"""
        return _osg.NodeCallback_addNestedCallback(self, *args)

    def removeNestedCallback(self, *args):
        """removeNestedCallback(NodeCallback self, NodeCallback nc)"""
        return _osg.NodeCallback_removeNestedCallback(self, *args)

    __swig_setmethods__["_nestedCallback"] = _osg.NodeCallback__nestedCallback_set
    __swig_getmethods__["_nestedCallback"] = _osg.NodeCallback__nestedCallback_get
    if _newclass:_nestedCallback = _swig_property(_osg.NodeCallback__nestedCallback_get, _osg.NodeCallback__nestedCallback_set)
    def __disown__(self):
        self.this.disown()
        _osg.disown_NodeCallback(self)
        return weakref_proxy(self)
NodeCallback_swigregister = _osg.NodeCallback_swigregister
NodeCallback_swigregister(NodeCallback)

OSG_VIEW = _osg.OSG_VIEW
class View(Object):
    """Proxy of C++ osg::View class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, View, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, View, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::View self) -> View
        __init__(osg::View self, View view, CopyOp copyop=SHALLOW_COPY) -> View
        __init__(osg::View self, View view) -> View
        """
        this = _osg.new_View(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(View self) -> Object"""
        return _osg.View_cloneType(self)

    def clone(self, *args):
        """clone(View self, CopyOp copyop) -> Object"""
        return _osg.View_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(View self, Object obj) -> bool"""
        return _osg.View_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(View self) -> char const *"""
        return _osg.View_libraryName(self)

    def className(self):
        """className(View self) -> char const *"""
        return _osg.View_className(self)

    def take(self, *args):
        """take(View self, View rhs)"""
        return _osg.View_take(self, *args)

    def setStats(self, *args):
        """setStats(View self, Stats stats)"""
        return _osg.View_setStats(self, *args)

    def getStats(self, *args):
        """
        getStats(View self) -> Stats
        getStats(View self) -> Stats
        """
        return _osg.View_getStats(self, *args)

    NO_LIGHT = _osg.View_NO_LIGHT
    HEADLIGHT = _osg.View_HEADLIGHT
    SKY_LIGHT = _osg.View_SKY_LIGHT
    def setLightingMode(self, *args):
        """setLightingMode(View self, osg::View::LightingMode lightingMode)"""
        return _osg.View_setLightingMode(self, *args)

    def getLightingMode(self):
        """getLightingMode(View self) -> osg::View::LightingMode"""
        return _osg.View_getLightingMode(self)

    def setLight(self, *args):
        """setLight(View self, Light light)"""
        return _osg.View_setLight(self, *args)

    def getLight(self, *args):
        """
        getLight(View self) -> Light
        getLight(View self) -> Light
        """
        return _osg.View_getLight(self, *args)

    def setCamera(self, *args):
        """setCamera(View self, Camera camera)"""
        return _osg.View_setCamera(self, *args)

    def getCamera(self, *args):
        """
        getCamera(View self) -> Camera
        getCamera(View self) -> Camera
        """
        return _osg.View_getCamera(self, *args)

    def setFrameStamp(self, *args):
        """setFrameStamp(View self, FrameStamp fs)"""
        return _osg.View_setFrameStamp(self, *args)

    def getFrameStamp(self, *args):
        """
        getFrameStamp(View self) -> FrameStamp
        getFrameStamp(View self) -> FrameStamp
        """
        return _osg.View_getFrameStamp(self, *args)

    def addSlave(self, *args):
        """
        addSlave(View self, Camera camera, bool useMastersSceneData=True) -> bool
        addSlave(View self, Camera camera) -> bool
        addSlave(View self, Camera camera, Matrixd projectionOffset, Matrixd viewOffset, bool useMastersSceneData=True) -> bool
        addSlave(View self, Camera camera, Matrixd projectionOffset, Matrixd viewOffset) -> bool
        """
        return _osg.View_addSlave(self, *args)

    def removeSlave(self, *args):
        """removeSlave(View self, unsigned int pos) -> bool"""
        return _osg.View_removeSlave(self, *args)

    def getNumSlaves(self):
        """getNumSlaves(View self) -> unsigned int"""
        return _osg.View_getNumSlaves(self)

    def findSlaveIndexForCamera(self, *args):
        """findSlaveIndexForCamera(View self, Camera camera) -> unsigned int"""
        return _osg.View_findSlaveIndexForCamera(self, *args)

    def updateSlaves(self):
        """updateSlaves(View self)"""
        return _osg.View_updateSlaves(self)

View_swigregister = _osg.View_swigregister
View_swigregister(View)

OSG_RENDERINFO = _osg.OSG_RENDERINFO
class RenderInfo(_object):
    """Proxy of C++ osg::RenderInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::RenderInfo self) -> RenderInfo
        __init__(osg::RenderInfo self, RenderInfo rhs) -> RenderInfo
        __init__(osg::RenderInfo self, State state, View view) -> RenderInfo
        """
        this = _osg.new_RenderInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def getContextID(self):
        """getContextID(RenderInfo self) -> unsigned int"""
        return _osg.RenderInfo_getContextID(self)

    def setState(self, *args):
        """setState(RenderInfo self, State state)"""
        return _osg.RenderInfo_setState(self, *args)

    def getState(self, *args):
        """
        getState(RenderInfo self) -> State
        getState(RenderInfo self) -> State
        """
        return _osg.RenderInfo_getState(self, *args)

    def setView(self, *args):
        """setView(RenderInfo self, View view)"""
        return _osg.RenderInfo_setView(self, *args)

    def getView(self, *args):
        """
        getView(RenderInfo self) -> View
        getView(RenderInfo self) -> View
        """
        return _osg.RenderInfo_getView(self, *args)

    def pushCamera(self, *args):
        """pushCamera(RenderInfo self, Camera camera)"""
        return _osg.RenderInfo_pushCamera(self, *args)

    def popCamera(self):
        """popCamera(RenderInfo self)"""
        return _osg.RenderInfo_popCamera(self)

    def getCurrentCamera(self):
        """getCurrentCamera(RenderInfo self) -> Camera"""
        return _osg.RenderInfo_getCurrentCamera(self)

    def setUserData(self, *args):
        """setUserData(RenderInfo self, Referenced userData)"""
        return _osg.RenderInfo_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(RenderInfo self) -> Referenced
        getUserData(RenderInfo self) -> Referenced
        """
        return _osg.RenderInfo_getUserData(self, *args)

    __swig_destroy__ = _osg.delete_RenderInfo
    __del__ = lambda self : None;
RenderInfo_swigregister = _osg.RenderInfo_swigregister
RenderInfo_swigregister(RenderInfo)

OSG_DRAWABLE = _osg.OSG_DRAWABLE
GL_OCCLUSION_TEST_HP = _osg.GL_OCCLUSION_TEST_HP
GL_OCCLUSION_TEST_RESULT_HP = _osg.GL_OCCLUSION_TEST_RESULT_HP
GL_PIXEL_COUNTER_BITS_NV = _osg.GL_PIXEL_COUNTER_BITS_NV
GL_CURRENT_OCCLUSION_QUERY_ID_NV = _osg.GL_CURRENT_OCCLUSION_QUERY_ID_NV
GL_PIXEL_COUNT_NV = _osg.GL_PIXEL_COUNT_NV
GL_PIXEL_COUNT_AVAILABLE_NV = _osg.GL_PIXEL_COUNT_AVAILABLE_NV
GL_SAMPLES_PASSED_ARB = _osg.GL_SAMPLES_PASSED_ARB
GL_QUERY_COUNTER_BITS_ARB = _osg.GL_QUERY_COUNTER_BITS_ARB
GL_CURRENT_QUERY_ARB = _osg.GL_CURRENT_QUERY_ARB
GL_QUERY_RESULT_ARB = _osg.GL_QUERY_RESULT_ARB
GL_QUERY_RESULT_AVAILABLE_ARB = _osg.GL_QUERY_RESULT_AVAILABLE_ARB
GL_TIME_ELAPSED = _osg.GL_TIME_ELAPSED
GL_TIMESTAMP = _osg.GL_TIMESTAMP
GL_QUERY_RESULT = _osg.GL_QUERY_RESULT
GL_QUERY_RESULT_AVAILABLE = _osg.GL_QUERY_RESULT_AVAILABLE
class Drawable(Object):
    """Proxy of C++ osg::Drawable class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Drawable, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Drawable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["s_numberDrawablesReusedLastInLastFrame"] = _osg.Drawable_s_numberDrawablesReusedLastInLastFrame_set
    __swig_getmethods__["s_numberDrawablesReusedLastInLastFrame"] = _osg.Drawable_s_numberDrawablesReusedLastInLastFrame_get
    if _newclass:s_numberDrawablesReusedLastInLastFrame = _swig_property(_osg.Drawable_s_numberDrawablesReusedLastInLastFrame_get, _osg.Drawable_s_numberDrawablesReusedLastInLastFrame_set)
    __swig_setmethods__["s_numberNewDrawablesInLastFrame"] = _osg.Drawable_s_numberNewDrawablesInLastFrame_set
    __swig_getmethods__["s_numberNewDrawablesInLastFrame"] = _osg.Drawable_s_numberNewDrawablesInLastFrame_get
    if _newclass:s_numberNewDrawablesInLastFrame = _swig_property(_osg.Drawable_s_numberNewDrawablesInLastFrame_get, _osg.Drawable_s_numberNewDrawablesInLastFrame_set)
    __swig_setmethods__["s_numberDeletedDrawablesInLastFrame"] = _osg.Drawable_s_numberDeletedDrawablesInLastFrame_set
    __swig_getmethods__["s_numberDeletedDrawablesInLastFrame"] = _osg.Drawable_s_numberDeletedDrawablesInLastFrame_get
    if _newclass:s_numberDeletedDrawablesInLastFrame = _swig_property(_osg.Drawable_s_numberDeletedDrawablesInLastFrame_get, _osg.Drawable_s_numberDeletedDrawablesInLastFrame_set)
    def isSameKindAs(self, *args):
        """isSameKindAs(Drawable self, Object obj) -> bool"""
        return _osg.Drawable_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Drawable self) -> char const *"""
        return _osg.Drawable_libraryName(self)

    def className(self):
        """className(Drawable self) -> char const *"""
        return _osg.Drawable_className(self)

    def asGeometry(self, *args):
        """
        asGeometry(Drawable self) -> Geometry
        asGeometry(Drawable self) -> Geometry
        """
        return _osg.Drawable_asGeometry(self, *args)

    def computeDataVariance(self):
        """computeDataVariance(Drawable self)"""
        return _osg.Drawable_computeDataVariance(self)

    def getParents(self, *args):
        """
        getParents(Drawable self) -> vectorNode
        getParents(Drawable self) -> vectorNode
        """
        return _osg.Drawable_getParents(self, *args)

    def getParent(self, *args):
        """
        getParent(Drawable self, unsigned int i) -> Node
        getParent(Drawable self, unsigned int i) -> Node
        """
        return _osg.Drawable_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(Drawable self) -> unsigned int"""
        return _osg.Drawable_getNumParents(self)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(Drawable self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(Drawable self) -> vectorMatrix
        """
        return _osg.Drawable_getWorldMatrices(self, haltTraversalAtNode)

    def setStateSet(self, *args):
        """setStateSet(Drawable self, StateSet stateset)"""
        return _osg.Drawable_setStateSet(self, *args)

    def getStateSet(self, *args):
        """
        getStateSet(Drawable self) -> StateSet
        getStateSet(Drawable self) -> StateSet
        """
        return _osg.Drawable_getStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(Drawable self) -> StateSet"""
        return _osg.Drawable_getOrCreateStateSet(self)

    def setInitialBound(self, *args):
        """setInitialBound(Drawable self, BoundingBoxf bbox)"""
        return _osg.Drawable_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(Drawable self) -> BoundingBoxf"""
        return _osg.Drawable_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(Drawable self)"""
        return _osg.Drawable_dirtyBound(self)

    def getBound(self):
        """getBound(Drawable self) -> BoundingBoxf"""
        return _osg.Drawable_getBound(self)

    def computeBound(self):
        """computeBound(Drawable self) -> BoundingBoxf"""
        return _osg.Drawable_computeBound(self)

    def setShape(self, *args):
        """setShape(Drawable self, Shape shape)"""
        return _osg.Drawable_setShape(self, *args)

    def getShape(self, *args):
        """
        getShape(Drawable self) -> Shape
        getShape(Drawable self) -> Shape
        """
        return _osg.Drawable_getShape(self, *args)

    def setSupportsDisplayList(self, *args):
        """setSupportsDisplayList(Drawable self, bool flag)"""
        return _osg.Drawable_setSupportsDisplayList(self, *args)

    def getSupportsDisplayList(self):
        """getSupportsDisplayList(Drawable self) -> bool"""
        return _osg.Drawable_getSupportsDisplayList(self)

    def setUseDisplayList(self, *args):
        """setUseDisplayList(Drawable self, bool flag)"""
        return _osg.Drawable_setUseDisplayList(self, *args)

    def getUseDisplayList(self):
        """getUseDisplayList(Drawable self) -> bool"""
        return _osg.Drawable_getUseDisplayList(self)

    def getDisplayList(self, *args):
        """getDisplayList(Drawable self, unsigned int contextID) -> GLuint &"""
        return _osg.Drawable_getDisplayList(self, *args)

    def setUseVertexBufferObjects(self, *args):
        """setUseVertexBufferObjects(Drawable self, bool flag)"""
        return _osg.Drawable_setUseVertexBufferObjects(self, *args)

    def getUseVertexBufferObjects(self):
        """getUseVertexBufferObjects(Drawable self) -> bool"""
        return _osg.Drawable_getUseVertexBufferObjects(self)

    def dirtyDisplayList(self):
        """dirtyDisplayList(Drawable self)"""
        return _osg.Drawable_dirtyDisplayList(self)

    def getGLObjectSizeHint(self):
        """getGLObjectSizeHint(Drawable self) -> unsigned int"""
        return _osg.Drawable_getGLObjectSizeHint(self)

    def draw(self, *args):
        """draw(Drawable self, RenderInfo renderInfo)"""
        return _osg.Drawable_draw(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(Drawable self, RenderInfo renderInfo)"""
        return _osg.Drawable_compileGLObjects(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Drawable self, bool threadSafe)"""
        return _osg.Drawable_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Drawable self, unsigned int maxSize)"""
        return _osg.Drawable_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(Drawable self, State state=None)
        releaseGLObjects(Drawable self)
        """
        return _osg.Drawable_releaseGLObjects(self, state)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(Drawable self, osg::Drawable::UpdateCallback * ac)"""
        return _osg.Drawable_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(Drawable self) -> osg::Drawable::UpdateCallback
        getUpdateCallback(Drawable self) -> osg::Drawable::UpdateCallback const *
        """
        return _osg.Drawable_getUpdateCallback(self, *args)

    def requiresUpdateTraversal(self):
        """requiresUpdateTraversal(Drawable self) -> bool"""
        return _osg.Drawable_requiresUpdateTraversal(self)

    def requiresEventTraversal(self):
        """requiresEventTraversal(Drawable self) -> bool"""
        return _osg.Drawable_requiresEventTraversal(self)

    def drawImplementation(self, *args):
        """drawImplementation(Drawable self, RenderInfo renderInfo)"""
        return _osg.Drawable_drawImplementation(self, *args)

    def generateDisplayList(*args):
        """
        generateDisplayList(unsigned int contextID, unsigned int sizeHint=0) -> GLuint
        generateDisplayList(unsigned int contextID) -> GLuint
        """
        return _osg.Drawable_generateDisplayList(*args)

    if _newclass:generateDisplayList = staticmethod(generateDisplayList)
    __swig_getmethods__["generateDisplayList"] = lambda x: generateDisplayList
    def setMinimumNumberOfDisplayListsToRetainInCache(*args):
        """setMinimumNumberOfDisplayListsToRetainInCache(unsigned int minimum)"""
        return _osg.Drawable_setMinimumNumberOfDisplayListsToRetainInCache(*args)

    if _newclass:setMinimumNumberOfDisplayListsToRetainInCache = staticmethod(setMinimumNumberOfDisplayListsToRetainInCache)
    __swig_getmethods__["setMinimumNumberOfDisplayListsToRetainInCache"] = lambda x: setMinimumNumberOfDisplayListsToRetainInCache
    def getMinimumNumberOfDisplayListsToRetainInCache():
        """getMinimumNumberOfDisplayListsToRetainInCache() -> unsigned int"""
        return _osg.Drawable_getMinimumNumberOfDisplayListsToRetainInCache()

    if _newclass:getMinimumNumberOfDisplayListsToRetainInCache = staticmethod(getMinimumNumberOfDisplayListsToRetainInCache)
    __swig_getmethods__["getMinimumNumberOfDisplayListsToRetainInCache"] = lambda x: getMinimumNumberOfDisplayListsToRetainInCache
    def deleteDisplayList(*args):
        """
        deleteDisplayList(unsigned int contextID, GLuint globj, unsigned int sizeHint=0)
        deleteDisplayList(unsigned int contextID, GLuint globj)
        """
        return _osg.Drawable_deleteDisplayList(*args)

    if _newclass:deleteDisplayList = staticmethod(deleteDisplayList)
    __swig_getmethods__["deleteDisplayList"] = lambda x: deleteDisplayList
    def flushAllDeletedDisplayLists(*args):
        """flushAllDeletedDisplayLists(unsigned int contextID)"""
        return _osg.Drawable_flushAllDeletedDisplayLists(*args)

    if _newclass:flushAllDeletedDisplayLists = staticmethod(flushAllDeletedDisplayLists)
    __swig_getmethods__["flushAllDeletedDisplayLists"] = lambda x: flushAllDeletedDisplayLists
    def discardAllDeletedDisplayLists(*args):
        """discardAllDeletedDisplayLists(unsigned int contextID)"""
        return _osg.Drawable_discardAllDeletedDisplayLists(*args)

    if _newclass:discardAllDeletedDisplayLists = staticmethod(discardAllDeletedDisplayLists)
    __swig_getmethods__["discardAllDeletedDisplayLists"] = lambda x: discardAllDeletedDisplayLists
    def flushDeletedDisplayLists(*args):
        """flushDeletedDisplayLists(unsigned int contextID, double & availableTime)"""
        return _osg.Drawable_flushDeletedDisplayLists(*args)

    if _newclass:flushDeletedDisplayLists = staticmethod(flushDeletedDisplayLists)
    __swig_getmethods__["flushDeletedDisplayLists"] = lambda x: flushDeletedDisplayLists
    VERTICES = _osg.Drawable_VERTICES
    WEIGHTS = _osg.Drawable_WEIGHTS
    NORMALS = _osg.Drawable_NORMALS
    COLORS = _osg.Drawable_COLORS
    SECONDARY_COLORS = _osg.Drawable_SECONDARY_COLORS
    FOG_COORDS = _osg.Drawable_FOG_COORDS
    ATTRIBUTE_6 = _osg.Drawable_ATTRIBUTE_6
    ATTRIBUTE_7 = _osg.Drawable_ATTRIBUTE_7
    TEXTURE_COORDS = _osg.Drawable_TEXTURE_COORDS
    TEXTURE_COORDS_0 = _osg.Drawable_TEXTURE_COORDS_0
    TEXTURE_COORDS_1 = _osg.Drawable_TEXTURE_COORDS_1
    TEXTURE_COORDS_2 = _osg.Drawable_TEXTURE_COORDS_2
    TEXTURE_COORDS_3 = _osg.Drawable_TEXTURE_COORDS_3
    TEXTURE_COORDS_4 = _osg.Drawable_TEXTURE_COORDS_4
    TEXTURE_COORDS_5 = _osg.Drawable_TEXTURE_COORDS_5
    TEXTURE_COORDS_6 = _osg.Drawable_TEXTURE_COORDS_6
    TEXTURE_COORDS_7 = _osg.Drawable_TEXTURE_COORDS_7
    def accept(self, *args):
        """
        accept(Drawable self, osg::Drawable::AttributeFunctor & arg2)
        accept(Drawable self, osg::Drawable::ConstAttributeFunctor & arg2)
        accept(Drawable self, PrimitiveFunctor arg2)
        accept(Drawable self, PrimitiveIndexFunctor arg2)
        """
        return _osg.Drawable_accept(self, *args)

Drawable_swigregister = _osg.Drawable_swigregister
Drawable_swigregister(Drawable)

def Drawable_generateDisplayList(*args):
  """
    generateDisplayList(unsigned int contextID, unsigned int sizeHint=0) -> GLuint
    Drawable_generateDisplayList(unsigned int contextID) -> GLuint
    """
  return _osg.Drawable_generateDisplayList(*args)

def Drawable_setMinimumNumberOfDisplayListsToRetainInCache(*args):
  """Drawable_setMinimumNumberOfDisplayListsToRetainInCache(unsigned int minimum)"""
  return _osg.Drawable_setMinimumNumberOfDisplayListsToRetainInCache(*args)

def Drawable_getMinimumNumberOfDisplayListsToRetainInCache():
  """Drawable_getMinimumNumberOfDisplayListsToRetainInCache() -> unsigned int"""
  return _osg.Drawable_getMinimumNumberOfDisplayListsToRetainInCache()

def Drawable_deleteDisplayList(*args):
  """
    deleteDisplayList(unsigned int contextID, GLuint globj, unsigned int sizeHint=0)
    Drawable_deleteDisplayList(unsigned int contextID, GLuint globj)
    """
  return _osg.Drawable_deleteDisplayList(*args)

def Drawable_flushAllDeletedDisplayLists(*args):
  """Drawable_flushAllDeletedDisplayLists(unsigned int contextID)"""
  return _osg.Drawable_flushAllDeletedDisplayLists(*args)

def Drawable_discardAllDeletedDisplayLists(*args):
  """Drawable_discardAllDeletedDisplayLists(unsigned int contextID)"""
  return _osg.Drawable_discardAllDeletedDisplayLists(*args)

def Drawable_flushDeletedDisplayLists(*args):
  """Drawable_flushDeletedDisplayLists(unsigned int contextID, double & availableTime)"""
  return _osg.Drawable_flushDeletedDisplayLists(*args)

class UpdateCallback(Object):
    """Proxy of C++ UpdateCallback class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdateCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpdateCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(UpdateCallback self) -> UpdateCallback
        __init__(UpdateCallback self, UpdateCallback arg2, CopyOp arg3) -> UpdateCallback
        """
        if self.__class__ == UpdateCallback:
            _self = None
        else:
            _self = self
        this = _osg.new_UpdateCallback(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(UpdateCallback self) -> Object"""
        return _osg.UpdateCallback_cloneType(self)

    def clone(self, *args):
        """clone(UpdateCallback self, CopyOp copyop) -> Object"""
        return _osg.UpdateCallback_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(UpdateCallback self, Object obj) -> bool"""
        return _osg.UpdateCallback_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(UpdateCallback self) -> char const *"""
        return _osg.UpdateCallback_libraryName(self)

    def className(self):
        """className(UpdateCallback self) -> char const *"""
        return _osg.UpdateCallback_className(self)

    def update(self, *args):
        """update(UpdateCallback self, NodeVisitor arg0, Drawable arg1)"""
        return _osg.UpdateCallback_update(self, *args)

    __swig_destroy__ = _osg.delete_UpdateCallback
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _osg.disown_UpdateCallback(self)
        return weakref_proxy(self)
UpdateCallback_swigregister = _osg.UpdateCallback_swigregister
UpdateCallback_swigregister(UpdateCallback)

class AttributeFunctor(_object):
    """Proxy of C++ AttributeFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeFunctor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _osg.delete_AttributeFunctor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, GLbyte * arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, GLshort * arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, GLint * arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, GLubyte * arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, GLushort * arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, GLuint * arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, float * arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, Vec2f arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, Vec3f arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, Vec4f arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, Vec4ub arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, double * arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, Vec2d arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, Vec3d arg2)
        apply(AttributeFunctor self, Drawable::AttributeType arg0, unsigned int arg1, Vec4d arg2)
        """
        return _osg.AttributeFunctor_apply(self, *args)

    def __init__(self): 
        """__init__(AttributeFunctor self) -> AttributeFunctor"""
        if self.__class__ == AttributeFunctor:
            _self = None
        else:
            _self = self
        this = _osg.new_AttributeFunctor(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _osg.disown_AttributeFunctor(self)
        return weakref_proxy(self)
AttributeFunctor_swigregister = _osg.AttributeFunctor_swigregister
AttributeFunctor_swigregister(AttributeFunctor)

#get the original definitions back into their classes
Drawable.UpdateCallback = UpdateCallback
Drawable.AttributeFunctor = AttributeFunctor

OSG_ARRAY = _osg.OSG_ARRAY
class Array(BufferData):
    """Proxy of C++ osg::Array class"""
    __swig_setmethods__ = {}
    for _s in [BufferData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ArrayType = _osg.Array_ArrayType
    ByteArrayType = _osg.Array_ByteArrayType
    ShortArrayType = _osg.Array_ShortArrayType
    IntArrayType = _osg.Array_IntArrayType
    UByteArrayType = _osg.Array_UByteArrayType
    UShortArrayType = _osg.Array_UShortArrayType
    UIntArrayType = _osg.Array_UIntArrayType
    FloatArrayType = _osg.Array_FloatArrayType
    DoubleArrayType = _osg.Array_DoubleArrayType
    Vec2bArrayType = _osg.Array_Vec2bArrayType
    Vec3bArrayType = _osg.Array_Vec3bArrayType
    Vec4bArrayType = _osg.Array_Vec4bArrayType
    Vec2sArrayType = _osg.Array_Vec2sArrayType
    Vec3sArrayType = _osg.Array_Vec3sArrayType
    Vec4sArrayType = _osg.Array_Vec4sArrayType
    Vec2iArrayType = _osg.Array_Vec2iArrayType
    Vec3iArrayType = _osg.Array_Vec3iArrayType
    Vec4iArrayType = _osg.Array_Vec4iArrayType
    Vec2ubArrayType = _osg.Array_Vec2ubArrayType
    Vec3ubArrayType = _osg.Array_Vec3ubArrayType
    Vec4ubArrayType = _osg.Array_Vec4ubArrayType
    Vec2usArrayType = _osg.Array_Vec2usArrayType
    Vec3usArrayType = _osg.Array_Vec3usArrayType
    Vec4usArrayType = _osg.Array_Vec4usArrayType
    Vec2uiArrayType = _osg.Array_Vec2uiArrayType
    Vec3uiArrayType = _osg.Array_Vec3uiArrayType
    Vec4uiArrayType = _osg.Array_Vec4uiArrayType
    Vec2ArrayType = _osg.Array_Vec2ArrayType
    Vec3ArrayType = _osg.Array_Vec3ArrayType
    Vec4ArrayType = _osg.Array_Vec4ArrayType
    Vec2dArrayType = _osg.Array_Vec2dArrayType
    Vec3dArrayType = _osg.Array_Vec3dArrayType
    Vec4dArrayType = _osg.Array_Vec4dArrayType
    MatrixArrayType = _osg.Array_MatrixArrayType
    MatrixdArrayType = _osg.Array_MatrixdArrayType
    BIND_UNDEFINED = _osg.Array_BIND_UNDEFINED
    BIND_OFF = _osg.Array_BIND_OFF
    BIND_OVERALL = _osg.Array_BIND_OVERALL
    BIND_PER_PRIMITIVE_SET = _osg.Array_BIND_PER_PRIMITIVE_SET
    BIND_PER_VERTEX = _osg.Array_BIND_PER_VERTEX
    def isSameKindAs(self, *args):
        """isSameKindAs(Array self, Object obj) -> bool"""
        return _osg.Array_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Array self) -> char const *"""
        return _osg.Array_libraryName(self)

    def className(self):
        """className(Array self) -> char const *"""
        return _osg.Array_className(self)

    def accept(self, *args):
        """
        accept(Array self, ArrayVisitor arg2)
        accept(Array self, ConstArrayVisitor arg2)
        accept(Array self, unsigned int index, ValueVisitor arg3)
        accept(Array self, unsigned int index, ConstValueVisitor arg3)
        """
        return _osg.Array_accept(self, *args)

    def compare(self, *args):
        """compare(Array self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Array_compare(self, *args)

    def getType(self):
        """getType(Array self) -> osg::Array::Type"""
        return _osg.Array_getType(self)

    def getDataSize(self):
        """getDataSize(Array self) -> GLint"""
        return _osg.Array_getDataSize(self)

    def getDataType(self):
        """getDataType(Array self) -> GLenum"""
        return _osg.Array_getDataType(self)

    def asArray(self, *args):
        """
        asArray(Array self) -> Array
        asArray(Array self) -> Array
        """
        return _osg.Array_asArray(self, *args)

    def getElementSize(self):
        """getElementSize(Array self) -> unsigned int"""
        return _osg.Array_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(Array self) -> GLvoid const *"""
        return _osg.Array_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(Array self) -> unsigned int"""
        return _osg.Array_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(Array self) -> unsigned int"""
        return _osg.Array_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(Array self, unsigned int num)"""
        return _osg.Array_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(Array self, unsigned int num)"""
        return _osg.Array_resizeArray(self, *args)

    def setBinding(self, *args):
        """setBinding(Array self, osg::Array::Binding binding)"""
        return _osg.Array_setBinding(self, *args)

    def getBinding(self):
        """getBinding(Array self) -> osg::Array::Binding"""
        return _osg.Array_getBinding(self)

    def setNormalize(self, *args):
        """setNormalize(Array self, bool normalize)"""
        return _osg.Array_setNormalize(self, *args)

    def getNormalize(self):
        """getNormalize(Array self) -> bool"""
        return _osg.Array_getNormalize(self)

    def setPreserveDataType(self, *args):
        """setPreserveDataType(Array self, bool preserve)"""
        return _osg.Array_setPreserveDataType(self, *args)

    def getPreserveDataType(self):
        """getPreserveDataType(Array self) -> bool"""
        return _osg.Array_getPreserveDataType(self)

    def trim(self):
        """trim(Array self)"""
        return _osg.Array_trim(self)

    def setVertexBufferObject(self, *args):
        """setVertexBufferObject(Array self, VertexBufferObject vbo)"""
        return _osg.Array_setVertexBufferObject(self, *args)

    def getVertexBufferObject(self, *args):
        """
        getVertexBufferObject(Array self) -> VertexBufferObject
        getVertexBufferObject(Array self) -> VertexBufferObject
        """
        return _osg.Array_getVertexBufferObject(self, *args)

    def asVec2Array(self):
        """asVec2Array(Array self) -> Vec2Array"""
        return _osg.Array_asVec2Array(self)

    def asVec3Array(self):
        """asVec3Array(Array self) -> Vec3Array"""
        return _osg.Array_asVec3Array(self)

    def asVec4Array(self):
        """asVec4Array(Array self) -> Vec4Array"""
        return _osg.Array_asVec4Array(self)

    def asVec2dArray(self):
        """asVec2dArray(Array self) -> Vec2dArray"""
        return _osg.Array_asVec2dArray(self)

    def asVec3dArray(self):
        """asVec3dArray(Array self) -> Vec3dArray"""
        return _osg.Array_asVec3dArray(self)

    def asVec4dArray(self):
        """asVec4dArray(Array self) -> Vec4dArray"""
        return _osg.Array_asVec4dArray(self)

    def asShortArray(self):
        """asShortArray(Array self) -> ShortArray"""
        return _osg.Array_asShortArray(self)

    def asIntArray(self):
        """asIntArray(Array self) -> IntArray"""
        return _osg.Array_asIntArray(self)

    def asUByteArray(self):
        """asUByteArray(Array self) -> UByteArray"""
        return _osg.Array_asUByteArray(self)

    def asUShortArray(self):
        """asUShortArray(Array self) -> UShortArray"""
        return _osg.Array_asUShortArray(self)

    def asUIntArray(self):
        """asUIntArray(Array self) -> UIntArray"""
        return _osg.Array_asUIntArray(self)

    def asFloatArray(self):
        """asFloatArray(Array self) -> osg::FloatArray *"""
        return _osg.Array_asFloatArray(self)

Array_swigregister = _osg.Array_swigregister
Array_swigregister(Array)


def getBinding(*args):
  """getBinding(Array array) -> osg::Array::Binding"""
  return _osg.getBinding(*args)

def getNormalize(*args):
  """getNormalize(Array array) -> bool"""
  return _osg.getNormalize(*args)
class IndexArray(Array):
    """Proxy of C++ osg::IndexArray class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexArray, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isSameKindAs(self, *args):
        """isSameKindAs(IndexArray self, Object obj) -> bool"""
        return _osg.IndexArray_isSameKindAs(self, *args)

    def index(self, *args):
        """index(IndexArray self, unsigned int pos) -> unsigned int"""
        return _osg.IndexArray_index(self, *args)

IndexArray_swigregister = _osg.IndexArray_swigregister
IndexArray_swigregister(IndexArray)

class ArrayVisitor(_object):
    """Proxy of C++ osg::ArrayVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::ArrayVisitor self) -> ArrayVisitor"""
        this = _osg.new_ArrayVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ArrayVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(ArrayVisitor self, Array arg2)
        apply(ArrayVisitor self, osg::ByteArray & arg2)
        apply(ArrayVisitor self, ShortArray arg2)
        apply(ArrayVisitor self, IntArray arg2)
        apply(ArrayVisitor self, UByteArray arg2)
        apply(ArrayVisitor self, UShortArray arg2)
        apply(ArrayVisitor self, UIntArray arg2)
        apply(ArrayVisitor self, osg::FloatArray & arg2)
        apply(ArrayVisitor self, osg::DoubleArray & arg2)
        apply(ArrayVisitor self, osg::Vec2bArray & arg2)
        apply(ArrayVisitor self, osg::Vec3bArray & arg2)
        apply(ArrayVisitor self, osg::Vec4bArray & arg2)
        apply(ArrayVisitor self, osg::Vec2sArray & arg2)
        apply(ArrayVisitor self, osg::Vec3sArray & arg2)
        apply(ArrayVisitor self, osg::Vec4sArray & arg2)
        apply(ArrayVisitor self, osg::Vec2iArray & arg2)
        apply(ArrayVisitor self, osg::Vec3iArray & arg2)
        apply(ArrayVisitor self, osg::Vec4iArray & arg2)
        apply(ArrayVisitor self, osg::Vec2ubArray & arg2)
        apply(ArrayVisitor self, osg::Vec3ubArray & arg2)
        apply(ArrayVisitor self, osg::Vec4ubArray & arg2)
        apply(ArrayVisitor self, osg::Vec2usArray & arg2)
        apply(ArrayVisitor self, osg::Vec3usArray & arg2)
        apply(ArrayVisitor self, osg::Vec4usArray & arg2)
        apply(ArrayVisitor self, osg::Vec2uiArray & arg2)
        apply(ArrayVisitor self, osg::Vec3uiArray & arg2)
        apply(ArrayVisitor self, osg::Vec4uiArray & arg2)
        apply(ArrayVisitor self, Vec2Array arg2)
        apply(ArrayVisitor self, Vec3Array arg2)
        apply(ArrayVisitor self, Vec4Array arg2)
        apply(ArrayVisitor self, Vec2dArray arg2)
        apply(ArrayVisitor self, Vec3dArray arg2)
        apply(ArrayVisitor self, Vec4dArray arg2)
        apply(ArrayVisitor self, osg::MatrixfArray & arg2)
        apply(ArrayVisitor self, osg::MatrixdArray & arg2)
        """
        return _osg.ArrayVisitor_apply(self, *args)

ArrayVisitor_swigregister = _osg.ArrayVisitor_swigregister
ArrayVisitor_swigregister(ArrayVisitor)

class ConstArrayVisitor(_object):
    """Proxy of C++ osg::ConstArrayVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstArrayVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstArrayVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::ConstArrayVisitor self) -> ConstArrayVisitor"""
        this = _osg.new_ConstArrayVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ConstArrayVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(ConstArrayVisitor self, Array arg2)
        apply(ConstArrayVisitor self, osg::ByteArray const & arg2)
        apply(ConstArrayVisitor self, ShortArray arg2)
        apply(ConstArrayVisitor self, IntArray arg2)
        apply(ConstArrayVisitor self, UByteArray arg2)
        apply(ConstArrayVisitor self, UShortArray arg2)
        apply(ConstArrayVisitor self, UIntArray arg2)
        apply(ConstArrayVisitor self, osg::FloatArray const & arg2)
        apply(ConstArrayVisitor self, osg::DoubleArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec2bArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec3bArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec4bArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec2sArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec3sArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec4sArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec2iArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec3iArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec4iArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec2ubArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec3ubArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec4ubArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec2usArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec3usArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec4usArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec2uiArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec3uiArray const & arg2)
        apply(ConstArrayVisitor self, osg::Vec4uiArray const & arg2)
        apply(ConstArrayVisitor self, Vec2Array arg2)
        apply(ConstArrayVisitor self, Vec3Array arg2)
        apply(ConstArrayVisitor self, Vec4Array arg2)
        apply(ConstArrayVisitor self, Vec2dArray arg2)
        apply(ConstArrayVisitor self, Vec3dArray arg2)
        apply(ConstArrayVisitor self, Vec4dArray arg2)
        apply(ConstArrayVisitor self, osg::MatrixfArray const & arg2)
        apply(ConstArrayVisitor self, osg::MatrixdArray const & arg2)
        """
        return _osg.ConstArrayVisitor_apply(self, *args)

ConstArrayVisitor_swigregister = _osg.ConstArrayVisitor_swigregister
ConstArrayVisitor_swigregister(ConstArrayVisitor)

class ValueVisitor(_object):
    """Proxy of C++ osg::ValueVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValueVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ValueVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::ValueVisitor self) -> ValueVisitor"""
        this = _osg.new_ValueVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ValueVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(ValueVisitor self, GLbyte & arg2)
        apply(ValueVisitor self, GLshort & arg2)
        apply(ValueVisitor self, GLint & arg2)
        apply(ValueVisitor self, GLushort & arg2)
        apply(ValueVisitor self, GLubyte & arg2)
        apply(ValueVisitor self, GLuint & arg2)
        apply(ValueVisitor self, GLfloat & arg2)
        apply(ValueVisitor self, GLdouble & arg2)
        apply(ValueVisitor self, Vec2b arg2)
        apply(ValueVisitor self, Vec3b arg2)
        apply(ValueVisitor self, Vec4b arg2)
        apply(ValueVisitor self, Vec2s arg2)
        apply(ValueVisitor self, Vec3s arg2)
        apply(ValueVisitor self, Vec4s arg2)
        apply(ValueVisitor self, Vec2i & arg2)
        apply(ValueVisitor self, Vec3i & arg2)
        apply(ValueVisitor self, Vec4i & arg2)
        apply(ValueVisitor self, Vec2ub & arg2)
        apply(ValueVisitor self, Vec3ub & arg2)
        apply(ValueVisitor self, Vec4ub arg2)
        apply(ValueVisitor self, Vec2us & arg2)
        apply(ValueVisitor self, Vec3us & arg2)
        apply(ValueVisitor self, Vec4us & arg2)
        apply(ValueVisitor self, Vec2ui & arg2)
        apply(ValueVisitor self, Vec3ui & arg2)
        apply(ValueVisitor self, Vec4ui & arg2)
        apply(ValueVisitor self, Vec2f arg2)
        apply(ValueVisitor self, Vec3f arg2)
        apply(ValueVisitor self, Vec4f arg2)
        apply(ValueVisitor self, Vec2d arg2)
        apply(ValueVisitor self, Vec3d arg2)
        apply(ValueVisitor self, Vec4d arg2)
        apply(ValueVisitor self, Matrixf arg2)
        apply(ValueVisitor self, Matrixd arg2)
        """
        return _osg.ValueVisitor_apply(self, *args)

ValueVisitor_swigregister = _osg.ValueVisitor_swigregister
ValueVisitor_swigregister(ValueVisitor)

class ConstValueVisitor(_object):
    """Proxy of C++ osg::ConstValueVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstValueVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstValueVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::ConstValueVisitor self) -> ConstValueVisitor"""
        this = _osg.new_ConstValueVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ConstValueVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(ConstValueVisitor self, GLbyte const & arg2)
        apply(ConstValueVisitor self, GLshort const & arg2)
        apply(ConstValueVisitor self, GLint const & arg2)
        apply(ConstValueVisitor self, GLushort const & arg2)
        apply(ConstValueVisitor self, GLubyte const & arg2)
        apply(ConstValueVisitor self, GLuint const & arg2)
        apply(ConstValueVisitor self, GLfloat const & arg2)
        apply(ConstValueVisitor self, GLdouble const & arg2)
        apply(ConstValueVisitor self, Vec2b arg2)
        apply(ConstValueVisitor self, Vec3b arg2)
        apply(ConstValueVisitor self, Vec4b arg2)
        apply(ConstValueVisitor self, Vec2s arg2)
        apply(ConstValueVisitor self, Vec3s arg2)
        apply(ConstValueVisitor self, Vec4s arg2)
        apply(ConstValueVisitor self, Vec2i const & arg2)
        apply(ConstValueVisitor self, Vec3i const & arg2)
        apply(ConstValueVisitor self, Vec4i const & arg2)
        apply(ConstValueVisitor self, Vec2ub const & arg2)
        apply(ConstValueVisitor self, Vec3ub const & arg2)
        apply(ConstValueVisitor self, Vec4ub arg2)
        apply(ConstValueVisitor self, Vec2us const & arg2)
        apply(ConstValueVisitor self, Vec3us const & arg2)
        apply(ConstValueVisitor self, Vec4us const & arg2)
        apply(ConstValueVisitor self, Vec2ui const & arg2)
        apply(ConstValueVisitor self, Vec3ui const & arg2)
        apply(ConstValueVisitor self, Vec4ui const & arg2)
        apply(ConstValueVisitor self, Vec2f arg2)
        apply(ConstValueVisitor self, Vec3f arg2)
        apply(ConstValueVisitor self, Vec4f arg2)
        apply(ConstValueVisitor self, Vec2d arg2)
        apply(ConstValueVisitor self, Vec3d arg2)
        apply(ConstValueVisitor self, Vec4d arg2)
        apply(ConstValueVisitor self, Matrixf arg2)
        apply(ConstValueVisitor self, Matrixd arg2)
        """
        return _osg.ConstValueVisitor_apply(self, *args)

ConstValueVisitor_swigregister = _osg.ConstValueVisitor_swigregister
ConstValueVisitor_swigregister(ConstValueVisitor)

class vectorGLshort(_object):
    """Proxy of C++ std::vector<(GLshort)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLshort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLshort, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorGLshort self) -> SwigPyIterator"""
        return _osg.vectorGLshort_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorGLshort self) -> bool"""
        return _osg.vectorGLshort___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorGLshort self) -> bool"""
        return _osg.vectorGLshort___bool__(self)

    def __len__(self):
        """__len__(vectorGLshort self) -> std::vector< short >::size_type"""
        return _osg.vectorGLshort___len__(self)

    def pop(self):
        """pop(vectorGLshort self) -> std::vector< short >::value_type"""
        return _osg.vectorGLshort_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorGLshort self, std::vector< short >::difference_type i, std::vector< short >::difference_type j) -> vectorGLshort"""
        return _osg.vectorGLshort___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorGLshort self, std::vector< short >::difference_type i, std::vector< short >::difference_type j, 
            vectorGLshort v=std::vector< short,std::allocator< short > >())
        __setslice__(vectorGLshort self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)
        """
        return _osg.vectorGLshort___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorGLshort self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)"""
        return _osg.vectorGLshort___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorGLshort self, std::vector< short >::difference_type i)
        __delitem__(vectorGLshort self, PySliceObject * slice)
        """
        return _osg.vectorGLshort___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorGLshort self, PySliceObject * slice) -> vectorGLshort
        __getitem__(vectorGLshort self, std::vector< short >::difference_type i) -> std::vector< short >::value_type const &
        """
        return _osg.vectorGLshort___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorGLshort self, PySliceObject * slice, vectorGLshort v)
        __setitem__(vectorGLshort self, PySliceObject * slice)
        __setitem__(vectorGLshort self, std::vector< short >::difference_type i, std::vector< short >::value_type const & x)
        """
        return _osg.vectorGLshort___setitem__(self, *args)

    def append(self, *args):
        """append(vectorGLshort self, std::vector< short >::value_type const & x)"""
        return _osg.vectorGLshort_append(self, *args)

    def empty(self):
        """empty(vectorGLshort self) -> bool"""
        return _osg.vectorGLshort_empty(self)

    def size(self):
        """size(vectorGLshort self) -> std::vector< short >::size_type"""
        return _osg.vectorGLshort_size(self)

    def clear(self):
        """clear(vectorGLshort self)"""
        return _osg.vectorGLshort_clear(self)

    def swap(self, *args):
        """swap(vectorGLshort self, vectorGLshort v)"""
        return _osg.vectorGLshort_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorGLshort self) -> std::vector< short >::allocator_type"""
        return _osg.vectorGLshort_get_allocator(self)

    def begin(self):
        """begin(vectorGLshort self) -> std::vector< short >::iterator"""
        return _osg.vectorGLshort_begin(self)

    def end(self):
        """end(vectorGLshort self) -> std::vector< short >::iterator"""
        return _osg.vectorGLshort_end(self)

    def rbegin(self):
        """rbegin(vectorGLshort self) -> std::vector< short >::reverse_iterator"""
        return _osg.vectorGLshort_rbegin(self)

    def rend(self):
        """rend(vectorGLshort self) -> std::vector< short >::reverse_iterator"""
        return _osg.vectorGLshort_rend(self)

    def pop_back(self):
        """pop_back(vectorGLshort self)"""
        return _osg.vectorGLshort_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorGLshort self, std::vector< short >::iterator pos) -> std::vector< short >::iterator
        erase(vectorGLshort self, std::vector< short >::iterator first, std::vector< short >::iterator last) -> std::vector< short >::iterator
        """
        return _osg.vectorGLshort_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(GLshort)> self) -> vectorGLshort
        __init__(std::vector<(GLshort)> self, vectorGLshort arg2) -> vectorGLshort
        __init__(std::vector<(GLshort)> self, std::vector< short >::size_type size) -> vectorGLshort
        __init__(std::vector<(GLshort)> self, std::vector< short >::size_type size, std::vector< short >::value_type const & value) -> vectorGLshort
        """
        this = _osg.new_vectorGLshort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorGLshort self, std::vector< short >::value_type const & x)"""
        return _osg.vectorGLshort_push_back(self, *args)

    def front(self):
        """front(vectorGLshort self) -> std::vector< short >::value_type const &"""
        return _osg.vectorGLshort_front(self)

    def back(self):
        """back(vectorGLshort self) -> std::vector< short >::value_type const &"""
        return _osg.vectorGLshort_back(self)

    def assign(self, *args):
        """assign(vectorGLshort self, std::vector< short >::size_type n, std::vector< short >::value_type const & x)"""
        return _osg.vectorGLshort_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorGLshort self, std::vector< short >::size_type new_size)
        resize(vectorGLshort self, std::vector< short >::size_type new_size, std::vector< short >::value_type const & x)
        """
        return _osg.vectorGLshort_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorGLshort self, std::vector< short >::iterator pos, std::vector< short >::value_type const & x) -> std::vector< short >::iterator
        insert(vectorGLshort self, std::vector< short >::iterator pos, std::vector< short >::size_type n, std::vector< short >::value_type const & x)
        """
        return _osg.vectorGLshort_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorGLshort self, std::vector< short >::size_type n)"""
        return _osg.vectorGLshort_reserve(self, *args)

    def capacity(self):
        """capacity(vectorGLshort self) -> std::vector< short >::size_type"""
        return _osg.vectorGLshort_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLshort
    __del__ = lambda self : None;
vectorGLshort_swigregister = _osg.vectorGLshort_swigregister
vectorGLshort_swigregister(vectorGLshort)

class vectorGLint(_object):
    """Proxy of C++ std::vector<(GLint)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLint, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorGLint self) -> SwigPyIterator"""
        return _osg.vectorGLint_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorGLint self) -> bool"""
        return _osg.vectorGLint___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorGLint self) -> bool"""
        return _osg.vectorGLint___bool__(self)

    def __len__(self):
        """__len__(vectorGLint self) -> std::vector< int >::size_type"""
        return _osg.vectorGLint___len__(self)

    def pop(self):
        """pop(vectorGLint self) -> std::vector< int >::value_type"""
        return _osg.vectorGLint_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorGLint self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vectorGLint"""
        return _osg.vectorGLint___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorGLint self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vectorGLint v=std::vector< int,std::allocator< int > >())
        __setslice__(vectorGLint self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _osg.vectorGLint___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorGLint self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _osg.vectorGLint___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorGLint self, std::vector< int >::difference_type i)
        __delitem__(vectorGLint self, PySliceObject * slice)
        """
        return _osg.vectorGLint___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorGLint self, PySliceObject * slice) -> vectorGLint
        __getitem__(vectorGLint self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _osg.vectorGLint___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorGLint self, PySliceObject * slice, vectorGLint v)
        __setitem__(vectorGLint self, PySliceObject * slice)
        __setitem__(vectorGLint self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _osg.vectorGLint___setitem__(self, *args)

    def append(self, *args):
        """append(vectorGLint self, std::vector< int >::value_type const & x)"""
        return _osg.vectorGLint_append(self, *args)

    def empty(self):
        """empty(vectorGLint self) -> bool"""
        return _osg.vectorGLint_empty(self)

    def size(self):
        """size(vectorGLint self) -> std::vector< int >::size_type"""
        return _osg.vectorGLint_size(self)

    def clear(self):
        """clear(vectorGLint self)"""
        return _osg.vectorGLint_clear(self)

    def swap(self, *args):
        """swap(vectorGLint self, vectorGLint v)"""
        return _osg.vectorGLint_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorGLint self) -> std::vector< int >::allocator_type"""
        return _osg.vectorGLint_get_allocator(self)

    def begin(self):
        """begin(vectorGLint self) -> std::vector< int >::iterator"""
        return _osg.vectorGLint_begin(self)

    def end(self):
        """end(vectorGLint self) -> std::vector< int >::iterator"""
        return _osg.vectorGLint_end(self)

    def rbegin(self):
        """rbegin(vectorGLint self) -> std::vector< int >::reverse_iterator"""
        return _osg.vectorGLint_rbegin(self)

    def rend(self):
        """rend(vectorGLint self) -> std::vector< int >::reverse_iterator"""
        return _osg.vectorGLint_rend(self)

    def pop_back(self):
        """pop_back(vectorGLint self)"""
        return _osg.vectorGLint_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorGLint self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vectorGLint self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _osg.vectorGLint_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(GLint)> self) -> vectorGLint
        __init__(std::vector<(GLint)> self, vectorGLint arg2) -> vectorGLint
        __init__(std::vector<(GLint)> self, std::vector< int >::size_type size) -> vectorGLint
        __init__(std::vector<(GLint)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vectorGLint
        """
        this = _osg.new_vectorGLint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorGLint self, std::vector< int >::value_type const & x)"""
        return _osg.vectorGLint_push_back(self, *args)

    def front(self):
        """front(vectorGLint self) -> std::vector< int >::value_type const &"""
        return _osg.vectorGLint_front(self)

    def back(self):
        """back(vectorGLint self) -> std::vector< int >::value_type const &"""
        return _osg.vectorGLint_back(self)

    def assign(self, *args):
        """assign(vectorGLint self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _osg.vectorGLint_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorGLint self, std::vector< int >::size_type new_size)
        resize(vectorGLint self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _osg.vectorGLint_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorGLint self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vectorGLint self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _osg.vectorGLint_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorGLint self, std::vector< int >::size_type n)"""
        return _osg.vectorGLint_reserve(self, *args)

    def capacity(self):
        """capacity(vectorGLint self) -> std::vector< int >::size_type"""
        return _osg.vectorGLint_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLint
    __del__ = lambda self : None;
vectorGLint_swigregister = _osg.vectorGLint_swigregister
vectorGLint_swigregister(vectorGLint)

class vectorGLubyte(_object):
    """Proxy of C++ std::vector<(GLubyte)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLubyte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLubyte, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorGLubyte self) -> SwigPyIterator"""
        return _osg.vectorGLubyte_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorGLubyte self) -> bool"""
        return _osg.vectorGLubyte___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorGLubyte self) -> bool"""
        return _osg.vectorGLubyte___bool__(self)

    def __len__(self):
        """__len__(vectorGLubyte self) -> std::vector< unsigned char >::size_type"""
        return _osg.vectorGLubyte___len__(self)

    def pop(self):
        """pop(vectorGLubyte self) -> std::vector< unsigned char >::value_type"""
        return _osg.vectorGLubyte_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorGLubyte self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j) -> vectorGLubyte"""
        return _osg.vectorGLubyte___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorGLubyte self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j, 
            vectorGLubyte v=std::vector< unsigned char,std::allocator< unsigned char > >())
        __setslice__(vectorGLubyte self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)
        """
        return _osg.vectorGLubyte___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorGLubyte self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)"""
        return _osg.vectorGLubyte___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorGLubyte self, std::vector< unsigned char >::difference_type i)
        __delitem__(vectorGLubyte self, PySliceObject * slice)
        """
        return _osg.vectorGLubyte___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorGLubyte self, PySliceObject * slice) -> vectorGLubyte
        __getitem__(vectorGLubyte self, std::vector< unsigned char >::difference_type i) -> std::vector< unsigned char >::value_type const &
        """
        return _osg.vectorGLubyte___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorGLubyte self, PySliceObject * slice, vectorGLubyte v)
        __setitem__(vectorGLubyte self, PySliceObject * slice)
        __setitem__(vectorGLubyte self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::value_type const & x)
        """
        return _osg.vectorGLubyte___setitem__(self, *args)

    def append(self, *args):
        """append(vectorGLubyte self, std::vector< unsigned char >::value_type const & x)"""
        return _osg.vectorGLubyte_append(self, *args)

    def empty(self):
        """empty(vectorGLubyte self) -> bool"""
        return _osg.vectorGLubyte_empty(self)

    def size(self):
        """size(vectorGLubyte self) -> std::vector< unsigned char >::size_type"""
        return _osg.vectorGLubyte_size(self)

    def clear(self):
        """clear(vectorGLubyte self)"""
        return _osg.vectorGLubyte_clear(self)

    def swap(self, *args):
        """swap(vectorGLubyte self, vectorGLubyte v)"""
        return _osg.vectorGLubyte_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorGLubyte self) -> std::vector< unsigned char >::allocator_type"""
        return _osg.vectorGLubyte_get_allocator(self)

    def begin(self):
        """begin(vectorGLubyte self) -> std::vector< unsigned char >::iterator"""
        return _osg.vectorGLubyte_begin(self)

    def end(self):
        """end(vectorGLubyte self) -> std::vector< unsigned char >::iterator"""
        return _osg.vectorGLubyte_end(self)

    def rbegin(self):
        """rbegin(vectorGLubyte self) -> std::vector< unsigned char >::reverse_iterator"""
        return _osg.vectorGLubyte_rbegin(self)

    def rend(self):
        """rend(vectorGLubyte self) -> std::vector< unsigned char >::reverse_iterator"""
        return _osg.vectorGLubyte_rend(self)

    def pop_back(self):
        """pop_back(vectorGLubyte self)"""
        return _osg.vectorGLubyte_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorGLubyte self, std::vector< unsigned char >::iterator pos) -> std::vector< unsigned char >::iterator
        erase(vectorGLubyte self, std::vector< unsigned char >::iterator first, std::vector< unsigned char >::iterator last) -> std::vector< unsigned char >::iterator
        """
        return _osg.vectorGLubyte_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(GLubyte)> self) -> vectorGLubyte
        __init__(std::vector<(GLubyte)> self, vectorGLubyte arg2) -> vectorGLubyte
        __init__(std::vector<(GLubyte)> self, std::vector< unsigned char >::size_type size) -> vectorGLubyte
        __init__(std::vector<(GLubyte)> self, std::vector< unsigned char >::size_type size, std::vector< unsigned char >::value_type const & value) -> vectorGLubyte
        """
        this = _osg.new_vectorGLubyte(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorGLubyte self, std::vector< unsigned char >::value_type const & x)"""
        return _osg.vectorGLubyte_push_back(self, *args)

    def front(self):
        """front(vectorGLubyte self) -> std::vector< unsigned char >::value_type const &"""
        return _osg.vectorGLubyte_front(self)

    def back(self):
        """back(vectorGLubyte self) -> std::vector< unsigned char >::value_type const &"""
        return _osg.vectorGLubyte_back(self)

    def assign(self, *args):
        """assign(vectorGLubyte self, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)"""
        return _osg.vectorGLubyte_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorGLubyte self, std::vector< unsigned char >::size_type new_size)
        resize(vectorGLubyte self, std::vector< unsigned char >::size_type new_size, std::vector< unsigned char >::value_type const & x)
        """
        return _osg.vectorGLubyte_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorGLubyte self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::value_type const & x) -> std::vector< unsigned char >::iterator
        insert(vectorGLubyte self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::size_type n, 
            std::vector< unsigned char >::value_type const & x)
        """
        return _osg.vectorGLubyte_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorGLubyte self, std::vector< unsigned char >::size_type n)"""
        return _osg.vectorGLubyte_reserve(self, *args)

    def capacity(self):
        """capacity(vectorGLubyte self) -> std::vector< unsigned char >::size_type"""
        return _osg.vectorGLubyte_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLubyte
    __del__ = lambda self : None;
vectorGLubyte_swigregister = _osg.vectorGLubyte_swigregister
vectorGLubyte_swigregister(vectorGLubyte)

class vectorGLushort(_object):
    """Proxy of C++ std::vector<(GLushort)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLushort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLushort, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorGLushort self) -> SwigPyIterator"""
        return _osg.vectorGLushort_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorGLushort self) -> bool"""
        return _osg.vectorGLushort___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorGLushort self) -> bool"""
        return _osg.vectorGLushort___bool__(self)

    def __len__(self):
        """__len__(vectorGLushort self) -> std::vector< unsigned short >::size_type"""
        return _osg.vectorGLushort___len__(self)

    def pop(self):
        """pop(vectorGLushort self) -> std::vector< unsigned short >::value_type"""
        return _osg.vectorGLushort_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorGLushort self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j) -> vectorGLushort"""
        return _osg.vectorGLushort___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorGLushort self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j, 
            vectorGLushort v=std::vector< unsigned short,std::allocator< unsigned short > >())
        __setslice__(vectorGLushort self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)
        """
        return _osg.vectorGLushort___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorGLushort self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::difference_type j)"""
        return _osg.vectorGLushort___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorGLushort self, std::vector< unsigned short >::difference_type i)
        __delitem__(vectorGLushort self, PySliceObject * slice)
        """
        return _osg.vectorGLushort___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorGLushort self, PySliceObject * slice) -> vectorGLushort
        __getitem__(vectorGLushort self, std::vector< unsigned short >::difference_type i) -> std::vector< unsigned short >::value_type const &
        """
        return _osg.vectorGLushort___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorGLushort self, PySliceObject * slice, vectorGLushort v)
        __setitem__(vectorGLushort self, PySliceObject * slice)
        __setitem__(vectorGLushort self, std::vector< unsigned short >::difference_type i, std::vector< unsigned short >::value_type const & x)
        """
        return _osg.vectorGLushort___setitem__(self, *args)

    def append(self, *args):
        """append(vectorGLushort self, std::vector< unsigned short >::value_type const & x)"""
        return _osg.vectorGLushort_append(self, *args)

    def empty(self):
        """empty(vectorGLushort self) -> bool"""
        return _osg.vectorGLushort_empty(self)

    def size(self):
        """size(vectorGLushort self) -> std::vector< unsigned short >::size_type"""
        return _osg.vectorGLushort_size(self)

    def clear(self):
        """clear(vectorGLushort self)"""
        return _osg.vectorGLushort_clear(self)

    def swap(self, *args):
        """swap(vectorGLushort self, vectorGLushort v)"""
        return _osg.vectorGLushort_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorGLushort self) -> std::vector< unsigned short >::allocator_type"""
        return _osg.vectorGLushort_get_allocator(self)

    def begin(self):
        """begin(vectorGLushort self) -> std::vector< unsigned short >::iterator"""
        return _osg.vectorGLushort_begin(self)

    def end(self):
        """end(vectorGLushort self) -> std::vector< unsigned short >::iterator"""
        return _osg.vectorGLushort_end(self)

    def rbegin(self):
        """rbegin(vectorGLushort self) -> std::vector< unsigned short >::reverse_iterator"""
        return _osg.vectorGLushort_rbegin(self)

    def rend(self):
        """rend(vectorGLushort self) -> std::vector< unsigned short >::reverse_iterator"""
        return _osg.vectorGLushort_rend(self)

    def pop_back(self):
        """pop_back(vectorGLushort self)"""
        return _osg.vectorGLushort_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorGLushort self, std::vector< unsigned short >::iterator pos) -> std::vector< unsigned short >::iterator
        erase(vectorGLushort self, std::vector< unsigned short >::iterator first, std::vector< unsigned short >::iterator last) -> std::vector< unsigned short >::iterator
        """
        return _osg.vectorGLushort_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(GLushort)> self) -> vectorGLushort
        __init__(std::vector<(GLushort)> self, vectorGLushort arg2) -> vectorGLushort
        __init__(std::vector<(GLushort)> self, std::vector< unsigned short >::size_type size) -> vectorGLushort
        __init__(std::vector<(GLushort)> self, std::vector< unsigned short >::size_type size, std::vector< unsigned short >::value_type const & value) -> vectorGLushort
        """
        this = _osg.new_vectorGLushort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorGLushort self, std::vector< unsigned short >::value_type const & x)"""
        return _osg.vectorGLushort_push_back(self, *args)

    def front(self):
        """front(vectorGLushort self) -> std::vector< unsigned short >::value_type const &"""
        return _osg.vectorGLushort_front(self)

    def back(self):
        """back(vectorGLushort self) -> std::vector< unsigned short >::value_type const &"""
        return _osg.vectorGLushort_back(self)

    def assign(self, *args):
        """assign(vectorGLushort self, std::vector< unsigned short >::size_type n, std::vector< unsigned short >::value_type const & x)"""
        return _osg.vectorGLushort_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorGLushort self, std::vector< unsigned short >::size_type new_size)
        resize(vectorGLushort self, std::vector< unsigned short >::size_type new_size, std::vector< unsigned short >::value_type const & x)
        """
        return _osg.vectorGLushort_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorGLushort self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::value_type const & x) -> std::vector< unsigned short >::iterator
        insert(vectorGLushort self, std::vector< unsigned short >::iterator pos, std::vector< unsigned short >::size_type n, 
            std::vector< unsigned short >::value_type const & x)
        """
        return _osg.vectorGLushort_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorGLushort self, std::vector< unsigned short >::size_type n)"""
        return _osg.vectorGLushort_reserve(self, *args)

    def capacity(self):
        """capacity(vectorGLushort self) -> std::vector< unsigned short >::size_type"""
        return _osg.vectorGLushort_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLushort
    __del__ = lambda self : None;
vectorGLushort_swigregister = _osg.vectorGLushort_swigregister
vectorGLushort_swigregister(vectorGLushort)

class vectorGLuint(_object):
    """Proxy of C++ std::vector<(GLuint)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLuint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLuint, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorGLuint self) -> SwigPyIterator"""
        return _osg.vectorGLuint_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorGLuint self) -> bool"""
        return _osg.vectorGLuint___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorGLuint self) -> bool"""
        return _osg.vectorGLuint___bool__(self)

    def __len__(self):
        """__len__(vectorGLuint self) -> std::vector< unsigned int >::size_type"""
        return _osg.vectorGLuint___len__(self)

    def pop(self):
        """pop(vectorGLuint self) -> std::vector< unsigned int >::value_type"""
        return _osg.vectorGLuint_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorGLuint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> vectorGLuint"""
        return _osg.vectorGLuint___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorGLuint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, 
            vectorGLuint v=std::vector< unsigned int,std::allocator< unsigned int > >())
        __setslice__(vectorGLuint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        """
        return _osg.vectorGLuint___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorGLuint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _osg.vectorGLuint___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorGLuint self, std::vector< unsigned int >::difference_type i)
        __delitem__(vectorGLuint self, PySliceObject * slice)
        """
        return _osg.vectorGLuint___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorGLuint self, PySliceObject * slice) -> vectorGLuint
        __getitem__(vectorGLuint self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _osg.vectorGLuint___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorGLuint self, PySliceObject * slice, vectorGLuint v)
        __setitem__(vectorGLuint self, PySliceObject * slice)
        __setitem__(vectorGLuint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _osg.vectorGLuint___setitem__(self, *args)

    def append(self, *args):
        """append(vectorGLuint self, std::vector< unsigned int >::value_type const & x)"""
        return _osg.vectorGLuint_append(self, *args)

    def empty(self):
        """empty(vectorGLuint self) -> bool"""
        return _osg.vectorGLuint_empty(self)

    def size(self):
        """size(vectorGLuint self) -> std::vector< unsigned int >::size_type"""
        return _osg.vectorGLuint_size(self)

    def clear(self):
        """clear(vectorGLuint self)"""
        return _osg.vectorGLuint_clear(self)

    def swap(self, *args):
        """swap(vectorGLuint self, vectorGLuint v)"""
        return _osg.vectorGLuint_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorGLuint self) -> std::vector< unsigned int >::allocator_type"""
        return _osg.vectorGLuint_get_allocator(self)

    def begin(self):
        """begin(vectorGLuint self) -> std::vector< unsigned int >::iterator"""
        return _osg.vectorGLuint_begin(self)

    def end(self):
        """end(vectorGLuint self) -> std::vector< unsigned int >::iterator"""
        return _osg.vectorGLuint_end(self)

    def rbegin(self):
        """rbegin(vectorGLuint self) -> std::vector< unsigned int >::reverse_iterator"""
        return _osg.vectorGLuint_rbegin(self)

    def rend(self):
        """rend(vectorGLuint self) -> std::vector< unsigned int >::reverse_iterator"""
        return _osg.vectorGLuint_rend(self)

    def pop_back(self):
        """pop_back(vectorGLuint self)"""
        return _osg.vectorGLuint_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorGLuint self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(vectorGLuint self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _osg.vectorGLuint_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(GLuint)> self) -> vectorGLuint
        __init__(std::vector<(GLuint)> self, vectorGLuint arg2) -> vectorGLuint
        __init__(std::vector<(GLuint)> self, std::vector< unsigned int >::size_type size) -> vectorGLuint
        __init__(std::vector<(GLuint)> self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> vectorGLuint
        """
        this = _osg.new_vectorGLuint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorGLuint self, std::vector< unsigned int >::value_type const & x)"""
        return _osg.vectorGLuint_push_back(self, *args)

    def front(self):
        """front(vectorGLuint self) -> std::vector< unsigned int >::value_type const &"""
        return _osg.vectorGLuint_front(self)

    def back(self):
        """back(vectorGLuint self) -> std::vector< unsigned int >::value_type const &"""
        return _osg.vectorGLuint_back(self)

    def assign(self, *args):
        """assign(vectorGLuint self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _osg.vectorGLuint_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorGLuint self, std::vector< unsigned int >::size_type new_size)
        resize(vectorGLuint self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _osg.vectorGLuint_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorGLuint self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(vectorGLuint self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, 
            std::vector< unsigned int >::value_type const & x)
        """
        return _osg.vectorGLuint_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorGLuint self, std::vector< unsigned int >::size_type n)"""
        return _osg.vectorGLuint_reserve(self, *args)

    def capacity(self):
        """capacity(vectorGLuint self) -> std::vector< unsigned int >::size_type"""
        return _osg.vectorGLuint_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLuint
    __del__ = lambda self : None;
vectorGLuint_swigregister = _osg.vectorGLuint_swigregister
vectorGLuint_swigregister(vectorGLuint)

class vectorGLfloat(_object):
    """Proxy of C++ std::vector<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLfloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLfloat, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorGLfloat self) -> SwigPyIterator"""
        return _osg.vectorGLfloat_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorGLfloat self) -> bool"""
        return _osg.vectorGLfloat___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorGLfloat self) -> bool"""
        return _osg.vectorGLfloat___bool__(self)

    def __len__(self):
        """__len__(vectorGLfloat self) -> std::vector< float >::size_type"""
        return _osg.vectorGLfloat___len__(self)

    def pop(self):
        """pop(vectorGLfloat self) -> std::vector< float >::value_type"""
        return _osg.vectorGLfloat_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorGLfloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> vectorGLfloat"""
        return _osg.vectorGLfloat___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorGLfloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, 
            vectorGLfloat v=std::vector< float,std::allocator< float > >())
        __setslice__(vectorGLfloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        """
        return _osg.vectorGLfloat___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorGLfloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _osg.vectorGLfloat___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorGLfloat self, std::vector< float >::difference_type i)
        __delitem__(vectorGLfloat self, PySliceObject * slice)
        """
        return _osg.vectorGLfloat___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorGLfloat self, PySliceObject * slice) -> vectorGLfloat
        __getitem__(vectorGLfloat self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _osg.vectorGLfloat___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorGLfloat self, PySliceObject * slice, vectorGLfloat v)
        __setitem__(vectorGLfloat self, PySliceObject * slice)
        __setitem__(vectorGLfloat self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _osg.vectorGLfloat___setitem__(self, *args)

    def append(self, *args):
        """append(vectorGLfloat self, std::vector< float >::value_type const & x)"""
        return _osg.vectorGLfloat_append(self, *args)

    def empty(self):
        """empty(vectorGLfloat self) -> bool"""
        return _osg.vectorGLfloat_empty(self)

    def size(self):
        """size(vectorGLfloat self) -> std::vector< float >::size_type"""
        return _osg.vectorGLfloat_size(self)

    def clear(self):
        """clear(vectorGLfloat self)"""
        return _osg.vectorGLfloat_clear(self)

    def swap(self, *args):
        """swap(vectorGLfloat self, vectorGLfloat v)"""
        return _osg.vectorGLfloat_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorGLfloat self) -> std::vector< float >::allocator_type"""
        return _osg.vectorGLfloat_get_allocator(self)

    def begin(self):
        """begin(vectorGLfloat self) -> std::vector< float >::iterator"""
        return _osg.vectorGLfloat_begin(self)

    def end(self):
        """end(vectorGLfloat self) -> std::vector< float >::iterator"""
        return _osg.vectorGLfloat_end(self)

    def rbegin(self):
        """rbegin(vectorGLfloat self) -> std::vector< float >::reverse_iterator"""
        return _osg.vectorGLfloat_rbegin(self)

    def rend(self):
        """rend(vectorGLfloat self) -> std::vector< float >::reverse_iterator"""
        return _osg.vectorGLfloat_rend(self)

    def pop_back(self):
        """pop_back(vectorGLfloat self)"""
        return _osg.vectorGLfloat_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorGLfloat self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(vectorGLfloat self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _osg.vectorGLfloat_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(float)> self) -> vectorGLfloat
        __init__(std::vector<(float)> self, vectorGLfloat arg2) -> vectorGLfloat
        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> vectorGLfloat
        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> vectorGLfloat
        """
        this = _osg.new_vectorGLfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorGLfloat self, std::vector< float >::value_type const & x)"""
        return _osg.vectorGLfloat_push_back(self, *args)

    def front(self):
        """front(vectorGLfloat self) -> std::vector< float >::value_type const &"""
        return _osg.vectorGLfloat_front(self)

    def back(self):
        """back(vectorGLfloat self) -> std::vector< float >::value_type const &"""
        return _osg.vectorGLfloat_back(self)

    def assign(self, *args):
        """assign(vectorGLfloat self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _osg.vectorGLfloat_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorGLfloat self, std::vector< float >::size_type new_size)
        resize(vectorGLfloat self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _osg.vectorGLfloat_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorGLfloat self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(vectorGLfloat self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _osg.vectorGLfloat_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorGLfloat self, std::vector< float >::size_type n)"""
        return _osg.vectorGLfloat_reserve(self, *args)

    def capacity(self):
        """capacity(vectorGLfloat self) -> std::vector< float >::size_type"""
        return _osg.vectorGLfloat_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLfloat
    __del__ = lambda self : None;
vectorGLfloat_swigregister = _osg.vectorGLfloat_swigregister
vectorGLfloat_swigregister(vectorGLfloat)

class vectorVec2(_object):
    """Proxy of C++ std::vector<(osg::Vec2f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec2, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorVec2 self) -> SwigPyIterator"""
        return _osg.vectorVec2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorVec2 self) -> bool"""
        return _osg.vectorVec2___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorVec2 self) -> bool"""
        return _osg.vectorVec2___bool__(self)

    def __len__(self):
        """__len__(vectorVec2 self) -> std::vector< osg::Vec2f >::size_type"""
        return _osg.vectorVec2___len__(self)

    def pop(self):
        """pop(vectorVec2 self) -> Vec2f"""
        return _osg.vectorVec2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorVec2 self, std::vector< osg::Vec2f >::difference_type i, std::vector< osg::Vec2f >::difference_type j) -> vectorVec2"""
        return _osg.vectorVec2___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorVec2 self, std::vector< osg::Vec2f >::difference_type i, std::vector< osg::Vec2f >::difference_type j, 
            vectorVec2 v=std::vector< osg::Vec2f,std::allocator< osg::Vec2f > >())
        __setslice__(vectorVec2 self, std::vector< osg::Vec2f >::difference_type i, std::vector< osg::Vec2f >::difference_type j)
        """
        return _osg.vectorVec2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorVec2 self, std::vector< osg::Vec2f >::difference_type i, std::vector< osg::Vec2f >::difference_type j)"""
        return _osg.vectorVec2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorVec2 self, std::vector< osg::Vec2f >::difference_type i)
        __delitem__(vectorVec2 self, PySliceObject * slice)
        """
        return _osg.vectorVec2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorVec2 self, PySliceObject * slice) -> vectorVec2
        __getitem__(vectorVec2 self, std::vector< osg::Vec2f >::difference_type i) -> Vec2f
        """
        return _osg.vectorVec2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorVec2 self, PySliceObject * slice, vectorVec2 v)
        __setitem__(vectorVec2 self, PySliceObject * slice)
        __setitem__(vectorVec2 self, std::vector< osg::Vec2f >::difference_type i, Vec2f x)
        """
        return _osg.vectorVec2___setitem__(self, *args)

    def append(self, *args):
        """append(vectorVec2 self, Vec2f x)"""
        return _osg.vectorVec2_append(self, *args)

    def empty(self):
        """empty(vectorVec2 self) -> bool"""
        return _osg.vectorVec2_empty(self)

    def size(self):
        """size(vectorVec2 self) -> std::vector< osg::Vec2f >::size_type"""
        return _osg.vectorVec2_size(self)

    def clear(self):
        """clear(vectorVec2 self)"""
        return _osg.vectorVec2_clear(self)

    def swap(self, *args):
        """swap(vectorVec2 self, vectorVec2 v)"""
        return _osg.vectorVec2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorVec2 self) -> std::vector< osg::Vec2f >::allocator_type"""
        return _osg.vectorVec2_get_allocator(self)

    def begin(self):
        """begin(vectorVec2 self) -> std::vector< osg::Vec2f >::iterator"""
        return _osg.vectorVec2_begin(self)

    def end(self):
        """end(vectorVec2 self) -> std::vector< osg::Vec2f >::iterator"""
        return _osg.vectorVec2_end(self)

    def rbegin(self):
        """rbegin(vectorVec2 self) -> std::vector< osg::Vec2f >::reverse_iterator"""
        return _osg.vectorVec2_rbegin(self)

    def rend(self):
        """rend(vectorVec2 self) -> std::vector< osg::Vec2f >::reverse_iterator"""
        return _osg.vectorVec2_rend(self)

    def pop_back(self):
        """pop_back(vectorVec2 self)"""
        return _osg.vectorVec2_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorVec2 self, std::vector< osg::Vec2f >::iterator pos) -> std::vector< osg::Vec2f >::iterator
        erase(vectorVec2 self, std::vector< osg::Vec2f >::iterator first, std::vector< osg::Vec2f >::iterator last) -> std::vector< osg::Vec2f >::iterator
        """
        return _osg.vectorVec2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(osg::Vec2f)> self) -> vectorVec2
        __init__(std::vector<(osg::Vec2f)> self, vectorVec2 arg2) -> vectorVec2
        __init__(std::vector<(osg::Vec2f)> self, std::vector< osg::Vec2f >::size_type size) -> vectorVec2
        __init__(std::vector<(osg::Vec2f)> self, std::vector< osg::Vec2f >::size_type size, Vec2f value) -> vectorVec2
        """
        this = _osg.new_vectorVec2(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorVec2 self, Vec2f x)"""
        return _osg.vectorVec2_push_back(self, *args)

    def front(self):
        """front(vectorVec2 self) -> Vec2f"""
        return _osg.vectorVec2_front(self)

    def back(self):
        """back(vectorVec2 self) -> Vec2f"""
        return _osg.vectorVec2_back(self)

    def assign(self, *args):
        """assign(vectorVec2 self, std::vector< osg::Vec2f >::size_type n, Vec2f x)"""
        return _osg.vectorVec2_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorVec2 self, std::vector< osg::Vec2f >::size_type new_size)
        resize(vectorVec2 self, std::vector< osg::Vec2f >::size_type new_size, Vec2f x)
        """
        return _osg.vectorVec2_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorVec2 self, std::vector< osg::Vec2f >::iterator pos, Vec2f x) -> std::vector< osg::Vec2f >::iterator
        insert(vectorVec2 self, std::vector< osg::Vec2f >::iterator pos, std::vector< osg::Vec2f >::size_type n, 
            Vec2f x)
        """
        return _osg.vectorVec2_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorVec2 self, std::vector< osg::Vec2f >::size_type n)"""
        return _osg.vectorVec2_reserve(self, *args)

    def capacity(self):
        """capacity(vectorVec2 self) -> std::vector< osg::Vec2f >::size_type"""
        return _osg.vectorVec2_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec2
    __del__ = lambda self : None;
vectorVec2_swigregister = _osg.vectorVec2_swigregister
vectorVec2_swigregister(vectorVec2)

class vectorVec3(_object):
    """Proxy of C++ std::vector<(osg::Vec3f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec3, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorVec3 self) -> SwigPyIterator"""
        return _osg.vectorVec3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorVec3 self) -> bool"""
        return _osg.vectorVec3___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorVec3 self) -> bool"""
        return _osg.vectorVec3___bool__(self)

    def __len__(self):
        """__len__(vectorVec3 self) -> std::vector< osg::Vec3f >::size_type"""
        return _osg.vectorVec3___len__(self)

    def pop(self):
        """pop(vectorVec3 self) -> Vec3f"""
        return _osg.vectorVec3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorVec3 self, std::vector< osg::Vec3f >::difference_type i, std::vector< osg::Vec3f >::difference_type j) -> vectorVec3"""
        return _osg.vectorVec3___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorVec3 self, std::vector< osg::Vec3f >::difference_type i, std::vector< osg::Vec3f >::difference_type j, 
            vectorVec3 v=std::vector< osg::Vec3f,std::allocator< osg::Vec3f > >())
        __setslice__(vectorVec3 self, std::vector< osg::Vec3f >::difference_type i, std::vector< osg::Vec3f >::difference_type j)
        """
        return _osg.vectorVec3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorVec3 self, std::vector< osg::Vec3f >::difference_type i, std::vector< osg::Vec3f >::difference_type j)"""
        return _osg.vectorVec3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorVec3 self, std::vector< osg::Vec3f >::difference_type i)
        __delitem__(vectorVec3 self, PySliceObject * slice)
        """
        return _osg.vectorVec3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorVec3 self, PySliceObject * slice) -> vectorVec3
        __getitem__(vectorVec3 self, std::vector< osg::Vec3f >::difference_type i) -> Vec3f
        """
        return _osg.vectorVec3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorVec3 self, PySliceObject * slice, vectorVec3 v)
        __setitem__(vectorVec3 self, PySliceObject * slice)
        __setitem__(vectorVec3 self, std::vector< osg::Vec3f >::difference_type i, Vec3f x)
        """
        return _osg.vectorVec3___setitem__(self, *args)

    def append(self, *args):
        """append(vectorVec3 self, Vec3f x)"""
        return _osg.vectorVec3_append(self, *args)

    def empty(self):
        """empty(vectorVec3 self) -> bool"""
        return _osg.vectorVec3_empty(self)

    def size(self):
        """size(vectorVec3 self) -> std::vector< osg::Vec3f >::size_type"""
        return _osg.vectorVec3_size(self)

    def clear(self):
        """clear(vectorVec3 self)"""
        return _osg.vectorVec3_clear(self)

    def swap(self, *args):
        """swap(vectorVec3 self, vectorVec3 v)"""
        return _osg.vectorVec3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorVec3 self) -> std::vector< osg::Vec3f >::allocator_type"""
        return _osg.vectorVec3_get_allocator(self)

    def begin(self):
        """begin(vectorVec3 self) -> std::vector< osg::Vec3f >::iterator"""
        return _osg.vectorVec3_begin(self)

    def end(self):
        """end(vectorVec3 self) -> std::vector< osg::Vec3f >::iterator"""
        return _osg.vectorVec3_end(self)

    def rbegin(self):
        """rbegin(vectorVec3 self) -> std::vector< osg::Vec3f >::reverse_iterator"""
        return _osg.vectorVec3_rbegin(self)

    def rend(self):
        """rend(vectorVec3 self) -> std::vector< osg::Vec3f >::reverse_iterator"""
        return _osg.vectorVec3_rend(self)

    def pop_back(self):
        """pop_back(vectorVec3 self)"""
        return _osg.vectorVec3_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorVec3 self, std::vector< osg::Vec3f >::iterator pos) -> std::vector< osg::Vec3f >::iterator
        erase(vectorVec3 self, std::vector< osg::Vec3f >::iterator first, std::vector< osg::Vec3f >::iterator last) -> std::vector< osg::Vec3f >::iterator
        """
        return _osg.vectorVec3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(osg::Vec3f)> self) -> vectorVec3
        __init__(std::vector<(osg::Vec3f)> self, vectorVec3 arg2) -> vectorVec3
        __init__(std::vector<(osg::Vec3f)> self, std::vector< osg::Vec3f >::size_type size) -> vectorVec3
        __init__(std::vector<(osg::Vec3f)> self, std::vector< osg::Vec3f >::size_type size, Vec3f value) -> vectorVec3
        """
        this = _osg.new_vectorVec3(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorVec3 self, Vec3f x)"""
        return _osg.vectorVec3_push_back(self, *args)

    def front(self):
        """front(vectorVec3 self) -> Vec3f"""
        return _osg.vectorVec3_front(self)

    def back(self):
        """back(vectorVec3 self) -> Vec3f"""
        return _osg.vectorVec3_back(self)

    def assign(self, *args):
        """assign(vectorVec3 self, std::vector< osg::Vec3f >::size_type n, Vec3f x)"""
        return _osg.vectorVec3_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorVec3 self, std::vector< osg::Vec3f >::size_type new_size)
        resize(vectorVec3 self, std::vector< osg::Vec3f >::size_type new_size, Vec3f x)
        """
        return _osg.vectorVec3_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorVec3 self, std::vector< osg::Vec3f >::iterator pos, Vec3f x) -> std::vector< osg::Vec3f >::iterator
        insert(vectorVec3 self, std::vector< osg::Vec3f >::iterator pos, std::vector< osg::Vec3f >::size_type n, 
            Vec3f x)
        """
        return _osg.vectorVec3_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorVec3 self, std::vector< osg::Vec3f >::size_type n)"""
        return _osg.vectorVec3_reserve(self, *args)

    def capacity(self):
        """capacity(vectorVec3 self) -> std::vector< osg::Vec3f >::size_type"""
        return _osg.vectorVec3_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec3
    __del__ = lambda self : None;
vectorVec3_swigregister = _osg.vectorVec3_swigregister
vectorVec3_swigregister(vectorVec3)

class vectorVec4(_object):
    """Proxy of C++ std::vector<(osg::Vec4f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec4, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorVec4 self) -> SwigPyIterator"""
        return _osg.vectorVec4_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorVec4 self) -> bool"""
        return _osg.vectorVec4___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorVec4 self) -> bool"""
        return _osg.vectorVec4___bool__(self)

    def __len__(self):
        """__len__(vectorVec4 self) -> std::vector< osg::Vec4f >::size_type"""
        return _osg.vectorVec4___len__(self)

    def pop(self):
        """pop(vectorVec4 self) -> Vec4f"""
        return _osg.vectorVec4_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorVec4 self, std::vector< osg::Vec4f >::difference_type i, std::vector< osg::Vec4f >::difference_type j) -> vectorVec4"""
        return _osg.vectorVec4___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorVec4 self, std::vector< osg::Vec4f >::difference_type i, std::vector< osg::Vec4f >::difference_type j, 
            vectorVec4 v=std::vector< osg::Vec4f,std::allocator< osg::Vec4f > >())
        __setslice__(vectorVec4 self, std::vector< osg::Vec4f >::difference_type i, std::vector< osg::Vec4f >::difference_type j)
        """
        return _osg.vectorVec4___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorVec4 self, std::vector< osg::Vec4f >::difference_type i, std::vector< osg::Vec4f >::difference_type j)"""
        return _osg.vectorVec4___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorVec4 self, std::vector< osg::Vec4f >::difference_type i)
        __delitem__(vectorVec4 self, PySliceObject * slice)
        """
        return _osg.vectorVec4___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorVec4 self, PySliceObject * slice) -> vectorVec4
        __getitem__(vectorVec4 self, std::vector< osg::Vec4f >::difference_type i) -> Vec4f
        """
        return _osg.vectorVec4___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorVec4 self, PySliceObject * slice, vectorVec4 v)
        __setitem__(vectorVec4 self, PySliceObject * slice)
        __setitem__(vectorVec4 self, std::vector< osg::Vec4f >::difference_type i, Vec4f x)
        """
        return _osg.vectorVec4___setitem__(self, *args)

    def append(self, *args):
        """append(vectorVec4 self, Vec4f x)"""
        return _osg.vectorVec4_append(self, *args)

    def empty(self):
        """empty(vectorVec4 self) -> bool"""
        return _osg.vectorVec4_empty(self)

    def size(self):
        """size(vectorVec4 self) -> std::vector< osg::Vec4f >::size_type"""
        return _osg.vectorVec4_size(self)

    def clear(self):
        """clear(vectorVec4 self)"""
        return _osg.vectorVec4_clear(self)

    def swap(self, *args):
        """swap(vectorVec4 self, vectorVec4 v)"""
        return _osg.vectorVec4_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorVec4 self) -> std::vector< osg::Vec4f >::allocator_type"""
        return _osg.vectorVec4_get_allocator(self)

    def begin(self):
        """begin(vectorVec4 self) -> std::vector< osg::Vec4f >::iterator"""
        return _osg.vectorVec4_begin(self)

    def end(self):
        """end(vectorVec4 self) -> std::vector< osg::Vec4f >::iterator"""
        return _osg.vectorVec4_end(self)

    def rbegin(self):
        """rbegin(vectorVec4 self) -> std::vector< osg::Vec4f >::reverse_iterator"""
        return _osg.vectorVec4_rbegin(self)

    def rend(self):
        """rend(vectorVec4 self) -> std::vector< osg::Vec4f >::reverse_iterator"""
        return _osg.vectorVec4_rend(self)

    def pop_back(self):
        """pop_back(vectorVec4 self)"""
        return _osg.vectorVec4_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorVec4 self, std::vector< osg::Vec4f >::iterator pos) -> std::vector< osg::Vec4f >::iterator
        erase(vectorVec4 self, std::vector< osg::Vec4f >::iterator first, std::vector< osg::Vec4f >::iterator last) -> std::vector< osg::Vec4f >::iterator
        """
        return _osg.vectorVec4_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(osg::Vec4f)> self) -> vectorVec4
        __init__(std::vector<(osg::Vec4f)> self, vectorVec4 arg2) -> vectorVec4
        __init__(std::vector<(osg::Vec4f)> self, std::vector< osg::Vec4f >::size_type size) -> vectorVec4
        __init__(std::vector<(osg::Vec4f)> self, std::vector< osg::Vec4f >::size_type size, Vec4f value) -> vectorVec4
        """
        this = _osg.new_vectorVec4(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorVec4 self, Vec4f x)"""
        return _osg.vectorVec4_push_back(self, *args)

    def front(self):
        """front(vectorVec4 self) -> Vec4f"""
        return _osg.vectorVec4_front(self)

    def back(self):
        """back(vectorVec4 self) -> Vec4f"""
        return _osg.vectorVec4_back(self)

    def assign(self, *args):
        """assign(vectorVec4 self, std::vector< osg::Vec4f >::size_type n, Vec4f x)"""
        return _osg.vectorVec4_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorVec4 self, std::vector< osg::Vec4f >::size_type new_size)
        resize(vectorVec4 self, std::vector< osg::Vec4f >::size_type new_size, Vec4f x)
        """
        return _osg.vectorVec4_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorVec4 self, std::vector< osg::Vec4f >::iterator pos, Vec4f x) -> std::vector< osg::Vec4f >::iterator
        insert(vectorVec4 self, std::vector< osg::Vec4f >::iterator pos, std::vector< osg::Vec4f >::size_type n, 
            Vec4f x)
        """
        return _osg.vectorVec4_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorVec4 self, std::vector< osg::Vec4f >::size_type n)"""
        return _osg.vectorVec4_reserve(self, *args)

    def capacity(self):
        """capacity(vectorVec4 self) -> std::vector< osg::Vec4f >::size_type"""
        return _osg.vectorVec4_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec4
    __del__ = lambda self : None;
vectorVec4_swigregister = _osg.vectorVec4_swigregister
vectorVec4_swigregister(vectorVec4)

class vectorVec2d(_object):
    """Proxy of C++ std::vector<(osg::Vec2d)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec2d, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorVec2d self) -> SwigPyIterator"""
        return _osg.vectorVec2d_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorVec2d self) -> bool"""
        return _osg.vectorVec2d___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorVec2d self) -> bool"""
        return _osg.vectorVec2d___bool__(self)

    def __len__(self):
        """__len__(vectorVec2d self) -> std::vector< osg::Vec2d >::size_type"""
        return _osg.vectorVec2d___len__(self)

    def pop(self):
        """pop(vectorVec2d self) -> Vec2d"""
        return _osg.vectorVec2d_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorVec2d self, std::vector< osg::Vec2d >::difference_type i, std::vector< osg::Vec2d >::difference_type j) -> vectorVec2d"""
        return _osg.vectorVec2d___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorVec2d self, std::vector< osg::Vec2d >::difference_type i, std::vector< osg::Vec2d >::difference_type j, 
            vectorVec2d v=std::vector< osg::Vec2d,std::allocator< osg::Vec2d > >())
        __setslice__(vectorVec2d self, std::vector< osg::Vec2d >::difference_type i, std::vector< osg::Vec2d >::difference_type j)
        """
        return _osg.vectorVec2d___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorVec2d self, std::vector< osg::Vec2d >::difference_type i, std::vector< osg::Vec2d >::difference_type j)"""
        return _osg.vectorVec2d___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorVec2d self, std::vector< osg::Vec2d >::difference_type i)
        __delitem__(vectorVec2d self, PySliceObject * slice)
        """
        return _osg.vectorVec2d___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorVec2d self, PySliceObject * slice) -> vectorVec2d
        __getitem__(vectorVec2d self, std::vector< osg::Vec2d >::difference_type i) -> Vec2d
        """
        return _osg.vectorVec2d___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorVec2d self, PySliceObject * slice, vectorVec2d v)
        __setitem__(vectorVec2d self, PySliceObject * slice)
        __setitem__(vectorVec2d self, std::vector< osg::Vec2d >::difference_type i, Vec2d x)
        """
        return _osg.vectorVec2d___setitem__(self, *args)

    def append(self, *args):
        """append(vectorVec2d self, Vec2d x)"""
        return _osg.vectorVec2d_append(self, *args)

    def empty(self):
        """empty(vectorVec2d self) -> bool"""
        return _osg.vectorVec2d_empty(self)

    def size(self):
        """size(vectorVec2d self) -> std::vector< osg::Vec2d >::size_type"""
        return _osg.vectorVec2d_size(self)

    def clear(self):
        """clear(vectorVec2d self)"""
        return _osg.vectorVec2d_clear(self)

    def swap(self, *args):
        """swap(vectorVec2d self, vectorVec2d v)"""
        return _osg.vectorVec2d_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorVec2d self) -> std::vector< osg::Vec2d >::allocator_type"""
        return _osg.vectorVec2d_get_allocator(self)

    def begin(self):
        """begin(vectorVec2d self) -> std::vector< osg::Vec2d >::iterator"""
        return _osg.vectorVec2d_begin(self)

    def end(self):
        """end(vectorVec2d self) -> std::vector< osg::Vec2d >::iterator"""
        return _osg.vectorVec2d_end(self)

    def rbegin(self):
        """rbegin(vectorVec2d self) -> std::vector< osg::Vec2d >::reverse_iterator"""
        return _osg.vectorVec2d_rbegin(self)

    def rend(self):
        """rend(vectorVec2d self) -> std::vector< osg::Vec2d >::reverse_iterator"""
        return _osg.vectorVec2d_rend(self)

    def pop_back(self):
        """pop_back(vectorVec2d self)"""
        return _osg.vectorVec2d_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorVec2d self, std::vector< osg::Vec2d >::iterator pos) -> std::vector< osg::Vec2d >::iterator
        erase(vectorVec2d self, std::vector< osg::Vec2d >::iterator first, std::vector< osg::Vec2d >::iterator last) -> std::vector< osg::Vec2d >::iterator
        """
        return _osg.vectorVec2d_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(osg::Vec2d)> self) -> vectorVec2d
        __init__(std::vector<(osg::Vec2d)> self, vectorVec2d arg2) -> vectorVec2d
        __init__(std::vector<(osg::Vec2d)> self, std::vector< osg::Vec2d >::size_type size) -> vectorVec2d
        __init__(std::vector<(osg::Vec2d)> self, std::vector< osg::Vec2d >::size_type size, Vec2d value) -> vectorVec2d
        """
        this = _osg.new_vectorVec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorVec2d self, Vec2d x)"""
        return _osg.vectorVec2d_push_back(self, *args)

    def front(self):
        """front(vectorVec2d self) -> Vec2d"""
        return _osg.vectorVec2d_front(self)

    def back(self):
        """back(vectorVec2d self) -> Vec2d"""
        return _osg.vectorVec2d_back(self)

    def assign(self, *args):
        """assign(vectorVec2d self, std::vector< osg::Vec2d >::size_type n, Vec2d x)"""
        return _osg.vectorVec2d_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorVec2d self, std::vector< osg::Vec2d >::size_type new_size)
        resize(vectorVec2d self, std::vector< osg::Vec2d >::size_type new_size, Vec2d x)
        """
        return _osg.vectorVec2d_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorVec2d self, std::vector< osg::Vec2d >::iterator pos, Vec2d x) -> std::vector< osg::Vec2d >::iterator
        insert(vectorVec2d self, std::vector< osg::Vec2d >::iterator pos, std::vector< osg::Vec2d >::size_type n, 
            Vec2d x)
        """
        return _osg.vectorVec2d_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorVec2d self, std::vector< osg::Vec2d >::size_type n)"""
        return _osg.vectorVec2d_reserve(self, *args)

    def capacity(self):
        """capacity(vectorVec2d self) -> std::vector< osg::Vec2d >::size_type"""
        return _osg.vectorVec2d_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec2d
    __del__ = lambda self : None;
vectorVec2d_swigregister = _osg.vectorVec2d_swigregister
vectorVec2d_swigregister(vectorVec2d)

class vectorVec3d(_object):
    """Proxy of C++ std::vector<(osg::Vec3d)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec3d, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorVec3d self) -> SwigPyIterator"""
        return _osg.vectorVec3d_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorVec3d self) -> bool"""
        return _osg.vectorVec3d___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorVec3d self) -> bool"""
        return _osg.vectorVec3d___bool__(self)

    def __len__(self):
        """__len__(vectorVec3d self) -> std::vector< osg::Vec3d >::size_type"""
        return _osg.vectorVec3d___len__(self)

    def pop(self):
        """pop(vectorVec3d self) -> Vec3d"""
        return _osg.vectorVec3d_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorVec3d self, std::vector< osg::Vec3d >::difference_type i, std::vector< osg::Vec3d >::difference_type j) -> vectorVec3d"""
        return _osg.vectorVec3d___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorVec3d self, std::vector< osg::Vec3d >::difference_type i, std::vector< osg::Vec3d >::difference_type j, 
            vectorVec3d v=std::vector< osg::Vec3d,std::allocator< osg::Vec3d > >())
        __setslice__(vectorVec3d self, std::vector< osg::Vec3d >::difference_type i, std::vector< osg::Vec3d >::difference_type j)
        """
        return _osg.vectorVec3d___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorVec3d self, std::vector< osg::Vec3d >::difference_type i, std::vector< osg::Vec3d >::difference_type j)"""
        return _osg.vectorVec3d___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorVec3d self, std::vector< osg::Vec3d >::difference_type i)
        __delitem__(vectorVec3d self, PySliceObject * slice)
        """
        return _osg.vectorVec3d___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorVec3d self, PySliceObject * slice) -> vectorVec3d
        __getitem__(vectorVec3d self, std::vector< osg::Vec3d >::difference_type i) -> Vec3d
        """
        return _osg.vectorVec3d___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorVec3d self, PySliceObject * slice, vectorVec3d v)
        __setitem__(vectorVec3d self, PySliceObject * slice)
        __setitem__(vectorVec3d self, std::vector< osg::Vec3d >::difference_type i, Vec3d x)
        """
        return _osg.vectorVec3d___setitem__(self, *args)

    def append(self, *args):
        """append(vectorVec3d self, Vec3d x)"""
        return _osg.vectorVec3d_append(self, *args)

    def empty(self):
        """empty(vectorVec3d self) -> bool"""
        return _osg.vectorVec3d_empty(self)

    def size(self):
        """size(vectorVec3d self) -> std::vector< osg::Vec3d >::size_type"""
        return _osg.vectorVec3d_size(self)

    def clear(self):
        """clear(vectorVec3d self)"""
        return _osg.vectorVec3d_clear(self)

    def swap(self, *args):
        """swap(vectorVec3d self, vectorVec3d v)"""
        return _osg.vectorVec3d_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorVec3d self) -> std::vector< osg::Vec3d >::allocator_type"""
        return _osg.vectorVec3d_get_allocator(self)

    def begin(self):
        """begin(vectorVec3d self) -> std::vector< osg::Vec3d >::iterator"""
        return _osg.vectorVec3d_begin(self)

    def end(self):
        """end(vectorVec3d self) -> std::vector< osg::Vec3d >::iterator"""
        return _osg.vectorVec3d_end(self)

    def rbegin(self):
        """rbegin(vectorVec3d self) -> std::vector< osg::Vec3d >::reverse_iterator"""
        return _osg.vectorVec3d_rbegin(self)

    def rend(self):
        """rend(vectorVec3d self) -> std::vector< osg::Vec3d >::reverse_iterator"""
        return _osg.vectorVec3d_rend(self)

    def pop_back(self):
        """pop_back(vectorVec3d self)"""
        return _osg.vectorVec3d_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorVec3d self, std::vector< osg::Vec3d >::iterator pos) -> std::vector< osg::Vec3d >::iterator
        erase(vectorVec3d self, std::vector< osg::Vec3d >::iterator first, std::vector< osg::Vec3d >::iterator last) -> std::vector< osg::Vec3d >::iterator
        """
        return _osg.vectorVec3d_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(osg::Vec3d)> self) -> vectorVec3d
        __init__(std::vector<(osg::Vec3d)> self, vectorVec3d arg2) -> vectorVec3d
        __init__(std::vector<(osg::Vec3d)> self, std::vector< osg::Vec3d >::size_type size) -> vectorVec3d
        __init__(std::vector<(osg::Vec3d)> self, std::vector< osg::Vec3d >::size_type size, Vec3d value) -> vectorVec3d
        """
        this = _osg.new_vectorVec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorVec3d self, Vec3d x)"""
        return _osg.vectorVec3d_push_back(self, *args)

    def front(self):
        """front(vectorVec3d self) -> Vec3d"""
        return _osg.vectorVec3d_front(self)

    def back(self):
        """back(vectorVec3d self) -> Vec3d"""
        return _osg.vectorVec3d_back(self)

    def assign(self, *args):
        """assign(vectorVec3d self, std::vector< osg::Vec3d >::size_type n, Vec3d x)"""
        return _osg.vectorVec3d_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorVec3d self, std::vector< osg::Vec3d >::size_type new_size)
        resize(vectorVec3d self, std::vector< osg::Vec3d >::size_type new_size, Vec3d x)
        """
        return _osg.vectorVec3d_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorVec3d self, std::vector< osg::Vec3d >::iterator pos, Vec3d x) -> std::vector< osg::Vec3d >::iterator
        insert(vectorVec3d self, std::vector< osg::Vec3d >::iterator pos, std::vector< osg::Vec3d >::size_type n, 
            Vec3d x)
        """
        return _osg.vectorVec3d_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorVec3d self, std::vector< osg::Vec3d >::size_type n)"""
        return _osg.vectorVec3d_reserve(self, *args)

    def capacity(self):
        """capacity(vectorVec3d self) -> std::vector< osg::Vec3d >::size_type"""
        return _osg.vectorVec3d_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec3d
    __del__ = lambda self : None;
vectorVec3d_swigregister = _osg.vectorVec3d_swigregister
vectorVec3d_swigregister(vectorVec3d)

class vectorVec4d(_object):
    """Proxy of C++ std::vector<(osg::Vec4d)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec4d, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorVec4d self) -> SwigPyIterator"""
        return _osg.vectorVec4d_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorVec4d self) -> bool"""
        return _osg.vectorVec4d___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorVec4d self) -> bool"""
        return _osg.vectorVec4d___bool__(self)

    def __len__(self):
        """__len__(vectorVec4d self) -> std::vector< osg::Vec4d >::size_type"""
        return _osg.vectorVec4d___len__(self)

    def pop(self):
        """pop(vectorVec4d self) -> Vec4d"""
        return _osg.vectorVec4d_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorVec4d self, std::vector< osg::Vec4d >::difference_type i, std::vector< osg::Vec4d >::difference_type j) -> vectorVec4d"""
        return _osg.vectorVec4d___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorVec4d self, std::vector< osg::Vec4d >::difference_type i, std::vector< osg::Vec4d >::difference_type j, 
            vectorVec4d v=std::vector< osg::Vec4d,std::allocator< osg::Vec4d > >())
        __setslice__(vectorVec4d self, std::vector< osg::Vec4d >::difference_type i, std::vector< osg::Vec4d >::difference_type j)
        """
        return _osg.vectorVec4d___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorVec4d self, std::vector< osg::Vec4d >::difference_type i, std::vector< osg::Vec4d >::difference_type j)"""
        return _osg.vectorVec4d___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorVec4d self, std::vector< osg::Vec4d >::difference_type i)
        __delitem__(vectorVec4d self, PySliceObject * slice)
        """
        return _osg.vectorVec4d___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorVec4d self, PySliceObject * slice) -> vectorVec4d
        __getitem__(vectorVec4d self, std::vector< osg::Vec4d >::difference_type i) -> Vec4d
        """
        return _osg.vectorVec4d___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorVec4d self, PySliceObject * slice, vectorVec4d v)
        __setitem__(vectorVec4d self, PySliceObject * slice)
        __setitem__(vectorVec4d self, std::vector< osg::Vec4d >::difference_type i, Vec4d x)
        """
        return _osg.vectorVec4d___setitem__(self, *args)

    def append(self, *args):
        """append(vectorVec4d self, Vec4d x)"""
        return _osg.vectorVec4d_append(self, *args)

    def empty(self):
        """empty(vectorVec4d self) -> bool"""
        return _osg.vectorVec4d_empty(self)

    def size(self):
        """size(vectorVec4d self) -> std::vector< osg::Vec4d >::size_type"""
        return _osg.vectorVec4d_size(self)

    def clear(self):
        """clear(vectorVec4d self)"""
        return _osg.vectorVec4d_clear(self)

    def swap(self, *args):
        """swap(vectorVec4d self, vectorVec4d v)"""
        return _osg.vectorVec4d_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorVec4d self) -> std::vector< osg::Vec4d >::allocator_type"""
        return _osg.vectorVec4d_get_allocator(self)

    def begin(self):
        """begin(vectorVec4d self) -> std::vector< osg::Vec4d >::iterator"""
        return _osg.vectorVec4d_begin(self)

    def end(self):
        """end(vectorVec4d self) -> std::vector< osg::Vec4d >::iterator"""
        return _osg.vectorVec4d_end(self)

    def rbegin(self):
        """rbegin(vectorVec4d self) -> std::vector< osg::Vec4d >::reverse_iterator"""
        return _osg.vectorVec4d_rbegin(self)

    def rend(self):
        """rend(vectorVec4d self) -> std::vector< osg::Vec4d >::reverse_iterator"""
        return _osg.vectorVec4d_rend(self)

    def pop_back(self):
        """pop_back(vectorVec4d self)"""
        return _osg.vectorVec4d_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorVec4d self, std::vector< osg::Vec4d >::iterator pos) -> std::vector< osg::Vec4d >::iterator
        erase(vectorVec4d self, std::vector< osg::Vec4d >::iterator first, std::vector< osg::Vec4d >::iterator last) -> std::vector< osg::Vec4d >::iterator
        """
        return _osg.vectorVec4d_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(osg::Vec4d)> self) -> vectorVec4d
        __init__(std::vector<(osg::Vec4d)> self, vectorVec4d arg2) -> vectorVec4d
        __init__(std::vector<(osg::Vec4d)> self, std::vector< osg::Vec4d >::size_type size) -> vectorVec4d
        __init__(std::vector<(osg::Vec4d)> self, std::vector< osg::Vec4d >::size_type size, Vec4d value) -> vectorVec4d
        """
        this = _osg.new_vectorVec4d(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorVec4d self, Vec4d x)"""
        return _osg.vectorVec4d_push_back(self, *args)

    def front(self):
        """front(vectorVec4d self) -> Vec4d"""
        return _osg.vectorVec4d_front(self)

    def back(self):
        """back(vectorVec4d self) -> Vec4d"""
        return _osg.vectorVec4d_back(self)

    def assign(self, *args):
        """assign(vectorVec4d self, std::vector< osg::Vec4d >::size_type n, Vec4d x)"""
        return _osg.vectorVec4d_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorVec4d self, std::vector< osg::Vec4d >::size_type new_size)
        resize(vectorVec4d self, std::vector< osg::Vec4d >::size_type new_size, Vec4d x)
        """
        return _osg.vectorVec4d_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorVec4d self, std::vector< osg::Vec4d >::iterator pos, Vec4d x) -> std::vector< osg::Vec4d >::iterator
        insert(vectorVec4d self, std::vector< osg::Vec4d >::iterator pos, std::vector< osg::Vec4d >::size_type n, 
            Vec4d x)
        """
        return _osg.vectorVec4d_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorVec4d self, std::vector< osg::Vec4d >::size_type n)"""
        return _osg.vectorVec4d_reserve(self, *args)

    def capacity(self):
        """capacity(vectorVec4d self) -> std::vector< osg::Vec4d >::size_type"""
        return _osg.vectorVec4d_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec4d
    __del__ = lambda self : None;
vectorVec4d_swigregister = _osg.vectorVec4d_swigregister
vectorVec4d_swigregister(vectorVec4d)

class ShortArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLshort,osg::Array::ShortArrayType,1,0x1402)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateIndexArray<(GLshort,osg::Array::ShortArrayType,1,0x1402)> self) -> ShortArray
        __init__(osg::TemplateIndexArray<(GLshort,osg::Array::ShortArrayType,1,0x1402)> self, ShortArray ta, CopyOp copyop=SHALLOW_COPY) -> ShortArray
        __init__(osg::TemplateIndexArray<(GLshort,osg::Array::ShortArrayType,1,0x1402)> self, ShortArray ta) -> ShortArray
        __init__(osg::TemplateIndexArray<(GLshort,osg::Array::ShortArrayType,1,0x1402)> self, unsigned int no) -> ShortArray
        __init__(osg::TemplateIndexArray<(GLshort,osg::Array::ShortArrayType,1,0x1402)> self, unsigned int no, short * ptr) -> ShortArray
        """
        this = _osg.new_ShortArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ShortArray self) -> Object"""
        return _osg.ShortArray_cloneType(self)

    def clone(self, *args):
        """clone(ShortArray self, CopyOp copyop) -> Object"""
        return _osg.ShortArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(ShortArray self, ArrayVisitor av)
        accept(ShortArray self, ConstArrayVisitor av)
        accept(ShortArray self, unsigned int index, ValueVisitor vv)
        accept(ShortArray self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.ShortArray_accept(self, *args)

    def compare(self, *args):
        """compare(ShortArray self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.ShortArray_compare(self, *args)

    def trim(self):
        """trim(ShortArray self)"""
        return _osg.ShortArray_trim(self)

    def getElementSize(self):
        """getElementSize(ShortArray self) -> unsigned int"""
        return _osg.ShortArray_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(ShortArray self) -> GLvoid const *"""
        return _osg.ShortArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(ShortArray self) -> unsigned int"""
        return _osg.ShortArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(ShortArray self) -> unsigned int"""
        return _osg.ShortArray_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(ShortArray self, unsigned int num)"""
        return _osg.ShortArray_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(ShortArray self, unsigned int num)"""
        return _osg.ShortArray_resizeArray(self, *args)

    def index(self, *args):
        """index(ShortArray self, unsigned int pos) -> unsigned int"""
        return _osg.ShortArray_index(self, *args)

    def asVector(self):
        """asVector(ShortArray self) -> vectorGLshort"""
        return _osg.ShortArray_asVector(self)

    def push_back(self, *args):
        """push_back(ShortArray self, GLshort el)"""
        return _osg.ShortArray_push_back(self, *args)

    def size(self):
        """size(ShortArray self) -> int"""
        return _osg.ShortArray_size(self)

ShortArray_swigregister = _osg.ShortArray_swigregister
ShortArray_swigregister(ShortArray)

class IntArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLint,osg::Array::IntArrayType,1,0x1404)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateIndexArray<(GLint,osg::Array::IntArrayType,1,0x1404)> self) -> IntArray
        __init__(osg::TemplateIndexArray<(GLint,osg::Array::IntArrayType,1,0x1404)> self, IntArray ta, CopyOp copyop=SHALLOW_COPY) -> IntArray
        __init__(osg::TemplateIndexArray<(GLint,osg::Array::IntArrayType,1,0x1404)> self, IntArray ta) -> IntArray
        __init__(osg::TemplateIndexArray<(GLint,osg::Array::IntArrayType,1,0x1404)> self, unsigned int no) -> IntArray
        __init__(osg::TemplateIndexArray<(GLint,osg::Array::IntArrayType,1,0x1404)> self, unsigned int no, int * ptr) -> IntArray
        """
        this = _osg.new_IntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(IntArray self) -> Object"""
        return _osg.IntArray_cloneType(self)

    def clone(self, *args):
        """clone(IntArray self, CopyOp copyop) -> Object"""
        return _osg.IntArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(IntArray self, ArrayVisitor av)
        accept(IntArray self, ConstArrayVisitor av)
        accept(IntArray self, unsigned int index, ValueVisitor vv)
        accept(IntArray self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.IntArray_accept(self, *args)

    def compare(self, *args):
        """compare(IntArray self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.IntArray_compare(self, *args)

    def trim(self):
        """trim(IntArray self)"""
        return _osg.IntArray_trim(self)

    def getElementSize(self):
        """getElementSize(IntArray self) -> unsigned int"""
        return _osg.IntArray_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(IntArray self) -> GLvoid const *"""
        return _osg.IntArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(IntArray self) -> unsigned int"""
        return _osg.IntArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(IntArray self) -> unsigned int"""
        return _osg.IntArray_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(IntArray self, unsigned int num)"""
        return _osg.IntArray_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(IntArray self, unsigned int num)"""
        return _osg.IntArray_resizeArray(self, *args)

    def index(self, *args):
        """index(IntArray self, unsigned int pos) -> unsigned int"""
        return _osg.IntArray_index(self, *args)

    def asVector(self):
        """asVector(IntArray self) -> vectorGLint"""
        return _osg.IntArray_asVector(self)

    def push_back(self, *args):
        """push_back(IntArray self, GLint el)"""
        return _osg.IntArray_push_back(self, *args)

    def size(self):
        """size(IntArray self) -> int"""
        return _osg.IntArray_size(self)

IntArray_swigregister = _osg.IntArray_swigregister
IntArray_swigregister(IntArray)

class UByteArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLubyte,osg::Array::UByteArrayType,1,0x1401)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UByteArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UByteArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateIndexArray<(GLubyte,osg::Array::UByteArrayType,1,0x1401)> self) -> UByteArray
        __init__(osg::TemplateIndexArray<(GLubyte,osg::Array::UByteArrayType,1,0x1401)> self, UByteArray ta, CopyOp copyop=SHALLOW_COPY) -> UByteArray
        __init__(osg::TemplateIndexArray<(GLubyte,osg::Array::UByteArrayType,1,0x1401)> self, UByteArray ta) -> UByteArray
        __init__(osg::TemplateIndexArray<(GLubyte,osg::Array::UByteArrayType,1,0x1401)> self, unsigned int no) -> UByteArray
        __init__(osg::TemplateIndexArray<(GLubyte,osg::Array::UByteArrayType,1,0x1401)> self, unsigned int no, unsigned char * ptr) -> UByteArray
        """
        this = _osg.new_UByteArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(UByteArray self) -> Object"""
        return _osg.UByteArray_cloneType(self)

    def clone(self, *args):
        """clone(UByteArray self, CopyOp copyop) -> Object"""
        return _osg.UByteArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(UByteArray self, ArrayVisitor av)
        accept(UByteArray self, ConstArrayVisitor av)
        accept(UByteArray self, unsigned int index, ValueVisitor vv)
        accept(UByteArray self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.UByteArray_accept(self, *args)

    def compare(self, *args):
        """compare(UByteArray self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.UByteArray_compare(self, *args)

    def trim(self):
        """trim(UByteArray self)"""
        return _osg.UByteArray_trim(self)

    def getElementSize(self):
        """getElementSize(UByteArray self) -> unsigned int"""
        return _osg.UByteArray_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(UByteArray self) -> GLvoid const *"""
        return _osg.UByteArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(UByteArray self) -> unsigned int"""
        return _osg.UByteArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(UByteArray self) -> unsigned int"""
        return _osg.UByteArray_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(UByteArray self, unsigned int num)"""
        return _osg.UByteArray_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(UByteArray self, unsigned int num)"""
        return _osg.UByteArray_resizeArray(self, *args)

    def index(self, *args):
        """index(UByteArray self, unsigned int pos) -> unsigned int"""
        return _osg.UByteArray_index(self, *args)

    def asVector(self):
        """asVector(UByteArray self) -> vectorGLubyte"""
        return _osg.UByteArray_asVector(self)

    def push_back(self, *args):
        """push_back(UByteArray self, GLubyte el)"""
        return _osg.UByteArray_push_back(self, *args)

    def size(self):
        """size(UByteArray self) -> int"""
        return _osg.UByteArray_size(self)

UByteArray_swigregister = _osg.UByteArray_swigregister
UByteArray_swigregister(UByteArray)

class UShortArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLushort,osg::Array::UShortArrayType,1,0x1403)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UShortArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UShortArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateIndexArray<(GLushort,osg::Array::UShortArrayType,1,0x1403)> self) -> UShortArray
        __init__(osg::TemplateIndexArray<(GLushort,osg::Array::UShortArrayType,1,0x1403)> self, UShortArray ta, CopyOp copyop=SHALLOW_COPY) -> UShortArray
        __init__(osg::TemplateIndexArray<(GLushort,osg::Array::UShortArrayType,1,0x1403)> self, UShortArray ta) -> UShortArray
        __init__(osg::TemplateIndexArray<(GLushort,osg::Array::UShortArrayType,1,0x1403)> self, unsigned int no) -> UShortArray
        __init__(osg::TemplateIndexArray<(GLushort,osg::Array::UShortArrayType,1,0x1403)> self, unsigned int no, unsigned short * ptr) -> UShortArray
        """
        this = _osg.new_UShortArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(UShortArray self) -> Object"""
        return _osg.UShortArray_cloneType(self)

    def clone(self, *args):
        """clone(UShortArray self, CopyOp copyop) -> Object"""
        return _osg.UShortArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(UShortArray self, ArrayVisitor av)
        accept(UShortArray self, ConstArrayVisitor av)
        accept(UShortArray self, unsigned int index, ValueVisitor vv)
        accept(UShortArray self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.UShortArray_accept(self, *args)

    def compare(self, *args):
        """compare(UShortArray self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.UShortArray_compare(self, *args)

    def trim(self):
        """trim(UShortArray self)"""
        return _osg.UShortArray_trim(self)

    def getElementSize(self):
        """getElementSize(UShortArray self) -> unsigned int"""
        return _osg.UShortArray_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(UShortArray self) -> GLvoid const *"""
        return _osg.UShortArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(UShortArray self) -> unsigned int"""
        return _osg.UShortArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(UShortArray self) -> unsigned int"""
        return _osg.UShortArray_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(UShortArray self, unsigned int num)"""
        return _osg.UShortArray_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(UShortArray self, unsigned int num)"""
        return _osg.UShortArray_resizeArray(self, *args)

    def index(self, *args):
        """index(UShortArray self, unsigned int pos) -> unsigned int"""
        return _osg.UShortArray_index(self, *args)

    def asVector(self):
        """asVector(UShortArray self) -> vectorGLushort"""
        return _osg.UShortArray_asVector(self)

    def push_back(self, *args):
        """push_back(UShortArray self, GLushort el)"""
        return _osg.UShortArray_push_back(self, *args)

    def size(self):
        """size(UShortArray self) -> int"""
        return _osg.UShortArray_size(self)

UShortArray_swigregister = _osg.UShortArray_swigregister
UShortArray_swigregister(UShortArray)

class UIntArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLuint,osg::Array::UIntArrayType,1,0x1405)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UIntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateIndexArray<(GLuint,osg::Array::UIntArrayType,1,0x1405)> self) -> UIntArray
        __init__(osg::TemplateIndexArray<(GLuint,osg::Array::UIntArrayType,1,0x1405)> self, UIntArray ta, CopyOp copyop=SHALLOW_COPY) -> UIntArray
        __init__(osg::TemplateIndexArray<(GLuint,osg::Array::UIntArrayType,1,0x1405)> self, UIntArray ta) -> UIntArray
        __init__(osg::TemplateIndexArray<(GLuint,osg::Array::UIntArrayType,1,0x1405)> self, unsigned int no) -> UIntArray
        __init__(osg::TemplateIndexArray<(GLuint,osg::Array::UIntArrayType,1,0x1405)> self, unsigned int no, unsigned int * ptr) -> UIntArray
        """
        this = _osg.new_UIntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(UIntArray self) -> Object"""
        return _osg.UIntArray_cloneType(self)

    def clone(self, *args):
        """clone(UIntArray self, CopyOp copyop) -> Object"""
        return _osg.UIntArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(UIntArray self, ArrayVisitor av)
        accept(UIntArray self, ConstArrayVisitor av)
        accept(UIntArray self, unsigned int index, ValueVisitor vv)
        accept(UIntArray self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.UIntArray_accept(self, *args)

    def compare(self, *args):
        """compare(UIntArray self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.UIntArray_compare(self, *args)

    def trim(self):
        """trim(UIntArray self)"""
        return _osg.UIntArray_trim(self)

    def getElementSize(self):
        """getElementSize(UIntArray self) -> unsigned int"""
        return _osg.UIntArray_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(UIntArray self) -> GLvoid const *"""
        return _osg.UIntArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(UIntArray self) -> unsigned int"""
        return _osg.UIntArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(UIntArray self) -> unsigned int"""
        return _osg.UIntArray_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(UIntArray self, unsigned int num)"""
        return _osg.UIntArray_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(UIntArray self, unsigned int num)"""
        return _osg.UIntArray_resizeArray(self, *args)

    def index(self, *args):
        """index(UIntArray self, unsigned int pos) -> unsigned int"""
        return _osg.UIntArray_index(self, *args)

    def asVector(self):
        """asVector(UIntArray self) -> vectorGLuint"""
        return _osg.UIntArray_asVector(self)

    def push_back(self, *args):
        """push_back(UIntArray self, GLuint el)"""
        return _osg.UIntArray_push_back(self, *args)

    def size(self):
        """size(UIntArray self) -> int"""
        return _osg.UIntArray_size(self)

UIntArray_swigregister = _osg.UIntArray_swigregister
UIntArray_swigregister(UIntArray)

class FloatArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(float,osg::Array::FloatArrayType,1,0x1406)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateIndexArray<(float,osg::Array::FloatArrayType,1,0x1406)> self) -> FloatArray
        __init__(osg::TemplateIndexArray<(float,osg::Array::FloatArrayType,1,0x1406)> self, FloatArray ta, CopyOp copyop=SHALLOW_COPY) -> FloatArray
        __init__(osg::TemplateIndexArray<(float,osg::Array::FloatArrayType,1,0x1406)> self, FloatArray ta) -> FloatArray
        __init__(osg::TemplateIndexArray<(float,osg::Array::FloatArrayType,1,0x1406)> self, unsigned int no) -> FloatArray
        __init__(osg::TemplateIndexArray<(float,osg::Array::FloatArrayType,1,0x1406)> self, unsigned int no, float * ptr) -> FloatArray
        """
        this = _osg.new_FloatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(FloatArray self) -> Object"""
        return _osg.FloatArray_cloneType(self)

    def clone(self, *args):
        """clone(FloatArray self, CopyOp copyop) -> Object"""
        return _osg.FloatArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(FloatArray self, ArrayVisitor av)
        accept(FloatArray self, ConstArrayVisitor av)
        accept(FloatArray self, unsigned int index, ValueVisitor vv)
        accept(FloatArray self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.FloatArray_accept(self, *args)

    def compare(self, *args):
        """compare(FloatArray self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.FloatArray_compare(self, *args)

    def trim(self):
        """trim(FloatArray self)"""
        return _osg.FloatArray_trim(self)

    def getElementSize(self):
        """getElementSize(FloatArray self) -> unsigned int"""
        return _osg.FloatArray_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(FloatArray self) -> GLvoid const *"""
        return _osg.FloatArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(FloatArray self) -> unsigned int"""
        return _osg.FloatArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(FloatArray self) -> unsigned int"""
        return _osg.FloatArray_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(FloatArray self, unsigned int num)"""
        return _osg.FloatArray_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(FloatArray self, unsigned int num)"""
        return _osg.FloatArray_resizeArray(self, *args)

    def index(self, *args):
        """index(FloatArray self, unsigned int pos) -> unsigned int"""
        return _osg.FloatArray_index(self, *args)

    def asVector(self):
        """asVector(FloatArray self) -> vectorGLfloat"""
        return _osg.FloatArray_asVector(self)

    def push_back(self, *args):
        """push_back(FloatArray self, float el)"""
        return _osg.FloatArray_push_back(self, *args)

    def size(self):
        """size(FloatArray self) -> int"""
        return _osg.FloatArray_size(self)

FloatArray_swigregister = _osg.FloatArray_swigregister
FloatArray_swigregister(FloatArray)

class Vec2Array(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> self, osg::Array::Binding binding=BIND_UNDEFINED) -> Vec2Array
        __init__(osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> self) -> Vec2Array
        __init__(osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> self, Vec2Array ta, CopyOp copyop=SHALLOW_COPY) -> Vec2Array
        __init__(osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> self, Vec2Array ta) -> Vec2Array
        __init__(osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> self, unsigned int no) -> Vec2Array
        __init__(osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> self, unsigned int no, Vec2f ptr) -> Vec2Array
        __init__(osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> self, osg::Array::Binding binding, unsigned int no) -> Vec2Array
        __init__(osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> self, osg::Array::Binding binding, unsigned int no, Vec2f ptr) -> Vec2Array
        """
        this = _osg.new_Vec2Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Vec2Array self) -> Object"""
        return _osg.Vec2Array_cloneType(self)

    def clone(self, *args):
        """clone(Vec2Array self, CopyOp copyop) -> Object"""
        return _osg.Vec2Array_clone(self, *args)

    def accept(self, *args):
        """
        accept(Vec2Array self, ArrayVisitor av)
        accept(Vec2Array self, ConstArrayVisitor av)
        accept(Vec2Array self, unsigned int index, ValueVisitor vv)
        accept(Vec2Array self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec2Array_accept(self, *args)

    def compare(self, *args):
        """compare(Vec2Array self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec2Array_compare(self, *args)

    def trim(self):
        """trim(Vec2Array self)"""
        return _osg.Vec2Array_trim(self)

    def getElementSize(self):
        """getElementSize(Vec2Array self) -> unsigned int"""
        return _osg.Vec2Array_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(Vec2Array self) -> GLvoid const *"""
        return _osg.Vec2Array_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(Vec2Array self) -> unsigned int"""
        return _osg.Vec2Array_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(Vec2Array self) -> unsigned int"""
        return _osg.Vec2Array_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(Vec2Array self, unsigned int num)"""
        return _osg.Vec2Array_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(Vec2Array self, unsigned int num)"""
        return _osg.Vec2Array_resizeArray(self, *args)

    def asVector(self):
        """asVector(Vec2Array self) -> vectorVec2"""
        return _osg.Vec2Array_asVector(self)

    def push_back(self, *args):
        """push_back(Vec2Array self, Vec2f el)"""
        return _osg.Vec2Array_push_back(self, *args)

    def size(self):
        """size(Vec2Array self) -> int"""
        return _osg.Vec2Array_size(self)

Vec2Array_swigregister = _osg.Vec2Array_swigregister
Vec2Array_swigregister(Vec2Array)

class Vec3Array(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> self, osg::Array::Binding binding=BIND_UNDEFINED) -> Vec3Array
        __init__(osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> self) -> Vec3Array
        __init__(osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> self, Vec3Array ta, CopyOp copyop=SHALLOW_COPY) -> Vec3Array
        __init__(osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> self, Vec3Array ta) -> Vec3Array
        __init__(osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> self, unsigned int no) -> Vec3Array
        __init__(osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> self, unsigned int no, Vec3f ptr) -> Vec3Array
        __init__(osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> self, osg::Array::Binding binding, unsigned int no) -> Vec3Array
        __init__(osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> self, osg::Array::Binding binding, unsigned int no, Vec3f ptr) -> Vec3Array
        """
        this = _osg.new_Vec3Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Vec3Array self) -> Object"""
        return _osg.Vec3Array_cloneType(self)

    def clone(self, *args):
        """clone(Vec3Array self, CopyOp copyop) -> Object"""
        return _osg.Vec3Array_clone(self, *args)

    def accept(self, *args):
        """
        accept(Vec3Array self, ArrayVisitor av)
        accept(Vec3Array self, ConstArrayVisitor av)
        accept(Vec3Array self, unsigned int index, ValueVisitor vv)
        accept(Vec3Array self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec3Array_accept(self, *args)

    def compare(self, *args):
        """compare(Vec3Array self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec3Array_compare(self, *args)

    def trim(self):
        """trim(Vec3Array self)"""
        return _osg.Vec3Array_trim(self)

    def getElementSize(self):
        """getElementSize(Vec3Array self) -> unsigned int"""
        return _osg.Vec3Array_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(Vec3Array self) -> GLvoid const *"""
        return _osg.Vec3Array_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(Vec3Array self) -> unsigned int"""
        return _osg.Vec3Array_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(Vec3Array self) -> unsigned int"""
        return _osg.Vec3Array_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(Vec3Array self, unsigned int num)"""
        return _osg.Vec3Array_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(Vec3Array self, unsigned int num)"""
        return _osg.Vec3Array_resizeArray(self, *args)

    def asVector(self):
        """asVector(Vec3Array self) -> vectorVec3"""
        return _osg.Vec3Array_asVector(self)

    def push_back(self, *args):
        """push_back(Vec3Array self, Vec3f el)"""
        return _osg.Vec3Array_push_back(self, *args)

    def size(self):
        """size(Vec3Array self) -> int"""
        return _osg.Vec3Array_size(self)

Vec3Array_swigregister = _osg.Vec3Array_swigregister
Vec3Array_swigregister(Vec3Array)

class Vec4Array(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> self, osg::Array::Binding binding=BIND_UNDEFINED) -> Vec4Array
        __init__(osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> self) -> Vec4Array
        __init__(osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> self, Vec4Array ta, CopyOp copyop=SHALLOW_COPY) -> Vec4Array
        __init__(osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> self, Vec4Array ta) -> Vec4Array
        __init__(osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> self, unsigned int no) -> Vec4Array
        __init__(osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> self, unsigned int no, Vec4f ptr) -> Vec4Array
        __init__(osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> self, osg::Array::Binding binding, unsigned int no) -> Vec4Array
        __init__(osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> self, osg::Array::Binding binding, unsigned int no, Vec4f ptr) -> Vec4Array
        """
        this = _osg.new_Vec4Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Vec4Array self) -> Object"""
        return _osg.Vec4Array_cloneType(self)

    def clone(self, *args):
        """clone(Vec4Array self, CopyOp copyop) -> Object"""
        return _osg.Vec4Array_clone(self, *args)

    def accept(self, *args):
        """
        accept(Vec4Array self, ArrayVisitor av)
        accept(Vec4Array self, ConstArrayVisitor av)
        accept(Vec4Array self, unsigned int index, ValueVisitor vv)
        accept(Vec4Array self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec4Array_accept(self, *args)

    def compare(self, *args):
        """compare(Vec4Array self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec4Array_compare(self, *args)

    def trim(self):
        """trim(Vec4Array self)"""
        return _osg.Vec4Array_trim(self)

    def getElementSize(self):
        """getElementSize(Vec4Array self) -> unsigned int"""
        return _osg.Vec4Array_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(Vec4Array self) -> GLvoid const *"""
        return _osg.Vec4Array_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(Vec4Array self) -> unsigned int"""
        return _osg.Vec4Array_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(Vec4Array self) -> unsigned int"""
        return _osg.Vec4Array_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(Vec4Array self, unsigned int num)"""
        return _osg.Vec4Array_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(Vec4Array self, unsigned int num)"""
        return _osg.Vec4Array_resizeArray(self, *args)

    def asVector(self):
        """asVector(Vec4Array self) -> vectorVec4"""
        return _osg.Vec4Array_asVector(self)

    def push_back(self, *args):
        """push_back(Vec4Array self, Vec4f el)"""
        return _osg.Vec4Array_push_back(self, *args)

    def size(self):
        """size(Vec4Array self) -> int"""
        return _osg.Vec4Array_size(self)

Vec4Array_swigregister = _osg.Vec4Array_swigregister
Vec4Array_swigregister(Vec4Array)

class Vec2dArray(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2dArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2dArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> self, osg::Array::Binding binding=BIND_UNDEFINED) -> Vec2dArray
        __init__(osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> self) -> Vec2dArray
        __init__(osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> self, Vec2dArray ta, CopyOp copyop=SHALLOW_COPY) -> Vec2dArray
        __init__(osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> self, Vec2dArray ta) -> Vec2dArray
        __init__(osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> self, unsigned int no) -> Vec2dArray
        __init__(osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> self, unsigned int no, Vec2d ptr) -> Vec2dArray
        __init__(osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> self, osg::Array::Binding binding, unsigned int no) -> Vec2dArray
        __init__(osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> self, osg::Array::Binding binding, unsigned int no, Vec2d ptr) -> Vec2dArray
        """
        this = _osg.new_Vec2dArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Vec2dArray self) -> Object"""
        return _osg.Vec2dArray_cloneType(self)

    def clone(self, *args):
        """clone(Vec2dArray self, CopyOp copyop) -> Object"""
        return _osg.Vec2dArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(Vec2dArray self, ArrayVisitor av)
        accept(Vec2dArray self, ConstArrayVisitor av)
        accept(Vec2dArray self, unsigned int index, ValueVisitor vv)
        accept(Vec2dArray self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec2dArray_accept(self, *args)

    def compare(self, *args):
        """compare(Vec2dArray self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec2dArray_compare(self, *args)

    def trim(self):
        """trim(Vec2dArray self)"""
        return _osg.Vec2dArray_trim(self)

    def getElementSize(self):
        """getElementSize(Vec2dArray self) -> unsigned int"""
        return _osg.Vec2dArray_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(Vec2dArray self) -> GLvoid const *"""
        return _osg.Vec2dArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(Vec2dArray self) -> unsigned int"""
        return _osg.Vec2dArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(Vec2dArray self) -> unsigned int"""
        return _osg.Vec2dArray_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(Vec2dArray self, unsigned int num)"""
        return _osg.Vec2dArray_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(Vec2dArray self, unsigned int num)"""
        return _osg.Vec2dArray_resizeArray(self, *args)

    def asVector(self):
        """asVector(Vec2dArray self) -> vectorVec2d"""
        return _osg.Vec2dArray_asVector(self)

    def push_back(self, *args):
        """push_back(Vec2dArray self, Vec2d el)"""
        return _osg.Vec2dArray_push_back(self, *args)

    def size(self):
        """size(Vec2dArray self) -> int"""
        return _osg.Vec2dArray_size(self)

Vec2dArray_swigregister = _osg.Vec2dArray_swigregister
Vec2dArray_swigregister(Vec2dArray)

class Vec3dArray(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3dArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3dArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> self, osg::Array::Binding binding=BIND_UNDEFINED) -> Vec3dArray
        __init__(osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> self) -> Vec3dArray
        __init__(osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> self, Vec3dArray ta, CopyOp copyop=SHALLOW_COPY) -> Vec3dArray
        __init__(osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> self, Vec3dArray ta) -> Vec3dArray
        __init__(osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> self, unsigned int no) -> Vec3dArray
        __init__(osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> self, unsigned int no, Vec3d ptr) -> Vec3dArray
        __init__(osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> self, osg::Array::Binding binding, unsigned int no) -> Vec3dArray
        __init__(osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> self, osg::Array::Binding binding, unsigned int no, Vec3d ptr) -> Vec3dArray
        """
        this = _osg.new_Vec3dArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Vec3dArray self) -> Object"""
        return _osg.Vec3dArray_cloneType(self)

    def clone(self, *args):
        """clone(Vec3dArray self, CopyOp copyop) -> Object"""
        return _osg.Vec3dArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(Vec3dArray self, ArrayVisitor av)
        accept(Vec3dArray self, ConstArrayVisitor av)
        accept(Vec3dArray self, unsigned int index, ValueVisitor vv)
        accept(Vec3dArray self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec3dArray_accept(self, *args)

    def compare(self, *args):
        """compare(Vec3dArray self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec3dArray_compare(self, *args)

    def trim(self):
        """trim(Vec3dArray self)"""
        return _osg.Vec3dArray_trim(self)

    def getElementSize(self):
        """getElementSize(Vec3dArray self) -> unsigned int"""
        return _osg.Vec3dArray_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(Vec3dArray self) -> GLvoid const *"""
        return _osg.Vec3dArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(Vec3dArray self) -> unsigned int"""
        return _osg.Vec3dArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(Vec3dArray self) -> unsigned int"""
        return _osg.Vec3dArray_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(Vec3dArray self, unsigned int num)"""
        return _osg.Vec3dArray_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(Vec3dArray self, unsigned int num)"""
        return _osg.Vec3dArray_resizeArray(self, *args)

    def asVector(self):
        """asVector(Vec3dArray self) -> vectorVec3d"""
        return _osg.Vec3dArray_asVector(self)

    def push_back(self, *args):
        """push_back(Vec3dArray self, Vec3d el)"""
        return _osg.Vec3dArray_push_back(self, *args)

    def size(self):
        """size(Vec3dArray self) -> int"""
        return _osg.Vec3dArray_size(self)

Vec3dArray_swigregister = _osg.Vec3dArray_swigregister
Vec3dArray_swigregister(Vec3dArray)

class Vec4dArray(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4dArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4dArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> self, osg::Array::Binding binding=BIND_UNDEFINED) -> Vec4dArray
        __init__(osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> self) -> Vec4dArray
        __init__(osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> self, Vec4dArray ta, CopyOp copyop=SHALLOW_COPY) -> Vec4dArray
        __init__(osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> self, Vec4dArray ta) -> Vec4dArray
        __init__(osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> self, unsigned int no) -> Vec4dArray
        __init__(osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> self, unsigned int no, Vec4d ptr) -> Vec4dArray
        __init__(osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> self, osg::Array::Binding binding, unsigned int no) -> Vec4dArray
        __init__(osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> self, osg::Array::Binding binding, unsigned int no, Vec4d ptr) -> Vec4dArray
        """
        this = _osg.new_Vec4dArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Vec4dArray self) -> Object"""
        return _osg.Vec4dArray_cloneType(self)

    def clone(self, *args):
        """clone(Vec4dArray self, CopyOp copyop) -> Object"""
        return _osg.Vec4dArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(Vec4dArray self, ArrayVisitor av)
        accept(Vec4dArray self, ConstArrayVisitor av)
        accept(Vec4dArray self, unsigned int index, ValueVisitor vv)
        accept(Vec4dArray self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec4dArray_accept(self, *args)

    def compare(self, *args):
        """compare(Vec4dArray self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec4dArray_compare(self, *args)

    def trim(self):
        """trim(Vec4dArray self)"""
        return _osg.Vec4dArray_trim(self)

    def getElementSize(self):
        """getElementSize(Vec4dArray self) -> unsigned int"""
        return _osg.Vec4dArray_getElementSize(self)

    def getDataPointer(self):
        """getDataPointer(Vec4dArray self) -> GLvoid const *"""
        return _osg.Vec4dArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(Vec4dArray self) -> unsigned int"""
        return _osg.Vec4dArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(Vec4dArray self) -> unsigned int"""
        return _osg.Vec4dArray_getNumElements(self)

    def reserveArray(self, *args):
        """reserveArray(Vec4dArray self, unsigned int num)"""
        return _osg.Vec4dArray_reserveArray(self, *args)

    def resizeArray(self, *args):
        """resizeArray(Vec4dArray self, unsigned int num)"""
        return _osg.Vec4dArray_resizeArray(self, *args)

    def asVector(self):
        """asVector(Vec4dArray self) -> vectorVec4d"""
        return _osg.Vec4dArray_asVector(self)

    def push_back(self, *args):
        """push_back(Vec4dArray self, Vec4d el)"""
        return _osg.Vec4dArray_push_back(self, *args)

    def size(self):
        """size(Vec4dArray self) -> int"""
        return _osg.Vec4dArray_size(self)

Vec4dArray_swigregister = _osg.Vec4dArray_swigregister
Vec4dArray_swigregister(Vec4dArray)


def asVector(*args):
  """
    asVector(DrawElementsUByte base) -> vectorGLubyte
    asVector(DrawElementsUShort base) -> vectorGLushort
    asVector(DrawElementsUInt base) -> vectorGLuint
    asVector(osg::MixinVector< short > * base) -> vectorGLshort
    asVector(osg::MixinVector< int > * base) -> vectorGLint
    asVector(osg::MixinVector< unsigned char > * base) -> vectorGLubyte
    asVector(osg::MixinVector< unsigned short > * base) -> vectorGLushort
    asVector(osg::MixinVector< unsigned int > * base) -> vectorGLuint
    asVector(osg::MixinVector< float > * base) -> vectorGLfloat
    asVector(osg::MixinVector< osg::Vec2f > * base) -> vectorVec2
    asVector(osg::MixinVector< osg::Vec3f > * base) -> vectorVec3
    asVector(osg::MixinVector< osg::Vec4f > * base) -> vectorVec4
    asVector(osg::MixinVector< osg::Vec2d > * base) -> vectorVec2d
    asVector(osg::MixinVector< osg::Vec3d > * base) -> vectorVec3d
    asVector(osg::MixinVector< osg::Vec4d > * base) -> vectorVec4d
    """
  return _osg.asVector(*args)
OSG_GEOMETRY = _osg.OSG_GEOMETRY
OSG_DEPRECATED_GEOMETRY_BINDING = _osg.OSG_DEPRECATED_GEOMETRY_BINDING
class Geometry(Drawable):
    """Proxy of C++ osg::Geometry class"""
    __swig_setmethods__ = {}
    for _s in [Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Geometry self) -> Geometry
        __init__(osg::Geometry self, Geometry geometry, CopyOp copyop=SHALLOW_COPY) -> Geometry
        __init__(osg::Geometry self, Geometry geometry) -> Geometry
        """
        this = _osg.new_Geometry(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Geometry self) -> Object"""
        return _osg.Geometry_cloneType(self)

    def clone(self, *args):
        """clone(Geometry self, CopyOp copyop) -> Object"""
        return _osg.Geometry_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Geometry self, Object obj) -> bool"""
        return _osg.Geometry_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Geometry self) -> char const *"""
        return _osg.Geometry_libraryName(self)

    def className(self):
        """className(Geometry self) -> char const *"""
        return _osg.Geometry_className(self)

    def asGeometry(self, *args):
        """
        asGeometry(Geometry self) -> Geometry
        asGeometry(Geometry self) -> Geometry
        """
        return _osg.Geometry_asGeometry(self, *args)

    def empty(self):
        """empty(Geometry self) -> bool"""
        return _osg.Geometry_empty(self)

    def setVertexArray(self, *args):
        """setVertexArray(Geometry self, Array array)"""
        return _osg.Geometry_setVertexArray(self, *args)

    def getVertexArray(self, *args):
        """
        getVertexArray(Geometry self) -> Array
        getVertexArray(Geometry self) -> Array
        """
        return _osg.Geometry_getVertexArray(self, *args)

    def setNormalArray(self, *args):
        """
        setNormalArray(Geometry self, Array array, osg::Array::Binding binding=BIND_UNDEFINED)
        setNormalArray(Geometry self, Array array)
        """
        return _osg.Geometry_setNormalArray(self, *args)

    def getNormalArray(self, *args):
        """
        getNormalArray(Geometry self) -> Array
        getNormalArray(Geometry self) -> Array
        """
        return _osg.Geometry_getNormalArray(self, *args)

    def setColorArray(self, *args):
        """
        setColorArray(Geometry self, Array array, osg::Array::Binding binding=BIND_UNDEFINED)
        setColorArray(Geometry self, Array array)
        """
        return _osg.Geometry_setColorArray(self, *args)

    def getColorArray(self, *args):
        """
        getColorArray(Geometry self) -> Array
        getColorArray(Geometry self) -> Array
        """
        return _osg.Geometry_getColorArray(self, *args)

    def setSecondaryColorArray(self, *args):
        """
        setSecondaryColorArray(Geometry self, Array array, osg::Array::Binding binding=BIND_UNDEFINED)
        setSecondaryColorArray(Geometry self, Array array)
        """
        return _osg.Geometry_setSecondaryColorArray(self, *args)

    def getSecondaryColorArray(self, *args):
        """
        getSecondaryColorArray(Geometry self) -> Array
        getSecondaryColorArray(Geometry self) -> Array
        """
        return _osg.Geometry_getSecondaryColorArray(self, *args)

    def setFogCoordArray(self, *args):
        """
        setFogCoordArray(Geometry self, Array array, osg::Array::Binding binding=BIND_UNDEFINED)
        setFogCoordArray(Geometry self, Array array)
        """
        return _osg.Geometry_setFogCoordArray(self, *args)

    def getFogCoordArray(self, *args):
        """
        getFogCoordArray(Geometry self) -> Array
        getFogCoordArray(Geometry self) -> Array
        """
        return _osg.Geometry_getFogCoordArray(self, *args)

    def setTexCoordArray(self, *args):
        """
        setTexCoordArray(Geometry self, unsigned int unit, Array array, osg::Array::Binding binding=BIND_UNDEFINED)
        setTexCoordArray(Geometry self, unsigned int unit, Array array)
        """
        return _osg.Geometry_setTexCoordArray(self, *args)

    def getTexCoordArray(self, *args):
        """
        getTexCoordArray(Geometry self, unsigned int unit) -> Array
        getTexCoordArray(Geometry self, unsigned int unit) -> Array
        """
        return _osg.Geometry_getTexCoordArray(self, *args)

    def getNumTexCoordArrays(self):
        """getNumTexCoordArrays(Geometry self) -> unsigned int"""
        return _osg.Geometry_getNumTexCoordArrays(self)

    def getTexCoordArrayList(self, *args):
        """
        getTexCoordArrayList(Geometry self) -> osg::Geometry::ArrayList
        getTexCoordArrayList(Geometry self) -> osg::Geometry::ArrayList const &
        """
        return _osg.Geometry_getTexCoordArrayList(self, *args)

    def setVertexAttribArray(self, *args):
        """
        setVertexAttribArray(Geometry self, unsigned int index, Array array, osg::Array::Binding binding=BIND_UNDEFINED)
        setVertexAttribArray(Geometry self, unsigned int index, Array array)
        """
        return _osg.Geometry_setVertexAttribArray(self, *args)

    def getVertexAttribArray(self, *args):
        """
        getVertexAttribArray(Geometry self, unsigned int index) -> Array
        getVertexAttribArray(Geometry self, unsigned int index) -> Array
        """
        return _osg.Geometry_getVertexAttribArray(self, *args)

    def getNumVertexAttribArrays(self):
        """getNumVertexAttribArrays(Geometry self) -> unsigned int"""
        return _osg.Geometry_getNumVertexAttribArrays(self)

    def getVertexAttribArrayList(self, *args):
        """
        getVertexAttribArrayList(Geometry self) -> osg::Geometry::ArrayList
        getVertexAttribArrayList(Geometry self) -> osg::Geometry::ArrayList const &
        """
        return _osg.Geometry_getVertexAttribArrayList(self, *args)

    def setPrimitiveSetList(self, *args):
        """setPrimitiveSetList(Geometry self, osg::Geometry::PrimitiveSetList const & primitives)"""
        return _osg.Geometry_setPrimitiveSetList(self, *args)

    def getPrimitiveSetList(self, *args):
        """
        getPrimitiveSetList(Geometry self) -> osg::Geometry::PrimitiveSetList
        getPrimitiveSetList(Geometry self) -> osg::Geometry::PrimitiveSetList const &
        """
        return _osg.Geometry_getPrimitiveSetList(self, *args)

    def getNumPrimitiveSets(self):
        """getNumPrimitiveSets(Geometry self) -> unsigned int"""
        return _osg.Geometry_getNumPrimitiveSets(self)

    def getPrimitiveSet(self, *args):
        """
        getPrimitiveSet(Geometry self, unsigned int pos) -> PrimitiveSet
        getPrimitiveSet(Geometry self, unsigned int pos) -> PrimitiveSet
        """
        return _osg.Geometry_getPrimitiveSet(self, *args)

    def addPrimitiveSet(self, *args):
        """addPrimitiveSet(Geometry self, PrimitiveSet primitiveset) -> bool"""
        return _osg.Geometry_addPrimitiveSet(self, *args)

    def setPrimitiveSet(self, *args):
        """setPrimitiveSet(Geometry self, unsigned int i, PrimitiveSet primitiveset) -> bool"""
        return _osg.Geometry_setPrimitiveSet(self, *args)

    def insertPrimitiveSet(self, *args):
        """insertPrimitiveSet(Geometry self, unsigned int i, PrimitiveSet primitiveset) -> bool"""
        return _osg.Geometry_insertPrimitiveSet(self, *args)

    def removePrimitiveSet(self, *args):
        """
        removePrimitiveSet(Geometry self, unsigned int i, unsigned int numElementsToRemove=1) -> bool
        removePrimitiveSet(Geometry self, unsigned int i) -> bool
        """
        return _osg.Geometry_removePrimitiveSet(self, *args)

    def getPrimitiveSetIndex(self, *args):
        """getPrimitiveSetIndex(Geometry self, PrimitiveSet primitiveset) -> unsigned int"""
        return _osg.Geometry_getPrimitiveSetIndex(self, *args)

    def containsSharedArrays(self):
        """containsSharedArrays(Geometry self) -> bool"""
        return _osg.Geometry_containsSharedArrays(self)

    def duplicateSharedArrays(self):
        """duplicateSharedArrays(Geometry self)"""
        return _osg.Geometry_duplicateSharedArrays(self)

    def setUseVertexBufferObjects(self, *args):
        """setUseVertexBufferObjects(Geometry self, bool flag)"""
        return _osg.Geometry_setUseVertexBufferObjects(self, *args)

    def dirtyDisplayList(self):
        """dirtyDisplayList(Geometry self)"""
        return _osg.Geometry_dirtyDisplayList(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Geometry self, unsigned int maxSize)"""
        return _osg.Geometry_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(Geometry self, State state=None)
        releaseGLObjects(Geometry self)
        """
        return _osg.Geometry_releaseGLObjects(self, state)

    def getArrayList(self, *args):
        """getArrayList(Geometry self, osg::Geometry::ArrayList & arrayList) -> bool"""
        return _osg.Geometry_getArrayList(self, *args)

    def getDrawElementsList(self, *args):
        """getDrawElementsList(Geometry self, osg::Geometry::DrawElementsList & drawElementsList) -> bool"""
        return _osg.Geometry_getDrawElementsList(self, *args)

    def getOrCreateVertexBufferObject(self):
        """getOrCreateVertexBufferObject(Geometry self) -> VertexBufferObject"""
        return _osg.Geometry_getOrCreateVertexBufferObject(self)

    def getOrCreateElementBufferObject(self):
        """getOrCreateElementBufferObject(Geometry self) -> ElementBufferObject"""
        return _osg.Geometry_getOrCreateElementBufferObject(self)

    def getGLObjectSizeHint(self):
        """getGLObjectSizeHint(Geometry self) -> unsigned int"""
        return _osg.Geometry_getGLObjectSizeHint(self)

    def compileGLObjects(self, *args):
        """compileGLObjects(Geometry self, RenderInfo renderInfo)"""
        return _osg.Geometry_compileGLObjects(self, *args)

    def drawImplementation(self, *args):
        """drawImplementation(Geometry self, RenderInfo renderInfo)"""
        return _osg.Geometry_drawImplementation(self, *args)

    def accept(self, *args):
        """
        accept(Geometry self, osg::Drawable::AttributeFunctor & af)
        accept(Geometry self, osg::Drawable::ConstAttributeFunctor & af)
        accept(Geometry self, PrimitiveFunctor pf)
        accept(Geometry self, PrimitiveIndexFunctor pf)
        """
        return _osg.Geometry_accept(self, *args)

    def containsDeprecatedData(self):
        """containsDeprecatedData(Geometry self) -> bool"""
        return _osg.Geometry_containsDeprecatedData(self)

    def checkForDeprecatedData(self):
        """checkForDeprecatedData(Geometry self) -> bool"""
        return _osg.Geometry_checkForDeprecatedData(self)

    def fixDeprecatedData(self):
        """fixDeprecatedData(Geometry self)"""
        return _osg.Geometry_fixDeprecatedData(self)

    BIND_OFF = _osg.Geometry_BIND_OFF
    BIND_OVERALL = _osg.Geometry_BIND_OVERALL
    BIND_PER_PRIMITIVE_SET = _osg.Geometry_BIND_PER_PRIMITIVE_SET
    BIND_PER_VERTEX = _osg.Geometry_BIND_PER_VERTEX
    def setNormalBinding(self, *args):
        """setNormalBinding(Geometry self, osg::Geometry::AttributeBinding ab)"""
        return _osg.Geometry_setNormalBinding(self, *args)

    def setColorBinding(self, *args):
        """setColorBinding(Geometry self, osg::Geometry::AttributeBinding ab)"""
        return _osg.Geometry_setColorBinding(self, *args)

    def setSecondaryColorBinding(self, *args):
        """setSecondaryColorBinding(Geometry self, osg::Geometry::AttributeBinding ab)"""
        return _osg.Geometry_setSecondaryColorBinding(self, *args)

    def setFogCoordBinding(self, *args):
        """setFogCoordBinding(Geometry self, osg::Geometry::AttributeBinding ab)"""
        return _osg.Geometry_setFogCoordBinding(self, *args)

    def setVertexAttribBinding(self, *args):
        """setVertexAttribBinding(Geometry self, unsigned int index, osg::Geometry::AttributeBinding ab)"""
        return _osg.Geometry_setVertexAttribBinding(self, *args)

    def getNormalBinding(self):
        """getNormalBinding(Geometry self) -> osg::Geometry::AttributeBinding"""
        return _osg.Geometry_getNormalBinding(self)

    def getColorBinding(self):
        """getColorBinding(Geometry self) -> osg::Geometry::AttributeBinding"""
        return _osg.Geometry_getColorBinding(self)

    def getSecondaryColorBinding(self):
        """getSecondaryColorBinding(Geometry self) -> osg::Geometry::AttributeBinding"""
        return _osg.Geometry_getSecondaryColorBinding(self)

    def getFogCoordBinding(self):
        """getFogCoordBinding(Geometry self) -> osg::Geometry::AttributeBinding"""
        return _osg.Geometry_getFogCoordBinding(self)

    def getVertexAttribBinding(self, *args):
        """getVertexAttribBinding(Geometry self, unsigned int index) -> osg::Geometry::AttributeBinding"""
        return _osg.Geometry_getVertexAttribBinding(self, *args)

    def setVertexAttribNormalize(self, *args):
        """setVertexAttribNormalize(Geometry self, unsigned int index, GLboolean norm)"""
        return _osg.Geometry_setVertexAttribNormalize(self, *args)

    def getVertexAttribNormalize(self, *args):
        """getVertexAttribNormalize(Geometry self, unsigned int index) -> GLboolean"""
        return _osg.Geometry_getVertexAttribNormalize(self, *args)

Geometry_swigregister = _osg.Geometry_swigregister
Geometry_swigregister(Geometry)


def createTexturedQuadGeometry(*args):
  """
    createTexturedQuadGeometry(Vec3f corner, Vec3f widthVec, Vec3f heightVec, float l, float b, float r, float t) -> Geometry
    createTexturedQuadGeometry(Vec3f corner, Vec3f widthVec, Vec3f heightVec, float s=1.0, float t=1.0) -> Geometry
    createTexturedQuadGeometry(Vec3f corner, Vec3f widthVec, Vec3f heightVec, float s=1.0) -> Geometry
    createTexturedQuadGeometry(Vec3f corner, Vec3f widthVec, Vec3f heightVec) -> Geometry
    """
  return _osg.createTexturedQuadGeometry(*args)
class deprecated_Geometry(Geometry):
    """Proxy of C++ deprecated_osg::Geometry class"""
    __swig_setmethods__ = {}
    for _s in [Geometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, deprecated_Geometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, deprecated_Geometry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Geometry() -> deprecated_Geometry
        Geometry(deprecated_Geometry geometry, CopyOp copyop=SHALLOW_COPY) -> deprecated_Geometry
        __init__(deprecated_osg::Geometry self, deprecated_Geometry geometry) -> deprecated_Geometry
        """
        this = _osg.new_deprecated_Geometry(*args)
        try: self.this.append(this)
        except: self.this = this
    BIND_OFF = _osg.deprecated_Geometry_BIND_OFF
    BIND_OVERALL = _osg.deprecated_Geometry_BIND_OVERALL
    BIND_PER_PRIMITIVE_SET = _osg.deprecated_Geometry_BIND_PER_PRIMITIVE_SET
    BIND_PER_PRIMITIVE = _osg.deprecated_Geometry_BIND_PER_PRIMITIVE
    BIND_PER_VERTEX = _osg.deprecated_Geometry_BIND_PER_VERTEX
    def setNormalBinding(self, *args):
        """setNormalBinding(deprecated_Geometry self, deprecated_osg::Geometry::AttributeBinding ab)"""
        return _osg.deprecated_Geometry_setNormalBinding(self, *args)

    def getNormalBinding(self):
        """getNormalBinding(deprecated_Geometry self) -> deprecated_osg::Geometry::AttributeBinding"""
        return _osg.deprecated_Geometry_getNormalBinding(self)

    def setColorBinding(self, *args):
        """setColorBinding(deprecated_Geometry self, deprecated_osg::Geometry::AttributeBinding ab)"""
        return _osg.deprecated_Geometry_setColorBinding(self, *args)

    def getColorBinding(self):
        """getColorBinding(deprecated_Geometry self) -> deprecated_osg::Geometry::AttributeBinding"""
        return _osg.deprecated_Geometry_getColorBinding(self)

    def setSecondaryColorBinding(self, *args):
        """setSecondaryColorBinding(deprecated_Geometry self, deprecated_osg::Geometry::AttributeBinding ab)"""
        return _osg.deprecated_Geometry_setSecondaryColorBinding(self, *args)

    def getSecondaryColorBinding(self):
        """getSecondaryColorBinding(deprecated_Geometry self) -> deprecated_osg::Geometry::AttributeBinding"""
        return _osg.deprecated_Geometry_getSecondaryColorBinding(self)

    def setFogCoordBinding(self, *args):
        """setFogCoordBinding(deprecated_Geometry self, deprecated_osg::Geometry::AttributeBinding ab)"""
        return _osg.deprecated_Geometry_setFogCoordBinding(self, *args)

    def getFogCoordBinding(self):
        """getFogCoordBinding(deprecated_Geometry self) -> deprecated_osg::Geometry::AttributeBinding"""
        return _osg.deprecated_Geometry_getFogCoordBinding(self)

    def setVertexAttribBinding(self, *args):
        """setVertexAttribBinding(deprecated_Geometry self, unsigned int index, deprecated_osg::Geometry::AttributeBinding ab)"""
        return _osg.deprecated_Geometry_setVertexAttribBinding(self, *args)

    def getVertexAttribBinding(self, *args):
        """getVertexAttribBinding(deprecated_Geometry self, unsigned int index) -> deprecated_osg::Geometry::AttributeBinding"""
        return _osg.deprecated_Geometry_getVertexAttribBinding(self, *args)

    def setVertexAttribNormalize(self, *args):
        """setVertexAttribNormalize(deprecated_Geometry self, unsigned int index, GLboolean norm)"""
        return _osg.deprecated_Geometry_setVertexAttribNormalize(self, *args)

    def getVertexAttribNormalize(self, *args):
        """getVertexAttribNormalize(deprecated_Geometry self, unsigned int index) -> GLboolean"""
        return _osg.deprecated_Geometry_getVertexAttribNormalize(self, *args)

    def setColorIndices(self, *args):
        """setColorIndices(deprecated_Geometry self, IndexArray array)"""
        return _osg.deprecated_Geometry_setColorIndices(self, *args)

    def getColorIndices(self):
        """getColorIndices(deprecated_Geometry self) -> IndexArray"""
        return _osg.deprecated_Geometry_getColorIndices(self)

    __swig_destroy__ = _osg.delete_deprecated_Geometry
    __del__ = lambda self : None;
deprecated_Geometry_swigregister = _osg.deprecated_Geometry_swigregister
deprecated_Geometry_swigregister(deprecated_Geometry)

OSG_SHAPE = _osg.OSG_SHAPE
class Shape(Object):
    """Proxy of C++ osg::Shape class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Shape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(Shape self) -> Object"""
        return _osg.Shape_cloneType(self)

    def clone(self, *args):
        """clone(Shape self, CopyOp arg2) -> Object"""
        return _osg.Shape_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Shape self, Object obj) -> bool"""
        return _osg.Shape_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Shape self) -> char const *"""
        return _osg.Shape_libraryName(self)

    def className(self):
        """className(Shape self) -> char const *"""
        return _osg.Shape_className(self)

    def accept(self, *args):
        """
        accept(Shape self, ShapeVisitor arg2)
        accept(Shape self, ConstShapeVisitor arg2)
        """
        return _osg.Shape_accept(self, *args)

Shape_swigregister = _osg.Shape_swigregister
Shape_swigregister(Shape)

class ShapeVisitor(_object):
    """Proxy of C++ osg::ShapeVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::ShapeVisitor self) -> ShapeVisitor"""
        this = _osg.new_ShapeVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ShapeVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(ShapeVisitor self, Shape arg2)
        apply(ShapeVisitor self, Sphere arg2)
        apply(ShapeVisitor self, Box arg2)
        apply(ShapeVisitor self, Cone arg2)
        apply(ShapeVisitor self, Cylinder arg2)
        apply(ShapeVisitor self, Capsule arg2)
        apply(ShapeVisitor self, InfinitePlane arg2)
        apply(ShapeVisitor self, TriangleMesh arg2)
        apply(ShapeVisitor self, ConvexHull arg2)
        apply(ShapeVisitor self, HeightField arg2)
        apply(ShapeVisitor self, CompositeShape arg2)
        """
        return _osg.ShapeVisitor_apply(self, *args)

ShapeVisitor_swigregister = _osg.ShapeVisitor_swigregister
ShapeVisitor_swigregister(ShapeVisitor)

class ConstShapeVisitor(_object):
    """Proxy of C++ osg::ConstShapeVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstShapeVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstShapeVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::ConstShapeVisitor self) -> ConstShapeVisitor"""
        this = _osg.new_ConstShapeVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ConstShapeVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(ConstShapeVisitor self, Shape arg2)
        apply(ConstShapeVisitor self, Sphere arg2)
        apply(ConstShapeVisitor self, Box arg2)
        apply(ConstShapeVisitor self, Cone arg2)
        apply(ConstShapeVisitor self, Cylinder arg2)
        apply(ConstShapeVisitor self, Capsule arg2)
        apply(ConstShapeVisitor self, InfinitePlane arg2)
        apply(ConstShapeVisitor self, TriangleMesh arg2)
        apply(ConstShapeVisitor self, ConvexHull arg2)
        apply(ConstShapeVisitor self, HeightField arg2)
        apply(ConstShapeVisitor self, CompositeShape arg2)
        """
        return _osg.ConstShapeVisitor_apply(self, *args)

ConstShapeVisitor_swigregister = _osg.ConstShapeVisitor_swigregister
ConstShapeVisitor_swigregister(ConstShapeVisitor)

class Sphere(Shape):
    """Proxy of C++ osg::Sphere class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sphere, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sphere, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Sphere self) -> Sphere
        __init__(osg::Sphere self, Vec3f center, float radius) -> Sphere
        __init__(osg::Sphere self, Sphere sphere, CopyOp copyop=SHALLOW_COPY) -> Sphere
        __init__(osg::Sphere self, Sphere sphere) -> Sphere
        """
        this = _osg.new_Sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Sphere self) -> Object"""
        return _osg.Sphere_cloneType(self)

    def clone(self, *args):
        """clone(Sphere self, CopyOp copyop) -> Object"""
        return _osg.Sphere_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Sphere self, Object obj) -> bool"""
        return _osg.Sphere_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Sphere self) -> char const *"""
        return _osg.Sphere_libraryName(self)

    def className(self):
        """className(Sphere self) -> char const *"""
        return _osg.Sphere_className(self)

    def accept(self, *args):
        """
        accept(Sphere self, ShapeVisitor sv)
        accept(Sphere self, ConstShapeVisitor csv)
        """
        return _osg.Sphere_accept(self, *args)

    def valid(self):
        """valid(Sphere self) -> bool"""
        return _osg.Sphere_valid(self)

    def set(self, *args):
        """set(Sphere self, Vec3f center, float radius)"""
        return _osg.Sphere_set(self, *args)

    def setCenter(self, *args):
        """setCenter(Sphere self, Vec3f center)"""
        return _osg.Sphere_setCenter(self, *args)

    def getCenter(self):
        """getCenter(Sphere self) -> Vec3f"""
        return _osg.Sphere_getCenter(self)

    def setRadius(self, *args):
        """setRadius(Sphere self, float radius)"""
        return _osg.Sphere_setRadius(self, *args)

    def getRadius(self):
        """getRadius(Sphere self) -> float"""
        return _osg.Sphere_getRadius(self)

Sphere_swigregister = _osg.Sphere_swigregister
Sphere_swigregister(Sphere)

class Box(Shape):
    """Proxy of C++ osg::Box class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Box self) -> Box
        __init__(osg::Box self, Vec3f center, float width) -> Box
        __init__(osg::Box self, Vec3f center, float lengthX, float lengthY, float lengthZ) -> Box
        __init__(osg::Box self, Box box, CopyOp copyop=SHALLOW_COPY) -> Box
        __init__(osg::Box self, Box box) -> Box
        """
        this = _osg.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Box self) -> Object"""
        return _osg.Box_cloneType(self)

    def clone(self, *args):
        """clone(Box self, CopyOp copyop) -> Object"""
        return _osg.Box_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Box self, Object obj) -> bool"""
        return _osg.Box_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Box self) -> char const *"""
        return _osg.Box_libraryName(self)

    def className(self):
        """className(Box self) -> char const *"""
        return _osg.Box_className(self)

    def accept(self, *args):
        """
        accept(Box self, ShapeVisitor sv)
        accept(Box self, ConstShapeVisitor csv)
        """
        return _osg.Box_accept(self, *args)

    def valid(self):
        """valid(Box self) -> bool"""
        return _osg.Box_valid(self)

    def set(self, *args):
        """set(Box self, Vec3f center, Vec3f halfLengths)"""
        return _osg.Box_set(self, *args)

    def setCenter(self, *args):
        """setCenter(Box self, Vec3f center)"""
        return _osg.Box_setCenter(self, *args)

    def getCenter(self):
        """getCenter(Box self) -> Vec3f"""
        return _osg.Box_getCenter(self)

    def setHalfLengths(self, *args):
        """setHalfLengths(Box self, Vec3f halfLengths)"""
        return _osg.Box_setHalfLengths(self, *args)

    def getHalfLengths(self):
        """getHalfLengths(Box self) -> Vec3f"""
        return _osg.Box_getHalfLengths(self)

    def setRotation(self, *args):
        """setRotation(Box self, Quat quat)"""
        return _osg.Box_setRotation(self, *args)

    def getRotation(self):
        """getRotation(Box self) -> Quat"""
        return _osg.Box_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(Box self) -> Matrixd"""
        return _osg.Box_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(Box self) -> bool"""
        return _osg.Box_zeroRotation(self)

Box_swigregister = _osg.Box_swigregister
Box_swigregister(Box)

class Cone(Shape):
    """Proxy of C++ osg::Cone class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cone, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Cone self) -> Cone
        __init__(osg::Cone self, Vec3f center, float radius, float height) -> Cone
        __init__(osg::Cone self, Cone cone, CopyOp copyop=SHALLOW_COPY) -> Cone
        __init__(osg::Cone self, Cone cone) -> Cone
        """
        this = _osg.new_Cone(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Cone self) -> Object"""
        return _osg.Cone_cloneType(self)

    def clone(self, *args):
        """clone(Cone self, CopyOp copyop) -> Object"""
        return _osg.Cone_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Cone self, Object obj) -> bool"""
        return _osg.Cone_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Cone self) -> char const *"""
        return _osg.Cone_libraryName(self)

    def className(self):
        """className(Cone self) -> char const *"""
        return _osg.Cone_className(self)

    def accept(self, *args):
        """
        accept(Cone self, ShapeVisitor sv)
        accept(Cone self, ConstShapeVisitor csv)
        """
        return _osg.Cone_accept(self, *args)

    def valid(self):
        """valid(Cone self) -> bool"""
        return _osg.Cone_valid(self)

    def set(self, *args):
        """set(Cone self, Vec3f center, float radius, float height)"""
        return _osg.Cone_set(self, *args)

    def setCenter(self, *args):
        """setCenter(Cone self, Vec3f center)"""
        return _osg.Cone_setCenter(self, *args)

    def getCenter(self):
        """getCenter(Cone self) -> Vec3f"""
        return _osg.Cone_getCenter(self)

    def setRadius(self, *args):
        """setRadius(Cone self, float radius)"""
        return _osg.Cone_setRadius(self, *args)

    def getRadius(self):
        """getRadius(Cone self) -> float"""
        return _osg.Cone_getRadius(self)

    def setHeight(self, *args):
        """setHeight(Cone self, float height)"""
        return _osg.Cone_setHeight(self, *args)

    def getHeight(self):
        """getHeight(Cone self) -> float"""
        return _osg.Cone_getHeight(self)

    def setRotation(self, *args):
        """setRotation(Cone self, Quat quat)"""
        return _osg.Cone_setRotation(self, *args)

    def getRotation(self):
        """getRotation(Cone self) -> Quat"""
        return _osg.Cone_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(Cone self) -> Matrixd"""
        return _osg.Cone_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(Cone self) -> bool"""
        return _osg.Cone_zeroRotation(self)

    def getBaseOffsetFactor(self):
        """getBaseOffsetFactor(Cone self) -> float"""
        return _osg.Cone_getBaseOffsetFactor(self)

    def getBaseOffset(self):
        """getBaseOffset(Cone self) -> float"""
        return _osg.Cone_getBaseOffset(self)

Cone_swigregister = _osg.Cone_swigregister
Cone_swigregister(Cone)

class Cylinder(Shape):
    """Proxy of C++ osg::Cylinder class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cylinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Cylinder self) -> Cylinder
        __init__(osg::Cylinder self, Vec3f center, float radius, float height) -> Cylinder
        __init__(osg::Cylinder self, Cylinder cylinder, CopyOp copyop=SHALLOW_COPY) -> Cylinder
        __init__(osg::Cylinder self, Cylinder cylinder) -> Cylinder
        """
        this = _osg.new_Cylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Cylinder self) -> Object"""
        return _osg.Cylinder_cloneType(self)

    def clone(self, *args):
        """clone(Cylinder self, CopyOp copyop) -> Object"""
        return _osg.Cylinder_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Cylinder self, Object obj) -> bool"""
        return _osg.Cylinder_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Cylinder self) -> char const *"""
        return _osg.Cylinder_libraryName(self)

    def className(self):
        """className(Cylinder self) -> char const *"""
        return _osg.Cylinder_className(self)

    def accept(self, *args):
        """
        accept(Cylinder self, ShapeVisitor sv)
        accept(Cylinder self, ConstShapeVisitor csv)
        """
        return _osg.Cylinder_accept(self, *args)

    def valid(self):
        """valid(Cylinder self) -> bool"""
        return _osg.Cylinder_valid(self)

    def set(self, *args):
        """set(Cylinder self, Vec3f center, float radius, float height)"""
        return _osg.Cylinder_set(self, *args)

    def setCenter(self, *args):
        """setCenter(Cylinder self, Vec3f center)"""
        return _osg.Cylinder_setCenter(self, *args)

    def getCenter(self):
        """getCenter(Cylinder self) -> Vec3f"""
        return _osg.Cylinder_getCenter(self)

    def setRadius(self, *args):
        """setRadius(Cylinder self, float radius)"""
        return _osg.Cylinder_setRadius(self, *args)

    def getRadius(self):
        """getRadius(Cylinder self) -> float"""
        return _osg.Cylinder_getRadius(self)

    def setHeight(self, *args):
        """setHeight(Cylinder self, float height)"""
        return _osg.Cylinder_setHeight(self, *args)

    def getHeight(self):
        """getHeight(Cylinder self) -> float"""
        return _osg.Cylinder_getHeight(self)

    def setRotation(self, *args):
        """setRotation(Cylinder self, Quat quat)"""
        return _osg.Cylinder_setRotation(self, *args)

    def getRotation(self):
        """getRotation(Cylinder self) -> Quat"""
        return _osg.Cylinder_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(Cylinder self) -> Matrixd"""
        return _osg.Cylinder_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(Cylinder self) -> bool"""
        return _osg.Cylinder_zeroRotation(self)

Cylinder_swigregister = _osg.Cylinder_swigregister
Cylinder_swigregister(Cylinder)

class Capsule(Shape):
    """Proxy of C++ osg::Capsule class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Capsule, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Capsule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Capsule self) -> Capsule
        __init__(osg::Capsule self, Vec3f center, float radius, float height) -> Capsule
        __init__(osg::Capsule self, Capsule capsule, CopyOp copyop=SHALLOW_COPY) -> Capsule
        __init__(osg::Capsule self, Capsule capsule) -> Capsule
        """
        this = _osg.new_Capsule(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Capsule self) -> Object"""
        return _osg.Capsule_cloneType(self)

    def clone(self, *args):
        """clone(Capsule self, CopyOp copyop) -> Object"""
        return _osg.Capsule_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Capsule self, Object obj) -> bool"""
        return _osg.Capsule_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Capsule self) -> char const *"""
        return _osg.Capsule_libraryName(self)

    def className(self):
        """className(Capsule self) -> char const *"""
        return _osg.Capsule_className(self)

    def accept(self, *args):
        """
        accept(Capsule self, ShapeVisitor sv)
        accept(Capsule self, ConstShapeVisitor csv)
        """
        return _osg.Capsule_accept(self, *args)

    def valid(self):
        """valid(Capsule self) -> bool"""
        return _osg.Capsule_valid(self)

    def set(self, *args):
        """set(Capsule self, Vec3f center, float radius, float height)"""
        return _osg.Capsule_set(self, *args)

    def setCenter(self, *args):
        """setCenter(Capsule self, Vec3f center)"""
        return _osg.Capsule_setCenter(self, *args)

    def getCenter(self):
        """getCenter(Capsule self) -> Vec3f"""
        return _osg.Capsule_getCenter(self)

    def setRadius(self, *args):
        """setRadius(Capsule self, float radius)"""
        return _osg.Capsule_setRadius(self, *args)

    def getRadius(self):
        """getRadius(Capsule self) -> float"""
        return _osg.Capsule_getRadius(self)

    def setHeight(self, *args):
        """setHeight(Capsule self, float height)"""
        return _osg.Capsule_setHeight(self, *args)

    def getHeight(self):
        """getHeight(Capsule self) -> float"""
        return _osg.Capsule_getHeight(self)

    def setRotation(self, *args):
        """setRotation(Capsule self, Quat quat)"""
        return _osg.Capsule_setRotation(self, *args)

    def getRotation(self):
        """getRotation(Capsule self) -> Quat"""
        return _osg.Capsule_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(Capsule self) -> Matrixd"""
        return _osg.Capsule_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(Capsule self) -> bool"""
        return _osg.Capsule_zeroRotation(self)

Capsule_swigregister = _osg.Capsule_swigregister
Capsule_swigregister(Capsule)

class InfinitePlane(Shape,Plane):
    """Proxy of C++ osg::InfinitePlane class"""
    __swig_setmethods__ = {}
    for _s in [Shape,Plane]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfinitePlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape,Plane]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfinitePlane, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::InfinitePlane self) -> InfinitePlane
        __init__(osg::InfinitePlane self, InfinitePlane plane, CopyOp copyop=SHALLOW_COPY) -> InfinitePlane
        __init__(osg::InfinitePlane self, InfinitePlane plane) -> InfinitePlane
        """
        this = _osg.new_InfinitePlane(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(InfinitePlane self) -> Object"""
        return _osg.InfinitePlane_cloneType(self)

    def clone(self, *args):
        """clone(InfinitePlane self, CopyOp copyop) -> Object"""
        return _osg.InfinitePlane_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(InfinitePlane self, Object obj) -> bool"""
        return _osg.InfinitePlane_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(InfinitePlane self) -> char const *"""
        return _osg.InfinitePlane_libraryName(self)

    def className(self):
        """className(InfinitePlane self) -> char const *"""
        return _osg.InfinitePlane_className(self)

    def accept(self, *args):
        """
        accept(InfinitePlane self, ShapeVisitor sv)
        accept(InfinitePlane self, ConstShapeVisitor csv)
        """
        return _osg.InfinitePlane_accept(self, *args)

InfinitePlane_swigregister = _osg.InfinitePlane_swigregister
InfinitePlane_swigregister(InfinitePlane)

class TriangleMesh(Shape):
    """Proxy of C++ osg::TriangleMesh class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleMesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TriangleMesh self) -> TriangleMesh
        __init__(osg::TriangleMesh self, TriangleMesh mesh, CopyOp copyop=SHALLOW_COPY) -> TriangleMesh
        __init__(osg::TriangleMesh self, TriangleMesh mesh) -> TriangleMesh
        """
        this = _osg.new_TriangleMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TriangleMesh self) -> Object"""
        return _osg.TriangleMesh_cloneType(self)

    def clone(self, *args):
        """clone(TriangleMesh self, CopyOp copyop) -> Object"""
        return _osg.TriangleMesh_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TriangleMesh self, Object obj) -> bool"""
        return _osg.TriangleMesh_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TriangleMesh self) -> char const *"""
        return _osg.TriangleMesh_libraryName(self)

    def className(self):
        """className(TriangleMesh self) -> char const *"""
        return _osg.TriangleMesh_className(self)

    def accept(self, *args):
        """
        accept(TriangleMesh self, ShapeVisitor sv)
        accept(TriangleMesh self, ConstShapeVisitor csv)
        """
        return _osg.TriangleMesh_accept(self, *args)

TriangleMesh_swigregister = _osg.TriangleMesh_swigregister
TriangleMesh_swigregister(TriangleMesh)

class ConvexHull(TriangleMesh):
    """Proxy of C++ osg::ConvexHull class"""
    __swig_setmethods__ = {}
    for _s in [TriangleMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexHull, name, value)
    __swig_getmethods__ = {}
    for _s in [TriangleMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexHull, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ConvexHull self) -> ConvexHull
        __init__(osg::ConvexHull self, ConvexHull hull, CopyOp copyop=SHALLOW_COPY) -> ConvexHull
        __init__(osg::ConvexHull self, ConvexHull hull) -> ConvexHull
        """
        this = _osg.new_ConvexHull(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ConvexHull self) -> Object"""
        return _osg.ConvexHull_cloneType(self)

    def clone(self, *args):
        """clone(ConvexHull self, CopyOp copyop) -> Object"""
        return _osg.ConvexHull_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ConvexHull self, Object obj) -> bool"""
        return _osg.ConvexHull_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ConvexHull self) -> char const *"""
        return _osg.ConvexHull_libraryName(self)

    def className(self):
        """className(ConvexHull self) -> char const *"""
        return _osg.ConvexHull_className(self)

    def accept(self, *args):
        """
        accept(ConvexHull self, ShapeVisitor sv)
        accept(ConvexHull self, ConstShapeVisitor csv)
        """
        return _osg.ConvexHull_accept(self, *args)

ConvexHull_swigregister = _osg.ConvexHull_swigregister
ConvexHull_swigregister(ConvexHull)

class HeightField(Shape):
    """Proxy of C++ osg::HeightField class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeightField, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeightField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::HeightField self) -> HeightField
        __init__(osg::HeightField self, HeightField mesh, CopyOp copyop=SHALLOW_COPY) -> HeightField
        __init__(osg::HeightField self, HeightField mesh) -> HeightField
        """
        this = _osg.new_HeightField(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(HeightField self) -> Object"""
        return _osg.HeightField_cloneType(self)

    def clone(self, *args):
        """clone(HeightField self, CopyOp copyop) -> Object"""
        return _osg.HeightField_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(HeightField self, Object obj) -> bool"""
        return _osg.HeightField_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(HeightField self) -> char const *"""
        return _osg.HeightField_libraryName(self)

    def className(self):
        """className(HeightField self) -> char const *"""
        return _osg.HeightField_className(self)

    def accept(self, *args):
        """
        accept(HeightField self, ShapeVisitor sv)
        accept(HeightField self, ConstShapeVisitor csv)
        """
        return _osg.HeightField_accept(self, *args)

    def allocate(self, *args):
        """allocate(HeightField self, unsigned int numColumns, unsigned int numRows)"""
        return _osg.HeightField_allocate(self, *args)

    def getNumColumns(self):
        """getNumColumns(HeightField self) -> unsigned int"""
        return _osg.HeightField_getNumColumns(self)

    def getNumRows(self):
        """getNumRows(HeightField self) -> unsigned int"""
        return _osg.HeightField_getNumRows(self)

    def setOrigin(self, *args):
        """setOrigin(HeightField self, Vec3f origin)"""
        return _osg.HeightField_setOrigin(self, *args)

    def getOrigin(self):
        """getOrigin(HeightField self) -> Vec3f"""
        return _osg.HeightField_getOrigin(self)

    def setXInterval(self, *args):
        """setXInterval(HeightField self, float dx)"""
        return _osg.HeightField_setXInterval(self, *args)

    def getXInterval(self):
        """getXInterval(HeightField self) -> float"""
        return _osg.HeightField_getXInterval(self)

    def setYInterval(self, *args):
        """setYInterval(HeightField self, float dy)"""
        return _osg.HeightField_setYInterval(self, *args)

    def getYInterval(self):
        """getYInterval(HeightField self) -> float"""
        return _osg.HeightField_getYInterval(self)

    def getFloatArray(self, *args):
        """
        getFloatArray(HeightField self) -> osg::FloatArray
        getFloatArray(HeightField self) -> osg::FloatArray const *
        """
        return _osg.HeightField_getFloatArray(self, *args)

    def getHeightList(self, *args):
        """
        getHeightList(HeightField self) -> vectorGLfloat
        getHeightList(HeightField self) -> vectorGLfloat
        """
        return _osg.HeightField_getHeightList(self, *args)

    def setSkirtHeight(self, *args):
        """setSkirtHeight(HeightField self, float skirtHeight)"""
        return _osg.HeightField_setSkirtHeight(self, *args)

    def getSkirtHeight(self):
        """getSkirtHeight(HeightField self) -> float"""
        return _osg.HeightField_getSkirtHeight(self)

    def setBorderWidth(self, *args):
        """setBorderWidth(HeightField self, unsigned int borderWidth)"""
        return _osg.HeightField_setBorderWidth(self, *args)

    def getBorderWidth(self):
        """getBorderWidth(HeightField self) -> unsigned int"""
        return _osg.HeightField_getBorderWidth(self)

    def setRotation(self, *args):
        """setRotation(HeightField self, Quat quat)"""
        return _osg.HeightField_setRotation(self, *args)

    def getRotation(self):
        """getRotation(HeightField self) -> Quat"""
        return _osg.HeightField_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(HeightField self) -> Matrixd"""
        return _osg.HeightField_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(HeightField self) -> bool"""
        return _osg.HeightField_zeroRotation(self)

    def setHeight(self, *args):
        """setHeight(HeightField self, unsigned int c, unsigned int r, float value)"""
        return _osg.HeightField_setHeight(self, *args)

    def getHeight(self, *args):
        """
        getHeight(HeightField self, unsigned int c, unsigned int r) -> float
        getHeight(HeightField self, unsigned int c, unsigned int r) -> float
        """
        return _osg.HeightField_getHeight(self, *args)

    def getVertex(self, *args):
        """getVertex(HeightField self, unsigned int c, unsigned int r) -> Vec3f"""
        return _osg.HeightField_getVertex(self, *args)

    def getNormal(self, *args):
        """getNormal(HeightField self, unsigned int c, unsigned int r) -> Vec3f"""
        return _osg.HeightField_getNormal(self, *args)

    def getHeightDelta(self, *args):
        """getHeightDelta(HeightField self, unsigned int c, unsigned int r) -> Vec2f"""
        return _osg.HeightField_getHeightDelta(self, *args)

HeightField_swigregister = _osg.HeightField_swigregister
HeightField_swigregister(HeightField)

class CompositeShape(Shape):
    """Proxy of C++ osg::CompositeShape class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeShape, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::CompositeShape self) -> CompositeShape
        __init__(osg::CompositeShape self, CompositeShape cs, CopyOp copyop=SHALLOW_COPY) -> CompositeShape
        __init__(osg::CompositeShape self, CompositeShape cs) -> CompositeShape
        """
        this = _osg.new_CompositeShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(CompositeShape self) -> Object"""
        return _osg.CompositeShape_cloneType(self)

    def clone(self, *args):
        """clone(CompositeShape self, CopyOp copyop) -> Object"""
        return _osg.CompositeShape_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(CompositeShape self, Object obj) -> bool"""
        return _osg.CompositeShape_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(CompositeShape self) -> char const *"""
        return _osg.CompositeShape_libraryName(self)

    def className(self):
        """className(CompositeShape self) -> char const *"""
        return _osg.CompositeShape_className(self)

    def accept(self, *args):
        """
        accept(CompositeShape self, ShapeVisitor sv)
        accept(CompositeShape self, ConstShapeVisitor csv)
        """
        return _osg.CompositeShape_accept(self, *args)

    def setShape(self, *args):
        """setShape(CompositeShape self, Shape shape)"""
        return _osg.CompositeShape_setShape(self, *args)

    def getShape(self, *args):
        """
        getShape(CompositeShape self) -> Shape
        getShape(CompositeShape self) -> Shape
        """
        return _osg.CompositeShape_getShape(self, *args)

    def getNumChildren(self):
        """getNumChildren(CompositeShape self) -> unsigned int"""
        return _osg.CompositeShape_getNumChildren(self)

    def getChild(self, *args):
        """
        getChild(CompositeShape self, unsigned int i) -> Shape
        getChild(CompositeShape self, unsigned int i) -> Shape
        """
        return _osg.CompositeShape_getChild(self, *args)

    def addChild(self, *args):
        """addChild(CompositeShape self, Shape shape)"""
        return _osg.CompositeShape_addChild(self, *args)

    def removeChild(self, *args):
        """removeChild(CompositeShape self, unsigned int i)"""
        return _osg.CompositeShape_removeChild(self, *args)

    def findChildNo(self, *args):
        """findChildNo(CompositeShape self, Shape shape) -> unsigned int"""
        return _osg.CompositeShape_findChildNo(self, *args)

CompositeShape_swigregister = _osg.CompositeShape_swigregister
CompositeShape_swigregister(CompositeShape)

OSG_SHAPEDRAWABLE = _osg.OSG_SHAPEDRAWABLE
class TessellationHints(Object):
    """Proxy of C++ osg::TessellationHints class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TessellationHints, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TessellationHints, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TessellationHints self) -> TessellationHints
        __init__(osg::TessellationHints self, TessellationHints tess, CopyOp copyop=SHALLOW_COPY) -> TessellationHints
        __init__(osg::TessellationHints self, TessellationHints tess) -> TessellationHints
        """
        this = _osg.new_TessellationHints(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TessellationHints self) -> Object"""
        return _osg.TessellationHints_cloneType(self)

    def clone(self, *args):
        """clone(TessellationHints self, CopyOp copyop) -> Object"""
        return _osg.TessellationHints_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TessellationHints self, Object obj) -> bool"""
        return _osg.TessellationHints_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TessellationHints self) -> char const *"""
        return _osg.TessellationHints_libraryName(self)

    def className(self):
        """className(TessellationHints self) -> char const *"""
        return _osg.TessellationHints_className(self)

    USE_SHAPE_DEFAULTS = _osg.TessellationHints_USE_SHAPE_DEFAULTS
    USE_TARGET_NUM_FACES = _osg.TessellationHints_USE_TARGET_NUM_FACES
    def setTessellationMode(self, *args):
        """setTessellationMode(TessellationHints self, osg::TessellationHints::TessellationMode mode)"""
        return _osg.TessellationHints_setTessellationMode(self, *args)

    def getTessellationMode(self):
        """getTessellationMode(TessellationHints self) -> osg::TessellationHints::TessellationMode"""
        return _osg.TessellationHints_getTessellationMode(self)

    def setDetailRatio(self, *args):
        """setDetailRatio(TessellationHints self, float ratio)"""
        return _osg.TessellationHints_setDetailRatio(self, *args)

    def getDetailRatio(self):
        """getDetailRatio(TessellationHints self) -> float"""
        return _osg.TessellationHints_getDetailRatio(self)

    def setTargetNumFaces(self, *args):
        """setTargetNumFaces(TessellationHints self, unsigned int target)"""
        return _osg.TessellationHints_setTargetNumFaces(self, *args)

    def getTargetNumFaces(self):
        """getTargetNumFaces(TessellationHints self) -> unsigned int"""
        return _osg.TessellationHints_getTargetNumFaces(self)

    def setCreateFrontFace(self, *args):
        """setCreateFrontFace(TessellationHints self, bool on)"""
        return _osg.TessellationHints_setCreateFrontFace(self, *args)

    def getCreateFrontFace(self):
        """getCreateFrontFace(TessellationHints self) -> bool"""
        return _osg.TessellationHints_getCreateFrontFace(self)

    def setCreateBackFace(self, *args):
        """setCreateBackFace(TessellationHints self, bool on)"""
        return _osg.TessellationHints_setCreateBackFace(self, *args)

    def getCreateBackFace(self):
        """getCreateBackFace(TessellationHints self) -> bool"""
        return _osg.TessellationHints_getCreateBackFace(self)

    def setCreateNormals(self, *args):
        """setCreateNormals(TessellationHints self, bool on)"""
        return _osg.TessellationHints_setCreateNormals(self, *args)

    def getCreateNormals(self):
        """getCreateNormals(TessellationHints self) -> bool"""
        return _osg.TessellationHints_getCreateNormals(self)

    def setCreateTextureCoords(self, *args):
        """setCreateTextureCoords(TessellationHints self, bool on)"""
        return _osg.TessellationHints_setCreateTextureCoords(self, *args)

    def getCreateTextureCoords(self):
        """getCreateTextureCoords(TessellationHints self) -> bool"""
        return _osg.TessellationHints_getCreateTextureCoords(self)

    def setCreateTop(self, *args):
        """setCreateTop(TessellationHints self, bool on)"""
        return _osg.TessellationHints_setCreateTop(self, *args)

    def getCreateTop(self):
        """getCreateTop(TessellationHints self) -> bool"""
        return _osg.TessellationHints_getCreateTop(self)

    def setCreateBody(self, *args):
        """setCreateBody(TessellationHints self, bool on)"""
        return _osg.TessellationHints_setCreateBody(self, *args)

    def getCreateBody(self):
        """getCreateBody(TessellationHints self) -> bool"""
        return _osg.TessellationHints_getCreateBody(self)

    def setCreateBottom(self, *args):
        """setCreateBottom(TessellationHints self, bool on)"""
        return _osg.TessellationHints_setCreateBottom(self, *args)

    def getCreateBottom(self):
        """getCreateBottom(TessellationHints self) -> bool"""
        return _osg.TessellationHints_getCreateBottom(self)

TessellationHints_swigregister = _osg.TessellationHints_swigregister
TessellationHints_swigregister(TessellationHints)

class ShapeDrawable(Drawable):
    """Proxy of C++ osg::ShapeDrawable class"""
    __swig_setmethods__ = {}
    for _s in [Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeDrawable, name, value)
    __swig_getmethods__ = {}
    for _s in [Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeDrawable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ShapeDrawable self) -> ShapeDrawable
        __init__(osg::ShapeDrawable self, Shape shape, TessellationHints hints=None) -> ShapeDrawable
        __init__(osg::ShapeDrawable self, Shape shape) -> ShapeDrawable
        __init__(osg::ShapeDrawable self, ShapeDrawable pg, CopyOp copyop=SHALLOW_COPY) -> ShapeDrawable
        __init__(osg::ShapeDrawable self, ShapeDrawable pg) -> ShapeDrawable
        """
        this = _osg.new_ShapeDrawable(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ShapeDrawable self) -> Object"""
        return _osg.ShapeDrawable_cloneType(self)

    def clone(self, *args):
        """clone(ShapeDrawable self, CopyOp copyop) -> Object"""
        return _osg.ShapeDrawable_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ShapeDrawable self, Object obj) -> bool"""
        return _osg.ShapeDrawable_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ShapeDrawable self) -> char const *"""
        return _osg.ShapeDrawable_libraryName(self)

    def className(self):
        """className(ShapeDrawable self) -> char const *"""
        return _osg.ShapeDrawable_className(self)

    def setColor(self, *args):
        """setColor(ShapeDrawable self, Vec4f color)"""
        return _osg.ShapeDrawable_setColor(self, *args)

    def getColor(self):
        """getColor(ShapeDrawable self) -> Vec4f"""
        return _osg.ShapeDrawable_getColor(self)

    def setTessellationHints(self, *args):
        """setTessellationHints(ShapeDrawable self, TessellationHints hints)"""
        return _osg.ShapeDrawable_setTessellationHints(self, *args)

    def getTessellationHints(self, *args):
        """
        getTessellationHints(ShapeDrawable self) -> TessellationHints
        getTessellationHints(ShapeDrawable self) -> TessellationHints
        """
        return _osg.ShapeDrawable_getTessellationHints(self, *args)

    def drawImplementation(self, *args):
        """drawImplementation(ShapeDrawable self, RenderInfo renderInfo)"""
        return _osg.ShapeDrawable_drawImplementation(self, *args)

    def accept(self, *args):
        """
        accept(ShapeDrawable self, osg::Drawable::AttributeFunctor & arg2)
        accept(ShapeDrawable self, osg::Drawable::ConstAttributeFunctor & arg2)
        accept(ShapeDrawable self, PrimitiveIndexFunctor arg2)
        accept(ShapeDrawable self, osg::Drawable::ConstAttributeFunctor & af)
        accept(ShapeDrawable self, PrimitiveFunctor pf)
        """
        return _osg.ShapeDrawable_accept(self, *args)

    def computeBound(self):
        """computeBound(ShapeDrawable self) -> BoundingBoxf"""
        return _osg.ShapeDrawable_computeBound(self)

ShapeDrawable_swigregister = _osg.ShapeDrawable_swigregister
ShapeDrawable_swigregister(ShapeDrawable)

class vectorNode(_object):
    """Proxy of C++ std::vector<(p.osg::Node)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorNode, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorNode self) -> SwigPyIterator"""
        return _osg.vectorNode_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorNode self) -> bool"""
        return _osg.vectorNode___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorNode self) -> bool"""
        return _osg.vectorNode___bool__(self)

    def __len__(self):
        """__len__(vectorNode self) -> std::vector< osg::Node * >::size_type"""
        return _osg.vectorNode___len__(self)

    def pop(self):
        """pop(vectorNode self) -> Node"""
        return _osg.vectorNode_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorNode self, std::vector< osg::Node * >::difference_type i, std::vector< osg::Node * >::difference_type j) -> vectorNode"""
        return _osg.vectorNode___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorNode self, std::vector< osg::Node * >::difference_type i, std::vector< osg::Node * >::difference_type j, 
            vectorNode v=std::vector< osg::Node *,std::allocator< osg::Node * > >())
        __setslice__(vectorNode self, std::vector< osg::Node * >::difference_type i, std::vector< osg::Node * >::difference_type j)
        """
        return _osg.vectorNode___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorNode self, std::vector< osg::Node * >::difference_type i, std::vector< osg::Node * >::difference_type j)"""
        return _osg.vectorNode___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorNode self, std::vector< osg::Node * >::difference_type i)
        __delitem__(vectorNode self, PySliceObject * slice)
        """
        return _osg.vectorNode___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorNode self, PySliceObject * slice) -> vectorNode
        __getitem__(vectorNode self, std::vector< osg::Node * >::difference_type i) -> Node
        """
        return _osg.vectorNode___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorNode self, PySliceObject * slice, vectorNode v)
        __setitem__(vectorNode self, PySliceObject * slice)
        __setitem__(vectorNode self, std::vector< osg::Node * >::difference_type i, Node x)
        """
        return _osg.vectorNode___setitem__(self, *args)

    def append(self, *args):
        """append(vectorNode self, Node x)"""
        return _osg.vectorNode_append(self, *args)

    def empty(self):
        """empty(vectorNode self) -> bool"""
        return _osg.vectorNode_empty(self)

    def size(self):
        """size(vectorNode self) -> std::vector< osg::Node * >::size_type"""
        return _osg.vectorNode_size(self)

    def clear(self):
        """clear(vectorNode self)"""
        return _osg.vectorNode_clear(self)

    def swap(self, *args):
        """swap(vectorNode self, vectorNode v)"""
        return _osg.vectorNode_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorNode self) -> std::vector< osg::Node * >::allocator_type"""
        return _osg.vectorNode_get_allocator(self)

    def begin(self):
        """begin(vectorNode self) -> std::vector< osg::Node * >::iterator"""
        return _osg.vectorNode_begin(self)

    def end(self):
        """end(vectorNode self) -> std::vector< osg::Node * >::iterator"""
        return _osg.vectorNode_end(self)

    def rbegin(self):
        """rbegin(vectorNode self) -> std::vector< osg::Node * >::reverse_iterator"""
        return _osg.vectorNode_rbegin(self)

    def rend(self):
        """rend(vectorNode self) -> std::vector< osg::Node * >::reverse_iterator"""
        return _osg.vectorNode_rend(self)

    def pop_back(self):
        """pop_back(vectorNode self)"""
        return _osg.vectorNode_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorNode self, std::vector< osg::Node * >::iterator pos) -> std::vector< osg::Node * >::iterator
        erase(vectorNode self, std::vector< osg::Node * >::iterator first, std::vector< osg::Node * >::iterator last) -> std::vector< osg::Node * >::iterator
        """
        return _osg.vectorNode_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.osg::Node)> self) -> vectorNode
        __init__(std::vector<(p.osg::Node)> self, vectorNode arg2) -> vectorNode
        __init__(std::vector<(p.osg::Node)> self, std::vector< osg::Node * >::size_type size) -> vectorNode
        __init__(std::vector<(p.osg::Node)> self, std::vector< osg::Node * >::size_type size, Node value) -> vectorNode
        """
        this = _osg.new_vectorNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorNode self, Node x)"""
        return _osg.vectorNode_push_back(self, *args)

    def front(self):
        """front(vectorNode self) -> Node"""
        return _osg.vectorNode_front(self)

    def back(self):
        """back(vectorNode self) -> Node"""
        return _osg.vectorNode_back(self)

    def assign(self, *args):
        """assign(vectorNode self, std::vector< osg::Node * >::size_type n, Node x)"""
        return _osg.vectorNode_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorNode self, std::vector< osg::Node * >::size_type new_size)
        resize(vectorNode self, std::vector< osg::Node * >::size_type new_size, Node x)
        """
        return _osg.vectorNode_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorNode self, std::vector< osg::Node * >::iterator pos, Node x) -> std::vector< osg::Node * >::iterator
        insert(vectorNode self, std::vector< osg::Node * >::iterator pos, std::vector< osg::Node * >::size_type n, 
            Node x)
        """
        return _osg.vectorNode_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorNode self, std::vector< osg::Node * >::size_type n)"""
        return _osg.vectorNode_reserve(self, *args)

    def capacity(self):
        """capacity(vectorNode self) -> std::vector< osg::Node * >::size_type"""
        return _osg.vectorNode_capacity(self)

    __swig_destroy__ = _osg.delete_vectorNode
    __del__ = lambda self : None;
vectorNode_swigregister = _osg.vectorNode_swigregister
vectorNode_swigregister(vectorNode)

class vectorGroup(_object):
    """Proxy of C++ std::vector<(p.osg::Group)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGroup, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorGroup self) -> SwigPyIterator"""
        return _osg.vectorGroup_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorGroup self) -> bool"""
        return _osg.vectorGroup___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorGroup self) -> bool"""
        return _osg.vectorGroup___bool__(self)

    def __len__(self):
        """__len__(vectorGroup self) -> std::vector< osg::Group * >::size_type"""
        return _osg.vectorGroup___len__(self)

    def pop(self):
        """pop(vectorGroup self) -> Group"""
        return _osg.vectorGroup_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorGroup self, std::vector< osg::Group * >::difference_type i, std::vector< osg::Group * >::difference_type j) -> vectorGroup"""
        return _osg.vectorGroup___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorGroup self, std::vector< osg::Group * >::difference_type i, std::vector< osg::Group * >::difference_type j, 
            vectorGroup v=std::vector< osg::Group *,std::allocator< osg::Group * > >())
        __setslice__(vectorGroup self, std::vector< osg::Group * >::difference_type i, std::vector< osg::Group * >::difference_type j)
        """
        return _osg.vectorGroup___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorGroup self, std::vector< osg::Group * >::difference_type i, std::vector< osg::Group * >::difference_type j)"""
        return _osg.vectorGroup___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorGroup self, std::vector< osg::Group * >::difference_type i)
        __delitem__(vectorGroup self, PySliceObject * slice)
        """
        return _osg.vectorGroup___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorGroup self, PySliceObject * slice) -> vectorGroup
        __getitem__(vectorGroup self, std::vector< osg::Group * >::difference_type i) -> Group
        """
        return _osg.vectorGroup___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorGroup self, PySliceObject * slice, vectorGroup v)
        __setitem__(vectorGroup self, PySliceObject * slice)
        __setitem__(vectorGroup self, std::vector< osg::Group * >::difference_type i, Group x)
        """
        return _osg.vectorGroup___setitem__(self, *args)

    def append(self, *args):
        """append(vectorGroup self, Group x)"""
        return _osg.vectorGroup_append(self, *args)

    def empty(self):
        """empty(vectorGroup self) -> bool"""
        return _osg.vectorGroup_empty(self)

    def size(self):
        """size(vectorGroup self) -> std::vector< osg::Group * >::size_type"""
        return _osg.vectorGroup_size(self)

    def clear(self):
        """clear(vectorGroup self)"""
        return _osg.vectorGroup_clear(self)

    def swap(self, *args):
        """swap(vectorGroup self, vectorGroup v)"""
        return _osg.vectorGroup_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorGroup self) -> std::vector< osg::Group * >::allocator_type"""
        return _osg.vectorGroup_get_allocator(self)

    def begin(self):
        """begin(vectorGroup self) -> std::vector< osg::Group * >::iterator"""
        return _osg.vectorGroup_begin(self)

    def end(self):
        """end(vectorGroup self) -> std::vector< osg::Group * >::iterator"""
        return _osg.vectorGroup_end(self)

    def rbegin(self):
        """rbegin(vectorGroup self) -> std::vector< osg::Group * >::reverse_iterator"""
        return _osg.vectorGroup_rbegin(self)

    def rend(self):
        """rend(vectorGroup self) -> std::vector< osg::Group * >::reverse_iterator"""
        return _osg.vectorGroup_rend(self)

    def pop_back(self):
        """pop_back(vectorGroup self)"""
        return _osg.vectorGroup_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorGroup self, std::vector< osg::Group * >::iterator pos) -> std::vector< osg::Group * >::iterator
        erase(vectorGroup self, std::vector< osg::Group * >::iterator first, std::vector< osg::Group * >::iterator last) -> std::vector< osg::Group * >::iterator
        """
        return _osg.vectorGroup_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.osg::Group)> self) -> vectorGroup
        __init__(std::vector<(p.osg::Group)> self, vectorGroup arg2) -> vectorGroup
        __init__(std::vector<(p.osg::Group)> self, std::vector< osg::Group * >::size_type size) -> vectorGroup
        __init__(std::vector<(p.osg::Group)> self, std::vector< osg::Group * >::size_type size, Group value) -> vectorGroup
        """
        this = _osg.new_vectorGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorGroup self, Group x)"""
        return _osg.vectorGroup_push_back(self, *args)

    def front(self):
        """front(vectorGroup self) -> Group"""
        return _osg.vectorGroup_front(self)

    def back(self):
        """back(vectorGroup self) -> Group"""
        return _osg.vectorGroup_back(self)

    def assign(self, *args):
        """assign(vectorGroup self, std::vector< osg::Group * >::size_type n, Group x)"""
        return _osg.vectorGroup_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorGroup self, std::vector< osg::Group * >::size_type new_size)
        resize(vectorGroup self, std::vector< osg::Group * >::size_type new_size, Group x)
        """
        return _osg.vectorGroup_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorGroup self, std::vector< osg::Group * >::iterator pos, Group x) -> std::vector< osg::Group * >::iterator
        insert(vectorGroup self, std::vector< osg::Group * >::iterator pos, std::vector< osg::Group * >::size_type n, 
            Group x)
        """
        return _osg.vectorGroup_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorGroup self, std::vector< osg::Group * >::size_type n)"""
        return _osg.vectorGroup_reserve(self, *args)

    def capacity(self):
        """capacity(vectorGroup self) -> std::vector< osg::Group * >::size_type"""
        return _osg.vectorGroup_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGroup
    __del__ = lambda self : None;
vectorGroup_swigregister = _osg.vectorGroup_swigregister
vectorGroup_swigregister(vectorGroup)

class vectorMatrix(_object):
    """Proxy of C++ std::vector<(osg::Matrix)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorMatrix, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorMatrix self) -> SwigPyIterator"""
        return _osg.vectorMatrix_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorMatrix self) -> bool"""
        return _osg.vectorMatrix___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorMatrix self) -> bool"""
        return _osg.vectorMatrix___bool__(self)

    def __len__(self):
        """__len__(vectorMatrix self) -> std::vector< osg::Matrixd >::size_type"""
        return _osg.vectorMatrix___len__(self)

    def pop(self):
        """pop(vectorMatrix self) -> Matrixd"""
        return _osg.vectorMatrix_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorMatrix self, std::vector< osg::Matrixd >::difference_type i, std::vector< osg::Matrixd >::difference_type j) -> vectorMatrix"""
        return _osg.vectorMatrix___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorMatrix self, std::vector< osg::Matrixd >::difference_type i, std::vector< osg::Matrixd >::difference_type j, 
            vectorMatrix v=std::vector< osg::Matrixd,std::allocator< osg::Matrixd > >())
        __setslice__(vectorMatrix self, std::vector< osg::Matrixd >::difference_type i, std::vector< osg::Matrixd >::difference_type j)
        """
        return _osg.vectorMatrix___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorMatrix self, std::vector< osg::Matrixd >::difference_type i, std::vector< osg::Matrixd >::difference_type j)"""
        return _osg.vectorMatrix___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorMatrix self, std::vector< osg::Matrixd >::difference_type i)
        __delitem__(vectorMatrix self, PySliceObject * slice)
        """
        return _osg.vectorMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorMatrix self, PySliceObject * slice) -> vectorMatrix
        __getitem__(vectorMatrix self, std::vector< osg::Matrixd >::difference_type i) -> Matrixd
        """
        return _osg.vectorMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorMatrix self, PySliceObject * slice, vectorMatrix v)
        __setitem__(vectorMatrix self, PySliceObject * slice)
        __setitem__(vectorMatrix self, std::vector< osg::Matrixd >::difference_type i, Matrixd x)
        """
        return _osg.vectorMatrix___setitem__(self, *args)

    def append(self, *args):
        """append(vectorMatrix self, Matrixd x)"""
        return _osg.vectorMatrix_append(self, *args)

    def empty(self):
        """empty(vectorMatrix self) -> bool"""
        return _osg.vectorMatrix_empty(self)

    def size(self):
        """size(vectorMatrix self) -> std::vector< osg::Matrixd >::size_type"""
        return _osg.vectorMatrix_size(self)

    def clear(self):
        """clear(vectorMatrix self)"""
        return _osg.vectorMatrix_clear(self)

    def swap(self, *args):
        """swap(vectorMatrix self, vectorMatrix v)"""
        return _osg.vectorMatrix_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorMatrix self) -> std::vector< osg::Matrixd >::allocator_type"""
        return _osg.vectorMatrix_get_allocator(self)

    def begin(self):
        """begin(vectorMatrix self) -> std::vector< osg::Matrixd >::iterator"""
        return _osg.vectorMatrix_begin(self)

    def end(self):
        """end(vectorMatrix self) -> std::vector< osg::Matrixd >::iterator"""
        return _osg.vectorMatrix_end(self)

    def rbegin(self):
        """rbegin(vectorMatrix self) -> std::vector< osg::Matrixd >::reverse_iterator"""
        return _osg.vectorMatrix_rbegin(self)

    def rend(self):
        """rend(vectorMatrix self) -> std::vector< osg::Matrixd >::reverse_iterator"""
        return _osg.vectorMatrix_rend(self)

    def pop_back(self):
        """pop_back(vectorMatrix self)"""
        return _osg.vectorMatrix_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorMatrix self, std::vector< osg::Matrixd >::iterator pos) -> std::vector< osg::Matrixd >::iterator
        erase(vectorMatrix self, std::vector< osg::Matrixd >::iterator first, std::vector< osg::Matrixd >::iterator last) -> std::vector< osg::Matrixd >::iterator
        """
        return _osg.vectorMatrix_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(osg::Matrix)> self) -> vectorMatrix
        __init__(std::vector<(osg::Matrix)> self, vectorMatrix arg2) -> vectorMatrix
        __init__(std::vector<(osg::Matrix)> self, std::vector< osg::Matrixd >::size_type size) -> vectorMatrix
        __init__(std::vector<(osg::Matrix)> self, std::vector< osg::Matrixd >::size_type size, Matrixd value) -> vectorMatrix
        """
        this = _osg.new_vectorMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorMatrix self, Matrixd x)"""
        return _osg.vectorMatrix_push_back(self, *args)

    def front(self):
        """front(vectorMatrix self) -> Matrixd"""
        return _osg.vectorMatrix_front(self)

    def back(self):
        """back(vectorMatrix self) -> Matrixd"""
        return _osg.vectorMatrix_back(self)

    def assign(self, *args):
        """assign(vectorMatrix self, std::vector< osg::Matrixd >::size_type n, Matrixd x)"""
        return _osg.vectorMatrix_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorMatrix self, std::vector< osg::Matrixd >::size_type new_size)
        resize(vectorMatrix self, std::vector< osg::Matrixd >::size_type new_size, Matrixd x)
        """
        return _osg.vectorMatrix_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorMatrix self, std::vector< osg::Matrixd >::iterator pos, Matrixd x) -> std::vector< osg::Matrixd >::iterator
        insert(vectorMatrix self, std::vector< osg::Matrixd >::iterator pos, std::vector< osg::Matrixd >::size_type n, 
            Matrixd x)
        """
        return _osg.vectorMatrix_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorMatrix self, std::vector< osg::Matrixd >::size_type n)"""
        return _osg.vectorMatrix_reserve(self, *args)

    def capacity(self):
        """capacity(vectorMatrix self) -> std::vector< osg::Matrixd >::size_type"""
        return _osg.vectorMatrix_capacity(self)

    __swig_destroy__ = _osg.delete_vectorMatrix
    __del__ = lambda self : None;
vectorMatrix_swigregister = _osg.vectorMatrix_swigregister
vectorMatrix_swigregister(vectorMatrix)

OSG_BOUNDINGBOX = _osg.OSG_BOUNDINGBOX
OSG_NODE = _osg.OSG_NODE
class Node(Object):
    """Proxy of C++ osg::Node class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Node self) -> Node
        __init__(osg::Node self, Node arg2, CopyOp copyop=SHALLOW_COPY) -> Node
        __init__(osg::Node self, Node arg2) -> Node
        """
        this = _osg.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Node self) -> Object"""
        return _osg.Node_cloneType(self)

    def clone(self, *args):
        """clone(Node self, CopyOp copyop) -> Object"""
        return _osg.Node_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Node self, Object obj) -> bool"""
        return _osg.Node_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Node self) -> char const *"""
        return _osg.Node_libraryName(self)

    def className(self):
        """className(Node self) -> char const *"""
        return _osg.Node_className(self)

    def asGroup(self, *args):
        """
        asGroup(Node self) -> Group
        asGroup(Node self) -> Group
        """
        return _osg.Node_asGroup(self, *args)

    def asTransform(self, *args):
        """
        asTransform(Node self) -> Transform
        asTransform(Node self) -> Transform
        """
        return _osg.Node_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(Node self) -> Camera
        asCamera(Node self) -> Camera
        """
        return _osg.Node_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(Node self) -> Switch
        asSwitch(Node self) -> Switch
        """
        return _osg.Node_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(Node self) -> Geode
        asGeode(Node self) -> Geode
        """
        return _osg.Node_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(Node self) -> osgTerrain::Terrain
        asTerrain(Node self) -> osgTerrain::Terrain const *
        """
        return _osg.Node_asTerrain(self, *args)

    def accept(self, *args):
        """accept(Node self, NodeVisitor nv)"""
        return _osg.Node_accept(self, *args)

    def ascend(self, *args):
        """ascend(Node self, NodeVisitor nv)"""
        return _osg.Node_ascend(self, *args)

    def traverse(self, *args):
        """traverse(Node self, NodeVisitor arg2)"""
        return _osg.Node_traverse(self, *args)

    def getParents(self):
        """getParents(Node self) -> vectorGroup"""
        return _osg.Node_getParents(self)

    def getParent(self, *args):
        """
        getParent(Node self, unsigned int i) -> Group
        getParent(Node self, unsigned int i) -> Group
        """
        return _osg.Node_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(Node self) -> unsigned int"""
        return _osg.Node_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(Node self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(Node self) -> osg::NodePathList
        """
        return _osg.Node_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(Node self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(Node self) -> vectorMatrix
        """
        return _osg.Node_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(Node self, NodeCallback nc)"""
        return _osg.Node_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(Node self) -> NodeCallback
        getUpdateCallback(Node self) -> NodeCallback
        """
        return _osg.Node_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(Node self, NodeCallback nc)"""
        return _osg.Node_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(Node self, NodeCallback nc)"""
        return _osg.Node_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(Node self) -> unsigned int"""
        return _osg.Node_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(Node self, NodeCallback nc)"""
        return _osg.Node_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(Node self) -> NodeCallback
        getEventCallback(Node self) -> NodeCallback
        """
        return _osg.Node_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(Node self, NodeCallback nc)"""
        return _osg.Node_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(Node self, NodeCallback nc)"""
        return _osg.Node_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(Node self) -> unsigned int"""
        return _osg.Node_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(Node self, NodeCallback nc)"""
        return _osg.Node_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(Node self) -> NodeCallback
        getCullCallback(Node self) -> NodeCallback
        """
        return _osg.Node_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(Node self, NodeCallback nc)"""
        return _osg.Node_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(Node self, NodeCallback nc)"""
        return _osg.Node_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(Node self, bool active)"""
        return _osg.Node_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(Node self) -> bool"""
        return _osg.Node_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(Node self) -> unsigned int"""
        return _osg.Node_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(Node self) -> bool"""
        return _osg.Node_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(Node self) -> unsigned int"""
        return _osg.Node_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(Node self) -> bool"""
        return _osg.Node_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(Node self, osg::Node::NodeMask nm)"""
        return _osg.Node_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(Node self) -> osg::Node::NodeMask"""
        return _osg.Node_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(Node self, StateSet stateset)"""
        return _osg.Node_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(Node self) -> StateSet"""
        return _osg.Node_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(Node self) -> StateSet
        getStateSet(Node self) -> StateSet
        """
        return _osg.Node_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(Node self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.Node_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(Node self) -> osg::Node::DescriptionList
        getDescriptions(Node self) -> osg::Node::DescriptionList const &
        """
        return _osg.Node_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(Node self, unsigned int i) -> std::string const
        getDescription(Node self, unsigned int i) -> std::string &
        """
        return _osg.Node_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(Node self) -> unsigned int"""
        return _osg.Node_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(Node self, std::string const & desc)"""
        return _osg.Node_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(Node self, BoundingSpheref bsphere)"""
        return _osg.Node_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(Node self) -> BoundingSpheref"""
        return _osg.Node_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(Node self)"""
        return _osg.Node_dirtyBound(self)

    def getBound(self):
        """getBound(Node self) -> BoundingSpheref"""
        return _osg.Node_getBound(self)

    def computeBound(self):
        """computeBound(Node self) -> BoundingSpheref"""
        return _osg.Node_computeBound(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Node self, bool threadSafe)"""
        return _osg.Node_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Node self, unsigned int arg2)"""
        return _osg.Node_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(Node self, State arg2=None)
        releaseGLObjects(Node self)
        """
        return _osg.Node_releaseGLObjects(self, arg2)

    def asLOD(self):
        """asLOD(Node self) -> LOD"""
        return _osg.Node_asLOD(self)

Node_swigregister = _osg.Node_swigregister
Node_swigregister(Node)

OSG_GEODE = _osg.OSG_GEODE
class Geode(Node):
    """Proxy of C++ osg::Geode class"""
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Geode self) -> Geode
        __init__(osg::Geode self, Geode arg2, CopyOp copyop=SHALLOW_COPY) -> Geode
        __init__(osg::Geode self, Geode arg2) -> Geode
        """
        this = _osg.new_Geode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Geode self) -> Object"""
        return _osg.Geode_cloneType(self)

    def clone(self, *args):
        """clone(Geode self, CopyOp copyop) -> Object"""
        return _osg.Geode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Geode self, Object obj) -> bool"""
        return _osg.Geode_isSameKindAs(self, *args)

    def className(self):
        """className(Geode self) -> char const *"""
        return _osg.Geode_className(self)

    def libraryName(self):
        """libraryName(Geode self) -> char const *"""
        return _osg.Geode_libraryName(self)

    def accept(self, *args):
        """accept(Geode self, NodeVisitor nv)"""
        return _osg.Geode_accept(self, *args)

    def asGeode(self, *args):
        """
        asGeode(Geode self) -> Geode
        asGeode(Geode self) -> Geode
        """
        return _osg.Geode_asGeode(self, *args)

    def addDrawable(self, *args):
        """addDrawable(Geode self, Drawable drawable) -> bool"""
        return _osg.Geode_addDrawable(self, *args)

    def removeDrawable(self, *args):
        """removeDrawable(Geode self, Drawable drawable) -> bool"""
        return _osg.Geode_removeDrawable(self, *args)

    def removeDrawables(self, *args):
        """
        removeDrawables(Geode self, unsigned int i, unsigned int numDrawablesToRemove=1) -> bool
        removeDrawables(Geode self, unsigned int i) -> bool
        """
        return _osg.Geode_removeDrawables(self, *args)

    def replaceDrawable(self, *args):
        """replaceDrawable(Geode self, Drawable origDraw, Drawable newDraw) -> bool"""
        return _osg.Geode_replaceDrawable(self, *args)

    def setDrawable(self, *args):
        """setDrawable(Geode self, unsigned int i, Drawable drawable) -> bool"""
        return _osg.Geode_setDrawable(self, *args)

    def getNumDrawables(self):
        """getNumDrawables(Geode self) -> unsigned int"""
        return _osg.Geode_getNumDrawables(self)

    def getDrawable(self, *args):
        """
        getDrawable(Geode self, unsigned int i) -> Drawable
        getDrawable(Geode self, unsigned int i) -> Drawable
        """
        return _osg.Geode_getDrawable(self, *args)

    def containsDrawable(self, *args):
        """containsDrawable(Geode self, Drawable gset) -> bool"""
        return _osg.Geode_containsDrawable(self, *args)

    def getDrawableIndex(self, *args):
        """getDrawableIndex(Geode self, Drawable drawable) -> unsigned int"""
        return _osg.Geode_getDrawableIndex(self, *args)

    def getDrawableList(self):
        """getDrawableList(Geode self) -> osg::Geode::DrawableList const &"""
        return _osg.Geode_getDrawableList(self)

    def compileDrawables(self, *args):
        """compileDrawables(Geode self, RenderInfo renderInfo)"""
        return _osg.Geode_compileDrawables(self, *args)

    def getBoundingBox(self):
        """getBoundingBox(Geode self) -> BoundingBoxf"""
        return _osg.Geode_getBoundingBox(self)

    def computeBound(self):
        """computeBound(Geode self) -> BoundingSpheref"""
        return _osg.Geode_computeBound(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Geode self, bool threadSafe)"""
        return _osg.Geode_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Geode self, unsigned int maxSize)"""
        return _osg.Geode_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(Geode self, State arg2=None)
        releaseGLObjects(Geode self)
        """
        return _osg.Geode_releaseGLObjects(self, arg2)

Geode_swigregister = _osg.Geode_swigregister
Geode_swigregister(Geode)

OSG_BILLBOARD = _osg.OSG_BILLBOARD
class Billboard(Geode):
    """Proxy of C++ osg::Billboard class"""
    __swig_setmethods__ = {}
    for _s in [Geode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Billboard, name, value)
    __swig_getmethods__ = {}
    for _s in [Geode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Billboard, name)
    __repr__ = _swig_repr
    POINT_ROT_EYE = _osg.Billboard_POINT_ROT_EYE
    POINT_ROT_WORLD = _osg.Billboard_POINT_ROT_WORLD
    AXIAL_ROT = _osg.Billboard_AXIAL_ROT
    def __init__(self, *args): 
        """
        __init__(osg::Billboard self) -> Billboard
        __init__(osg::Billboard self, Billboard arg2, CopyOp copyop=SHALLOW_COPY) -> Billboard
        __init__(osg::Billboard self, Billboard arg2) -> Billboard
        """
        this = _osg.new_Billboard(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Billboard self) -> Object"""
        return _osg.Billboard_cloneType(self)

    def clone(self, *args):
        """clone(Billboard self, CopyOp copyop) -> Object"""
        return _osg.Billboard_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Billboard self, Object obj) -> bool"""
        return _osg.Billboard_isSameKindAs(self, *args)

    def className(self):
        """className(Billboard self) -> char const *"""
        return _osg.Billboard_className(self)

    def libraryName(self):
        """libraryName(Billboard self) -> char const *"""
        return _osg.Billboard_libraryName(self)

    def accept(self, *args):
        """accept(Billboard self, NodeVisitor nv)"""
        return _osg.Billboard_accept(self, *args)

    def setMode(self, *args):
        """setMode(Billboard self, osg::Billboard::Mode mode)"""
        return _osg.Billboard_setMode(self, *args)

    def getMode(self):
        """getMode(Billboard self) -> osg::Billboard::Mode"""
        return _osg.Billboard_getMode(self)

    def setAxis(self, *args):
        """setAxis(Billboard self, Vec3f axis)"""
        return _osg.Billboard_setAxis(self, *args)

    def getAxis(self):
        """getAxis(Billboard self) -> Vec3f"""
        return _osg.Billboard_getAxis(self)

    def setNormal(self, *args):
        """setNormal(Billboard self, Vec3f normal)"""
        return _osg.Billboard_setNormal(self, *args)

    def getNormal(self):
        """getNormal(Billboard self) -> Vec3f"""
        return _osg.Billboard_getNormal(self)

    def setPosition(self, *args):
        """setPosition(Billboard self, unsigned int i, Vec3f pos)"""
        return _osg.Billboard_setPosition(self, *args)

    def getPosition(self, *args):
        """getPosition(Billboard self, unsigned int i) -> Vec3f"""
        return _osg.Billboard_getPosition(self, *args)

    def setPositionList(self, *args):
        """setPositionList(Billboard self, vectorVec3 pl)"""
        return _osg.Billboard_setPositionList(self, *args)

    def getPositionList(self, *args):
        """
        getPositionList(Billboard self) -> vectorVec3
        getPositionList(Billboard self) -> vectorVec3
        """
        return _osg.Billboard_getPositionList(self, *args)

    def addDrawable(self, *args):
        """
        addDrawable(Billboard self, Drawable gset) -> bool
        addDrawable(Billboard self, Drawable gset, Vec3f pos) -> bool
        """
        return _osg.Billboard_addDrawable(self, *args)

    def removeDrawable(self, *args):
        """removeDrawable(Billboard self, Drawable gset) -> bool"""
        return _osg.Billboard_removeDrawable(self, *args)

    def computeMatrix(self, *args):
        """computeMatrix(Billboard self, Matrixd modelview, Vec3f eye_local, Vec3f pos_local) -> bool"""
        return _osg.Billboard_computeMatrix(self, *args)

    def computeBound(self):
        """computeBound(Billboard self) -> BoundingSpheref"""
        return _osg.Billboard_computeBound(self)

Billboard_swigregister = _osg.Billboard_swigregister
Billboard_swigregister(Billboard)

OSG_GROUP = _osg.OSG_GROUP
class Group(Node):
    """Proxy of C++ osg::Group class"""
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Group self) -> Group
        __init__(osg::Group self, Group arg2, CopyOp copyop=SHALLOW_COPY) -> Group
        __init__(osg::Group self, Group arg2) -> Group
        """
        if self.__class__ == Group:
            _self = None
        else:
            _self = self
        this = _osg.new_Group(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Group self) -> Object"""
        return _osg.Group_cloneType(self)

    def clone(self, *args):
        """clone(Group self, CopyOp copyop) -> Object"""
        return _osg.Group_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Group self, Object obj) -> bool"""
        return _osg.Group_isSameKindAs(self, *args)

    def className(self):
        """className(Group self) -> char const *"""
        return _osg.Group_className(self)

    def libraryName(self):
        """libraryName(Group self) -> char const *"""
        return _osg.Group_libraryName(self)

    def accept(self, *args):
        """accept(Group self, NodeVisitor nv)"""
        return _osg.Group_accept(self, *args)

    def asGroup(self, *args):
        """
        asGroup(Group self) -> Group
        asGroup(Group self) -> Group
        """
        return _osg.Group_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(Group self, NodeVisitor nv)"""
        return _osg.Group_traverse(self, *args)

    def addChild(self, *args):
        """addChild(Group self, Node child) -> bool"""
        return _osg.Group_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(Group self, unsigned int index, Node child) -> bool"""
        return _osg.Group_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(Group self, Node child) -> bool
        removeChild(Group self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(Group self, unsigned int pos) -> bool
        """
        return _osg.Group_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(Group self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.Group_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(Group self, Node origChild, Node newChild) -> bool"""
        return _osg.Group_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(Group self) -> unsigned int"""
        return _osg.Group_getNumChildren(self)

    def setChild(self, *args):
        """setChild(Group self, unsigned int i, Node node) -> bool"""
        return _osg.Group_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(Group self, unsigned int i) -> Node
        getChild(Group self, unsigned int i) -> Node
        """
        return _osg.Group_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(Group self, Node node) -> bool"""
        return _osg.Group_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(Group self, Node node) -> unsigned int"""
        return _osg.Group_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Group self, bool threadSafe)"""
        return _osg.Group_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Group self, unsigned int maxSize)"""
        return _osg.Group_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(Group self, State arg0=None)
        releaseGLObjects(Group self)
        """
        return _osg.Group_releaseGLObjects(self, arg0)

    def computeBound(self):
        """computeBound(Group self) -> BoundingSpheref"""
        return _osg.Group_computeBound(self)

    def childRemoved(self, *args):
        """childRemoved(Group self, unsigned int arg0, unsigned int arg1)"""
        return _osg.Group_childRemoved(self, *args)

    def childInserted(self, *args):
        """childInserted(Group self, unsigned int arg0)"""
        return _osg.Group_childInserted(self, *args)

    def asProxyNode(self):
        """asProxyNode(Group self) -> ProxyNode"""
        return _osg.Group_asProxyNode(self)

    def __disown__(self):
        self.this.disown()
        _osg.disown_Group(self)
        return weakref_proxy(self)
Group_swigregister = _osg.Group_swigregister
Group_swigregister(Group)

OSG_SEQUENCE = _osg.OSG_SEQUENCE
class Sequence(Group):
    """Proxy of C++ osg::Sequence class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sequence, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sequence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Sequence self) -> Sequence
        __init__(osg::Sequence self, Sequence arg2, CopyOp copyop=SHALLOW_COPY) -> Sequence
        __init__(osg::Sequence self, Sequence arg2) -> Sequence
        """
        this = _osg.new_Sequence(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Sequence self) -> Object"""
        return _osg.Sequence_cloneType(self)

    def clone(self, *args):
        """clone(Sequence self, CopyOp copyop) -> Object"""
        return _osg.Sequence_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Sequence self, Object obj) -> bool"""
        return _osg.Sequence_isSameKindAs(self, *args)

    def className(self):
        """className(Sequence self) -> char const *"""
        return _osg.Sequence_className(self)

    def libraryName(self):
        """libraryName(Sequence self) -> char const *"""
        return _osg.Sequence_libraryName(self)

    def accept(self, *args):
        """accept(Sequence self, NodeVisitor nv)"""
        return _osg.Sequence_accept(self, *args)

    def traverse(self, *args):
        """traverse(Sequence self, NodeVisitor nv)"""
        return _osg.Sequence_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(Sequence self, Node child) -> bool
        addChild(Sequence self, Node child, double t) -> bool
        """
        return _osg.Sequence_addChild(self, *args)

    def insertChild(self, *args):
        """
        insertChild(Sequence self, unsigned int index, Node child) -> bool
        insertChild(Sequence self, unsigned int index, Node child, double t) -> bool
        """
        return _osg.Sequence_insertChild(self, *args)

    def removeChild(self, *args):
        """removeChild(Sequence self, Node child) -> bool"""
        return _osg.Sequence_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(Sequence self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.Sequence_removeChildren(self, *args)

    def setValue(self, *args):
        """setValue(Sequence self, int value)"""
        return _osg.Sequence_setValue(self, *args)

    def getValue(self):
        """getValue(Sequence self) -> int"""
        return _osg.Sequence_getValue(self)

    def setTime(self, *args):
        """setTime(Sequence self, unsigned int frame, double t)"""
        return _osg.Sequence_setTime(self, *args)

    def getTime(self, *args):
        """getTime(Sequence self, unsigned int frame) -> double"""
        return _osg.Sequence_getTime(self, *args)

    def setTimeList(self, *args):
        """setTimeList(Sequence self, std::vector< double,std::allocator< double > > const & timeList)"""
        return _osg.Sequence_setTimeList(self, *args)

    def getTimeList(self):
        """getTimeList(Sequence self) -> std::vector< double,std::allocator< double > > const &"""
        return _osg.Sequence_getTimeList(self)

    def setDefaultTime(self, *args):
        """setDefaultTime(Sequence self, double t)"""
        return _osg.Sequence_setDefaultTime(self, *args)

    def getDefaultTime(self):
        """getDefaultTime(Sequence self) -> double"""
        return _osg.Sequence_getDefaultTime(self)

    def setLastFrameTime(self, *args):
        """setLastFrameTime(Sequence self, double t)"""
        return _osg.Sequence_setLastFrameTime(self, *args)

    def getLastFrameTime(self):
        """getLastFrameTime(Sequence self) -> double"""
        return _osg.Sequence_getLastFrameTime(self)

    def getNumFrames(self):
        """getNumFrames(Sequence self) -> unsigned int"""
        return _osg.Sequence_getNumFrames(self)

    LOOP = _osg.Sequence_LOOP
    SWING = _osg.Sequence_SWING
    def setLoopMode(self, *args):
        """setLoopMode(Sequence self, osg::Sequence::LoopMode mode)"""
        return _osg.Sequence_setLoopMode(self, *args)

    def getLoopMode(self):
        """getLoopMode(Sequence self) -> osg::Sequence::LoopMode"""
        return _osg.Sequence_getLoopMode(self)

    def setBegin(self, *args):
        """setBegin(Sequence self, int begin)"""
        return _osg.Sequence_setBegin(self, *args)

    def getBegin(self):
        """getBegin(Sequence self) -> int"""
        return _osg.Sequence_getBegin(self)

    def setEnd(self, *args):
        """setEnd(Sequence self, int end)"""
        return _osg.Sequence_setEnd(self, *args)

    def getEnd(self):
        """getEnd(Sequence self) -> int"""
        return _osg.Sequence_getEnd(self)

    def setInterval(self, *args):
        """setInterval(Sequence self, osg::Sequence::LoopMode mode, int begin, int end)"""
        return _osg.Sequence_setInterval(self, *args)

    def getInterval(self, *args):
        """getInterval(Sequence self, osg::Sequence::LoopMode & mode, int & begin, int & end)"""
        return _osg.Sequence_getInterval(self, *args)

    def setSpeed(self, *args):
        """setSpeed(Sequence self, float speed)"""
        return _osg.Sequence_setSpeed(self, *args)

    def getSpeed(self):
        """getSpeed(Sequence self) -> float"""
        return _osg.Sequence_getSpeed(self)

    def setNumRepeats(self, *args):
        """setNumRepeats(Sequence self, int nreps)"""
        return _osg.Sequence_setNumRepeats(self, *args)

    def getNumRepeats(self):
        """getNumRepeats(Sequence self) -> int"""
        return _osg.Sequence_getNumRepeats(self)

    def setDuration(self, *args):
        """
        setDuration(Sequence self, float speed, int nreps=-1)
        setDuration(Sequence self, float speed)
        """
        return _osg.Sequence_setDuration(self, *args)

    def getDuration(self, *args):
        """getDuration(Sequence self, float & speed, int & nreps)"""
        return _osg.Sequence_getDuration(self, *args)

    START = _osg.Sequence_START
    STOP = _osg.Sequence_STOP
    PAUSE = _osg.Sequence_PAUSE
    RESUME = _osg.Sequence_RESUME
    def setMode(self, *args):
        """setMode(Sequence self, osg::Sequence::SequenceMode mode)"""
        return _osg.Sequence_setMode(self, *args)

    def getMode(self):
        """getMode(Sequence self) -> osg::Sequence::SequenceMode"""
        return _osg.Sequence_getMode(self)

    def setSync(self, *args):
        """setSync(Sequence self, bool sync)"""
        return _osg.Sequence_setSync(self, *args)

    def getSync(self):
        """getSync(Sequence self) -> bool"""
        return _osg.Sequence_getSync(self)

    def setClearOnStop(self, *args):
        """setClearOnStop(Sequence self, bool clearOnStop)"""
        return _osg.Sequence_setClearOnStop(self, *args)

    def getClearOnStop(self):
        """getClearOnStop(Sequence self) -> bool"""
        return _osg.Sequence_getClearOnStop(self)

Sequence_swigregister = _osg.Sequence_swigregister
Sequence_swigregister(Sequence)

OSG_SWITCH = _osg.OSG_SWITCH
class Switch(Group):
    """Proxy of C++ osg::Switch class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switch, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Switch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Switch self) -> Switch
        __init__(osg::Switch self, Switch arg2, CopyOp copyop=SHALLOW_COPY) -> Switch
        __init__(osg::Switch self, Switch arg2) -> Switch
        """
        this = _osg.new_Switch(*args)
        try: self.this.append(this)
        except: self.this = this
    def asSwitch(self, *args):
        """
        asSwitch(Switch self) -> Switch
        asSwitch(Switch self) -> Switch
        """
        return _osg.Switch_asSwitch(self, *args)

    def cloneType(self):
        """cloneType(Switch self) -> Object"""
        return _osg.Switch_cloneType(self)

    def clone(self, *args):
        """clone(Switch self, CopyOp copyop) -> Object"""
        return _osg.Switch_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Switch self, Object obj) -> bool"""
        return _osg.Switch_isSameKindAs(self, *args)

    def className(self):
        """className(Switch self) -> char const *"""
        return _osg.Switch_className(self)

    def libraryName(self):
        """libraryName(Switch self) -> char const *"""
        return _osg.Switch_libraryName(self)

    def accept(self, *args):
        """accept(Switch self, NodeVisitor nv)"""
        return _osg.Switch_accept(self, *args)

    def traverse(self, *args):
        """traverse(Switch self, NodeVisitor nv)"""
        return _osg.Switch_traverse(self, *args)

    def setNewChildDefaultValue(self, *args):
        """setNewChildDefaultValue(Switch self, bool value)"""
        return _osg.Switch_setNewChildDefaultValue(self, *args)

    def getNewChildDefaultValue(self):
        """getNewChildDefaultValue(Switch self) -> bool"""
        return _osg.Switch_getNewChildDefaultValue(self)

    def addChild(self, *args):
        """
        addChild(Switch self, Node child) -> bool
        addChild(Switch self, Node child, bool value) -> bool
        """
        return _osg.Switch_addChild(self, *args)

    def insertChild(self, *args):
        """
        insertChild(Switch self, unsigned int index, Node child) -> bool
        insertChild(Switch self, unsigned int index, Node child, bool value) -> bool
        """
        return _osg.Switch_insertChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(Switch self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.Switch_removeChildren(self, *args)

    def setValue(self, *args):
        """setValue(Switch self, unsigned int pos, bool value)"""
        return _osg.Switch_setValue(self, *args)

    def getValue(self, *args):
        """getValue(Switch self, unsigned int pos) -> bool"""
        return _osg.Switch_getValue(self, *args)

    def setChildValue(self, *args):
        """setChildValue(Switch self, Node child, bool value)"""
        return _osg.Switch_setChildValue(self, *args)

    def getChildValue(self, *args):
        """getChildValue(Switch self, Node child) -> bool"""
        return _osg.Switch_getChildValue(self, *args)

    def setAllChildrenOff(self):
        """setAllChildrenOff(Switch self) -> bool"""
        return _osg.Switch_setAllChildrenOff(self)

    def setAllChildrenOn(self):
        """setAllChildrenOn(Switch self) -> bool"""
        return _osg.Switch_setAllChildrenOn(self)

    def setSingleChildOn(self, *args):
        """setSingleChildOn(Switch self, unsigned int pos) -> bool"""
        return _osg.Switch_setSingleChildOn(self, *args)

    def setValueList(self, *args):
        """setValueList(Switch self, osg::Switch::ValueList const & values)"""
        return _osg.Switch_setValueList(self, *args)

    def getValueList(self):
        """getValueList(Switch self) -> osg::Switch::ValueList const &"""
        return _osg.Switch_getValueList(self)

    def computeBound(self):
        """computeBound(Switch self) -> BoundingSpheref"""
        return _osg.Switch_computeBound(self)

Switch_swigregister = _osg.Switch_swigregister
Switch_swigregister(Switch)

OSG_LOD = _osg.OSG_LOD
class LOD(Group):
    """Proxy of C++ osg::LOD class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LOD, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LOD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::LOD self) -> LOD
        __init__(osg::LOD self, LOD arg2, CopyOp copyop=SHALLOW_COPY) -> LOD
        __init__(osg::LOD self, LOD arg2) -> LOD
        """
        this = _osg.new_LOD(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(LOD self) -> Object"""
        return _osg.LOD_cloneType(self)

    def clone(self, *args):
        """clone(LOD self, CopyOp copyop) -> Object"""
        return _osg.LOD_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(LOD self, Object obj) -> bool"""
        return _osg.LOD_isSameKindAs(self, *args)

    def className(self):
        """className(LOD self) -> char const *"""
        return _osg.LOD_className(self)

    def libraryName(self):
        """libraryName(LOD self) -> char const *"""
        return _osg.LOD_libraryName(self)

    def accept(self, *args):
        """accept(LOD self, NodeVisitor nv)"""
        return _osg.LOD_accept(self, *args)

    def traverse(self, *args):
        """traverse(LOD self, NodeVisitor nv)"""
        return _osg.LOD_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(LOD self, Node child) -> bool
        addChild(LOD self, Node child, float min, float max) -> bool
        """
        return _osg.LOD_addChild(self, *args)

    def removeChildren(self, *args):
        """
        removeChildren(LOD self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChildren(LOD self, unsigned int pos) -> bool
        """
        return _osg.LOD_removeChildren(self, *args)

    USE_BOUNDING_SPHERE_CENTER = _osg.LOD_USE_BOUNDING_SPHERE_CENTER
    USER_DEFINED_CENTER = _osg.LOD_USER_DEFINED_CENTER
    UNION_OF_BOUNDING_SPHERE_AND_USER_DEFINED = _osg.LOD_UNION_OF_BOUNDING_SPHERE_AND_USER_DEFINED
    def setCenterMode(self, *args):
        """setCenterMode(LOD self, osg::LOD::CenterMode mode)"""
        return _osg.LOD_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(LOD self) -> osg::LOD::CenterMode"""
        return _osg.LOD_getCenterMode(self)

    DISTANCE_FROM_EYE_POINT = _osg.LOD_DISTANCE_FROM_EYE_POINT
    PIXEL_SIZE_ON_SCREEN = _osg.LOD_PIXEL_SIZE_ON_SCREEN
    def setRangeMode(self, *args):
        """setRangeMode(LOD self, osg::LOD::RangeMode mode)"""
        return _osg.LOD_setRangeMode(self, *args)

    def getRangeMode(self):
        """getRangeMode(LOD self) -> osg::LOD::RangeMode"""
        return _osg.LOD_getRangeMode(self)

    def setRange(self, *args):
        """setRange(LOD self, unsigned int childNo, float min, float max)"""
        return _osg.LOD_setRange(self, *args)

    def getMinRange(self, *args):
        """getMinRange(LOD self, unsigned int childNo) -> float"""
        return _osg.LOD_getMinRange(self, *args)

    def getMaxRange(self, *args):
        """getMaxRange(LOD self, unsigned int childNo) -> float"""
        return _osg.LOD_getMaxRange(self, *args)

    def getNumRanges(self):
        """getNumRanges(LOD self) -> unsigned int"""
        return _osg.LOD_getNumRanges(self)

    def setRangeList(self, *args):
        """setRangeList(LOD self, osg::LOD::RangeList const & rangeList)"""
        return _osg.LOD_setRangeList(self, *args)

    def getRangeList(self):
        """getRangeList(LOD self) -> osg::LOD::RangeList const &"""
        return _osg.LOD_getRangeList(self)

    def computeBound(self):
        """computeBound(LOD self) -> BoundingSpheref"""
        return _osg.LOD_computeBound(self)

    def getCenter(self):
        """getCenter(LOD self) -> Vec3f"""
        return _osg.LOD_getCenter(self)

    def setCenter(self, *args):
        """setCenter(LOD self, Vec3f center)"""
        return _osg.LOD_setCenter(self, *args)

    def getRadius(self):
        """getRadius(LOD self) -> float"""
        return _osg.LOD_getRadius(self)

    def setRadius(self, *args):
        """setRadius(LOD self, float radius)"""
        return _osg.LOD_setRadius(self, *args)

    def asPagedLOD(self):
        """asPagedLOD(LOD self) -> PagedLOD"""
        return _osg.LOD_asPagedLOD(self)

LOD_swigregister = _osg.LOD_swigregister
LOD_swigregister(LOD)

OSG_PagedLOD = _osg.OSG_PagedLOD
class PagedLOD(LOD):
    """Proxy of C++ osg::PagedLOD class"""
    __swig_setmethods__ = {}
    for _s in [LOD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PagedLOD, name, value)
    __swig_getmethods__ = {}
    for _s in [LOD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PagedLOD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::PagedLOD self) -> PagedLOD
        __init__(osg::PagedLOD self, PagedLOD arg2, CopyOp copyop=SHALLOW_COPY) -> PagedLOD
        __init__(osg::PagedLOD self, PagedLOD arg2) -> PagedLOD
        """
        this = _osg.new_PagedLOD(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(PagedLOD self) -> Object"""
        return _osg.PagedLOD_cloneType(self)

    def clone(self, *args):
        """clone(PagedLOD self, CopyOp copyop) -> Object"""
        return _osg.PagedLOD_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(PagedLOD self, Object obj) -> bool"""
        return _osg.PagedLOD_isSameKindAs(self, *args)

    def className(self):
        """className(PagedLOD self) -> char const *"""
        return _osg.PagedLOD_className(self)

    def libraryName(self):
        """libraryName(PagedLOD self) -> char const *"""
        return _osg.PagedLOD_libraryName(self)

    def accept(self, *args):
        """accept(PagedLOD self, NodeVisitor nv)"""
        return _osg.PagedLOD_accept(self, *args)

    def traverse(self, *args):
        """traverse(PagedLOD self, NodeVisitor nv)"""
        return _osg.PagedLOD_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(PagedLOD self, Node child) -> bool
        addChild(PagedLOD self, Node child, float min, float max) -> bool
        addChild(PagedLOD self, Node child, float min, float max, std::string const & filename, float priorityOffset=0.0, 
            float priorityScale=1.0) -> bool
        addChild(PagedLOD self, Node child, float min, float max, std::string const & filename, float priorityOffset=0.0) -> bool
        addChild(PagedLOD self, Node child, float min, float max, std::string const & filename) -> bool
        """
        return _osg.PagedLOD_addChild(self, *args)

    def removeChildren(self, *args):
        """
        removeChildren(PagedLOD self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChildren(PagedLOD self, unsigned int pos) -> bool
        """
        return _osg.PagedLOD_removeChildren(self, *args)

    def setDatabaseOptions(self, *args):
        """setDatabaseOptions(PagedLOD self, Referenced options)"""
        return _osg.PagedLOD_setDatabaseOptions(self, *args)

    def getDatabaseOptions(self, *args):
        """
        getDatabaseOptions(PagedLOD self) -> Referenced
        getDatabaseOptions(PagedLOD self) -> Referenced
        """
        return _osg.PagedLOD_getDatabaseOptions(self, *args)

    def setDatabasePath(self, *args):
        """setDatabasePath(PagedLOD self, std::string const & path)"""
        return _osg.PagedLOD_setDatabasePath(self, *args)

    def getDatabasePath(self):
        """getDatabasePath(PagedLOD self) -> std::string const &"""
        return _osg.PagedLOD_getDatabasePath(self)

    def setFileName(self, *args):
        """setFileName(PagedLOD self, unsigned int childNo, std::string const & filename)"""
        return _osg.PagedLOD_setFileName(self, *args)

    def getFileName(self, *args):
        """getFileName(PagedLOD self, unsigned int childNo) -> std::string const &"""
        return _osg.PagedLOD_getFileName(self, *args)

    def getNumFileNames(self):
        """getNumFileNames(PagedLOD self) -> unsigned int"""
        return _osg.PagedLOD_getNumFileNames(self)

    def setPriorityOffset(self, *args):
        """setPriorityOffset(PagedLOD self, unsigned int childNo, float priorityOffset)"""
        return _osg.PagedLOD_setPriorityOffset(self, *args)

    def getPriorityOffset(self, *args):
        """getPriorityOffset(PagedLOD self, unsigned int childNo) -> float"""
        return _osg.PagedLOD_getPriorityOffset(self, *args)

    def getNumPriorityOffsets(self):
        """getNumPriorityOffsets(PagedLOD self) -> unsigned int"""
        return _osg.PagedLOD_getNumPriorityOffsets(self)

    def setPriorityScale(self, *args):
        """setPriorityScale(PagedLOD self, unsigned int childNo, float priorityScale)"""
        return _osg.PagedLOD_setPriorityScale(self, *args)

    def getPriorityScale(self, *args):
        """getPriorityScale(PagedLOD self, unsigned int childNo) -> float"""
        return _osg.PagedLOD_getPriorityScale(self, *args)

    def getNumPriorityScales(self):
        """getNumPriorityScales(PagedLOD self) -> unsigned int"""
        return _osg.PagedLOD_getNumPriorityScales(self)

    def setMinimumExpiryTime(self, *args):
        """setMinimumExpiryTime(PagedLOD self, unsigned int childNo, double minTime)"""
        return _osg.PagedLOD_setMinimumExpiryTime(self, *args)

    def getMinimumExpiryTime(self, *args):
        """getMinimumExpiryTime(PagedLOD self, unsigned int childNo) -> double"""
        return _osg.PagedLOD_getMinimumExpiryTime(self, *args)

    def getNumMinimumExpiryTimes(self):
        """getNumMinimumExpiryTimes(PagedLOD self) -> unsigned int"""
        return _osg.PagedLOD_getNumMinimumExpiryTimes(self)

    def setMinimumExpiryFrames(self, *args):
        """setMinimumExpiryFrames(PagedLOD self, unsigned int childNo, unsigned int minFrames)"""
        return _osg.PagedLOD_setMinimumExpiryFrames(self, *args)

    def getMinimumExpiryFrames(self, *args):
        """getMinimumExpiryFrames(PagedLOD self, unsigned int childNo) -> unsigned int"""
        return _osg.PagedLOD_getMinimumExpiryFrames(self, *args)

    def getNumMinimumExpiryFrames(self):
        """getNumMinimumExpiryFrames(PagedLOD self) -> unsigned int"""
        return _osg.PagedLOD_getNumMinimumExpiryFrames(self)

    def setTimeStamp(self, *args):
        """setTimeStamp(PagedLOD self, unsigned int childNo, double timeStamp)"""
        return _osg.PagedLOD_setTimeStamp(self, *args)

    def getTimeStamp(self, *args):
        """getTimeStamp(PagedLOD self, unsigned int childNo) -> double"""
        return _osg.PagedLOD_getTimeStamp(self, *args)

    def getNumTimeStamps(self):
        """getNumTimeStamps(PagedLOD self) -> unsigned int"""
        return _osg.PagedLOD_getNumTimeStamps(self)

    def setFrameNumber(self, *args):
        """setFrameNumber(PagedLOD self, unsigned int childNo, unsigned int frameNumber)"""
        return _osg.PagedLOD_setFrameNumber(self, *args)

    def getFrameNumber(self, *args):
        """getFrameNumber(PagedLOD self, unsigned int childNo) -> unsigned int"""
        return _osg.PagedLOD_getFrameNumber(self, *args)

    def getNumFrameNumbers(self):
        """getNumFrameNumbers(PagedLOD self) -> unsigned int"""
        return _osg.PagedLOD_getNumFrameNumbers(self)

    def getDatabaseRequest(self, *args):
        """
        getDatabaseRequest(PagedLOD self, unsigned int childNo) -> osg::ref_ptr< osg::Referenced >
        getDatabaseRequest(PagedLOD self, unsigned int childNo) -> osg::ref_ptr< osg::Referenced > const &
        """
        return _osg.PagedLOD_getDatabaseRequest(self, *args)

    def setFrameNumberOfLastTraversal(self, *args):
        """setFrameNumberOfLastTraversal(PagedLOD self, unsigned int frameNumber)"""
        return _osg.PagedLOD_setFrameNumberOfLastTraversal(self, *args)

    def getFrameNumberOfLastTraversal(self):
        """getFrameNumberOfLastTraversal(PagedLOD self) -> unsigned int"""
        return _osg.PagedLOD_getFrameNumberOfLastTraversal(self)

    def setNumChildrenThatCannotBeExpired(self, *args):
        """setNumChildrenThatCannotBeExpired(PagedLOD self, unsigned int num)"""
        return _osg.PagedLOD_setNumChildrenThatCannotBeExpired(self, *args)

    def getNumChildrenThatCannotBeExpired(self):
        """getNumChildrenThatCannotBeExpired(PagedLOD self) -> unsigned int"""
        return _osg.PagedLOD_getNumChildrenThatCannotBeExpired(self)

    def setDisableExternalChildrenPaging(self, *args):
        """setDisableExternalChildrenPaging(PagedLOD self, bool flag)"""
        return _osg.PagedLOD_setDisableExternalChildrenPaging(self, *args)

    def getDisableExternalChildrenPaging(self):
        """getDisableExternalChildrenPaging(PagedLOD self) -> bool"""
        return _osg.PagedLOD_getDisableExternalChildrenPaging(self)

    def removeExpiredChildren(self, *args):
        """removeExpiredChildren(PagedLOD self, double expiryTime, unsigned int expiryFrame, osg::NodeList & removedChildren) -> bool"""
        return _osg.PagedLOD_removeExpiredChildren(self, *args)

    def getCenter(self):
        """getCenter(PagedLOD self) -> Vec3f"""
        return _osg.PagedLOD_getCenter(self)

    def setCenter(self, *args):
        """setCenter(PagedLOD self, Vec3f center)"""
        return _osg.PagedLOD_setCenter(self, *args)

    def getRadius(self):
        """getRadius(PagedLOD self) -> float"""
        return _osg.PagedLOD_getRadius(self)

    def setRadius(self, *args):
        """setRadius(PagedLOD self, float radius)"""
        return _osg.PagedLOD_setRadius(self, *args)

PagedLOD_swigregister = _osg.PagedLOD_swigregister
PagedLOD_swigregister(PagedLOD)

OSG_ProxyNode = _osg.OSG_ProxyNode
class ProxyNode(Group):
    """Proxy of C++ osg::ProxyNode class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ProxyNode self) -> ProxyNode
        __init__(osg::ProxyNode self, ProxyNode arg2, CopyOp copyop=SHALLOW_COPY) -> ProxyNode
        __init__(osg::ProxyNode self, ProxyNode arg2) -> ProxyNode
        """
        this = _osg.new_ProxyNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ProxyNode self) -> Object"""
        return _osg.ProxyNode_cloneType(self)

    def clone(self, *args):
        """clone(ProxyNode self, CopyOp copyop) -> Object"""
        return _osg.ProxyNode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ProxyNode self, Object obj) -> bool"""
        return _osg.ProxyNode_isSameKindAs(self, *args)

    def className(self):
        """className(ProxyNode self) -> char const *"""
        return _osg.ProxyNode_className(self)

    def libraryName(self):
        """libraryName(ProxyNode self) -> char const *"""
        return _osg.ProxyNode_libraryName(self)

    def accept(self, *args):
        """accept(ProxyNode self, NodeVisitor nv)"""
        return _osg.ProxyNode_accept(self, *args)

    def traverse(self, *args):
        """traverse(ProxyNode self, NodeVisitor nv)"""
        return _osg.ProxyNode_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(ProxyNode self, Node child) -> bool
        addChild(ProxyNode self, Node child, std::string const & filename) -> bool
        """
        return _osg.ProxyNode_addChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(ProxyNode self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.ProxyNode_removeChildren(self, *args)

    def setDatabaseOptions(self, *args):
        """setDatabaseOptions(ProxyNode self, Referenced options)"""
        return _osg.ProxyNode_setDatabaseOptions(self, *args)

    def getDatabaseOptions(self, *args):
        """
        getDatabaseOptions(ProxyNode self) -> Referenced
        getDatabaseOptions(ProxyNode self) -> Referenced
        """
        return _osg.ProxyNode_getDatabaseOptions(self, *args)

    def setDatabasePath(self, *args):
        """setDatabasePath(ProxyNode self, std::string const & path)"""
        return _osg.ProxyNode_setDatabasePath(self, *args)

    def getDatabasePath(self):
        """getDatabasePath(ProxyNode self) -> std::string const &"""
        return _osg.ProxyNode_getDatabasePath(self)

    def setFileName(self, *args):
        """setFileName(ProxyNode self, unsigned int childNo, std::string const & filename)"""
        return _osg.ProxyNode_setFileName(self, *args)

    def getFileName(self, *args):
        """getFileName(ProxyNode self, unsigned int childNo) -> std::string const &"""
        return _osg.ProxyNode_getFileName(self, *args)

    def getNumFileNames(self):
        """getNumFileNames(ProxyNode self) -> unsigned int"""
        return _osg.ProxyNode_getNumFileNames(self)

    def getDatabaseRequest(self, *args):
        """
        getDatabaseRequest(ProxyNode self, unsigned int childNo) -> osg::ref_ptr< osg::Referenced >
        getDatabaseRequest(ProxyNode self, unsigned int childNo) -> osg::ref_ptr< osg::Referenced > const &
        """
        return _osg.ProxyNode_getDatabaseRequest(self, *args)

    USE_BOUNDING_SPHERE_CENTER = _osg.ProxyNode_USE_BOUNDING_SPHERE_CENTER
    USER_DEFINED_CENTER = _osg.ProxyNode_USER_DEFINED_CENTER
    UNION_OF_BOUNDING_SPHERE_AND_USER_DEFINED = _osg.ProxyNode_UNION_OF_BOUNDING_SPHERE_AND_USER_DEFINED
    def setCenterMode(self, *args):
        """setCenterMode(ProxyNode self, osg::ProxyNode::CenterMode mode)"""
        return _osg.ProxyNode_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(ProxyNode self) -> osg::ProxyNode::CenterMode"""
        return _osg.ProxyNode_getCenterMode(self)

    LOAD_IMMEDIATELY = _osg.ProxyNode_LOAD_IMMEDIATELY
    DEFER_LOADING_TO_DATABASE_PAGER = _osg.ProxyNode_DEFER_LOADING_TO_DATABASE_PAGER
    NO_AUTOMATIC_LOADING = _osg.ProxyNode_NO_AUTOMATIC_LOADING
    def setLoadingExternalReferenceMode(self, *args):
        """setLoadingExternalReferenceMode(ProxyNode self, osg::ProxyNode::LoadingExternalReferenceMode mode)"""
        return _osg.ProxyNode_setLoadingExternalReferenceMode(self, *args)

    def getLoadingExternalReferenceMode(self):
        """getLoadingExternalReferenceMode(ProxyNode self) -> osg::ProxyNode::LoadingExternalReferenceMode"""
        return _osg.ProxyNode_getLoadingExternalReferenceMode(self)

    def computeBound(self):
        """computeBound(ProxyNode self) -> BoundingSpheref"""
        return _osg.ProxyNode_computeBound(self)

    def getCenter(self):
        """getCenter(ProxyNode self) -> Vec3f"""
        return _osg.ProxyNode_getCenter(self)

    def setCenter(self, *args):
        """setCenter(ProxyNode self, Vec3f center)"""
        return _osg.ProxyNode_setCenter(self, *args)

    def getRadius(self):
        """getRadius(ProxyNode self) -> float"""
        return _osg.ProxyNode_getRadius(self)

    def setRadius(self, *args):
        """setRadius(ProxyNode self, float radius)"""
        return _osg.ProxyNode_setRadius(self, *args)

ProxyNode_swigregister = _osg.ProxyNode_swigregister
ProxyNode_swigregister(ProxyNode)

OSG_NODEVISITOR = _osg.OSG_NODEVISITOR
class NodeVisitor(Referenced):
    """Proxy of C++ osg::NodeVisitor class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeVisitor, name)
    __repr__ = _swig_repr
    TRAVERSE_NONE = _osg.NodeVisitor_TRAVERSE_NONE
    TRAVERSE_PARENTS = _osg.NodeVisitor_TRAVERSE_PARENTS
    TRAVERSE_ALL_CHILDREN = _osg.NodeVisitor_TRAVERSE_ALL_CHILDREN
    TRAVERSE_ACTIVE_CHILDREN = _osg.NodeVisitor_TRAVERSE_ACTIVE_CHILDREN
    NODE_VISITOR = _osg.NodeVisitor_NODE_VISITOR
    UPDATE_VISITOR = _osg.NodeVisitor_UPDATE_VISITOR
    EVENT_VISITOR = _osg.NodeVisitor_EVENT_VISITOR
    COLLECT_OCCLUDER_VISITOR = _osg.NodeVisitor_COLLECT_OCCLUDER_VISITOR
    CULL_VISITOR = _osg.NodeVisitor_CULL_VISITOR
    def __init__(self, *args): 
        """
        __init__(osg::NodeVisitor self, osg::NodeVisitor::TraversalMode tm=TRAVERSE_NONE) -> NodeVisitor
        __init__(osg::NodeVisitor self) -> NodeVisitor
        __init__(osg::NodeVisitor self, osg::NodeVisitor::VisitorType type, osg::NodeVisitor::TraversalMode tm=TRAVERSE_NONE) -> NodeVisitor
        __init__(osg::NodeVisitor self, osg::NodeVisitor::VisitorType type) -> NodeVisitor
        """
        if self.__class__ == NodeVisitor:
            _self = None
        else:
            _self = self
        this = _osg.new_NodeVisitor(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_NodeVisitor
    __del__ = lambda self : None;
    def libraryName(self):
        """libraryName(NodeVisitor self) -> char const *"""
        return _osg.NodeVisitor_libraryName(self)

    def className(self):
        """className(NodeVisitor self) -> char const *"""
        return _osg.NodeVisitor_className(self)

    def reset(self):
        """reset(NodeVisitor self)"""
        return _osg.NodeVisitor_reset(self)

    def setVisitorType(self, *args):
        """setVisitorType(NodeVisitor self, osg::NodeVisitor::VisitorType type)"""
        return _osg.NodeVisitor_setVisitorType(self, *args)

    def getVisitorType(self):
        """getVisitorType(NodeVisitor self) -> osg::NodeVisitor::VisitorType"""
        return _osg.NodeVisitor_getVisitorType(self)

    def setTraversalNumber(self, *args):
        """setTraversalNumber(NodeVisitor self, unsigned int fn)"""
        return _osg.NodeVisitor_setTraversalNumber(self, *args)

    def getTraversalNumber(self):
        """getTraversalNumber(NodeVisitor self) -> unsigned int"""
        return _osg.NodeVisitor_getTraversalNumber(self)

    def setFrameStamp(self, *args):
        """setFrameStamp(NodeVisitor self, FrameStamp fs)"""
        return _osg.NodeVisitor_setFrameStamp(self, *args)

    def getFrameStamp(self):
        """getFrameStamp(NodeVisitor self) -> FrameStamp"""
        return _osg.NodeVisitor_getFrameStamp(self)

    def setTraversalMask(self, *args):
        """setTraversalMask(NodeVisitor self, osg::Node::NodeMask mask)"""
        return _osg.NodeVisitor_setTraversalMask(self, *args)

    def getTraversalMask(self):
        """getTraversalMask(NodeVisitor self) -> osg::Node::NodeMask"""
        return _osg.NodeVisitor_getTraversalMask(self)

    def setNodeMaskOverride(self, *args):
        """setNodeMaskOverride(NodeVisitor self, osg::Node::NodeMask mask)"""
        return _osg.NodeVisitor_setNodeMaskOverride(self, *args)

    def getNodeMaskOverride(self):
        """getNodeMaskOverride(NodeVisitor self) -> osg::Node::NodeMask"""
        return _osg.NodeVisitor_getNodeMaskOverride(self)

    def validNodeMask(self, *args):
        """validNodeMask(NodeVisitor self, Node node) -> bool"""
        return _osg.NodeVisitor_validNodeMask(self, *args)

    def setTraversalMode(self, *args):
        """setTraversalMode(NodeVisitor self, osg::NodeVisitor::TraversalMode mode)"""
        return _osg.NodeVisitor_setTraversalMode(self, *args)

    def getTraversalMode(self):
        """getTraversalMode(NodeVisitor self) -> osg::NodeVisitor::TraversalMode"""
        return _osg.NodeVisitor_getTraversalMode(self)

    def setUserData(self, *args):
        """setUserData(NodeVisitor self, Referenced obj)"""
        return _osg.NodeVisitor_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(NodeVisitor self) -> Referenced
        getUserData(NodeVisitor self) -> Referenced
        """
        return _osg.NodeVisitor_getUserData(self, *args)

    def traverse(self, *args):
        """traverse(NodeVisitor self, Node node)"""
        return _osg.NodeVisitor_traverse(self, *args)

    def pushOntoNodePath(self, *args):
        """pushOntoNodePath(NodeVisitor self, Node node)"""
        return _osg.NodeVisitor_pushOntoNodePath(self, *args)

    def popFromNodePath(self):
        """popFromNodePath(NodeVisitor self)"""
        return _osg.NodeVisitor_popFromNodePath(self)

    def getNodePath(self, *args):
        """
        getNodePath(NodeVisitor self) -> vectorNode
        getNodePath(NodeVisitor self) -> vectorNode
        """
        return _osg.NodeVisitor_getNodePath(self, *args)

    def getEyePoint(self):
        """getEyePoint(NodeVisitor self) -> Vec3f"""
        return _osg.NodeVisitor_getEyePoint(self)

    def getViewPoint(self):
        """getViewPoint(NodeVisitor self) -> Vec3f"""
        return _osg.NodeVisitor_getViewPoint(self)

    def getDistanceToEyePoint(self, *args):
        """getDistanceToEyePoint(NodeVisitor self, Vec3f arg0, bool arg1) -> float"""
        return _osg.NodeVisitor_getDistanceToEyePoint(self, *args)

    def getDistanceFromEyePoint(self, *args):
        """getDistanceFromEyePoint(NodeVisitor self, Vec3f arg0, bool arg1) -> float"""
        return _osg.NodeVisitor_getDistanceFromEyePoint(self, *args)

    def getDistanceToViewPoint(self, *args):
        """getDistanceToViewPoint(NodeVisitor self, Vec3f arg0, bool arg1) -> float"""
        return _osg.NodeVisitor_getDistanceToViewPoint(self, *args)

    def apply_Node(self, *args):
        """apply_Node(NodeVisitor self, Node node)"""
        return _osg.NodeVisitor_apply_Node(self, *args)

    def apply_Geode(self, *args):
        """apply_Geode(NodeVisitor self, Geode node)"""
        return _osg.NodeVisitor_apply_Geode(self, *args)

    def apply_Billboard(self, *args):
        """apply_Billboard(NodeVisitor self, Billboard node)"""
        return _osg.NodeVisitor_apply_Billboard(self, *args)

    def apply_Group(self, *args):
        """apply_Group(NodeVisitor self, Group node)"""
        return _osg.NodeVisitor_apply_Group(self, *args)

    def apply_ProxyNode(self, *args):
        """apply_ProxyNode(NodeVisitor self, ProxyNode node)"""
        return _osg.NodeVisitor_apply_ProxyNode(self, *args)

    def apply_Projection(self, *args):
        """apply_Projection(NodeVisitor self, Projection node)"""
        return _osg.NodeVisitor_apply_Projection(self, *args)

    def apply_CoordinateSystemNode(self, *args):
        """apply_CoordinateSystemNode(NodeVisitor self, osg::CoordinateSystemNode & node)"""
        return _osg.NodeVisitor_apply_CoordinateSystemNode(self, *args)

    def apply_ClipNode(self, *args):
        """apply_ClipNode(NodeVisitor self, ClipNode node)"""
        return _osg.NodeVisitor_apply_ClipNode(self, *args)

    def apply_TexGenNode(self, *args):
        """apply_TexGenNode(NodeVisitor self, TexGenNode node)"""
        return _osg.NodeVisitor_apply_TexGenNode(self, *args)

    def apply_LightSource(self, *args):
        """apply_LightSource(NodeVisitor self, LightSource node)"""
        return _osg.NodeVisitor_apply_LightSource(self, *args)

    def apply_Transform(self, *args):
        """apply_Transform(NodeVisitor self, Transform node)"""
        return _osg.NodeVisitor_apply_Transform(self, *args)

    def apply_Camera(self, *args):
        """apply_Camera(NodeVisitor self, Camera node)"""
        return _osg.NodeVisitor_apply_Camera(self, *args)

    def apply_CameraView(self, *args):
        """apply_CameraView(NodeVisitor self, CameraView node)"""
        return _osg.NodeVisitor_apply_CameraView(self, *args)

    def apply_MatrixTransform(self, *args):
        """apply_MatrixTransform(NodeVisitor self, MatrixTransform node)"""
        return _osg.NodeVisitor_apply_MatrixTransform(self, *args)

    def apply_PositionAttitudeTransform(self, *args):
        """apply_PositionAttitudeTransform(NodeVisitor self, PositionAttitudeTransform node)"""
        return _osg.NodeVisitor_apply_PositionAttitudeTransform(self, *args)

    def apply_Switch(self, *args):
        """apply_Switch(NodeVisitor self, Switch node)"""
        return _osg.NodeVisitor_apply_Switch(self, *args)

    def apply_Sequence(self, *args):
        """apply_Sequence(NodeVisitor self, Sequence node)"""
        return _osg.NodeVisitor_apply_Sequence(self, *args)

    def apply_LOD(self, *args):
        """apply_LOD(NodeVisitor self, LOD node)"""
        return _osg.NodeVisitor_apply_LOD(self, *args)

    def apply_PagedLOD(self, *args):
        """apply_PagedLOD(NodeVisitor self, PagedLOD node)"""
        return _osg.NodeVisitor_apply_PagedLOD(self, *args)

    def apply_ClearNode(self, *args):
        """apply_ClearNode(NodeVisitor self, osg::ClearNode & node)"""
        return _osg.NodeVisitor_apply_ClearNode(self, *args)

    def apply_OccluderNode(self, *args):
        """apply_OccluderNode(NodeVisitor self, osg::OccluderNode & node)"""
        return _osg.NodeVisitor_apply_OccluderNode(self, *args)

    def apply_OcclusionQueryNode(self, *args):
        """apply_OcclusionQueryNode(NodeVisitor self, osg::OcclusionQueryNode & node)"""
        return _osg.NodeVisitor_apply_OcclusionQueryNode(self, *args)

    def __disown__(self):
        self.this.disown()
        _osg.disown_NodeVisitor(self)
        return weakref_proxy(self)
NodeVisitor_swigregister = _osg.NodeVisitor_swigregister
NodeVisitor_swigregister(NodeVisitor)
UNINITIALIZED_FRAME_NUMBER = cvar.UNINITIALIZED_FRAME_NUMBER

class NodeAcceptOp(_object):
    """Proxy of C++ osg::NodeAcceptOp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeAcceptOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeAcceptOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::NodeAcceptOp self, NodeVisitor nv) -> NodeAcceptOp
        __init__(osg::NodeAcceptOp self, NodeAcceptOp naop) -> NodeAcceptOp
        """
        this = _osg.new_NodeAcceptOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """
        __call__(NodeAcceptOp self, Node node)
        __call__(NodeAcceptOp self, NodeRef node)
        """
        return _osg.NodeAcceptOp___call__(self, *args)

    __swig_destroy__ = _osg.delete_NodeAcceptOp
    __del__ = lambda self : None;
NodeAcceptOp_swigregister = _osg.NodeAcceptOp_swigregister
NodeAcceptOp_swigregister(NodeAcceptOp)

OSG_PROJECTION = _osg.OSG_PROJECTION
class Projection(Group):
    """Proxy of C++ osg::Projection class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Projection, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Projection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Projection self) -> Projection
        __init__(osg::Projection self, Projection arg2, CopyOp copyop=SHALLOW_COPY) -> Projection
        __init__(osg::Projection self, Projection arg2) -> Projection
        __init__(osg::Projection self, Matrixd matix) -> Projection
        """
        this = _osg.new_Projection(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Projection self) -> Object"""
        return _osg.Projection_cloneType(self)

    def clone(self, *args):
        """clone(Projection self, CopyOp copyop) -> Object"""
        return _osg.Projection_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Projection self, Object obj) -> bool"""
        return _osg.Projection_isSameKindAs(self, *args)

    def className(self):
        """className(Projection self) -> char const *"""
        return _osg.Projection_className(self)

    def libraryName(self):
        """libraryName(Projection self) -> char const *"""
        return _osg.Projection_libraryName(self)

    def accept(self, *args):
        """accept(Projection self, NodeVisitor nv)"""
        return _osg.Projection_accept(self, *args)

    def setMatrix(self, *args):
        """setMatrix(Projection self, Matrixd mat)"""
        return _osg.Projection_setMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(Projection self) -> Matrixd"""
        return _osg.Projection_getMatrix(self)

    def preMult(self, *args):
        """preMult(Projection self, Matrixd mat)"""
        return _osg.Projection_preMult(self, *args)

    def postMult(self, *args):
        """postMult(Projection self, Matrixd mat)"""
        return _osg.Projection_postMult(self, *args)

Projection_swigregister = _osg.Projection_swigregister
Projection_swigregister(Projection)

OSG_TRANSFORM = _osg.OSG_TRANSFORM

def computeLocalToWorld(*args):
  """
    computeLocalToWorld(vectorNode nodePath, bool ignoreCameras=True) -> Matrixd
    computeLocalToWorld(vectorNode nodePath) -> Matrixd
    """
  return _osg.computeLocalToWorld(*args)

def computeWorldToLocal(*args):
  """
    computeWorldToLocal(vectorNode nodePath, bool ignoreCameras=True) -> Matrixd
    computeWorldToLocal(vectorNode nodePath) -> Matrixd
    """
  return _osg.computeWorldToLocal(*args)

def computeLocalToEye(*args):
  """
    computeLocalToEye(Matrixd modelview, vectorNode nodePath, bool ignoreCameras=True) -> Matrixd
    computeLocalToEye(Matrixd modelview, vectorNode nodePath) -> Matrixd
    """
  return _osg.computeLocalToEye(*args)

def computeEyeToLocal(*args):
  """
    computeEyeToLocal(Matrixd modelview, vectorNode nodePath, bool ignoreCameras=True) -> Matrixd
    computeEyeToLocal(Matrixd modelview, vectorNode nodePath) -> Matrixd
    """
  return _osg.computeEyeToLocal(*args)
class Transform(Group):
    """Proxy of C++ osg::Transform class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transform, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Transform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Transform self) -> Transform
        __init__(osg::Transform self, Transform arg2, CopyOp copyop=SHALLOW_COPY) -> Transform
        __init__(osg::Transform self, Transform arg2) -> Transform
        """
        if self.__class__ == Transform:
            _self = None
        else:
            _self = self
        this = _osg.new_Transform(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Transform self) -> Object"""
        return _osg.Transform_cloneType(self)

    def clone(self, *args):
        """clone(Transform self, CopyOp copyop) -> Object"""
        return _osg.Transform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Transform self, Object obj) -> bool"""
        return _osg.Transform_isSameKindAs(self, *args)

    def className(self):
        """className(Transform self) -> char const *"""
        return _osg.Transform_className(self)

    def libraryName(self):
        """libraryName(Transform self) -> char const *"""
        return _osg.Transform_libraryName(self)

    def accept(self, *args):
        """accept(Transform self, NodeVisitor nv)"""
        return _osg.Transform_accept(self, *args)

    def asTransform(self, *args):
        """
        asTransform(Transform self) -> Transform
        asTransform(Transform self) -> Transform
        """
        return _osg.Transform_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(Transform self) -> MatrixTransform
        asMatrixTransform(Transform self) -> MatrixTransform
        """
        return _osg.Transform_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(Transform self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(Transform self) -> PositionAttitudeTransform
        """
        return _osg.Transform_asPositionAttitudeTransform(self, *args)

    RELATIVE_RF = _osg.Transform_RELATIVE_RF
    ABSOLUTE_RF = _osg.Transform_ABSOLUTE_RF
    ABSOLUTE_RF_INHERIT_VIEWPOINT = _osg.Transform_ABSOLUTE_RF_INHERIT_VIEWPOINT
    def setReferenceFrame(self, *args):
        """setReferenceFrame(Transform self, osg::Transform::ReferenceFrame rf)"""
        return _osg.Transform_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(Transform self) -> osg::Transform::ReferenceFrame"""
        return _osg.Transform_getReferenceFrame(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(Transform self, Matrixd matrix, NodeVisitor arg0) -> bool"""
        return _osg.Transform_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(Transform self, Matrixd matrix, NodeVisitor arg0) -> bool"""
        return _osg.Transform_computeWorldToLocalMatrix(self, *args)

    def computeBound(self):
        """computeBound(Transform self) -> BoundingSpheref"""
        return _osg.Transform_computeBound(self)

    def __disown__(self):
        self.this.disown()
        _osg.disown_Transform(self)
        return weakref_proxy(self)
    def childRemoved(self, *args):
        """childRemoved(Transform self, unsigned int arg0, unsigned int arg1)"""
        return _osg.Transform_childRemoved(self, *args)

    def childInserted(self, *args):
        """childInserted(Transform self, unsigned int arg0)"""
        return _osg.Transform_childInserted(self, *args)

Transform_swigregister = _osg.Transform_swigregister
Transform_swigregister(Transform)

OSG_POSITIONATTITUDETRANSFORM = _osg.OSG_POSITIONATTITUDETRANSFORM
class PositionAttitudeTransform(Transform):
    """Proxy of C++ osg::PositionAttitudeTransform class"""
    __swig_setmethods__ = {}
    for _s in [Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionAttitudeTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionAttitudeTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::PositionAttitudeTransform self) -> PositionAttitudeTransform
        __init__(osg::PositionAttitudeTransform self, PositionAttitudeTransform pat, CopyOp copyop=SHALLOW_COPY) -> PositionAttitudeTransform
        __init__(osg::PositionAttitudeTransform self, PositionAttitudeTransform pat) -> PositionAttitudeTransform
        """
        if self.__class__ == PositionAttitudeTransform:
            _self = None
        else:
            _self = self
        this = _osg.new_PositionAttitudeTransform(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(PositionAttitudeTransform self) -> Object"""
        return _osg.PositionAttitudeTransform_cloneType(self)

    def clone(self, *args):
        """clone(PositionAttitudeTransform self, CopyOp copyop) -> Object"""
        return _osg.PositionAttitudeTransform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(PositionAttitudeTransform self, Object obj) -> bool"""
        return _osg.PositionAttitudeTransform_isSameKindAs(self, *args)

    def className(self):
        """className(PositionAttitudeTransform self) -> char const *"""
        return _osg.PositionAttitudeTransform_className(self)

    def libraryName(self):
        """libraryName(PositionAttitudeTransform self) -> char const *"""
        return _osg.PositionAttitudeTransform_libraryName(self)

    def accept(self, *args):
        """accept(PositionAttitudeTransform self, NodeVisitor nv)"""
        return _osg.PositionAttitudeTransform_accept(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(PositionAttitudeTransform self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(PositionAttitudeTransform self) -> PositionAttitudeTransform
        """
        return _osg.PositionAttitudeTransform_asPositionAttitudeTransform(self, *args)

    def setPosition(self, *args):
        """setPosition(PositionAttitudeTransform self, Vec3d pos)"""
        return _osg.PositionAttitudeTransform_setPosition(self, *args)

    def getPosition(self):
        """getPosition(PositionAttitudeTransform self) -> Vec3d"""
        return _osg.PositionAttitudeTransform_getPosition(self)

    def setAttitude(self, *args):
        """setAttitude(PositionAttitudeTransform self, Quat quat)"""
        return _osg.PositionAttitudeTransform_setAttitude(self, *args)

    def getAttitude(self):
        """getAttitude(PositionAttitudeTransform self) -> Quat"""
        return _osg.PositionAttitudeTransform_getAttitude(self)

    def setScale(self, *args):
        """setScale(PositionAttitudeTransform self, Vec3d scale)"""
        return _osg.PositionAttitudeTransform_setScale(self, *args)

    def getScale(self):
        """getScale(PositionAttitudeTransform self) -> Vec3d"""
        return _osg.PositionAttitudeTransform_getScale(self)

    def setPivotPoint(self, *args):
        """setPivotPoint(PositionAttitudeTransform self, Vec3d pivot)"""
        return _osg.PositionAttitudeTransform_setPivotPoint(self, *args)

    def getPivotPoint(self):
        """getPivotPoint(PositionAttitudeTransform self) -> Vec3d"""
        return _osg.PositionAttitudeTransform_getPivotPoint(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(PositionAttitudeTransform self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.PositionAttitudeTransform_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(PositionAttitudeTransform self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.PositionAttitudeTransform_computeWorldToLocalMatrix(self, *args)

    def __disown__(self):
        self.this.disown()
        _osg.disown_PositionAttitudeTransform(self)
        return weakref_proxy(self)
    def childRemoved(self, *args):
        """childRemoved(PositionAttitudeTransform self, unsigned int arg0, unsigned int arg1)"""
        return _osg.PositionAttitudeTransform_childRemoved(self, *args)

    def childInserted(self, *args):
        """childInserted(PositionAttitudeTransform self, unsigned int arg0)"""
        return _osg.PositionAttitudeTransform_childInserted(self, *args)

PositionAttitudeTransform_swigregister = _osg.PositionAttitudeTransform_swigregister
PositionAttitudeTransform_swigregister(PositionAttitudeTransform)

OSG_TexGenNode = _osg.OSG_TexGenNode
class TexGenNode(Group):
    """Proxy of C++ osg::TexGenNode class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexGenNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexGenNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::TexGenNode self) -> TexGenNode
        __init__(osg::TexGenNode self, TexGen texgen) -> TexGenNode
        __init__(osg::TexGenNode self, TexGenNode tgb, CopyOp copyop=SHALLOW_COPY) -> TexGenNode
        __init__(osg::TexGenNode self, TexGenNode tgb) -> TexGenNode
        """
        this = _osg.new_TexGenNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TexGenNode self) -> Object"""
        return _osg.TexGenNode_cloneType(self)

    def clone(self, *args):
        """clone(TexGenNode self, CopyOp copyop) -> Object"""
        return _osg.TexGenNode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TexGenNode self, Object obj) -> bool"""
        return _osg.TexGenNode_isSameKindAs(self, *args)

    def className(self):
        """className(TexGenNode self) -> char const *"""
        return _osg.TexGenNode_className(self)

    def libraryName(self):
        """libraryName(TexGenNode self) -> char const *"""
        return _osg.TexGenNode_libraryName(self)

    def accept(self, *args):
        """accept(TexGenNode self, NodeVisitor nv)"""
        return _osg.TexGenNode_accept(self, *args)

    RELATIVE_RF = _osg.TexGenNode_RELATIVE_RF
    ABSOLUTE_RF = _osg.TexGenNode_ABSOLUTE_RF
    def setReferenceFrame(self, *args):
        """setReferenceFrame(TexGenNode self, osg::TexGenNode::ReferenceFrame rf)"""
        return _osg.TexGenNode_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(TexGenNode self) -> osg::TexGenNode::ReferenceFrame"""
        return _osg.TexGenNode_getReferenceFrame(self)

    def setTextureUnit(self, *args):
        """setTextureUnit(TexGenNode self, unsigned int textureUnit)"""
        return _osg.TexGenNode_setTextureUnit(self, *args)

    def getTextureUnit(self):
        """getTextureUnit(TexGenNode self) -> unsigned int"""
        return _osg.TexGenNode_getTextureUnit(self)

    def setTexGen(self, *args):
        """setTexGen(TexGenNode self, TexGen texgen)"""
        return _osg.TexGenNode_setTexGen(self, *args)

    def getTexGen(self, *args):
        """
        getTexGen(TexGenNode self) -> TexGen
        getTexGen(TexGenNode self) -> TexGen
        """
        return _osg.TexGenNode_getTexGen(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(TexGenNode self, bool threadSafe)"""
        return _osg.TexGenNode_setThreadSafeRefUnref(self, *args)

TexGenNode_swigregister = _osg.TexGenNode_swigregister
TexGenNode_swigregister(TexGenNode)

OSG_CLIPNODE = _osg.OSG_CLIPNODE
class ClipNode(Group):
    """Proxy of C++ osg::ClipNode class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClipNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClipNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ClipNode self) -> ClipNode
        __init__(osg::ClipNode self, ClipNode es, CopyOp copyop=SHALLOW_COPY) -> ClipNode
        __init__(osg::ClipNode self, ClipNode es) -> ClipNode
        """
        this = _osg.new_ClipNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ClipNode self) -> Object"""
        return _osg.ClipNode_cloneType(self)

    def clone(self, *args):
        """clone(ClipNode self, CopyOp copyop) -> Object"""
        return _osg.ClipNode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ClipNode self, Object obj) -> bool"""
        return _osg.ClipNode_isSameKindAs(self, *args)

    def className(self):
        """className(ClipNode self) -> char const *"""
        return _osg.ClipNode_className(self)

    def libraryName(self):
        """libraryName(ClipNode self) -> char const *"""
        return _osg.ClipNode_libraryName(self)

    def accept(self, *args):
        """accept(ClipNode self, NodeVisitor nv)"""
        return _osg.ClipNode_accept(self, *args)

    RELATIVE_RF = _osg.ClipNode_RELATIVE_RF
    ABSOLUTE_RF = _osg.ClipNode_ABSOLUTE_RF
    def setReferenceFrame(self, *args):
        """setReferenceFrame(ClipNode self, osg::ClipNode::ReferenceFrame rf)"""
        return _osg.ClipNode_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(ClipNode self) -> osg::ClipNode::ReferenceFrame"""
        return _osg.ClipNode_getReferenceFrame(self)

    def createClipBox(self, *args):
        """
        createClipBox(ClipNode self, BoundingBoxf bb, unsigned int clipPlaneNumberBase=0)
        createClipBox(ClipNode self, BoundingBoxf bb)
        """
        return _osg.ClipNode_createClipBox(self, *args)

    def addClipPlane(self, *args):
        """addClipPlane(ClipNode self, ClipPlane * clipplane) -> bool"""
        return _osg.ClipNode_addClipPlane(self, *args)

    def removeClipPlane(self, *args):
        """
        removeClipPlane(ClipNode self, ClipPlane * clipplane) -> bool
        removeClipPlane(ClipNode self, unsigned int pos) -> bool
        """
        return _osg.ClipNode_removeClipPlane(self, *args)

    def getNumClipPlanes(self):
        """getNumClipPlanes(ClipNode self) -> unsigned int"""
        return _osg.ClipNode_getNumClipPlanes(self)

    def getClipPlane(self, *args):
        """
        getClipPlane(ClipNode self, unsigned int pos) -> ClipPlane
        getClipPlane(ClipNode self, unsigned int pos) -> ClipPlane const *
        """
        return _osg.ClipNode_getClipPlane(self, *args)

    def setClipPlaneList(self, *args):
        """setClipPlaneList(ClipNode self, osg::ClipNode::ClipPlaneList const & cpl)"""
        return _osg.ClipNode_setClipPlaneList(self, *args)

    def getClipPlaneList(self, *args):
        """
        getClipPlaneList(ClipNode self) -> osg::ClipNode::ClipPlaneList
        getClipPlaneList(ClipNode self) -> osg::ClipNode::ClipPlaneList const &
        """
        return _osg.ClipNode_getClipPlaneList(self, *args)

    def setStateSetModes(self, *args):
        """setStateSetModes(ClipNode self, StateSet arg2, osg::StateAttribute::GLModeValue arg3)"""
        return _osg.ClipNode_setStateSetModes(self, *args)

    def setLocalStateSetModes(self, *args):
        """
        setLocalStateSetModes(ClipNode self, osg::StateAttribute::GLModeValue arg2=ON)
        setLocalStateSetModes(ClipNode self)
        """
        return _osg.ClipNode_setLocalStateSetModes(self, *args)

    def computeBound(self):
        """computeBound(ClipNode self) -> BoundingSpheref"""
        return _osg.ClipNode_computeBound(self)

ClipNode_swigregister = _osg.ClipNode_swigregister
ClipNode_swigregister(ClipNode)

OSG_ANIMATIONPATH = _osg.OSG_ANIMATIONPATH
class AnimationPath(Object):
    """Proxy of C++ osg::AnimationPath class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationPath, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationPath, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::AnimationPath self) -> AnimationPath
        __init__(osg::AnimationPath self, AnimationPath ap, CopyOp copyop=SHALLOW_COPY) -> AnimationPath
        __init__(osg::AnimationPath self, AnimationPath ap) -> AnimationPath
        """
        this = _osg.new_AnimationPath(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(AnimationPath self) -> Object"""
        return _osg.AnimationPath_cloneType(self)

    def clone(self, *args):
        """clone(AnimationPath self, CopyOp copyop) -> Object"""
        return _osg.AnimationPath_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(AnimationPath self, Object obj) -> bool"""
        return _osg.AnimationPath_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(AnimationPath self) -> char const *"""
        return _osg.AnimationPath_libraryName(self)

    def className(self):
        """className(AnimationPath self) -> char const *"""
        return _osg.AnimationPath_className(self)

    def getMatrix(self, *args):
        """
        getMatrix(AnimationPath self, double time, Matrixf matrix) -> bool
        getMatrix(AnimationPath self, double time, Matrixd matrix) -> bool
        """
        return _osg.AnimationPath_getMatrix(self, *args)

    def getInverse(self, *args):
        """
        getInverse(AnimationPath self, double time, Matrixf matrix) -> bool
        getInverse(AnimationPath self, double time, Matrixd matrix) -> bool
        """
        return _osg.AnimationPath_getInverse(self, *args)

    def getInterpolatedControlPoint(self, *args):
        """getInterpolatedControlPoint(AnimationPath self, double time, osg::AnimationPath::ControlPoint & controlPoint) -> bool"""
        return _osg.AnimationPath_getInterpolatedControlPoint(self, *args)

    def insert(self, *args):
        """insert(AnimationPath self, double time, osg::AnimationPath::ControlPoint const & controlPoint)"""
        return _osg.AnimationPath_insert(self, *args)

    def getFirstTime(self):
        """getFirstTime(AnimationPath self) -> double"""
        return _osg.AnimationPath_getFirstTime(self)

    def getLastTime(self):
        """getLastTime(AnimationPath self) -> double"""
        return _osg.AnimationPath_getLastTime(self)

    def getPeriod(self):
        """getPeriod(AnimationPath self) -> double"""
        return _osg.AnimationPath_getPeriod(self)

    SWING = _osg.AnimationPath_SWING
    LOOP = _osg.AnimationPath_LOOP
    NO_LOOPING = _osg.AnimationPath_NO_LOOPING
    def setLoopMode(self, *args):
        """setLoopMode(AnimationPath self, osg::AnimationPath::LoopMode lm)"""
        return _osg.AnimationPath_setLoopMode(self, *args)

    def getLoopMode(self):
        """getLoopMode(AnimationPath self) -> osg::AnimationPath::LoopMode"""
        return _osg.AnimationPath_getLoopMode(self)

    def setTimeControlPointMap(self, *args):
        """setTimeControlPointMap(AnimationPath self, osg::AnimationPath::TimeControlPointMap & tcpm)"""
        return _osg.AnimationPath_setTimeControlPointMap(self, *args)

    def getTimeControlPointMap(self, *args):
        """
        getTimeControlPointMap(AnimationPath self) -> osg::AnimationPath::TimeControlPointMap
        getTimeControlPointMap(AnimationPath self) -> osg::AnimationPath::TimeControlPointMap const &
        """
        return _osg.AnimationPath_getTimeControlPointMap(self, *args)

    def empty(self):
        """empty(AnimationPath self) -> bool"""
        return _osg.AnimationPath_empty(self)

    def clear(self):
        """clear(AnimationPath self)"""
        return _osg.AnimationPath_clear(self)

    def read(self, *args):
        """read(AnimationPath self, std::istream & _in)"""
        return _osg.AnimationPath_read(self, *args)

    def write(self, *args):
        """
        write(AnimationPath self, std::ostream & out)
        write(AnimationPath self, osg::AnimationPath::TimeControlPointMap::const_iterator itr, std::ostream & out)
        """
        return _osg.AnimationPath_write(self, *args)

AnimationPath_swigregister = _osg.AnimationPath_swigregister
AnimationPath_swigregister(AnimationPath)

class AnimationPathCallback(NodeCallback):
    """Proxy of C++ osg::AnimationPathCallback class"""
    __swig_setmethods__ = {}
    for _s in [NodeCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationPathCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationPathCallback, name)
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(AnimationPathCallback self) -> Object"""
        return _osg.AnimationPathCallback_cloneType(self)

    def clone(self, *args):
        """clone(AnimationPathCallback self, CopyOp copyop) -> Object"""
        return _osg.AnimationPathCallback_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(AnimationPathCallback self, Object obj) -> bool"""
        return _osg.AnimationPathCallback_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(AnimationPathCallback self) -> char const *"""
        return _osg.AnimationPathCallback_libraryName(self)

    def className(self):
        """className(AnimationPathCallback self) -> char const *"""
        return _osg.AnimationPathCallback_className(self)

    def __init__(self, *args): 
        """
        __init__(osg::AnimationPathCallback self) -> AnimationPathCallback
        __init__(osg::AnimationPathCallback self, AnimationPathCallback apc, CopyOp copyop) -> AnimationPathCallback
        __init__(osg::AnimationPathCallback self, AnimationPath ap, double timeOffset=0.0, double timeMultiplier=1.0) -> AnimationPathCallback
        __init__(osg::AnimationPathCallback self, AnimationPath ap, double timeOffset=0.0) -> AnimationPathCallback
        __init__(osg::AnimationPathCallback self, AnimationPath ap) -> AnimationPathCallback
        __init__(osg::AnimationPathCallback self, Vec3d pivot, Vec3d axis, float angularVelocity) -> AnimationPathCallback
        """
        this = _osg.new_AnimationPathCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def setAnimationPath(self, *args):
        """setAnimationPath(AnimationPathCallback self, AnimationPath path)"""
        return _osg.AnimationPathCallback_setAnimationPath(self, *args)

    def getAnimationPath(self, *args):
        """
        getAnimationPath(AnimationPathCallback self) -> AnimationPath
        getAnimationPath(AnimationPathCallback self) -> AnimationPath
        """
        return _osg.AnimationPathCallback_getAnimationPath(self, *args)

    def setPivotPoint(self, *args):
        """setPivotPoint(AnimationPathCallback self, Vec3d pivot)"""
        return _osg.AnimationPathCallback_setPivotPoint(self, *args)

    def getPivotPoint(self):
        """getPivotPoint(AnimationPathCallback self) -> Vec3d"""
        return _osg.AnimationPathCallback_getPivotPoint(self)

    def setUseInverseMatrix(self, *args):
        """setUseInverseMatrix(AnimationPathCallback self, bool useInverseMatrix)"""
        return _osg.AnimationPathCallback_setUseInverseMatrix(self, *args)

    def getUseInverseMatrix(self):
        """getUseInverseMatrix(AnimationPathCallback self) -> bool"""
        return _osg.AnimationPathCallback_getUseInverseMatrix(self)

    def setTimeOffset(self, *args):
        """setTimeOffset(AnimationPathCallback self, double offset)"""
        return _osg.AnimationPathCallback_setTimeOffset(self, *args)

    def getTimeOffset(self):
        """getTimeOffset(AnimationPathCallback self) -> double"""
        return _osg.AnimationPathCallback_getTimeOffset(self)

    def setTimeMultiplier(self, *args):
        """setTimeMultiplier(AnimationPathCallback self, double multiplier)"""
        return _osg.AnimationPathCallback_setTimeMultiplier(self, *args)

    def getTimeMultiplier(self):
        """getTimeMultiplier(AnimationPathCallback self) -> double"""
        return _osg.AnimationPathCallback_getTimeMultiplier(self)

    def reset(self):
        """reset(AnimationPathCallback self)"""
        return _osg.AnimationPathCallback_reset(self)

    def setPause(self, *args):
        """setPause(AnimationPathCallback self, bool pause)"""
        return _osg.AnimationPathCallback_setPause(self, *args)

    def getPause(self):
        """getPause(AnimationPathCallback self) -> bool"""
        return _osg.AnimationPathCallback_getPause(self)

    def getAnimationTime(self):
        """getAnimationTime(AnimationPathCallback self) -> double"""
        return _osg.AnimationPathCallback_getAnimationTime(self)

    def __call__(self, *args):
        """__call__(AnimationPathCallback self, Node node, NodeVisitor nv)"""
        return _osg.AnimationPathCallback___call__(self, *args)

    def update(self, *args):
        """update(AnimationPathCallback self, Node node)"""
        return _osg.AnimationPathCallback_update(self, *args)

    __swig_setmethods__["_animationPath"] = _osg.AnimationPathCallback__animationPath_set
    __swig_getmethods__["_animationPath"] = _osg.AnimationPathCallback__animationPath_get
    if _newclass:_animationPath = _swig_property(_osg.AnimationPathCallback__animationPath_get, _osg.AnimationPathCallback__animationPath_set)
    __swig_setmethods__["_pivotPoint"] = _osg.AnimationPathCallback__pivotPoint_set
    __swig_getmethods__["_pivotPoint"] = _osg.AnimationPathCallback__pivotPoint_get
    if _newclass:_pivotPoint = _swig_property(_osg.AnimationPathCallback__pivotPoint_get, _osg.AnimationPathCallback__pivotPoint_set)
    __swig_setmethods__["_useInverseMatrix"] = _osg.AnimationPathCallback__useInverseMatrix_set
    __swig_getmethods__["_useInverseMatrix"] = _osg.AnimationPathCallback__useInverseMatrix_get
    if _newclass:_useInverseMatrix = _swig_property(_osg.AnimationPathCallback__useInverseMatrix_get, _osg.AnimationPathCallback__useInverseMatrix_set)
    __swig_setmethods__["_timeOffset"] = _osg.AnimationPathCallback__timeOffset_set
    __swig_getmethods__["_timeOffset"] = _osg.AnimationPathCallback__timeOffset_get
    if _newclass:_timeOffset = _swig_property(_osg.AnimationPathCallback__timeOffset_get, _osg.AnimationPathCallback__timeOffset_set)
    __swig_setmethods__["_timeMultiplier"] = _osg.AnimationPathCallback__timeMultiplier_set
    __swig_getmethods__["_timeMultiplier"] = _osg.AnimationPathCallback__timeMultiplier_get
    if _newclass:_timeMultiplier = _swig_property(_osg.AnimationPathCallback__timeMultiplier_get, _osg.AnimationPathCallback__timeMultiplier_set)
    __swig_setmethods__["_firstTime"] = _osg.AnimationPathCallback__firstTime_set
    __swig_getmethods__["_firstTime"] = _osg.AnimationPathCallback__firstTime_get
    if _newclass:_firstTime = _swig_property(_osg.AnimationPathCallback__firstTime_get, _osg.AnimationPathCallback__firstTime_set)
    __swig_setmethods__["_latestTime"] = _osg.AnimationPathCallback__latestTime_set
    __swig_getmethods__["_latestTime"] = _osg.AnimationPathCallback__latestTime_get
    if _newclass:_latestTime = _swig_property(_osg.AnimationPathCallback__latestTime_get, _osg.AnimationPathCallback__latestTime_set)
    __swig_setmethods__["_pause"] = _osg.AnimationPathCallback__pause_set
    __swig_getmethods__["_pause"] = _osg.AnimationPathCallback__pause_get
    if _newclass:_pause = _swig_property(_osg.AnimationPathCallback__pause_get, _osg.AnimationPathCallback__pause_set)
    __swig_setmethods__["_pauseTime"] = _osg.AnimationPathCallback__pauseTime_set
    __swig_getmethods__["_pauseTime"] = _osg.AnimationPathCallback__pauseTime_get
    if _newclass:_pauseTime = _swig_property(_osg.AnimationPathCallback__pauseTime_get, _osg.AnimationPathCallback__pauseTime_set)
AnimationPathCallback_swigregister = _osg.AnimationPathCallback_swigregister
AnimationPathCallback_swigregister(AnimationPathCallback)

OSG_APPLICATIONUSAGE = _osg.OSG_APPLICATIONUSAGE
class ApplicationUsage(Referenced):
    """Proxy of C++ osg::ApplicationUsage class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationUsage, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationUsage, name)
    __repr__ = _swig_repr
    def instance():
        """instance() -> ApplicationUsage"""
        return _osg.ApplicationUsage_instance()

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def __init__(self, *args): 
        """
        __init__(osg::ApplicationUsage self) -> ApplicationUsage
        __init__(osg::ApplicationUsage self, std::string const & commandLineUsage) -> ApplicationUsage
        """
        this = _osg.new_ApplicationUsage(*args)
        try: self.this.append(this)
        except: self.this = this
    def setApplicationName(self, *args):
        """setApplicationName(ApplicationUsage self, std::string const & name)"""
        return _osg.ApplicationUsage_setApplicationName(self, *args)

    def getApplicationName(self):
        """getApplicationName(ApplicationUsage self) -> std::string const &"""
        return _osg.ApplicationUsage_getApplicationName(self)

    def setDescription(self, *args):
        """setDescription(ApplicationUsage self, std::string const & desc)"""
        return _osg.ApplicationUsage_setDescription(self, *args)

    def getDescription(self):
        """getDescription(ApplicationUsage self) -> std::string const &"""
        return _osg.ApplicationUsage_getDescription(self)

    NO_HELP = _osg.ApplicationUsage_NO_HELP
    COMMAND_LINE_OPTION = _osg.ApplicationUsage_COMMAND_LINE_OPTION
    ENVIRONMENTAL_VARIABLE = _osg.ApplicationUsage_ENVIRONMENTAL_VARIABLE
    KEYBOARD_MOUSE_BINDING = _osg.ApplicationUsage_KEYBOARD_MOUSE_BINDING
    HELP_ALL = _osg.ApplicationUsage_HELP_ALL
    def addUsageExplanation(self, *args):
        """addUsageExplanation(ApplicationUsage self, osg::ApplicationUsage::Type type, std::string const & option, std::string const & explanation)"""
        return _osg.ApplicationUsage_addUsageExplanation(self, *args)

    def setCommandLineUsage(self, *args):
        """setCommandLineUsage(ApplicationUsage self, std::string const & explanation)"""
        return _osg.ApplicationUsage_setCommandLineUsage(self, *args)

    def getCommandLineUsage(self):
        """getCommandLineUsage(ApplicationUsage self) -> std::string const &"""
        return _osg.ApplicationUsage_getCommandLineUsage(self)

    def addCommandLineOption(self, *args):
        """
        addCommandLineOption(ApplicationUsage self, std::string const & option, std::string const & explanation, std::string const & defaultValue="")
        addCommandLineOption(ApplicationUsage self, std::string const & option, std::string const & explanation)
        """
        return _osg.ApplicationUsage_addCommandLineOption(self, *args)

    def setCommandLineOptions(self, *args):
        """setCommandLineOptions(ApplicationUsage self, osg::ApplicationUsage::UsageMap const & usageMap)"""
        return _osg.ApplicationUsage_setCommandLineOptions(self, *args)

    def getCommandLineOptions(self):
        """getCommandLineOptions(ApplicationUsage self) -> osg::ApplicationUsage::UsageMap const &"""
        return _osg.ApplicationUsage_getCommandLineOptions(self)

    def setCommandLineOptionsDefaults(self, *args):
        """setCommandLineOptionsDefaults(ApplicationUsage self, osg::ApplicationUsage::UsageMap const & usageMap)"""
        return _osg.ApplicationUsage_setCommandLineOptionsDefaults(self, *args)

    def getCommandLineOptionsDefaults(self):
        """getCommandLineOptionsDefaults(ApplicationUsage self) -> osg::ApplicationUsage::UsageMap const &"""
        return _osg.ApplicationUsage_getCommandLineOptionsDefaults(self)

    def addEnvironmentalVariable(self, *args):
        """
        addEnvironmentalVariable(ApplicationUsage self, std::string const & option, std::string const & explanation, std::string const & defaultValue="")
        addEnvironmentalVariable(ApplicationUsage self, std::string const & option, std::string const & explanation)
        """
        return _osg.ApplicationUsage_addEnvironmentalVariable(self, *args)

    def setEnvironmentalVariables(self, *args):
        """setEnvironmentalVariables(ApplicationUsage self, osg::ApplicationUsage::UsageMap const & usageMap)"""
        return _osg.ApplicationUsage_setEnvironmentalVariables(self, *args)

    def getEnvironmentalVariables(self):
        """getEnvironmentalVariables(ApplicationUsage self) -> osg::ApplicationUsage::UsageMap const &"""
        return _osg.ApplicationUsage_getEnvironmentalVariables(self)

    def setEnvironmentalVariablesDefaults(self, *args):
        """setEnvironmentalVariablesDefaults(ApplicationUsage self, osg::ApplicationUsage::UsageMap const & usageMap)"""
        return _osg.ApplicationUsage_setEnvironmentalVariablesDefaults(self, *args)

    def getEnvironmentalVariablesDefaults(self):
        """getEnvironmentalVariablesDefaults(ApplicationUsage self) -> osg::ApplicationUsage::UsageMap const &"""
        return _osg.ApplicationUsage_getEnvironmentalVariablesDefaults(self)

    def addKeyboardMouseBinding(self, *args):
        """
        addKeyboardMouseBinding(ApplicationUsage self, std::string const & prefix, int key, std::string const & explanation)
        addKeyboardMouseBinding(ApplicationUsage self, int key, std::string const & explanation)
        addKeyboardMouseBinding(ApplicationUsage self, std::string const & option, std::string const & explanation)
        """
        return _osg.ApplicationUsage_addKeyboardMouseBinding(self, *args)

    def setKeyboardMouseBindings(self, *args):
        """setKeyboardMouseBindings(ApplicationUsage self, osg::ApplicationUsage::UsageMap const & usageMap)"""
        return _osg.ApplicationUsage_setKeyboardMouseBindings(self, *args)

    def getKeyboardMouseBindings(self):
        """getKeyboardMouseBindings(ApplicationUsage self) -> osg::ApplicationUsage::UsageMap const &"""
        return _osg.ApplicationUsage_getKeyboardMouseBindings(self)

    def getFormattedString(self, *args):
        """
        getFormattedString(ApplicationUsage self, std::string & str, osg::ApplicationUsage::UsageMap const & um, unsigned int widthOfOutput=80, 
            bool showDefaults=False, osg::ApplicationUsage::UsageMap const & ud=osg::ApplicationUsage::UsageMap())
        getFormattedString(ApplicationUsage self, std::string & str, osg::ApplicationUsage::UsageMap const & um, unsigned int widthOfOutput=80, 
            bool showDefaults=False)
        getFormattedString(ApplicationUsage self, std::string & str, osg::ApplicationUsage::UsageMap const & um, unsigned int widthOfOutput=80)
        getFormattedString(ApplicationUsage self, std::string & str, osg::ApplicationUsage::UsageMap const & um)
        """
        return _osg.ApplicationUsage_getFormattedString(self, *args)

    def write(self, *args):
        """
        write(ApplicationUsage self, std::ostream & output, osg::ApplicationUsage::UsageMap const & um, unsigned int widthOfOutput=80, 
            bool showDefaults=False, osg::ApplicationUsage::UsageMap const & ud=osg::ApplicationUsage::UsageMap())
        write(ApplicationUsage self, std::ostream & output, osg::ApplicationUsage::UsageMap const & um, unsigned int widthOfOutput=80, 
            bool showDefaults=False)
        write(ApplicationUsage self, std::ostream & output, osg::ApplicationUsage::UsageMap const & um, unsigned int widthOfOutput=80)
        write(ApplicationUsage self, std::ostream & output, osg::ApplicationUsage::UsageMap const & um)
        write(ApplicationUsage self, std::ostream & output, unsigned int type=COMMAND_LINE_OPTION, unsigned int widthOfOutput=80, 
            bool showDefaults=False)
        write(ApplicationUsage self, std::ostream & output, unsigned int type=COMMAND_LINE_OPTION, unsigned int widthOfOutput=80)
        write(ApplicationUsage self, std::ostream & output, unsigned int type=COMMAND_LINE_OPTION)
        write(ApplicationUsage self, std::ostream & output)
        """
        return _osg.ApplicationUsage_write(self, *args)

    def writeEnvironmentSettings(self, *args):
        """writeEnvironmentSettings(ApplicationUsage self, std::ostream & output)"""
        return _osg.ApplicationUsage_writeEnvironmentSettings(self, *args)

ApplicationUsage_swigregister = _osg.ApplicationUsage_swigregister
ApplicationUsage_swigregister(ApplicationUsage)

def ApplicationUsage_instance():
  """ApplicationUsage_instance() -> ApplicationUsage"""
  return _osg.ApplicationUsage_instance()

class ApplicationUsageProxy(_object):
    """Proxy of C++ osg::ApplicationUsageProxy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationUsageProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationUsageProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osg::ApplicationUsageProxy self, osg::ApplicationUsage::Type type, std::string const & option, std::string const & explanation) -> ApplicationUsageProxy"""
        this = _osg.new_ApplicationUsageProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ApplicationUsageProxy
    __del__ = lambda self : None;
ApplicationUsageProxy_swigregister = _osg.ApplicationUsageProxy_swigregister
ApplicationUsageProxy_swigregister(ApplicationUsageProxy)

OSG_ARGUMENTPARSER = _osg.OSG_ARGUMENTPARSER
class ArgumentParser(_object):
    """Proxy of C++ osg::ArgumentParser class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgumentParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArgumentParser, name)
    __repr__ = _swig_repr
    def isBool(*args):
        """isBool(char const * str) -> bool"""
        return _osg.ArgumentParser_isBool(*args)

    if _newclass:isBool = staticmethod(isBool)
    __swig_getmethods__["isBool"] = lambda x: isBool
    def __init__(self, *args): 
        """__init__(osg::ArgumentParser self, int * argc, char ** argv) -> ArgumentParser"""
        this = _osg.new_ArgumentParser(*args)
        try: self.this.append(this)
        except: self.this = this
    def setApplicationUsage(self, *args):
        """setApplicationUsage(ArgumentParser self, ApplicationUsage usage)"""
        return _osg.ArgumentParser_setApplicationUsage(self, *args)

    def getApplicationUsage(self, *args):
        """
        getApplicationUsage(ArgumentParser self) -> ApplicationUsage
        getApplicationUsage(ArgumentParser self) -> ApplicationUsage
        """
        return _osg.ArgumentParser_getApplicationUsage(self, *args)

    def argc(self):
        """argc(ArgumentParser self) -> int &"""
        return _osg.ArgumentParser_argc(self)

    def argv(self):
        """argv(ArgumentParser self) -> char **"""
        return _osg.ArgumentParser_argv(self)

    def getApplicationName(self):
        """getApplicationName(ArgumentParser self) -> std::string"""
        return _osg.ArgumentParser_getApplicationName(self)

    def find(self, *args):
        """find(ArgumentParser self, std::string const & str) -> int"""
        return _osg.ArgumentParser_find(self, *args)

    def isOption(self, *args):
        """
        isOption(ArgumentParser self, char const * str) -> bool
        isOption(ArgumentParser self, int pos) -> bool
        """
        return _osg.ArgumentParser_isOption(self, *args)

    def isString(self, *args):
        """
        isString(ArgumentParser self, char const * str) -> bool
        isString(ArgumentParser self, int pos) -> bool
        """
        return _osg.ArgumentParser_isString(self, *args)

    def isNumber(self, *args):
        """
        isNumber(ArgumentParser self, char const * str) -> bool
        isNumber(ArgumentParser self, int pos) -> bool
        """
        return _osg.ArgumentParser_isNumber(self, *args)

    def containsOptions(self):
        """containsOptions(ArgumentParser self) -> bool"""
        return _osg.ArgumentParser_containsOptions(self)

    def remove(self, *args):
        """
        remove(ArgumentParser self, int pos, int num=1)
        remove(ArgumentParser self, int pos)
        """
        return _osg.ArgumentParser_remove(self, *args)

    def match(self, *args):
        """match(ArgumentParser self, int pos, std::string const & str) -> bool"""
        return _osg.ArgumentParser_match(self, *args)

    BENIGN = _osg.ArgumentParser_BENIGN
    CRITICAL = _osg.ArgumentParser_CRITICAL
    def errors(self, *args):
        """
        errors(ArgumentParser self, osg::ArgumentParser::ErrorSeverity severity=BENIGN) -> bool
        errors(ArgumentParser self) -> bool
        """
        return _osg.ArgumentParser_errors(self, *args)

    def reportError(self, *args):
        """
        reportError(ArgumentParser self, std::string const & message, osg::ArgumentParser::ErrorSeverity severity=CRITICAL)
        reportError(ArgumentParser self, std::string const & message)
        """
        return _osg.ArgumentParser_reportError(self, *args)

    def reportRemainingOptionsAsUnrecognized(self, *args):
        """
        reportRemainingOptionsAsUnrecognized(ArgumentParser self, osg::ArgumentParser::ErrorSeverity severity=BENIGN)
        reportRemainingOptionsAsUnrecognized(ArgumentParser self)
        """
        return _osg.ArgumentParser_reportRemainingOptionsAsUnrecognized(self, *args)

    def getErrorMessageMap(self, *args):
        """
        getErrorMessageMap(ArgumentParser self) -> osg::ArgumentParser::ErrorMessageMap
        getErrorMessageMap(ArgumentParser self) -> osg::ArgumentParser::ErrorMessageMap const &
        """
        return _osg.ArgumentParser_getErrorMessageMap(self, *args)

    def writeErrorMessages(self, *args):
        """
        writeErrorMessages(ArgumentParser self, std::ostream & output, osg::ArgumentParser::ErrorSeverity sevrity=BENIGN)
        writeErrorMessages(ArgumentParser self, std::ostream & output)
        """
        return _osg.ArgumentParser_writeErrorMessages(self, *args)

    def readHelpType(self):
        """readHelpType(ArgumentParser self) -> osg::ApplicationUsage::Type"""
        return _osg.ArgumentParser_readHelpType(self)

    __swig_destroy__ = _osg.delete_ArgumentParser
    __del__ = lambda self : None;
ArgumentParser_swigregister = _osg.ArgumentParser_swigregister
ArgumentParser_swigregister(ArgumentParser)

def ArgumentParser_isBool(*args):
  """ArgumentParser_isBool(char const * str) -> bool"""
  return _osg.ArgumentParser_isBool(*args)

OSG_PRIMITIVESET = _osg.OSG_PRIMITIVESET
class PrimitiveFunctor(_object):
    """Proxy of C++ osg::PrimitiveFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimitiveFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrimitiveFunctor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osg.delete_PrimitiveFunctor
    __del__ = lambda self : None;
    def setVertexArray(self, *args):
        """
        setVertexArray(PrimitiveFunctor self, unsigned int count, Vec2f vertices)
        setVertexArray(PrimitiveFunctor self, unsigned int count, Vec3f vertices)
        setVertexArray(PrimitiveFunctor self, unsigned int count, Vec4f vertices)
        setVertexArray(PrimitiveFunctor self, unsigned int count, Vec2d vertices)
        setVertexArray(PrimitiveFunctor self, unsigned int count, Vec3d vertices)
        setVertexArray(PrimitiveFunctor self, unsigned int count, Vec4d vertices)
        """
        return _osg.PrimitiveFunctor_setVertexArray(self, *args)

    def drawArrays(self, *args):
        """drawArrays(PrimitiveFunctor self, GLenum mode, GLint first, GLsizei count)"""
        return _osg.PrimitiveFunctor_drawArrays(self, *args)

    def drawElements(self, *args):
        """
        drawElements(PrimitiveFunctor self, GLenum mode, GLsizei count, GLubyte const * indices)
        drawElements(PrimitiveFunctor self, GLenum mode, GLsizei count, GLushort const * indices)
        drawElements(PrimitiveFunctor self, GLenum mode, GLsizei count, GLuint const * indices)
        """
        return _osg.PrimitiveFunctor_drawElements(self, *args)

    def begin(self, *args):
        """begin(PrimitiveFunctor self, GLenum mode)"""
        return _osg.PrimitiveFunctor_begin(self, *args)

    def vertex(self, *args):
        """
        vertex(PrimitiveFunctor self, Vec2f vert)
        vertex(PrimitiveFunctor self, Vec3f vert)
        vertex(PrimitiveFunctor self, Vec4f vert)
        vertex(PrimitiveFunctor self, float x, float y)
        vertex(PrimitiveFunctor self, float x, float y, float z)
        vertex(PrimitiveFunctor self, float x, float y, float z, float w)
        """
        return _osg.PrimitiveFunctor_vertex(self, *args)

    def end(self):
        """end(PrimitiveFunctor self)"""
        return _osg.PrimitiveFunctor_end(self)

PrimitiveFunctor_swigregister = _osg.PrimitiveFunctor_swigregister
PrimitiveFunctor_swigregister(PrimitiveFunctor)

class PrimitiveIndexFunctor(_object):
    """Proxy of C++ osg::PrimitiveIndexFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimitiveIndexFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrimitiveIndexFunctor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osg.delete_PrimitiveIndexFunctor
    __del__ = lambda self : None;
    def setVertexArray(self, *args):
        """
        setVertexArray(PrimitiveIndexFunctor self, unsigned int count, Vec2f vertices)
        setVertexArray(PrimitiveIndexFunctor self, unsigned int count, Vec3f vertices)
        setVertexArray(PrimitiveIndexFunctor self, unsigned int count, Vec4f vertices)
        setVertexArray(PrimitiveIndexFunctor self, unsigned int count, Vec2d vertices)
        setVertexArray(PrimitiveIndexFunctor self, unsigned int count, Vec3d vertices)
        setVertexArray(PrimitiveIndexFunctor self, unsigned int count, Vec4d vertices)
        """
        return _osg.PrimitiveIndexFunctor_setVertexArray(self, *args)

    def drawArrays(self, *args):
        """drawArrays(PrimitiveIndexFunctor self, GLenum mode, GLint first, GLsizei count)"""
        return _osg.PrimitiveIndexFunctor_drawArrays(self, *args)

    def drawElements(self, *args):
        """
        drawElements(PrimitiveIndexFunctor self, GLenum mode, GLsizei count, GLubyte const * indices)
        drawElements(PrimitiveIndexFunctor self, GLenum mode, GLsizei count, GLushort const * indices)
        drawElements(PrimitiveIndexFunctor self, GLenum mode, GLsizei count, GLuint const * indices)
        """
        return _osg.PrimitiveIndexFunctor_drawElements(self, *args)

    def begin(self, *args):
        """begin(PrimitiveIndexFunctor self, GLenum mode)"""
        return _osg.PrimitiveIndexFunctor_begin(self, *args)

    def vertex(self, *args):
        """vertex(PrimitiveIndexFunctor self, unsigned int pos)"""
        return _osg.PrimitiveIndexFunctor_vertex(self, *args)

    def end(self):
        """end(PrimitiveIndexFunctor self)"""
        return _osg.PrimitiveIndexFunctor_end(self)

PrimitiveIndexFunctor_swigregister = _osg.PrimitiveIndexFunctor_swigregister
PrimitiveIndexFunctor_swigregister(PrimitiveIndexFunctor)

class PrimitiveSet(BufferData):
    """Proxy of C++ osg::PrimitiveSet class"""
    __swig_setmethods__ = {}
    for _s in [BufferData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimitiveSet, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrimitiveSet, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PrimitiveType = _osg.PrimitiveSet_PrimitiveType
    DrawArraysPrimitiveType = _osg.PrimitiveSet_DrawArraysPrimitiveType
    DrawArrayLengthsPrimitiveType = _osg.PrimitiveSet_DrawArrayLengthsPrimitiveType
    DrawElementsUBytePrimitiveType = _osg.PrimitiveSet_DrawElementsUBytePrimitiveType
    DrawElementsUShortPrimitiveType = _osg.PrimitiveSet_DrawElementsUShortPrimitiveType
    DrawElementsUIntPrimitiveType = _osg.PrimitiveSet_DrawElementsUIntPrimitiveType
    POINTS = _osg.PrimitiveSet_POINTS
    LINES = _osg.PrimitiveSet_LINES
    LINE_STRIP = _osg.PrimitiveSet_LINE_STRIP
    LINE_LOOP = _osg.PrimitiveSet_LINE_LOOP
    TRIANGLES = _osg.PrimitiveSet_TRIANGLES
    TRIANGLE_STRIP = _osg.PrimitiveSet_TRIANGLE_STRIP
    TRIANGLE_FAN = _osg.PrimitiveSet_TRIANGLE_FAN
    QUADS = _osg.PrimitiveSet_QUADS
    QUAD_STRIP = _osg.PrimitiveSet_QUAD_STRIP
    POLYGON = _osg.PrimitiveSet_POLYGON
    LINES_ADJACENCY = _osg.PrimitiveSet_LINES_ADJACENCY
    LINE_STRIP_ADJACENCY = _osg.PrimitiveSet_LINE_STRIP_ADJACENCY
    TRIANGLES_ADJACENCY = _osg.PrimitiveSet_TRIANGLES_ADJACENCY
    TRIANGLE_STRIP_ADJACENCY = _osg.PrimitiveSet_TRIANGLE_STRIP_ADJACENCY
    PATCHES = _osg.PrimitiveSet_PATCHES
    def isSameKindAs(self, *args):
        """isSameKindAs(PrimitiveSet self, Object obj) -> bool"""
        return _osg.PrimitiveSet_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(PrimitiveSet self) -> char const *"""
        return _osg.PrimitiveSet_libraryName(self)

    def className(self):
        """className(PrimitiveSet self) -> char const *"""
        return _osg.PrimitiveSet_className(self)

    def getType(self):
        """getType(PrimitiveSet self) -> osg::PrimitiveSet::Type"""
        return _osg.PrimitiveSet_getType(self)

    def asPrimitiveSet(self, *args):
        """
        asPrimitiveSet(PrimitiveSet self) -> PrimitiveSet
        asPrimitiveSet(PrimitiveSet self) -> PrimitiveSet
        """
        return _osg.PrimitiveSet_asPrimitiveSet(self, *args)

    def getDataPointer(self):
        """getDataPointer(PrimitiveSet self) -> GLvoid const *"""
        return _osg.PrimitiveSet_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(PrimitiveSet self) -> unsigned int"""
        return _osg.PrimitiveSet_getTotalDataSize(self)

    def supportsBufferObject(self):
        """supportsBufferObject(PrimitiveSet self) -> bool"""
        return _osg.PrimitiveSet_supportsBufferObject(self)

    def getDrawElements(self, *args):
        """
        getDrawElements(PrimitiveSet self) -> DrawElements
        getDrawElements(PrimitiveSet self) -> DrawElements
        """
        return _osg.PrimitiveSet_getDrawElements(self, *args)

    def setNumInstances(self, *args):
        """setNumInstances(PrimitiveSet self, int n)"""
        return _osg.PrimitiveSet_setNumInstances(self, *args)

    def getNumInstances(self):
        """getNumInstances(PrimitiveSet self) -> int"""
        return _osg.PrimitiveSet_getNumInstances(self)

    def setMode(self, *args):
        """setMode(PrimitiveSet self, GLenum mode)"""
        return _osg.PrimitiveSet_setMode(self, *args)

    def getMode(self):
        """getMode(PrimitiveSet self) -> GLenum"""
        return _osg.PrimitiveSet_getMode(self)

    def draw(self, *args):
        """draw(PrimitiveSet self, State state, bool useVertexBufferObjects)"""
        return _osg.PrimitiveSet_draw(self, *args)

    def accept(self, *args):
        """
        accept(PrimitiveSet self, PrimitiveFunctor functor)
        accept(PrimitiveSet self, PrimitiveIndexFunctor functor)
        """
        return _osg.PrimitiveSet_accept(self, *args)

    def index(self, *args):
        """index(PrimitiveSet self, unsigned int pos) -> unsigned int"""
        return _osg.PrimitiveSet_index(self, *args)

    def getNumIndices(self):
        """getNumIndices(PrimitiveSet self) -> unsigned int"""
        return _osg.PrimitiveSet_getNumIndices(self)

    def offsetIndices(self, *args):
        """offsetIndices(PrimitiveSet self, int offset)"""
        return _osg.PrimitiveSet_offsetIndices(self, *args)

    def getNumPrimitives(self):
        """getNumPrimitives(PrimitiveSet self) -> unsigned int"""
        return _osg.PrimitiveSet_getNumPrimitives(self)

    def computeRange(self):
        """computeRange(PrimitiveSet self)"""
        return _osg.PrimitiveSet_computeRange(self)

PrimitiveSet_swigregister = _osg.PrimitiveSet_swigregister
PrimitiveSet_swigregister(PrimitiveSet)

class DrawArrays(PrimitiveSet):
    """Proxy of C++ osg::DrawArrays class"""
    __swig_setmethods__ = {}
    for _s in [PrimitiveSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawArrays, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimitiveSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawArrays, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::DrawArrays self, GLenum mode=0) -> DrawArrays
        __init__(osg::DrawArrays self) -> DrawArrays
        __init__(osg::DrawArrays self, GLenum mode, GLint first, GLsizei count, int numInstances=0) -> DrawArrays
        __init__(osg::DrawArrays self, GLenum mode, GLint first, GLsizei count) -> DrawArrays
        __init__(osg::DrawArrays self, DrawArrays da, CopyOp copyop=SHALLOW_COPY) -> DrawArrays
        __init__(osg::DrawArrays self, DrawArrays da) -> DrawArrays
        """
        this = _osg.new_DrawArrays(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(DrawArrays self) -> Object"""
        return _osg.DrawArrays_cloneType(self)

    def clone(self, *args):
        """clone(DrawArrays self, CopyOp copyop) -> Object"""
        return _osg.DrawArrays_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(DrawArrays self, Object obj) -> bool"""
        return _osg.DrawArrays_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(DrawArrays self) -> char const *"""
        return _osg.DrawArrays_libraryName(self)

    def className(self):
        """className(DrawArrays self) -> char const *"""
        return _osg.DrawArrays_className(self)

    def set(self, *args):
        """set(DrawArrays self, GLenum mode, GLint first, GLsizei count)"""
        return _osg.DrawArrays_set(self, *args)

    def setFirst(self, *args):
        """setFirst(DrawArrays self, GLint first)"""
        return _osg.DrawArrays_setFirst(self, *args)

    def getFirst(self):
        """getFirst(DrawArrays self) -> GLint"""
        return _osg.DrawArrays_getFirst(self)

    def setCount(self, *args):
        """setCount(DrawArrays self, GLsizei count)"""
        return _osg.DrawArrays_setCount(self, *args)

    def getCount(self):
        """getCount(DrawArrays self) -> GLsizei"""
        return _osg.DrawArrays_getCount(self)

    def draw(self, *args):
        """draw(DrawArrays self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawArrays_draw(self, *args)

    def accept(self, *args):
        """
        accept(DrawArrays self, PrimitiveFunctor functor)
        accept(DrawArrays self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawArrays_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(DrawArrays self) -> unsigned int"""
        return _osg.DrawArrays_getNumIndices(self)

    def index(self, *args):
        """index(DrawArrays self, unsigned int pos) -> unsigned int"""
        return _osg.DrawArrays_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(DrawArrays self, int offset)"""
        return _osg.DrawArrays_offsetIndices(self, *args)

DrawArrays_swigregister = _osg.DrawArrays_swigregister
DrawArrays_swigregister(DrawArrays)

class DrawArrayLengths(PrimitiveSet):
    """Proxy of C++ osg::DrawArrayLengths class"""
    __swig_setmethods__ = {}
    for _s in [PrimitiveSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawArrayLengths, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimitiveSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawArrayLengths, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::DrawArrayLengths self, GLenum mode=0) -> DrawArrayLengths
        __init__(osg::DrawArrayLengths self) -> DrawArrayLengths
        __init__(osg::DrawArrayLengths self, DrawArrayLengths dal, CopyOp copyop=SHALLOW_COPY) -> DrawArrayLengths
        __init__(osg::DrawArrayLengths self, DrawArrayLengths dal) -> DrawArrayLengths
        __init__(osg::DrawArrayLengths self, GLenum mode, GLint first, unsigned int no, GLsizei * ptr) -> DrawArrayLengths
        __init__(osg::DrawArrayLengths self, GLenum mode, GLint first, unsigned int no) -> DrawArrayLengths
        __init__(osg::DrawArrayLengths self, GLenum mode, GLint first) -> DrawArrayLengths
        """
        this = _osg.new_DrawArrayLengths(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(DrawArrayLengths self) -> Object"""
        return _osg.DrawArrayLengths_cloneType(self)

    def clone(self, *args):
        """clone(DrawArrayLengths self, CopyOp copyop) -> Object"""
        return _osg.DrawArrayLengths_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(DrawArrayLengths self, Object obj) -> bool"""
        return _osg.DrawArrayLengths_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(DrawArrayLengths self) -> char const *"""
        return _osg.DrawArrayLengths_libraryName(self)

    def className(self):
        """className(DrawArrayLengths self) -> char const *"""
        return _osg.DrawArrayLengths_className(self)

    def setFirst(self, *args):
        """setFirst(DrawArrayLengths self, GLint first)"""
        return _osg.DrawArrayLengths_setFirst(self, *args)

    def getFirst(self):
        """getFirst(DrawArrayLengths self) -> GLint"""
        return _osg.DrawArrayLengths_getFirst(self)

    def draw(self, *args):
        """draw(DrawArrayLengths self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawArrayLengths_draw(self, *args)

    def accept(self, *args):
        """
        accept(DrawArrayLengths self, PrimitiveFunctor functor)
        accept(DrawArrayLengths self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawArrayLengths_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(DrawArrayLengths self) -> unsigned int"""
        return _osg.DrawArrayLengths_getNumIndices(self)

    def index(self, *args):
        """index(DrawArrayLengths self, unsigned int pos) -> unsigned int"""
        return _osg.DrawArrayLengths_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(DrawArrayLengths self, int offset)"""
        return _osg.DrawArrayLengths_offsetIndices(self, *args)

    def getNumPrimitives(self):
        """getNumPrimitives(DrawArrayLengths self) -> unsigned int"""
        return _osg.DrawArrayLengths_getNumPrimitives(self)

DrawArrayLengths_swigregister = _osg.DrawArrayLengths_swigregister
DrawArrayLengths_swigregister(DrawArrayLengths)

class DrawElements(PrimitiveSet):
    """Proxy of C++ osg::DrawElements class"""
    __swig_setmethods__ = {}
    for _s in [PrimitiveSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawElements, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimitiveSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawElements, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getDrawElements(self, *args):
        """
        getDrawElements(DrawElements self) -> DrawElements
        getDrawElements(DrawElements self) -> DrawElements
        """
        return _osg.DrawElements_getDrawElements(self, *args)

    def setElementBufferObject(self, *args):
        """setElementBufferObject(DrawElements self, ElementBufferObject ebo)"""
        return _osg.DrawElements_setElementBufferObject(self, *args)

    def getElementBufferObject(self, *args):
        """
        getElementBufferObject(DrawElements self) -> ElementBufferObject
        getElementBufferObject(DrawElements self) -> ElementBufferObject
        """
        return _osg.DrawElements_getElementBufferObject(self, *args)

    def reserveElements(self, *args):
        """reserveElements(DrawElements self, unsigned int numIndices)"""
        return _osg.DrawElements_reserveElements(self, *args)

    def setElement(self, *args):
        """setElement(DrawElements self, unsigned int arg2, unsigned int arg3)"""
        return _osg.DrawElements_setElement(self, *args)

    def getElement(self, *args):
        """getElement(DrawElements self, unsigned int arg2) -> unsigned int"""
        return _osg.DrawElements_getElement(self, *args)

    def addElement(self, *args):
        """addElement(DrawElements self, unsigned int arg2)"""
        return _osg.DrawElements_addElement(self, *args)

DrawElements_swigregister = _osg.DrawElements_swigregister
DrawElements_swigregister(DrawElements)

class DrawElementsUByte(DrawElements):
    """Proxy of C++ osg::DrawElementsUByte class"""
    __swig_setmethods__ = {}
    for _s in [DrawElements]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawElementsUByte, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawElements]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawElementsUByte, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::DrawElementsUByte self, GLenum mode=0) -> DrawElementsUByte
        __init__(osg::DrawElementsUByte self) -> DrawElementsUByte
        __init__(osg::DrawElementsUByte self, DrawElementsUByte array, CopyOp copyop=SHALLOW_COPY) -> DrawElementsUByte
        __init__(osg::DrawElementsUByte self, DrawElementsUByte array) -> DrawElementsUByte
        __init__(osg::DrawElementsUByte self, GLenum mode, unsigned int no, GLubyte const * ptr, int numInstances=0) -> DrawElementsUByte
        __init__(osg::DrawElementsUByte self, GLenum mode, unsigned int no, GLubyte const * ptr) -> DrawElementsUByte
        __init__(osg::DrawElementsUByte self, GLenum mode, unsigned int no) -> DrawElementsUByte
        """
        this = _osg.new_DrawElementsUByte(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(DrawElementsUByte self) -> Object"""
        return _osg.DrawElementsUByte_cloneType(self)

    def clone(self, *args):
        """clone(DrawElementsUByte self, CopyOp copyop) -> Object"""
        return _osg.DrawElementsUByte_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(DrawElementsUByte self, Object obj) -> bool"""
        return _osg.DrawElementsUByte_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(DrawElementsUByte self) -> char const *"""
        return _osg.DrawElementsUByte_libraryName(self)

    def className(self):
        """className(DrawElementsUByte self) -> char const *"""
        return _osg.DrawElementsUByte_className(self)

    def getDataPointer(self):
        """getDataPointer(DrawElementsUByte self) -> GLvoid const *"""
        return _osg.DrawElementsUByte_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(DrawElementsUByte self) -> unsigned int"""
        return _osg.DrawElementsUByte_getTotalDataSize(self)

    def supportsBufferObject(self):
        """supportsBufferObject(DrawElementsUByte self) -> bool"""
        return _osg.DrawElementsUByte_supportsBufferObject(self)

    def draw(self, *args):
        """draw(DrawElementsUByte self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawElementsUByte_draw(self, *args)

    def accept(self, *args):
        """
        accept(DrawElementsUByte self, PrimitiveFunctor functor)
        accept(DrawElementsUByte self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawElementsUByte_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(DrawElementsUByte self) -> unsigned int"""
        return _osg.DrawElementsUByte_getNumIndices(self)

    def index(self, *args):
        """index(DrawElementsUByte self, unsigned int pos) -> unsigned int"""
        return _osg.DrawElementsUByte_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(DrawElementsUByte self, int offset)"""
        return _osg.DrawElementsUByte_offsetIndices(self, *args)

    def reserveElements(self, *args):
        """reserveElements(DrawElementsUByte self, unsigned int numIndices)"""
        return _osg.DrawElementsUByte_reserveElements(self, *args)

    def setElement(self, *args):
        """setElement(DrawElementsUByte self, unsigned int i, unsigned int v)"""
        return _osg.DrawElementsUByte_setElement(self, *args)

    def getElement(self, *args):
        """getElement(DrawElementsUByte self, unsigned int i) -> unsigned int"""
        return _osg.DrawElementsUByte_getElement(self, *args)

    def addElement(self, *args):
        """addElement(DrawElementsUByte self, unsigned int v)"""
        return _osg.DrawElementsUByte_addElement(self, *args)

    def asVector(self):
        """asVector(DrawElementsUByte self) -> vectorGLubyte"""
        return _osg.DrawElementsUByte_asVector(self)

    def push_back(self, *args):
        """push_back(DrawElementsUByte self, GLubyte el)"""
        return _osg.DrawElementsUByte_push_back(self, *args)

    def size(self):
        """size(DrawElementsUByte self) -> int"""
        return _osg.DrawElementsUByte_size(self)

DrawElementsUByte_swigregister = _osg.DrawElementsUByte_swigregister
DrawElementsUByte_swigregister(DrawElementsUByte)

class DrawElementsUShort(DrawElements):
    """Proxy of C++ osg::DrawElementsUShort class"""
    __swig_setmethods__ = {}
    for _s in [DrawElements]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawElementsUShort, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawElements]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawElementsUShort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::DrawElementsUShort self, GLenum mode=0) -> DrawElementsUShort
        __init__(osg::DrawElementsUShort self) -> DrawElementsUShort
        __init__(osg::DrawElementsUShort self, DrawElementsUShort array, CopyOp copyop=SHALLOW_COPY) -> DrawElementsUShort
        __init__(osg::DrawElementsUShort self, DrawElementsUShort array) -> DrawElementsUShort
        __init__(osg::DrawElementsUShort self, GLenum mode, unsigned int no, GLushort const * ptr, int numInstances=0) -> DrawElementsUShort
        __init__(osg::DrawElementsUShort self, GLenum mode, unsigned int no, GLushort const * ptr) -> DrawElementsUShort
        __init__(osg::DrawElementsUShort self, GLenum mode, unsigned int no) -> DrawElementsUShort
        """
        this = _osg.new_DrawElementsUShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(DrawElementsUShort self) -> Object"""
        return _osg.DrawElementsUShort_cloneType(self)

    def clone(self, *args):
        """clone(DrawElementsUShort self, CopyOp copyop) -> Object"""
        return _osg.DrawElementsUShort_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(DrawElementsUShort self, Object obj) -> bool"""
        return _osg.DrawElementsUShort_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(DrawElementsUShort self) -> char const *"""
        return _osg.DrawElementsUShort_libraryName(self)

    def className(self):
        """className(DrawElementsUShort self) -> char const *"""
        return _osg.DrawElementsUShort_className(self)

    def getDataPointer(self):
        """getDataPointer(DrawElementsUShort self) -> GLvoid const *"""
        return _osg.DrawElementsUShort_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(DrawElementsUShort self) -> unsigned int"""
        return _osg.DrawElementsUShort_getTotalDataSize(self)

    def supportsBufferObject(self):
        """supportsBufferObject(DrawElementsUShort self) -> bool"""
        return _osg.DrawElementsUShort_supportsBufferObject(self)

    def draw(self, *args):
        """draw(DrawElementsUShort self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawElementsUShort_draw(self, *args)

    def accept(self, *args):
        """
        accept(DrawElementsUShort self, PrimitiveFunctor functor)
        accept(DrawElementsUShort self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawElementsUShort_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(DrawElementsUShort self) -> unsigned int"""
        return _osg.DrawElementsUShort_getNumIndices(self)

    def index(self, *args):
        """index(DrawElementsUShort self, unsigned int pos) -> unsigned int"""
        return _osg.DrawElementsUShort_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(DrawElementsUShort self, int offset)"""
        return _osg.DrawElementsUShort_offsetIndices(self, *args)

    def reserveElements(self, *args):
        """reserveElements(DrawElementsUShort self, unsigned int numIndices)"""
        return _osg.DrawElementsUShort_reserveElements(self, *args)

    def setElement(self, *args):
        """setElement(DrawElementsUShort self, unsigned int i, unsigned int v)"""
        return _osg.DrawElementsUShort_setElement(self, *args)

    def getElement(self, *args):
        """getElement(DrawElementsUShort self, unsigned int i) -> unsigned int"""
        return _osg.DrawElementsUShort_getElement(self, *args)

    def addElement(self, *args):
        """addElement(DrawElementsUShort self, unsigned int v)"""
        return _osg.DrawElementsUShort_addElement(self, *args)

    def asVector(self):
        """asVector(DrawElementsUShort self) -> vectorGLushort"""
        return _osg.DrawElementsUShort_asVector(self)

    def push_back(self, *args):
        """push_back(DrawElementsUShort self, GLushort el)"""
        return _osg.DrawElementsUShort_push_back(self, *args)

    def size(self):
        """size(DrawElementsUShort self) -> int"""
        return _osg.DrawElementsUShort_size(self)

DrawElementsUShort_swigregister = _osg.DrawElementsUShort_swigregister
DrawElementsUShort_swigregister(DrawElementsUShort)

class DrawElementsUInt(DrawElements):
    """Proxy of C++ osg::DrawElementsUInt class"""
    __swig_setmethods__ = {}
    for _s in [DrawElements]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawElementsUInt, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawElements]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawElementsUInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::DrawElementsUInt self, GLenum mode=0) -> DrawElementsUInt
        __init__(osg::DrawElementsUInt self) -> DrawElementsUInt
        __init__(osg::DrawElementsUInt self, DrawElementsUInt array, CopyOp copyop=SHALLOW_COPY) -> DrawElementsUInt
        __init__(osg::DrawElementsUInt self, DrawElementsUInt array) -> DrawElementsUInt
        __init__(osg::DrawElementsUInt self, GLenum mode, unsigned int no, GLuint const * ptr, int numInstances=0) -> DrawElementsUInt
        __init__(osg::DrawElementsUInt self, GLenum mode, unsigned int no, GLuint const * ptr) -> DrawElementsUInt
        __init__(osg::DrawElementsUInt self, GLenum mode, unsigned int no) -> DrawElementsUInt
        """
        this = _osg.new_DrawElementsUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(DrawElementsUInt self) -> Object"""
        return _osg.DrawElementsUInt_cloneType(self)

    def clone(self, *args):
        """clone(DrawElementsUInt self, CopyOp copyop) -> Object"""
        return _osg.DrawElementsUInt_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(DrawElementsUInt self, Object obj) -> bool"""
        return _osg.DrawElementsUInt_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(DrawElementsUInt self) -> char const *"""
        return _osg.DrawElementsUInt_libraryName(self)

    def className(self):
        """className(DrawElementsUInt self) -> char const *"""
        return _osg.DrawElementsUInt_className(self)

    def getDataPointer(self):
        """getDataPointer(DrawElementsUInt self) -> GLvoid const *"""
        return _osg.DrawElementsUInt_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(DrawElementsUInt self) -> unsigned int"""
        return _osg.DrawElementsUInt_getTotalDataSize(self)

    def supportsBufferObject(self):
        """supportsBufferObject(DrawElementsUInt self) -> bool"""
        return _osg.DrawElementsUInt_supportsBufferObject(self)

    def draw(self, *args):
        """draw(DrawElementsUInt self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawElementsUInt_draw(self, *args)

    def accept(self, *args):
        """
        accept(DrawElementsUInt self, PrimitiveFunctor functor)
        accept(DrawElementsUInt self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawElementsUInt_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(DrawElementsUInt self) -> unsigned int"""
        return _osg.DrawElementsUInt_getNumIndices(self)

    def index(self, *args):
        """index(DrawElementsUInt self, unsigned int pos) -> unsigned int"""
        return _osg.DrawElementsUInt_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(DrawElementsUInt self, int offset)"""
        return _osg.DrawElementsUInt_offsetIndices(self, *args)

    def reserveElements(self, *args):
        """reserveElements(DrawElementsUInt self, unsigned int numIndices)"""
        return _osg.DrawElementsUInt_reserveElements(self, *args)

    def setElement(self, *args):
        """setElement(DrawElementsUInt self, unsigned int i, unsigned int v)"""
        return _osg.DrawElementsUInt_setElement(self, *args)

    def getElement(self, *args):
        """getElement(DrawElementsUInt self, unsigned int i) -> unsigned int"""
        return _osg.DrawElementsUInt_getElement(self, *args)

    def addElement(self, *args):
        """addElement(DrawElementsUInt self, unsigned int v)"""
        return _osg.DrawElementsUInt_addElement(self, *args)

    def asVector(self):
        """asVector(DrawElementsUInt self) -> vectorGLuint"""
        return _osg.DrawElementsUInt_asVector(self)

    def push_back(self, *args):
        """push_back(DrawElementsUInt self, GLuint el)"""
        return _osg.DrawElementsUInt_push_back(self, *args)

    def size(self):
        """size(DrawElementsUInt self) -> int"""
        return _osg.DrawElementsUInt_size(self)

DrawElementsUInt_swigregister = _osg.DrawElementsUInt_swigregister
DrawElementsUInt_swigregister(DrawElementsUInt)

OSG_BOUNDSCHECKING = _osg.OSG_BOUNDSCHECKING
class ModifiedCallback(Object):
    """Proxy of C++ ModifiedCallback class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModifiedCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModifiedCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def modified(self, *args):
        """modified(ModifiedCallback self, BufferData arg2)"""
        return _osg.ModifiedCallback_modified(self, *args)

    __swig_destroy__ = _osg.delete_ModifiedCallback
    __del__ = lambda self : None;
ModifiedCallback_swigregister = _osg.ModifiedCallback_swigregister
ModifiedCallback_swigregister(ModifiedCallback)

OSG_MATRIXTRANSFORM = _osg.OSG_MATRIXTRANSFORM
class MatrixTransform(Transform):
    """Proxy of C++ osg::MatrixTransform class"""
    __swig_setmethods__ = {}
    for _s in [Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::MatrixTransform self) -> MatrixTransform
        __init__(osg::MatrixTransform self, MatrixTransform arg2, CopyOp copyop=SHALLOW_COPY) -> MatrixTransform
        __init__(osg::MatrixTransform self, MatrixTransform arg2) -> MatrixTransform
        __init__(osg::MatrixTransform self, Matrixd matix) -> MatrixTransform
        """
        if self.__class__ == MatrixTransform:
            _self = None
        else:
            _self = self
        this = _osg.new_MatrixTransform(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(MatrixTransform self) -> Object"""
        return _osg.MatrixTransform_cloneType(self)

    def clone(self, *args):
        """clone(MatrixTransform self, CopyOp copyop) -> Object"""
        return _osg.MatrixTransform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(MatrixTransform self, Object obj) -> bool"""
        return _osg.MatrixTransform_isSameKindAs(self, *args)

    def className(self):
        """className(MatrixTransform self) -> char const *"""
        return _osg.MatrixTransform_className(self)

    def libraryName(self):
        """libraryName(MatrixTransform self) -> char const *"""
        return _osg.MatrixTransform_libraryName(self)

    def accept(self, *args):
        """accept(MatrixTransform self, NodeVisitor nv)"""
        return _osg.MatrixTransform_accept(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(MatrixTransform self) -> MatrixTransform
        asMatrixTransform(MatrixTransform self) -> MatrixTransform
        """
        return _osg.MatrixTransform_asMatrixTransform(self, *args)

    def setMatrix(self, *args):
        """setMatrix(MatrixTransform self, Matrixd mat)"""
        return _osg.MatrixTransform_setMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(MatrixTransform self) -> Matrixd"""
        return _osg.MatrixTransform_getMatrix(self)

    def preMult(self, *args):
        """preMult(MatrixTransform self, Matrixd mat)"""
        return _osg.MatrixTransform_preMult(self, *args)

    def postMult(self, *args):
        """postMult(MatrixTransform self, Matrixd mat)"""
        return _osg.MatrixTransform_postMult(self, *args)

    def getInverseMatrix(self):
        """getInverseMatrix(MatrixTransform self) -> Matrixd"""
        return _osg.MatrixTransform_getInverseMatrix(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(MatrixTransform self, Matrixd matrix, NodeVisitor arg0) -> bool"""
        return _osg.MatrixTransform_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(MatrixTransform self, Matrixd matrix, NodeVisitor arg0) -> bool"""
        return _osg.MatrixTransform_computeWorldToLocalMatrix(self, *args)

    def __disown__(self):
        self.this.disown()
        _osg.disown_MatrixTransform(self)
        return weakref_proxy(self)
    def childRemoved(self, *args):
        """childRemoved(MatrixTransform self, unsigned int arg0, unsigned int arg1)"""
        return _osg.MatrixTransform_childRemoved(self, *args)

    def childInserted(self, *args):
        """childInserted(MatrixTransform self, unsigned int arg0)"""
        return _osg.MatrixTransform_childInserted(self, *args)

MatrixTransform_swigregister = _osg.MatrixTransform_swigregister
MatrixTransform_swigregister(MatrixTransform)

OSG_CULLSETTINGS = _osg.OSG_CULLSETTINGS
class CullSettings(_object):
    """Proxy of C++ osg::CullSettings class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CullSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CullSettings, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::CullSettings self) -> CullSettings
        __init__(osg::CullSettings self, ArgumentParser arguments) -> CullSettings
        __init__(osg::CullSettings self, CullSettings cs) -> CullSettings
        """
        this = _osg.new_CullSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CullSettings
    __del__ = lambda self : None;
    def setDefaults(self):
        """setDefaults(CullSettings self)"""
        return _osg.CullSettings_setDefaults(self)

    COMPUTE_NEAR_FAR_MODE = _osg.CullSettings_COMPUTE_NEAR_FAR_MODE
    CULLING_MODE = _osg.CullSettings_CULLING_MODE
    LOD_SCALE = _osg.CullSettings_LOD_SCALE
    SMALL_FEATURE_CULLING_PIXEL_SIZE = _osg.CullSettings_SMALL_FEATURE_CULLING_PIXEL_SIZE
    CLAMP_PROJECTION_MATRIX_CALLBACK = _osg.CullSettings_CLAMP_PROJECTION_MATRIX_CALLBACK
    NEAR_FAR_RATIO = _osg.CullSettings_NEAR_FAR_RATIO
    IMPOSTOR_ACTIVE = _osg.CullSettings_IMPOSTOR_ACTIVE
    DEPTH_SORT_IMPOSTOR_SPRITES = _osg.CullSettings_DEPTH_SORT_IMPOSTOR_SPRITES
    IMPOSTOR_PIXEL_ERROR_THRESHOLD = _osg.CullSettings_IMPOSTOR_PIXEL_ERROR_THRESHOLD
    NUM_FRAMES_TO_KEEP_IMPOSTORS_SPRITES = _osg.CullSettings_NUM_FRAMES_TO_KEEP_IMPOSTORS_SPRITES
    CULL_MASK = _osg.CullSettings_CULL_MASK
    CULL_MASK_LEFT = _osg.CullSettings_CULL_MASK_LEFT
    CULL_MASK_RIGHT = _osg.CullSettings_CULL_MASK_RIGHT
    CLEAR_COLOR = _osg.CullSettings_CLEAR_COLOR
    CLEAR_MASK = _osg.CullSettings_CLEAR_MASK
    LIGHTING_MODE = _osg.CullSettings_LIGHTING_MODE
    LIGHT = _osg.CullSettings_LIGHT
    DRAW_BUFFER = _osg.CullSettings_DRAW_BUFFER
    READ_BUFFER = _osg.CullSettings_READ_BUFFER
    NO_VARIABLES = _osg.CullSettings_NO_VARIABLES
    ALL_VARIABLES = _osg.CullSettings_ALL_VARIABLES
    def setInheritanceMask(self, *args):
        """setInheritanceMask(CullSettings self, osg::CullSettings::InheritanceMask mask)"""
        return _osg.CullSettings_setInheritanceMask(self, *args)

    def getInheritanceMask(self):
        """getInheritanceMask(CullSettings self) -> osg::CullSettings::InheritanceMask"""
        return _osg.CullSettings_getInheritanceMask(self)

    def setCullSettings(self, *args):
        """setCullSettings(CullSettings self, CullSettings settings)"""
        return _osg.CullSettings_setCullSettings(self, *args)

    def inheritCullSettings(self, *args):
        """
        inheritCullSettings(CullSettings self, CullSettings settings)
        inheritCullSettings(CullSettings self, CullSettings settings, unsigned int inheritanceMask)
        """
        return _osg.CullSettings_inheritCullSettings(self, *args)

    def readEnvironmentalVariables(self):
        """readEnvironmentalVariables(CullSettings self)"""
        return _osg.CullSettings_readEnvironmentalVariables(self)

    def readCommandLine(self, *args):
        """readCommandLine(CullSettings self, ArgumentParser arguments)"""
        return _osg.CullSettings_readCommandLine(self, *args)

    DISABLE_ASSOCIATED_INHERITANCE_MASK_BIT = _osg.CullSettings_DISABLE_ASSOCIATED_INHERITANCE_MASK_BIT
    DO_NOT_MODIFY_INHERITANCE_MASK = _osg.CullSettings_DO_NOT_MODIFY_INHERITANCE_MASK
    def setInheritanceMaskActionOnAttributeSetting(self, *args):
        """setInheritanceMaskActionOnAttributeSetting(CullSettings self, osg::CullSettings::InheritanceMaskActionOnAttributeSetting action)"""
        return _osg.CullSettings_setInheritanceMaskActionOnAttributeSetting(self, *args)

    def getInheritanceMaskActionOnAttributeSetting(self):
        """getInheritanceMaskActionOnAttributeSetting(CullSettings self) -> osg::CullSettings::InheritanceMaskActionOnAttributeSetting"""
        return _osg.CullSettings_getInheritanceMaskActionOnAttributeSetting(self)

    def applyMaskAction(self, *args):
        """applyMaskAction(CullSettings self, unsigned int maskBit)"""
        return _osg.CullSettings_applyMaskAction(self, *args)

    def setImpostorsActive(self, *args):
        """setImpostorsActive(CullSettings self, bool active)"""
        return _osg.CullSettings_setImpostorsActive(self, *args)

    def getImpostorsActive(self):
        """getImpostorsActive(CullSettings self) -> bool"""
        return _osg.CullSettings_getImpostorsActive(self)

    def setImpostorPixelErrorThreshold(self, *args):
        """setImpostorPixelErrorThreshold(CullSettings self, float numPixels)"""
        return _osg.CullSettings_setImpostorPixelErrorThreshold(self, *args)

    def getImpostorPixelErrorThreshold(self):
        """getImpostorPixelErrorThreshold(CullSettings self) -> float"""
        return _osg.CullSettings_getImpostorPixelErrorThreshold(self)

    def setDepthSortImpostorSprites(self, *args):
        """setDepthSortImpostorSprites(CullSettings self, bool doDepthSort)"""
        return _osg.CullSettings_setDepthSortImpostorSprites(self, *args)

    def getDepthSortImpostorSprites(self):
        """getDepthSortImpostorSprites(CullSettings self) -> bool"""
        return _osg.CullSettings_getDepthSortImpostorSprites(self)

    def setNumberOfFrameToKeepImpostorSprites(self, *args):
        """setNumberOfFrameToKeepImpostorSprites(CullSettings self, int numFrames)"""
        return _osg.CullSettings_setNumberOfFrameToKeepImpostorSprites(self, *args)

    def getNumberOfFrameToKeepImpostorSprites(self):
        """getNumberOfFrameToKeepImpostorSprites(CullSettings self) -> int"""
        return _osg.CullSettings_getNumberOfFrameToKeepImpostorSprites(self)

    DO_NOT_COMPUTE_NEAR_FAR = _osg.CullSettings_DO_NOT_COMPUTE_NEAR_FAR
    COMPUTE_NEAR_FAR_USING_BOUNDING_VOLUMES = _osg.CullSettings_COMPUTE_NEAR_FAR_USING_BOUNDING_VOLUMES
    COMPUTE_NEAR_FAR_USING_PRIMITIVES = _osg.CullSettings_COMPUTE_NEAR_FAR_USING_PRIMITIVES
    COMPUTE_NEAR_USING_PRIMITIVES = _osg.CullSettings_COMPUTE_NEAR_USING_PRIMITIVES
    def setComputeNearFarMode(self, *args):
        """setComputeNearFarMode(CullSettings self, osg::CullSettings::ComputeNearFarMode cnfm)"""
        return _osg.CullSettings_setComputeNearFarMode(self, *args)

    def getComputeNearFarMode(self):
        """getComputeNearFarMode(CullSettings self) -> osg::CullSettings::ComputeNearFarMode"""
        return _osg.CullSettings_getComputeNearFarMode(self)

    def setNearFarRatio(self, *args):
        """setNearFarRatio(CullSettings self, double ratio)"""
        return _osg.CullSettings_setNearFarRatio(self, *args)

    def getNearFarRatio(self):
        """getNearFarRatio(CullSettings self) -> double"""
        return _osg.CullSettings_getNearFarRatio(self)

    NO_CULLING = _osg.CullSettings_NO_CULLING
    VIEW_FRUSTUM_SIDES_CULLING = _osg.CullSettings_VIEW_FRUSTUM_SIDES_CULLING
    NEAR_PLANE_CULLING = _osg.CullSettings_NEAR_PLANE_CULLING
    FAR_PLANE_CULLING = _osg.CullSettings_FAR_PLANE_CULLING
    VIEW_FRUSTUM_CULLING = _osg.CullSettings_VIEW_FRUSTUM_CULLING
    SMALL_FEATURE_CULLING = _osg.CullSettings_SMALL_FEATURE_CULLING
    SHADOW_OCCLUSION_CULLING = _osg.CullSettings_SHADOW_OCCLUSION_CULLING
    CLUSTER_CULLING = _osg.CullSettings_CLUSTER_CULLING
    DEFAULT_CULLING = _osg.CullSettings_DEFAULT_CULLING
    ENABLE_ALL_CULLING = _osg.CullSettings_ENABLE_ALL_CULLING
    def setCullingMode(self, *args):
        """setCullingMode(CullSettings self, osg::CullSettings::CullingMode mode)"""
        return _osg.CullSettings_setCullingMode(self, *args)

    def getCullingMode(self):
        """getCullingMode(CullSettings self) -> osg::CullSettings::CullingMode"""
        return _osg.CullSettings_getCullingMode(self)

    def setCullMask(self, *args):
        """setCullMask(CullSettings self, osg::Node::NodeMask nm)"""
        return _osg.CullSettings_setCullMask(self, *args)

    def getCullMask(self):
        """getCullMask(CullSettings self) -> osg::Node::NodeMask"""
        return _osg.CullSettings_getCullMask(self)

    def setCullMaskLeft(self, *args):
        """setCullMaskLeft(CullSettings self, osg::Node::NodeMask nm)"""
        return _osg.CullSettings_setCullMaskLeft(self, *args)

    def getCullMaskLeft(self):
        """getCullMaskLeft(CullSettings self) -> osg::Node::NodeMask"""
        return _osg.CullSettings_getCullMaskLeft(self)

    def setCullMaskRight(self, *args):
        """setCullMaskRight(CullSettings self, osg::Node::NodeMask nm)"""
        return _osg.CullSettings_setCullMaskRight(self, *args)

    def getCullMaskRight(self):
        """getCullMaskRight(CullSettings self) -> osg::Node::NodeMask"""
        return _osg.CullSettings_getCullMaskRight(self)

    def setLODScale(self, *args):
        """setLODScale(CullSettings self, float scale)"""
        return _osg.CullSettings_setLODScale(self, *args)

    def getLODScale(self):
        """getLODScale(CullSettings self) -> float"""
        return _osg.CullSettings_getLODScale(self)

    def setSmallFeatureCullingPixelSize(self, *args):
        """setSmallFeatureCullingPixelSize(CullSettings self, float value)"""
        return _osg.CullSettings_setSmallFeatureCullingPixelSize(self, *args)

    def getSmallFeatureCullingPixelSize(self):
        """getSmallFeatureCullingPixelSize(CullSettings self) -> float"""
        return _osg.CullSettings_getSmallFeatureCullingPixelSize(self)

    def write(self, *args):
        """write(CullSettings self, std::ostream & out)"""
        return _osg.CullSettings_write(self, *args)

CullSettings_swigregister = _osg.CullSettings_swigregister
CullSettings_swigregister(CullSettings)

OSG_LIGHT = _osg.OSG_LIGHT
class Light(StateAttribute):
    """Proxy of C++ osg::Light class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Light, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Light, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Light self) -> Light
        __init__(osg::Light self, unsigned int lightnum) -> Light
        __init__(osg::Light self, Light light, CopyOp copyop=SHALLOW_COPY) -> Light
        __init__(osg::Light self, Light light) -> Light
        """
        this = _osg.new_Light(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Light self) -> Object"""
        return _osg.Light_cloneType(self)

    def clone(self, *args):
        """clone(Light self, CopyOp copyop) -> Object"""
        return _osg.Light_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Light self, Object obj) -> bool"""
        return _osg.Light_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Light self) -> char const *"""
        return _osg.Light_libraryName(self)

    def className(self):
        """className(Light self) -> char const *"""
        return _osg.Light_className(self)

    def getType(self):
        """getType(Light self) -> osg::StateAttribute::Type"""
        return _osg.Light_getType(self)

    def compare(self, *args):
        """compare(Light self, StateAttribute sa) -> int"""
        return _osg.Light_compare(self, *args)

    def getMember(self):
        """getMember(Light self) -> unsigned int"""
        return _osg.Light_getMember(self)

    def setLightNum(self, *args):
        """setLightNum(Light self, int num)"""
        return _osg.Light_setLightNum(self, *args)

    def getLightNum(self):
        """getLightNum(Light self) -> int"""
        return _osg.Light_getLightNum(self)

    def setAmbient(self, *args):
        """setAmbient(Light self, Vec4f ambient)"""
        return _osg.Light_setAmbient(self, *args)

    def getAmbient(self):
        """getAmbient(Light self) -> Vec4f"""
        return _osg.Light_getAmbient(self)

    def setDiffuse(self, *args):
        """setDiffuse(Light self, Vec4f diffuse)"""
        return _osg.Light_setDiffuse(self, *args)

    def getDiffuse(self):
        """getDiffuse(Light self) -> Vec4f"""
        return _osg.Light_getDiffuse(self)

    def setSpecular(self, *args):
        """setSpecular(Light self, Vec4f specular)"""
        return _osg.Light_setSpecular(self, *args)

    def getSpecular(self):
        """getSpecular(Light self) -> Vec4f"""
        return _osg.Light_getSpecular(self)

    def setPosition(self, *args):
        """setPosition(Light self, Vec4f position)"""
        return _osg.Light_setPosition(self, *args)

    def getPosition(self):
        """getPosition(Light self) -> Vec4f"""
        return _osg.Light_getPosition(self)

    def setDirection(self, *args):
        """setDirection(Light self, Vec3f direction)"""
        return _osg.Light_setDirection(self, *args)

    def getDirection(self):
        """getDirection(Light self) -> Vec3f"""
        return _osg.Light_getDirection(self)

    def setConstantAttenuation(self, *args):
        """setConstantAttenuation(Light self, float constant_attenuation)"""
        return _osg.Light_setConstantAttenuation(self, *args)

    def getConstantAttenuation(self):
        """getConstantAttenuation(Light self) -> float"""
        return _osg.Light_getConstantAttenuation(self)

    def setLinearAttenuation(self, *args):
        """setLinearAttenuation(Light self, float linear_attenuation)"""
        return _osg.Light_setLinearAttenuation(self, *args)

    def getLinearAttenuation(self):
        """getLinearAttenuation(Light self) -> float"""
        return _osg.Light_getLinearAttenuation(self)

    def setQuadraticAttenuation(self, *args):
        """setQuadraticAttenuation(Light self, float quadratic_attenuation)"""
        return _osg.Light_setQuadraticAttenuation(self, *args)

    def getQuadraticAttenuation(self):
        """getQuadraticAttenuation(Light self) -> float"""
        return _osg.Light_getQuadraticAttenuation(self)

    def setSpotExponent(self, *args):
        """setSpotExponent(Light self, float spot_exponent)"""
        return _osg.Light_setSpotExponent(self, *args)

    def getSpotExponent(self):
        """getSpotExponent(Light self) -> float"""
        return _osg.Light_getSpotExponent(self)

    def setSpotCutoff(self, *args):
        """setSpotCutoff(Light self, float spot_cutoff)"""
        return _osg.Light_setSpotCutoff(self, *args)

    def getSpotCutoff(self):
        """getSpotCutoff(Light self) -> float"""
        return _osg.Light_getSpotCutoff(self)

    def captureLightState(self):
        """captureLightState(Light self)"""
        return _osg.Light_captureLightState(self)

    def apply(self, *args):
        """apply(Light self, State state)"""
        return _osg.Light_apply(self, *args)

Light_swigregister = _osg.Light_swigregister
Light_swigregister(Light)

OSG_LIGHTMODEL = _osg.OSG_LIGHTMODEL
class LightModel(StateAttribute):
    """Proxy of C++ osg::LightModel class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightModel, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::LightModel self) -> LightModel
        __init__(osg::LightModel self, LightModel lw, CopyOp copyop=SHALLOW_COPY) -> LightModel
        __init__(osg::LightModel self, LightModel lw) -> LightModel
        """
        this = _osg.new_LightModel(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(LightModel self) -> Object"""
        return _osg.LightModel_cloneType(self)

    def clone(self, *args):
        """clone(LightModel self, CopyOp copyop) -> Object"""
        return _osg.LightModel_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(LightModel self, Object obj) -> bool"""
        return _osg.LightModel_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(LightModel self) -> char const *"""
        return _osg.LightModel_libraryName(self)

    def className(self):
        """className(LightModel self) -> char const *"""
        return _osg.LightModel_className(self)

    def getType(self):
        """getType(LightModel self) -> osg::StateAttribute::Type"""
        return _osg.LightModel_getType(self)

    def compare(self, *args):
        """compare(LightModel self, StateAttribute sa) -> int"""
        return _osg.LightModel_compare(self, *args)

    def setAmbientIntensity(self, *args):
        """setAmbientIntensity(LightModel self, Vec4f ambient)"""
        return _osg.LightModel_setAmbientIntensity(self, *args)

    def getAmbientIntensity(self):
        """getAmbientIntensity(LightModel self) -> Vec4f"""
        return _osg.LightModel_getAmbientIntensity(self)

    SEPARATE_SPECULAR_COLOR = _osg.LightModel_SEPARATE_SPECULAR_COLOR
    SINGLE_COLOR = _osg.LightModel_SINGLE_COLOR
    def setColorControl(self, *args):
        """setColorControl(LightModel self, osg::LightModel::ColorControl cc)"""
        return _osg.LightModel_setColorControl(self, *args)

    def getColorControl(self):
        """getColorControl(LightModel self) -> osg::LightModel::ColorControl"""
        return _osg.LightModel_getColorControl(self)

    def setLocalViewer(self, *args):
        """setLocalViewer(LightModel self, bool localViewer)"""
        return _osg.LightModel_setLocalViewer(self, *args)

    def getLocalViewer(self):
        """getLocalViewer(LightModel self) -> bool"""
        return _osg.LightModel_getLocalViewer(self)

    def setTwoSided(self, *args):
        """setTwoSided(LightModel self, bool twoSided)"""
        return _osg.LightModel_setTwoSided(self, *args)

    def getTwoSided(self):
        """getTwoSided(LightModel self) -> bool"""
        return _osg.LightModel_getTwoSided(self)

    def apply(self, *args):
        """apply(LightModel self, State state)"""
        return _osg.LightModel_apply(self, *args)

LightModel_swigregister = _osg.LightModel_swigregister
LightModel_swigregister(LightModel)

OSG_LIGHTSOURCE = _osg.OSG_LIGHTSOURCE
class LightSource(Group):
    """Proxy of C++ osg::LightSource class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightSource, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::LightSource self) -> LightSource
        __init__(osg::LightSource self, LightSource ls, CopyOp copyop=SHALLOW_COPY) -> LightSource
        __init__(osg::LightSource self, LightSource ls) -> LightSource
        """
        this = _osg.new_LightSource(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(LightSource self) -> Object"""
        return _osg.LightSource_cloneType(self)

    def clone(self, *args):
        """clone(LightSource self, CopyOp copyop) -> Object"""
        return _osg.LightSource_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(LightSource self, Object obj) -> bool"""
        return _osg.LightSource_isSameKindAs(self, *args)

    def className(self):
        """className(LightSource self) -> char const *"""
        return _osg.LightSource_className(self)

    def libraryName(self):
        """libraryName(LightSource self) -> char const *"""
        return _osg.LightSource_libraryName(self)

    def accept(self, *args):
        """accept(LightSource self, NodeVisitor nv)"""
        return _osg.LightSource_accept(self, *args)

    RELATIVE_RF = _osg.LightSource_RELATIVE_RF
    ABSOLUTE_RF = _osg.LightSource_ABSOLUTE_RF
    def setReferenceFrame(self, *args):
        """setReferenceFrame(LightSource self, osg::LightSource::ReferenceFrame rf)"""
        return _osg.LightSource_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(LightSource self) -> osg::LightSource::ReferenceFrame"""
        return _osg.LightSource_getReferenceFrame(self)

    def setLight(self, *args):
        """setLight(LightSource self, Light light)"""
        return _osg.LightSource_setLight(self, *args)

    def getLight(self, *args):
        """
        getLight(LightSource self) -> Light
        getLight(LightSource self) -> Light
        """
        return _osg.LightSource_getLight(self, *args)

    def setStateSetModes(self, *args):
        """setStateSetModes(LightSource self, StateSet arg2, osg::StateAttribute::GLModeValue arg3)"""
        return _osg.LightSource_setStateSetModes(self, *args)

    def setLocalStateSetModes(self, *args):
        """
        setLocalStateSetModes(LightSource self, osg::StateAttribute::GLModeValue value=ON)
        setLocalStateSetModes(LightSource self)
        """
        return _osg.LightSource_setLocalStateSetModes(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(LightSource self, bool threadSafe)"""
        return _osg.LightSource_setThreadSafeRefUnref(self, *args)

    def computeBound(self):
        """computeBound(LightSource self) -> BoundingSpheref"""
        return _osg.LightSource_computeBound(self)

LightSource_swigregister = _osg.LightSource_swigregister
LightSource_swigregister(LightSource)

OSG_AUTOTRANSFORM = _osg.OSG_AUTOTRANSFORM
class AutoTransform(Transform):
    """Proxy of C++ osg::AutoTransform class"""
    __swig_setmethods__ = {}
    for _s in [Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AutoTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::AutoTransform self) -> AutoTransform
        __init__(osg::AutoTransform self, AutoTransform pat, CopyOp copyop=SHALLOW_COPY) -> AutoTransform
        __init__(osg::AutoTransform self, AutoTransform pat) -> AutoTransform
        """
        this = _osg.new_AutoTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(AutoTransform self) -> Object"""
        return _osg.AutoTransform_cloneType(self)

    def clone(self, *args):
        """clone(AutoTransform self, CopyOp copyop) -> Object"""
        return _osg.AutoTransform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(AutoTransform self, Object obj) -> bool"""
        return _osg.AutoTransform_isSameKindAs(self, *args)

    def className(self):
        """className(AutoTransform self) -> char const *"""
        return _osg.AutoTransform_className(self)

    def libraryName(self):
        """libraryName(AutoTransform self) -> char const *"""
        return _osg.AutoTransform_libraryName(self)

    def accept(self, *args):
        """accept(AutoTransform self, NodeVisitor nv)"""
        return _osg.AutoTransform_accept(self, *args)

    def asAutoTransform(self, *args):
        """
        asAutoTransform(AutoTransform self) -> AutoTransform
        asAutoTransform(AutoTransform self) -> AutoTransform
        """
        return _osg.AutoTransform_asAutoTransform(self, *args)

    def setPosition(self, *args):
        """setPosition(AutoTransform self, Vec3d pos)"""
        return _osg.AutoTransform_setPosition(self, *args)

    def getPosition(self):
        """getPosition(AutoTransform self) -> Vec3d"""
        return _osg.AutoTransform_getPosition(self)

    def setRotation(self, *args):
        """setRotation(AutoTransform self, Quat quat)"""
        return _osg.AutoTransform_setRotation(self, *args)

    def getRotation(self):
        """getRotation(AutoTransform self) -> Quat"""
        return _osg.AutoTransform_getRotation(self)

    def setScale(self, *args):
        """
        setScale(AutoTransform self, double scale)
        setScale(AutoTransform self, Vec3d scale)
        """
        return _osg.AutoTransform_setScale(self, *args)

    def getScale(self):
        """getScale(AutoTransform self) -> Vec3d"""
        return _osg.AutoTransform_getScale(self)

    def setMinimumScale(self, *args):
        """setMinimumScale(AutoTransform self, double minimumScale)"""
        return _osg.AutoTransform_setMinimumScale(self, *args)

    def getMinimumScale(self):
        """getMinimumScale(AutoTransform self) -> double"""
        return _osg.AutoTransform_getMinimumScale(self)

    def setMaximumScale(self, *args):
        """setMaximumScale(AutoTransform self, double maximumScale)"""
        return _osg.AutoTransform_setMaximumScale(self, *args)

    def getMaximumScale(self):
        """getMaximumScale(AutoTransform self) -> double"""
        return _osg.AutoTransform_getMaximumScale(self)

    def setPivotPoint(self, *args):
        """setPivotPoint(AutoTransform self, Vec3d pivot)"""
        return _osg.AutoTransform_setPivotPoint(self, *args)

    def getPivotPoint(self):
        """getPivotPoint(AutoTransform self) -> Vec3d"""
        return _osg.AutoTransform_getPivotPoint(self)

    def setAutoUpdateEyeMovementTolerance(self, *args):
        """setAutoUpdateEyeMovementTolerance(AutoTransform self, float tolerance)"""
        return _osg.AutoTransform_setAutoUpdateEyeMovementTolerance(self, *args)

    def getAutoUpdateEyeMovementTolerance(self):
        """getAutoUpdateEyeMovementTolerance(AutoTransform self) -> float"""
        return _osg.AutoTransform_getAutoUpdateEyeMovementTolerance(self)

    NO_ROTATION = _osg.AutoTransform_NO_ROTATION
    ROTATE_TO_SCREEN = _osg.AutoTransform_ROTATE_TO_SCREEN
    ROTATE_TO_CAMERA = _osg.AutoTransform_ROTATE_TO_CAMERA
    ROTATE_TO_AXIS = _osg.AutoTransform_ROTATE_TO_AXIS
    def setAutoRotateMode(self, *args):
        """setAutoRotateMode(AutoTransform self, osg::AutoTransform::AutoRotateMode mode)"""
        return _osg.AutoTransform_setAutoRotateMode(self, *args)

    def getAutoRotateMode(self):
        """getAutoRotateMode(AutoTransform self) -> osg::AutoTransform::AutoRotateMode"""
        return _osg.AutoTransform_getAutoRotateMode(self)

    def setAxis(self, *args):
        """setAxis(AutoTransform self, Vec3f axis)"""
        return _osg.AutoTransform_setAxis(self, *args)

    def getAxis(self):
        """getAxis(AutoTransform self) -> Vec3f"""
        return _osg.AutoTransform_getAxis(self)

    def setNormal(self, *args):
        """setNormal(AutoTransform self, Vec3f normal)"""
        return _osg.AutoTransform_setNormal(self, *args)

    def getNormal(self):
        """getNormal(AutoTransform self) -> Vec3f"""
        return _osg.AutoTransform_getNormal(self)

    def setAutoScaleToScreen(self, *args):
        """setAutoScaleToScreen(AutoTransform self, bool autoScaleToScreen)"""
        return _osg.AutoTransform_setAutoScaleToScreen(self, *args)

    def getAutoScaleToScreen(self):
        """getAutoScaleToScreen(AutoTransform self) -> bool"""
        return _osg.AutoTransform_getAutoScaleToScreen(self)

    def setAutoScaleTransitionWidthRatio(self, *args):
        """setAutoScaleTransitionWidthRatio(AutoTransform self, float ratio)"""
        return _osg.AutoTransform_setAutoScaleTransitionWidthRatio(self, *args)

    def getAutoScaleTransitionWidthRatio(self):
        """getAutoScaleTransitionWidthRatio(AutoTransform self) -> float"""
        return _osg.AutoTransform_getAutoScaleTransitionWidthRatio(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(AutoTransform self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.AutoTransform_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(AutoTransform self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.AutoTransform_computeWorldToLocalMatrix(self, *args)

    def computeBound(self):
        """computeBound(AutoTransform self) -> BoundingSpheref"""
        return _osg.AutoTransform_computeBound(self)

AutoTransform_swigregister = _osg.AutoTransform_swigregister
AutoTransform_swigregister(AutoTransform)

OSG_CAMERA = _osg.OSG_CAMERA
class Camera(Transform,CullSettings):
    """Proxy of C++ osg::Camera class"""
    __swig_setmethods__ = {}
    for _s in [Transform,CullSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform,CullSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Camera self) -> Camera
        __init__(osg::Camera self, Camera arg2, CopyOp copyop=SHALLOW_COPY) -> Camera
        __init__(osg::Camera self, Camera arg2) -> Camera
        """
        this = _osg.new_Camera(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Camera self) -> Object"""
        return _osg.Camera_cloneType(self)

    def clone(self, *args):
        """clone(Camera self, CopyOp copyop) -> Object"""
        return _osg.Camera_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Camera self, Object obj) -> bool"""
        return _osg.Camera_isSameKindAs(self, *args)

    def className(self):
        """className(Camera self) -> char const *"""
        return _osg.Camera_className(self)

    def libraryName(self):
        """libraryName(Camera self) -> char const *"""
        return _osg.Camera_libraryName(self)

    def accept(self, *args):
        """accept(Camera self, NodeVisitor nv)"""
        return _osg.Camera_accept(self, *args)

    def asCamera(self, *args):
        """
        asCamera(Camera self) -> Camera
        asCamera(Camera self) -> Camera
        """
        return _osg.Camera_asCamera(self, *args)

    def setView(self, *args):
        """setView(Camera self, View view)"""
        return _osg.Camera_setView(self, *args)

    def getView(self, *args):
        """
        getView(Camera self) -> View
        getView(Camera self) -> View
        """
        return _osg.Camera_getView(self, *args)

    def setStats(self, *args):
        """setStats(Camera self, Stats stats)"""
        return _osg.Camera_setStats(self, *args)

    def getStats(self, *args):
        """
        getStats(Camera self) -> Stats
        getStats(Camera self) -> Stats
        """
        return _osg.Camera_getStats(self, *args)

    def setAllowEventFocus(self, *args):
        """setAllowEventFocus(Camera self, bool focus)"""
        return _osg.Camera_setAllowEventFocus(self, *args)

    def getAllowEventFocus(self):
        """getAllowEventFocus(Camera self) -> bool"""
        return _osg.Camera_getAllowEventFocus(self)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(Camera self, DisplaySettings ds)"""
        return _osg.Camera_setDisplaySettings(self, *args)

    def getDisplaySettings(self, *args):
        """
        getDisplaySettings(Camera self) -> DisplaySettings
        getDisplaySettings(Camera self) -> DisplaySettings
        """
        return _osg.Camera_getDisplaySettings(self, *args)

    def setClearMask(self, *args):
        """setClearMask(Camera self, GLbitfield mask)"""
        return _osg.Camera_setClearMask(self, *args)

    def getClearMask(self):
        """getClearMask(Camera self) -> GLbitfield"""
        return _osg.Camera_getClearMask(self)

    def setClearColor(self, *args):
        """setClearColor(Camera self, Vec4f color)"""
        return _osg.Camera_setClearColor(self, *args)

    def getClearColor(self):
        """getClearColor(Camera self) -> Vec4f"""
        return _osg.Camera_getClearColor(self)

    def setClearAccum(self, *args):
        """setClearAccum(Camera self, Vec4f color)"""
        return _osg.Camera_setClearAccum(self, *args)

    def getClearAccum(self):
        """getClearAccum(Camera self) -> Vec4f"""
        return _osg.Camera_getClearAccum(self)

    def setClearDepth(self, *args):
        """setClearDepth(Camera self, double depth)"""
        return _osg.Camera_setClearDepth(self, *args)

    def getClearDepth(self):
        """getClearDepth(Camera self) -> double"""
        return _osg.Camera_getClearDepth(self)

    def setClearStencil(self, *args):
        """setClearStencil(Camera self, int stencil)"""
        return _osg.Camera_setClearStencil(self, *args)

    def getClearStencil(self):
        """getClearStencil(Camera self) -> int"""
        return _osg.Camera_getClearStencil(self)

    def setColorMask(self, *args):
        """
        setColorMask(Camera self, ColorMask colorMask)
        setColorMask(Camera self, bool red, bool green, bool blue, bool alpha)
        """
        return _osg.Camera_setColorMask(self, *args)

    def getColorMask(self, *args):
        """
        getColorMask(Camera self) -> ColorMask
        getColorMask(Camera self) -> ColorMask
        """
        return _osg.Camera_getColorMask(self, *args)

    def setViewport(self, *args):
        """
        setViewport(Camera self, Viewport viewport)
        setViewport(Camera self, int x, int y, int width, int height)
        """
        return _osg.Camera_setViewport(self, *args)

    def getViewport(self, *args):
        """
        getViewport(Camera self) -> Viewport
        getViewport(Camera self) -> Viewport
        """
        return _osg.Camera_getViewport(self, *args)

    PRE_MULTIPLY = _osg.Camera_PRE_MULTIPLY
    POST_MULTIPLY = _osg.Camera_POST_MULTIPLY
    def setTransformOrder(self, *args):
        """setTransformOrder(Camera self, osg::Camera::TransformOrder order)"""
        return _osg.Camera_setTransformOrder(self, *args)

    def getTransformOrder(self):
        """getTransformOrder(Camera self) -> osg::Camera::TransformOrder"""
        return _osg.Camera_getTransformOrder(self)

    FIXED = _osg.Camera_FIXED
    HORIZONTAL = _osg.Camera_HORIZONTAL
    VERTICAL = _osg.Camera_VERTICAL
    def setProjectionResizePolicy(self, *args):
        """setProjectionResizePolicy(Camera self, osg::Camera::ProjectionResizePolicy policy)"""
        return _osg.Camera_setProjectionResizePolicy(self, *args)

    def getProjectionResizePolicy(self):
        """getProjectionResizePolicy(Camera self) -> osg::Camera::ProjectionResizePolicy"""
        return _osg.Camera_getProjectionResizePolicy(self)

    def setProjectionMatrix(self, *args):
        """
        setProjectionMatrix(Camera self, Matrixf matrix)
        setProjectionMatrix(Camera self, Matrixd matrix)
        """
        return _osg.Camera_setProjectionMatrix(self, *args)

    def setProjectionMatrixAsOrtho(self, *args):
        """setProjectionMatrixAsOrtho(Camera self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osg.Camera_setProjectionMatrixAsOrtho(self, *args)

    def setProjectionMatrixAsOrtho2D(self, *args):
        """setProjectionMatrixAsOrtho2D(Camera self, double left, double right, double bottom, double top)"""
        return _osg.Camera_setProjectionMatrixAsOrtho2D(self, *args)

    def setProjectionMatrixAsFrustum(self, *args):
        """setProjectionMatrixAsFrustum(Camera self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osg.Camera_setProjectionMatrixAsFrustum(self, *args)

    def setProjectionMatrixAsPerspective(self, *args):
        """setProjectionMatrixAsPerspective(Camera self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osg.Camera_setProjectionMatrixAsPerspective(self, *args)

    def getProjectionMatrix(self, *args):
        """
        getProjectionMatrix(Camera self) -> Matrixd
        getProjectionMatrix(Camera self) -> Matrixd
        """
        return _osg.Camera_getProjectionMatrix(self, *args)

    def getProjectionMatrixAsOrtho(self, *args):
        """getProjectionMatrixAsOrtho(Camera self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool"""
        return _osg.Camera_getProjectionMatrixAsOrtho(self, *args)

    def getProjectionMatrixAsFrustum(self, *args):
        """getProjectionMatrixAsFrustum(Camera self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool"""
        return _osg.Camera_getProjectionMatrixAsFrustum(self, *args)

    def getProjectionMatrixAsPerspective(self, *args):
        """getProjectionMatrixAsPerspective(Camera self, double & fovy, double & aspectRatio, double & zNear, double & zFar) -> bool"""
        return _osg.Camera_getProjectionMatrixAsPerspective(self, *args)

    def setViewMatrix(self, *args):
        """
        setViewMatrix(Camera self, Matrixf matrix)
        setViewMatrix(Camera self, Matrixd matrix)
        """
        return _osg.Camera_setViewMatrix(self, *args)

    def getViewMatrix(self, *args):
        """
        getViewMatrix(Camera self) -> Matrixd
        getViewMatrix(Camera self) -> Matrixd
        """
        return _osg.Camera_getViewMatrix(self, *args)

    def setViewMatrixAsLookAt(self, *args):
        """setViewMatrixAsLookAt(Camera self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osg.Camera_setViewMatrixAsLookAt(self, *args)

    def getViewMatrixAsLookAt(self, *args):
        """
        getViewMatrixAsLookAt(Camera self, Vec3d eye, Vec3d center, Vec3d up, double lookDistance=1.0)
        getViewMatrixAsLookAt(Camera self, Vec3d eye, Vec3d center, Vec3d up)
        getViewMatrixAsLookAt(Camera self, Vec3f eye, Vec3f center, Vec3f up, float lookDistance=1.0)
        getViewMatrixAsLookAt(Camera self, Vec3f eye, Vec3f center, Vec3f up)
        """
        return _osg.Camera_getViewMatrixAsLookAt(self, *args)

    def getInverseViewMatrix(self):
        """getInverseViewMatrix(Camera self) -> Matrixd"""
        return _osg.Camera_getInverseViewMatrix(self)

    PRE_RENDER = _osg.Camera_PRE_RENDER
    NESTED_RENDER = _osg.Camera_NESTED_RENDER
    POST_RENDER = _osg.Camera_POST_RENDER
    def setRenderOrder(self, *args):
        """
        setRenderOrder(Camera self, osg::Camera::RenderOrder order, int orderNum=0)
        setRenderOrder(Camera self, osg::Camera::RenderOrder order)
        """
        return _osg.Camera_setRenderOrder(self, *args)

    def getRenderOrder(self):
        """getRenderOrder(Camera self) -> osg::Camera::RenderOrder"""
        return _osg.Camera_getRenderOrder(self)

    def getRenderOrderNum(self):
        """getRenderOrderNum(Camera self) -> int"""
        return _osg.Camera_getRenderOrderNum(self)

    def isRenderToTextureCamera(self):
        """isRenderToTextureCamera(Camera self) -> bool"""
        return _osg.Camera_isRenderToTextureCamera(self)

    FRAME_BUFFER_OBJECT = _osg.Camera_FRAME_BUFFER_OBJECT
    PIXEL_BUFFER_RTT = _osg.Camera_PIXEL_BUFFER_RTT
    PIXEL_BUFFER = _osg.Camera_PIXEL_BUFFER
    FRAME_BUFFER = _osg.Camera_FRAME_BUFFER
    SEPERATE_WINDOW = _osg.Camera_SEPERATE_WINDOW
    def setRenderTargetImplementation(self, *args):
        """
        setRenderTargetImplementation(Camera self, osg::Camera::RenderTargetImplementation impl)
        setRenderTargetImplementation(Camera self, osg::Camera::RenderTargetImplementation impl, osg::Camera::RenderTargetImplementation fallback)
        """
        return _osg.Camera_setRenderTargetImplementation(self, *args)

    def getRenderTargetImplementation(self):
        """getRenderTargetImplementation(Camera self) -> osg::Camera::RenderTargetImplementation"""
        return _osg.Camera_getRenderTargetImplementation(self)

    def getRenderTargetFallback(self):
        """getRenderTargetFallback(Camera self) -> osg::Camera::RenderTargetImplementation"""
        return _osg.Camera_getRenderTargetFallback(self)

    def setDrawBuffer(self, *args):
        """setDrawBuffer(Camera self, GLenum buffer)"""
        return _osg.Camera_setDrawBuffer(self, *args)

    def getDrawBuffer(self):
        """getDrawBuffer(Camera self) -> GLenum"""
        return _osg.Camera_getDrawBuffer(self)

    def setReadBuffer(self, *args):
        """setReadBuffer(Camera self, GLenum buffer)"""
        return _osg.Camera_setReadBuffer(self, *args)

    def getReadBuffer(self):
        """getReadBuffer(Camera self) -> GLenum"""
        return _osg.Camera_getReadBuffer(self)

    DEPTH_BUFFER = _osg.Camera_DEPTH_BUFFER
    STENCIL_BUFFER = _osg.Camera_STENCIL_BUFFER
    PACKED_DEPTH_STENCIL_BUFFER = _osg.Camera_PACKED_DEPTH_STENCIL_BUFFER
    COLOR_BUFFER = _osg.Camera_COLOR_BUFFER
    COLOR_BUFFER0 = _osg.Camera_COLOR_BUFFER0
    COLOR_BUFFER1 = _osg.Camera_COLOR_BUFFER1
    COLOR_BUFFER2 = _osg.Camera_COLOR_BUFFER2
    COLOR_BUFFER3 = _osg.Camera_COLOR_BUFFER3
    COLOR_BUFFER4 = _osg.Camera_COLOR_BUFFER4
    COLOR_BUFFER5 = _osg.Camera_COLOR_BUFFER5
    COLOR_BUFFER6 = _osg.Camera_COLOR_BUFFER6
    COLOR_BUFFER7 = _osg.Camera_COLOR_BUFFER7
    COLOR_BUFFER8 = _osg.Camera_COLOR_BUFFER8
    COLOR_BUFFER9 = _osg.Camera_COLOR_BUFFER9
    COLOR_BUFFER10 = _osg.Camera_COLOR_BUFFER10
    COLOR_BUFFER11 = _osg.Camera_COLOR_BUFFER11
    COLOR_BUFFER12 = _osg.Camera_COLOR_BUFFER12
    COLOR_BUFFER13 = _osg.Camera_COLOR_BUFFER13
    COLOR_BUFFER14 = _osg.Camera_COLOR_BUFFER14
    COLOR_BUFFER15 = _osg.Camera_COLOR_BUFFER15
    def attach(self, *args):
        """
        attach(Camera self, osg::Camera::BufferComponent buffer, GLenum internalFormat)
        attach(Camera self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0, unsigned int face=0, 
            bool mipMapGeneration=False, unsigned int multisampleSamples=0, 
            unsigned int multisampleColorSamples=0)
        attach(Camera self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0, unsigned int face=0, 
            bool mipMapGeneration=False, unsigned int multisampleSamples=0)
        attach(Camera self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0, unsigned int face=0, 
            bool mipMapGeneration=False)
        attach(Camera self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0, unsigned int face=0)
        attach(Camera self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0)
        attach(Camera self, osg::Camera::BufferComponent buffer, Texture texture)
        attach(Camera self, osg::Camera::BufferComponent buffer, Image image, unsigned int multisampleSamples=0, 
            unsigned int multisampleColorSamples=0)
        attach(Camera self, osg::Camera::BufferComponent buffer, Image image, unsigned int multisampleSamples=0)
        attach(Camera self, osg::Camera::BufferComponent buffer, Image image)
        """
        return _osg.Camera_attach(self, *args)

    def detach(self, *args):
        """detach(Camera self, osg::Camera::BufferComponent buffer)"""
        return _osg.Camera_detach(self, *args)

    IMPLICIT_DEPTH_BUFFER_ATTACHMENT = _osg.Camera_IMPLICIT_DEPTH_BUFFER_ATTACHMENT
    IMPLICIT_STENCIL_BUFFER_ATTACHMENT = _osg.Camera_IMPLICIT_STENCIL_BUFFER_ATTACHMENT
    IMPLICIT_COLOR_BUFFER_ATTACHMENT = _osg.Camera_IMPLICIT_COLOR_BUFFER_ATTACHMENT
    USE_DISPLAY_SETTINGS_MASK = _osg.Camera_USE_DISPLAY_SETTINGS_MASK
    def setImplicitBufferAttachmentMask(self, *args):
        """
        setImplicitBufferAttachmentMask(Camera self, osg::Camera::ImplicitBufferAttachmentMask renderMask=DEFAULT_IMPLICIT_BUFFER_ATTACHMENT, 
            osg::Camera::ImplicitBufferAttachmentMask resolveMask=DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(Camera self, osg::Camera::ImplicitBufferAttachmentMask renderMask=DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(Camera self)
        """
        return _osg.Camera_setImplicitBufferAttachmentMask(self, *args)

    def setImplicitBufferAttachmentRenderMask(self, *args):
        """setImplicitBufferAttachmentRenderMask(Camera self, osg::Camera::ImplicitBufferAttachmentMask implicitBufferAttachmentRenderMask)"""
        return _osg.Camera_setImplicitBufferAttachmentRenderMask(self, *args)

    def setImplicitBufferAttachmentResolveMask(self, *args):
        """setImplicitBufferAttachmentResolveMask(Camera self, osg::Camera::ImplicitBufferAttachmentMask implicitBufferAttachmentResolveMask)"""
        return _osg.Camera_setImplicitBufferAttachmentResolveMask(self, *args)

    def getImplicitBufferAttachmentRenderMask(self, effectiveMask=False):
        """
        getImplicitBufferAttachmentRenderMask(Camera self, bool effectiveMask=False) -> osg::Camera::ImplicitBufferAttachmentMask
        getImplicitBufferAttachmentRenderMask(Camera self) -> osg::Camera::ImplicitBufferAttachmentMask
        """
        return _osg.Camera_getImplicitBufferAttachmentRenderMask(self, effectiveMask)

    def getImplicitBufferAttachmentResolveMask(self, effectiveMask=False):
        """
        getImplicitBufferAttachmentResolveMask(Camera self, bool effectiveMask=False) -> osg::Camera::ImplicitBufferAttachmentMask
        getImplicitBufferAttachmentResolveMask(Camera self) -> osg::Camera::ImplicitBufferAttachmentMask
        """
        return _osg.Camera_getImplicitBufferAttachmentResolveMask(self, effectiveMask)

    def createCameraThread(self):
        """createCameraThread(Camera self)"""
        return _osg.Camera_createCameraThread(self)

    def setGraphicsContext(self, *args):
        """setGraphicsContext(Camera self, GraphicsContext context)"""
        return _osg.Camera_setGraphicsContext(self, *args)

    def getGraphicsContext(self, *args):
        """
        getGraphicsContext(Camera self) -> GraphicsContext
        getGraphicsContext(Camera self) -> GraphicsContext
        """
        return _osg.Camera_getGraphicsContext(self, *args)

    def setRenderer(self, *args):
        """setRenderer(Camera self, GraphicsOperation rc)"""
        return _osg.Camera_setRenderer(self, *args)

    def getRenderer(self, *args):
        """
        getRenderer(Camera self) -> GraphicsOperation
        getRenderer(Camera self) -> GraphicsOperation
        """
        return _osg.Camera_getRenderer(self, *args)

    def setRenderingCache(self, *args):
        """setRenderingCache(Camera self, Object rc)"""
        return _osg.Camera_setRenderingCache(self, *args)

    def getRenderingCache(self, *args):
        """
        getRenderingCache(Camera self) -> Object
        getRenderingCache(Camera self) -> Object
        """
        return _osg.Camera_getRenderingCache(self, *args)

    def setInitialDrawCallback(self, *args):
        """setInitialDrawCallback(Camera self, osg::Camera::DrawCallback * cb)"""
        return _osg.Camera_setInitialDrawCallback(self, *args)

    def getInitialDrawCallback(self, *args):
        """
        getInitialDrawCallback(Camera self) -> osg::Camera::DrawCallback
        getInitialDrawCallback(Camera self) -> osg::Camera::DrawCallback const *
        """
        return _osg.Camera_getInitialDrawCallback(self, *args)

    def setPreDrawCallback(self, *args):
        """setPreDrawCallback(Camera self, osg::Camera::DrawCallback * cb)"""
        return _osg.Camera_setPreDrawCallback(self, *args)

    def getPreDrawCallback(self, *args):
        """
        getPreDrawCallback(Camera self) -> osg::Camera::DrawCallback
        getPreDrawCallback(Camera self) -> osg::Camera::DrawCallback const *
        """
        return _osg.Camera_getPreDrawCallback(self, *args)

    def setPostDrawCallback(self, *args):
        """setPostDrawCallback(Camera self, osg::Camera::DrawCallback * cb)"""
        return _osg.Camera_setPostDrawCallback(self, *args)

    def getPostDrawCallback(self, *args):
        """
        getPostDrawCallback(Camera self) -> osg::Camera::DrawCallback
        getPostDrawCallback(Camera self) -> osg::Camera::DrawCallback const *
        """
        return _osg.Camera_getPostDrawCallback(self, *args)

    def setFinalDrawCallback(self, *args):
        """setFinalDrawCallback(Camera self, osg::Camera::DrawCallback * cb)"""
        return _osg.Camera_setFinalDrawCallback(self, *args)

    def getFinalDrawCallback(self, *args):
        """
        getFinalDrawCallback(Camera self) -> osg::Camera::DrawCallback
        getFinalDrawCallback(Camera self) -> osg::Camera::DrawCallback const *
        """
        return _osg.Camera_getFinalDrawCallback(self, *args)

    def getDataChangeMutex(self):
        """getDataChangeMutex(Camera self) -> OpenThreads::Mutex *"""
        return _osg.Camera_getDataChangeMutex(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Camera self, unsigned int maxSize)"""
        return _osg.Camera_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(Camera self, State arg2=None)
        releaseGLObjects(Camera self)
        """
        return _osg.Camera_releaseGLObjects(self, arg2)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(Camera self, Matrixd matrix, NodeVisitor arg3) -> bool"""
        return _osg.Camera_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(Camera self, Matrixd matrix, NodeVisitor arg3) -> bool"""
        return _osg.Camera_computeWorldToLocalMatrix(self, *args)

    def inheritCullSettings(self, *args):
        """inheritCullSettings(Camera self, CullSettings settings, unsigned int inheritanceMask)"""
        return _osg.Camera_inheritCullSettings(self, *args)

Camera_swigregister = _osg.Camera_swigregister
Camera_swigregister(Camera)
Camera.FACE_CONTROLLED_BY_GEOMETRY_SHADER = _osg.cvar.Camera_FACE_CONTROLLED_BY_GEOMETRY_SHADER

class CameraRenderOrderSortOp(_object):
    """Proxy of C++ osg::CameraRenderOrderSortOp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraRenderOrderSortOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraRenderOrderSortOp, name)
    __repr__ = _swig_repr
    def __call__(self, *args):
        """__call__(CameraRenderOrderSortOp self, Camera lhs, Camera rhs) -> bool"""
        return _osg.CameraRenderOrderSortOp___call__(self, *args)

    def __init__(self): 
        """__init__(osg::CameraRenderOrderSortOp self) -> CameraRenderOrderSortOp"""
        this = _osg.new_CameraRenderOrderSortOp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CameraRenderOrderSortOp
    __del__ = lambda self : None;
CameraRenderOrderSortOp_swigregister = _osg.CameraRenderOrderSortOp_swigregister
CameraRenderOrderSortOp_swigregister(CameraRenderOrderSortOp)

OSG_CAMERANODE = _osg.OSG_CAMERANODE
OSG_CAMERAVIEW = _osg.OSG_CAMERAVIEW
class CameraView(Transform):
    """Proxy of C++ osg::CameraView class"""
    __swig_setmethods__ = {}
    for _s in [Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraView, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CameraView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::CameraView self) -> CameraView
        __init__(osg::CameraView self, CameraView pat, CopyOp copyop=SHALLOW_COPY) -> CameraView
        __init__(osg::CameraView self, CameraView pat) -> CameraView
        """
        this = _osg.new_CameraView(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(CameraView self) -> Object"""
        return _osg.CameraView_cloneType(self)

    def clone(self, *args):
        """clone(CameraView self, CopyOp copyop) -> Object"""
        return _osg.CameraView_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(CameraView self, Object obj) -> bool"""
        return _osg.CameraView_isSameKindAs(self, *args)

    def className(self):
        """className(CameraView self) -> char const *"""
        return _osg.CameraView_className(self)

    def libraryName(self):
        """libraryName(CameraView self) -> char const *"""
        return _osg.CameraView_libraryName(self)

    def accept(self, *args):
        """accept(CameraView self, NodeVisitor nv)"""
        return _osg.CameraView_accept(self, *args)

    def setPosition(self, *args):
        """setPosition(CameraView self, Vec3d pos)"""
        return _osg.CameraView_setPosition(self, *args)

    def getPosition(self):
        """getPosition(CameraView self) -> Vec3d"""
        return _osg.CameraView_getPosition(self)

    def setAttitude(self, *args):
        """setAttitude(CameraView self, Quat quat)"""
        return _osg.CameraView_setAttitude(self, *args)

    def getAttitude(self):
        """getAttitude(CameraView self) -> Quat"""
        return _osg.CameraView_getAttitude(self)

    def setFieldOfView(self, *args):
        """setFieldOfView(CameraView self, double fieldOfView)"""
        return _osg.CameraView_setFieldOfView(self, *args)

    def getFieldOfView(self):
        """getFieldOfView(CameraView self) -> double"""
        return _osg.CameraView_getFieldOfView(self)

    UNCONSTRAINED = _osg.CameraView_UNCONSTRAINED
    HORIZONTAL = _osg.CameraView_HORIZONTAL
    VERTICAL = _osg.CameraView_VERTICAL
    def setFieldOfViewMode(self, *args):
        """setFieldOfViewMode(CameraView self, osg::CameraView::FieldOfViewMode mode)"""
        return _osg.CameraView_setFieldOfViewMode(self, *args)

    def getFieldOfViewMode(self):
        """getFieldOfViewMode(CameraView self) -> osg::CameraView::FieldOfViewMode"""
        return _osg.CameraView_getFieldOfViewMode(self)

    def setFocalLength(self, *args):
        """setFocalLength(CameraView self, double focalLength)"""
        return _osg.CameraView_setFocalLength(self, *args)

    def getFocalLength(self):
        """getFocalLength(CameraView self) -> double"""
        return _osg.CameraView_getFocalLength(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(CameraView self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.CameraView_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(CameraView self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.CameraView_computeWorldToLocalMatrix(self, *args)

CameraView_swigregister = _osg.CameraView_swigregister
CameraView_swigregister(CameraView)

OSG_COMPUTEBOUNDSVISITOR = _osg.OSG_COMPUTEBOUNDSVISITOR
class ComputeBoundsVisitor(NodeVisitor):
    """Proxy of C++ osg::ComputeBoundsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputeBoundsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComputeBoundsVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ComputeBoundsVisitor self, osg::NodeVisitor::TraversalMode traversalMode=TRAVERSE_ALL_CHILDREN) -> ComputeBoundsVisitor
        __init__(osg::ComputeBoundsVisitor self) -> ComputeBoundsVisitor
        """
        this = _osg.new_ComputeBoundsVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(ComputeBoundsVisitor self) -> char const *"""
        return _osg.ComputeBoundsVisitor_libraryName(self)

    def className(self):
        """className(ComputeBoundsVisitor self) -> char const *"""
        return _osg.ComputeBoundsVisitor_className(self)

    def reset(self):
        """reset(ComputeBoundsVisitor self)"""
        return _osg.ComputeBoundsVisitor_reset(self)

    def getBoundingBox(self):
        """getBoundingBox(ComputeBoundsVisitor self) -> BoundingBoxf"""
        return _osg.ComputeBoundsVisitor_getBoundingBox(self)

    def getPolytope(self, *args):
        """
        getPolytope(ComputeBoundsVisitor self, Polytope polytope, float margin=0.1)
        getPolytope(ComputeBoundsVisitor self, Polytope polytope)
        """
        return _osg.ComputeBoundsVisitor_getPolytope(self, *args)

    def getBase(self, *args):
        """
        getBase(ComputeBoundsVisitor self, Polytope polytope, float margin=0.1)
        getBase(ComputeBoundsVisitor self, Polytope polytope)
        """
        return _osg.ComputeBoundsVisitor_getBase(self, *args)

    def apply(self, *args):
        """
        apply(ComputeBoundsVisitor self, Node node)
        apply(ComputeBoundsVisitor self, Transform transform)
        apply(ComputeBoundsVisitor self, Geode geode)
        """
        return _osg.ComputeBoundsVisitor_apply(self, *args)

    def pushMatrix(self, *args):
        """pushMatrix(ComputeBoundsVisitor self, Matrixd matrix)"""
        return _osg.ComputeBoundsVisitor_pushMatrix(self, *args)

    def popMatrix(self):
        """popMatrix(ComputeBoundsVisitor self)"""
        return _osg.ComputeBoundsVisitor_popMatrix(self)

    def applyDrawable(self, *args):
        """applyDrawable(ComputeBoundsVisitor self, Drawable drawable)"""
        return _osg.ComputeBoundsVisitor_applyDrawable(self, *args)

    __swig_destroy__ = _osg.delete_ComputeBoundsVisitor
    __del__ = lambda self : None;
ComputeBoundsVisitor_swigregister = _osg.ComputeBoundsVisitor_swigregister
ComputeBoundsVisitor_swigregister(ComputeBoundsVisitor)

class ImageRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Image)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Image)> self) -> ImageRef
        __init__(osg::ref_ptr<(osg::Image)> self, Image ptr) -> ImageRef
        __init__(osg::ref_ptr<(osg::Image)> self, ImageRef rp) -> ImageRef
        __init__(osg::ref_ptr<(osg::Image)> self, osg::observer_ptr< osg::Image > & optr) -> ImageRef
        """
        this = _osg.new_ImageRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ImageRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(ImageRef self) -> Image"""
        return _osg.ImageRef___ref__(self)

    def __deref__(self):
        """__deref__(ImageRef self) -> Image"""
        return _osg.ImageRef___deref__(self)

    def get(self):
        """get(ImageRef self) -> Image"""
        return _osg.ImageRef_get(self)

    def valid(self):
        """valid(ImageRef self) -> bool"""
        return _osg.ImageRef_valid(self)

    def release(self):
        """release(ImageRef self) -> Image"""
        return _osg.ImageRef_release(self)

    def swap(self, *args):
        """swap(ImageRef self, ImageRef rp)"""
        return _osg.ImageRef_swap(self, *args)

    def cloneType(self):
        """cloneType(ImageRef self) -> Object"""
        return _osg.ImageRef_cloneType(self)

    def clone(self, *args):
        """clone(ImageRef self, CopyOp copyop) -> Object"""
        return _osg.ImageRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ImageRef self, Object obj) -> bool"""
        return _osg.ImageRef_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ImageRef self) -> char const *"""
        return _osg.ImageRef_libraryName(self)

    def className(self):
        """className(ImageRef self) -> char const *"""
        return _osg.ImageRef_className(self)

    def asImage(self, *args):
        """
        asImage(ImageRef self) -> Image
        asImage(ImageRef self) -> Image
        """
        return _osg.ImageRef_asImage(self, *args)

    def getDataPointer(self):
        """getDataPointer(ImageRef self) -> GLvoid const *"""
        return _osg.ImageRef_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getTotalDataSize(self)

    def compare(self, *args):
        """compare(ImageRef self, Image rhs) -> int"""
        return _osg.ImageRef_compare(self, *args)

    def setFileName(self, *args):
        """setFileName(ImageRef self, std::string const & fileName)"""
        return _osg.ImageRef_setFileName(self, *args)

    def getFileName(self):
        """getFileName(ImageRef self) -> std::string const &"""
        return _osg.ImageRef_getFileName(self)

    def setWriteHint(self, *args):
        """setWriteHint(ImageRef self, osg::Image::WriteHint writeHint)"""
        return _osg.ImageRef_setWriteHint(self, *args)

    def getWriteHint(self):
        """getWriteHint(ImageRef self) -> osg::Image::WriteHint"""
        return _osg.ImageRef_getWriteHint(self)

    def setAllocationMode(self, *args):
        """setAllocationMode(ImageRef self, osg::Image::AllocationMode mode)"""
        return _osg.ImageRef_setAllocationMode(self, *args)

    def getAllocationMode(self):
        """getAllocationMode(ImageRef self) -> osg::Image::AllocationMode"""
        return _osg.ImageRef_getAllocationMode(self)

    def allocateImage(self, *args):
        """
        allocateImage(ImageRef self, int s, int t, int r, GLenum pixelFormat, GLenum type, int packing=1)
        allocateImage(ImageRef self, int s, int t, int r, GLenum pixelFormat, GLenum type)
        """
        return _osg.ImageRef_allocateImage(self, *args)

    def setImage(self, *args):
        """
        setImage(ImageRef self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, GLenum type, 
            unsigned char * data, osg::Image::AllocationMode mode, int packing=1, int rowLength=0)
        setImage(ImageRef self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, GLenum type, 
            unsigned char * data, osg::Image::AllocationMode mode, int packing=1)
        setImage(ImageRef self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, GLenum type, 
            unsigned char * data, osg::Image::AllocationMode mode)
        """
        return _osg.ImageRef_setImage(self, *args)

    def readPixels(self, *args):
        """
        readPixels(ImageRef self, int x, int y, int width, int height, GLenum pixelFormat, GLenum type, int packing=1)
        readPixels(ImageRef self, int x, int y, int width, int height, GLenum pixelFormat, GLenum type)
        """
        return _osg.ImageRef_readPixels(self, *args)

    def readImageFromCurrentTexture(self, *args):
        """
        readImageFromCurrentTexture(ImageRef self, unsigned int contextID, bool copyMipMapsIfAvailable, GLenum type=0x1401, unsigned int face=0)
        readImageFromCurrentTexture(ImageRef self, unsigned int contextID, bool copyMipMapsIfAvailable, GLenum type=0x1401)
        readImageFromCurrentTexture(ImageRef self, unsigned int contextID, bool copyMipMapsIfAvailable)
        """
        return _osg.ImageRef_readImageFromCurrentTexture(self, *args)

    def scaleImage(self, *args):
        """
        scaleImage(ImageRef self, int s, int t, int r)
        scaleImage(ImageRef self, int s, int t, int r, GLenum newDataType)
        """
        return _osg.ImageRef_scaleImage(self, *args)

    def copySubImage(self, *args):
        """copySubImage(ImageRef self, int s_offset, int t_offset, int r_offset, Image source)"""
        return _osg.ImageRef_copySubImage(self, *args)

    def setOrigin(self, *args):
        """setOrigin(ImageRef self, osg::Image::Origin origin)"""
        return _osg.ImageRef_setOrigin(self, *args)

    def getOrigin(self):
        """getOrigin(ImageRef self) -> osg::Image::Origin"""
        return _osg.ImageRef_getOrigin(self)

    def s(self):
        """s(ImageRef self) -> int"""
        return _osg.ImageRef_s(self)

    def t(self):
        """t(ImageRef self) -> int"""
        return _osg.ImageRef_t(self)

    def r(self):
        """r(ImageRef self) -> int"""
        return _osg.ImageRef_r(self)

    def setRowLength(self, *args):
        """setRowLength(ImageRef self, int length)"""
        return _osg.ImageRef_setRowLength(self, *args)

    def getRowLength(self):
        """getRowLength(ImageRef self) -> int"""
        return _osg.ImageRef_getRowLength(self)

    def setInternalTextureFormat(self, *args):
        """setInternalTextureFormat(ImageRef self, GLint internalFormat)"""
        return _osg.ImageRef_setInternalTextureFormat(self, *args)

    def getInternalTextureFormat(self):
        """getInternalTextureFormat(ImageRef self) -> GLint"""
        return _osg.ImageRef_getInternalTextureFormat(self)

    def setPixelFormat(self, *args):
        """setPixelFormat(ImageRef self, GLenum pixelFormat)"""
        return _osg.ImageRef_setPixelFormat(self, *args)

    def getPixelFormat(self):
        """getPixelFormat(ImageRef self) -> GLenum"""
        return _osg.ImageRef_getPixelFormat(self)

    def setDataType(self, *args):
        """setDataType(ImageRef self, GLenum dataType)"""
        return _osg.ImageRef_setDataType(self, *args)

    def getDataType(self):
        """getDataType(ImageRef self) -> GLenum"""
        return _osg.ImageRef_getDataType(self)

    def setPacking(self, *args):
        """setPacking(ImageRef self, unsigned int packing)"""
        return _osg.ImageRef_setPacking(self, *args)

    def getPacking(self):
        """getPacking(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getPacking(self)

    def isCompressed(self):
        """isCompressed(ImageRef self) -> bool"""
        return _osg.ImageRef_isCompressed(self)

    def setPixelAspectRatio(self, *args):
        """setPixelAspectRatio(ImageRef self, float pixelAspectRatio)"""
        return _osg.ImageRef_setPixelAspectRatio(self, *args)

    def getPixelAspectRatio(self):
        """getPixelAspectRatio(ImageRef self) -> float"""
        return _osg.ImageRef_getPixelAspectRatio(self)

    def getPixelSizeInBits(self):
        """getPixelSizeInBits(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getPixelSizeInBits(self)

    def getRowSizeInBytes(self):
        """getRowSizeInBytes(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getRowSizeInBytes(self)

    def getRowStepInBytes(self):
        """getRowStepInBytes(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getRowStepInBytes(self)

    def getImageSizeInBytes(self):
        """getImageSizeInBytes(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getImageSizeInBytes(self)

    def getImageStepInBytes(self):
        """getImageStepInBytes(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getImageStepInBytes(self)

    def getTotalSizeInBytes(self):
        """getTotalSizeInBytes(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getTotalSizeInBytes(self)

    def getTotalSizeInBytesIncludingMipmaps(self):
        """getTotalSizeInBytesIncludingMipmaps(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getTotalSizeInBytesIncludingMipmaps(self)

    def data(self, *args):
        """
        data(ImageRef self) -> unsigned char
        data(ImageRef self) -> unsigned char const
        data(ImageRef self, unsigned int column, unsigned int row=0, unsigned int image=0) -> unsigned char
        data(ImageRef self, unsigned int column, unsigned int row=0) -> unsigned char
        data(ImageRef self, unsigned int column) -> unsigned char
        data(ImageRef self, unsigned int column, unsigned int row=0, unsigned int image=0) -> unsigned char const
        data(ImageRef self, unsigned int column, unsigned int row=0) -> unsigned char const
        data(ImageRef self, unsigned int column) -> unsigned char const *
        """
        return _osg.ImageRef_data(self, *args)

    def isDataContiguous(self):
        """isDataContiguous(ImageRef self) -> bool"""
        return _osg.ImageRef_isDataContiguous(self)

    def getColor(self, *args):
        """
        getColor(ImageRef self, unsigned int s, unsigned int t=0, unsigned int r=0) -> Vec4f
        getColor(ImageRef self, unsigned int s, unsigned int t=0) -> Vec4f
        getColor(ImageRef self, unsigned int s) -> Vec4f
        getColor(ImageRef self, Vec2f texcoord) -> Vec4f
        getColor(ImageRef self, Vec3f texcoord) -> Vec4f
        """
        return _osg.ImageRef_getColor(self, *args)

    def flipHorizontal(self):
        """flipHorizontal(ImageRef self)"""
        return _osg.ImageRef_flipHorizontal(self)

    def flipVertical(self):
        """flipVertical(ImageRef self)"""
        return _osg.ImageRef_flipVertical(self)

    def flipDepth(self):
        """flipDepth(ImageRef self)"""
        return _osg.ImageRef_flipDepth(self)

    def ensureValidSizeForTexturing(self, *args):
        """ensureValidSizeForTexturing(ImageRef self, GLint maxTextureSize)"""
        return _osg.ImageRef_ensureValidSizeForTexturing(self, *args)

    def isPackedType(self, *args):
        """isPackedType(ImageRef self, GLenum type) -> bool"""
        return _osg.ImageRef_isPackedType(self, *args)

    def computePixelFormat(self, *args):
        """computePixelFormat(ImageRef self, GLenum pixelFormat) -> GLenum"""
        return _osg.ImageRef_computePixelFormat(self, *args)

    def computeFormatDataType(self, *args):
        """computeFormatDataType(ImageRef self, GLenum pixelFormat) -> GLenum"""
        return _osg.ImageRef_computeFormatDataType(self, *args)

    def computeBlockSize(self, *args):
        """computeBlockSize(ImageRef self, GLenum pixelFormat, GLenum packing) -> unsigned int"""
        return _osg.ImageRef_computeBlockSize(self, *args)

    def computeNumComponents(self, *args):
        """computeNumComponents(ImageRef self, GLenum pixelFormat) -> unsigned int"""
        return _osg.ImageRef_computeNumComponents(self, *args)

    def computePixelSizeInBits(self, *args):
        """computePixelSizeInBits(ImageRef self, GLenum pixelFormat, GLenum type) -> unsigned int"""
        return _osg.ImageRef_computePixelSizeInBits(self, *args)

    def computeRowWidthInBytes(self, *args):
        """computeRowWidthInBytes(ImageRef self, int width, GLenum pixelFormat, GLenum type, int packing) -> unsigned int"""
        return _osg.ImageRef_computeRowWidthInBytes(self, *args)

    def computeImageSizeInBytes(self, *args):
        """
        computeImageSizeInBytes(ImageRef self, int width, int height, int depth, GLenum pixelFormat, GLenum type, int packing=1, 
            int slice_packing=1, int image_packing=1) -> unsigned int
        computeImageSizeInBytes(ImageRef self, int width, int height, int depth, GLenum pixelFormat, GLenum type, int packing=1, 
            int slice_packing=1) -> unsigned int
        computeImageSizeInBytes(ImageRef self, int width, int height, int depth, GLenum pixelFormat, GLenum type, int packing=1) -> unsigned int
        computeImageSizeInBytes(ImageRef self, int width, int height, int depth, GLenum pixelFormat, GLenum type) -> unsigned int
        """
        return _osg.ImageRef_computeImageSizeInBytes(self, *args)

    def computeNearestPowerOfTwo(self, *args):
        """
        computeNearestPowerOfTwo(ImageRef self, int s, float bias=0.5) -> int
        computeNearestPowerOfTwo(ImageRef self, int s) -> int
        """
        return _osg.ImageRef_computeNearestPowerOfTwo(self, *args)

    def computeNumberOfMipmapLevels(self, *args):
        """
        computeNumberOfMipmapLevels(ImageRef self, int s, int t=1, int r=1) -> int
        computeNumberOfMipmapLevels(ImageRef self, int s, int t=1) -> int
        computeNumberOfMipmapLevels(ImageRef self, int s) -> int
        """
        return _osg.ImageRef_computeNumberOfMipmapLevels(self, *args)

    def isMipmap(self):
        """isMipmap(ImageRef self) -> bool"""
        return _osg.ImageRef_isMipmap(self)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getNumMipmapLevels(self)

    def setMipmapLevels(self, *args):
        """setMipmapLevels(ImageRef self, vectorGLuint mipmapDataVector)"""
        return _osg.ImageRef_setMipmapLevels(self, *args)

    def getMipmapLevels(self):
        """getMipmapLevels(ImageRef self) -> vectorGLuint"""
        return _osg.ImageRef_getMipmapLevels(self)

    def getMipmapOffset(self, *args):
        """getMipmapOffset(ImageRef self, unsigned int mipmapLevel) -> unsigned int"""
        return _osg.ImageRef_getMipmapOffset(self, *args)

    def getMipmapData(self, *args):
        """
        getMipmapData(ImageRef self, unsigned int mipmapLevel) -> unsigned char
        getMipmapData(ImageRef self, unsigned int mipmapLevel) -> unsigned char const *
        """
        return _osg.ImageRef_getMipmapData(self, *args)

    def supportsTextureSubloading(self):
        """supportsTextureSubloading(ImageRef self) -> bool"""
        return _osg.ImageRef_supportsTextureSubloading(self)

    def isImageTranslucent(self):
        """isImageTranslucent(ImageRef self) -> bool"""
        return _osg.ImageRef_isImageTranslucent(self)

    def setPixelBufferObject(self, *args):
        """setPixelBufferObject(ImageRef self, PixelBufferObject buffer)"""
        return _osg.ImageRef_setPixelBufferObject(self, *args)

    def getPixelBufferObject(self, *args):
        """
        getPixelBufferObject(ImageRef self) -> PixelBufferObject
        getPixelBufferObject(ImageRef self) -> PixelBufferObject
        """
        return _osg.ImageRef_getPixelBufferObject(self, *args)

    def requiresUpdateCall(self):
        """requiresUpdateCall(ImageRef self) -> bool"""
        return _osg.ImageRef_requiresUpdateCall(self)

    def update(self, *args):
        """update(ImageRef self, NodeVisitor arg2)"""
        return _osg.ImageRef_update(self, *args)

    def sendFocusHint(self, *args):
        """sendFocusHint(ImageRef self, bool arg2) -> bool"""
        return _osg.ImageRef_sendFocusHint(self, *args)

    def sendPointerEvent(self, *args):
        """sendPointerEvent(ImageRef self, int arg2, int arg3, int arg4) -> bool"""
        return _osg.ImageRef_sendPointerEvent(self, *args)

    def sendKeyEvent(self, *args):
        """sendKeyEvent(ImageRef self, int arg2, bool arg3) -> bool"""
        return _osg.ImageRef_sendKeyEvent(self, *args)

    def setFrameLastRendered(self, *args):
        """setFrameLastRendered(ImageRef self, FrameStamp arg2)"""
        return _osg.ImageRef_setFrameLastRendered(self, *args)

    def addDimensionsChangedCallback(self, *args):
        """addDimensionsChangedCallback(ImageRef self, osg::Image::DimensionsChangedCallback * cb)"""
        return _osg.ImageRef_addDimensionsChangedCallback(self, *args)

    def removeDimensionsChangedCallback(self, *args):
        """removeDimensionsChangedCallback(ImageRef self, osg::Image::DimensionsChangedCallback * cb)"""
        return _osg.ImageRef_removeDimensionsChangedCallback(self, *args)

    def asArray(self, *args):
        """
        asArray(ImageRef self) -> Array
        asArray(ImageRef self) -> Array
        """
        return _osg.ImageRef_asArray(self, *args)

    def asPrimitiveSet(self, *args):
        """
        asPrimitiveSet(ImageRef self) -> PrimitiveSet
        asPrimitiveSet(ImageRef self) -> PrimitiveSet
        """
        return _osg.ImageRef_asPrimitiveSet(self, *args)

    def setBufferObject(self, *args):
        """setBufferObject(ImageRef self, BufferObject bufferObject)"""
        return _osg.ImageRef_setBufferObject(self, *args)

    def getBufferObject(self, *args):
        """
        getBufferObject(ImageRef self) -> BufferObject
        getBufferObject(ImageRef self) -> BufferObject
        """
        return _osg.ImageRef_getBufferObject(self, *args)

    def setBufferIndex(self, *args):
        """setBufferIndex(ImageRef self, unsigned int index)"""
        return _osg.ImageRef_setBufferIndex(self, *args)

    def getBufferIndex(self):
        """getBufferIndex(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getBufferIndex(self)

    def getGLBufferObject(self, *args):
        """getGLBufferObject(ImageRef self, unsigned int contextID) -> GLBufferObject"""
        return _osg.ImageRef_getGLBufferObject(self, *args)

    def getOrCreateGLBufferObject(self, *args):
        """getOrCreateGLBufferObject(ImageRef self, unsigned int contextID) -> GLBufferObject"""
        return _osg.ImageRef_getOrCreateGLBufferObject(self, *args)

    def setModifiedCallback(self, *args):
        """setModifiedCallback(ImageRef self, osg::BufferData::ModifiedCallback * md)"""
        return _osg.ImageRef_setModifiedCallback(self, *args)

    def getModifiedCallback(self, *args):
        """
        getModifiedCallback(ImageRef self) -> osg::BufferData::ModifiedCallback
        getModifiedCallback(ImageRef self) -> osg::BufferData::ModifiedCallback const *
        """
        return _osg.ImageRef_getModifiedCallback(self, *args)

    def dirty(self):
        """dirty(ImageRef self)"""
        return _osg.ImageRef_dirty(self)

    def setModifiedCount(self, *args):
        """setModifiedCount(ImageRef self, unsigned int value)"""
        return _osg.ImageRef_setModifiedCount(self, *args)

    def getModifiedCount(self):
        """getModifiedCount(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getModifiedCount(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(ImageRef self, unsigned int maxSize)"""
        return _osg.ImageRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(ImageRef self, State state=None)
        releaseGLObjects(ImageRef self)
        """
        return _osg.ImageRef_releaseGLObjects(self, state)

    def getNumClients(self):
        """getNumClients(ImageRef self) -> unsigned int"""
        return _osg.ImageRef_getNumClients(self)

    def addClient(self, *args):
        """addClient(ImageRef self, Object arg2)"""
        return _osg.ImageRef_addClient(self, *args)

    def removeClient(self, *args):
        """removeClient(ImageRef self, Object arg2)"""
        return _osg.ImageRef_removeClient(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(ImageRef self, bool threadSafe)"""
        return _osg.ImageRef_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(ImageRef self, std::string const & name)
        setName(ImageRef self, char const * name)
        """
        return _osg.ImageRef_setName(self, *args)

    def getName(self):
        """getName(ImageRef self) -> std::string const &"""
        return _osg.ImageRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(ImageRef self, osg::Object::DataVariance dv)"""
        return _osg.ImageRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(ImageRef self) -> osg::Object::DataVariance"""
        return _osg.ImageRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(ImageRef self)"""
        return _osg.ImageRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(ImageRef self, osg::UserDataContainer * udc)"""
        return _osg.ImageRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(ImageRef self) -> osg::UserDataContainer
        getUserDataContainer(ImageRef self) -> osg::UserDataContainer const *
        """
        return _osg.ImageRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(ImageRef self) -> osg::UserDataContainer *"""
        return _osg.ImageRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(ImageRef self, Referenced obj)"""
        return _osg.ImageRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(ImageRef self) -> Referenced
        getUserData(ImageRef self) -> Referenced
        """
        return _osg.ImageRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(ImageRef self) -> bool"""
        return _osg.ImageRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(ImageRef self) -> OpenThreads::Mutex *"""
        return _osg.ImageRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(ImageRef self) -> OpenThreads::Mutex *"""
        return _osg.ImageRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(ImageRef self) -> int"""
        return _osg.ImageRef_ref(self)

    def unref(self):
        """unref(ImageRef self) -> int"""
        return _osg.ImageRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(ImageRef self) -> int"""
        return _osg.ImageRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(ImageRef self) -> int"""
        return _osg.ImageRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(ImageRef self) -> osg::ObserverSet *"""
        return _osg.ImageRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(ImageRef self) -> osg::ObserverSet *"""
        return _osg.ImageRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(ImageRef self, osg::Observer * observer)"""
        return _osg.ImageRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(ImageRef self, osg::Observer * observer)"""
        return _osg.ImageRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(ImageRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.ImageRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(ImageRef self) -> bool"""
        return _osg.ImageRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(ImageRef self, DeleteHandler handler)"""
        return _osg.ImageRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(ImageRef self) -> DeleteHandler"""
        return _osg.ImageRef_getDeleteHandler(self)

ImageRef_swigregister = _osg.ImageRef_swigregister
ImageRef_swigregister(ImageRef)

class TextureRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Texture)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextureRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Texture)> self) -> TextureRef
        __init__(osg::ref_ptr<(osg::Texture)> self, Texture ptr) -> TextureRef
        __init__(osg::ref_ptr<(osg::Texture)> self, TextureRef rp) -> TextureRef
        __init__(osg::ref_ptr<(osg::Texture)> self, osg::observer_ptr< osg::Texture > & optr) -> TextureRef
        """
        this = _osg.new_TextureRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_TextureRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(TextureRef self) -> Texture"""
        return _osg.TextureRef___ref__(self)

    def __deref__(self):
        """__deref__(TextureRef self) -> Texture"""
        return _osg.TextureRef___deref__(self)

    def get(self):
        """get(TextureRef self) -> Texture"""
        return _osg.TextureRef_get(self)

    def valid(self):
        """valid(TextureRef self) -> bool"""
        return _osg.TextureRef_valid(self)

    def release(self):
        """release(TextureRef self) -> Texture"""
        return _osg.TextureRef_release(self)

    def swap(self, *args):
        """swap(TextureRef self, TextureRef rp)"""
        return _osg.TextureRef_swap(self, *args)

    def cloneType(self):
        """cloneType(TextureRef self) -> Object"""
        return _osg.TextureRef_cloneType(self)

    def clone(self, *args):
        """clone(TextureRef self, CopyOp copyop) -> Object"""
        return _osg.TextureRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TextureRef self, Object obj) -> bool"""
        return _osg.TextureRef_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TextureRef self) -> char const *"""
        return _osg.TextureRef_libraryName(self)

    def className(self):
        """className(TextureRef self) -> char const *"""
        return _osg.TextureRef_className(self)

    def asTexture(self, *args):
        """
        asTexture(TextureRef self) -> Texture
        asTexture(TextureRef self) -> Texture
        """
        return _osg.TextureRef_asTexture(self, *args)

    def getType(self):
        """getType(TextureRef self) -> osg::StateAttribute::Type"""
        return _osg.TextureRef_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(TextureRef self) -> bool"""
        return _osg.TextureRef_isTextureAttribute(self)

    def getTextureTarget(self):
        """getTextureTarget(TextureRef self) -> GLenum"""
        return _osg.TextureRef_getTextureTarget(self)

    def getTextureWidth(self):
        """getTextureWidth(TextureRef self) -> int"""
        return _osg.TextureRef_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(TextureRef self) -> int"""
        return _osg.TextureRef_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(TextureRef self) -> int"""
        return _osg.TextureRef_getTextureDepth(self)

    def setWrap(self, *args):
        """setWrap(TextureRef self, osg::Texture::WrapParameter which, osg::Texture::WrapMode wrap)"""
        return _osg.TextureRef_setWrap(self, *args)

    def getWrap(self, *args):
        """getWrap(TextureRef self, osg::Texture::WrapParameter which) -> osg::Texture::WrapMode"""
        return _osg.TextureRef_getWrap(self, *args)

    def setBorderColor(self, *args):
        """setBorderColor(TextureRef self, Vec4d color)"""
        return _osg.TextureRef_setBorderColor(self, *args)

    def getBorderColor(self):
        """getBorderColor(TextureRef self) -> Vec4d"""
        return _osg.TextureRef_getBorderColor(self)

    def setBorderWidth(self, *args):
        """setBorderWidth(TextureRef self, GLint width)"""
        return _osg.TextureRef_setBorderWidth(self, *args)

    def getBorderWidth(self):
        """getBorderWidth(TextureRef self) -> GLint"""
        return _osg.TextureRef_getBorderWidth(self)

    def setFilter(self, *args):
        """setFilter(TextureRef self, osg::Texture::FilterParameter which, osg::Texture::FilterMode filter)"""
        return _osg.TextureRef_setFilter(self, *args)

    def getFilter(self, *args):
        """getFilter(TextureRef self, osg::Texture::FilterParameter which) -> osg::Texture::FilterMode"""
        return _osg.TextureRef_getFilter(self, *args)

    def setMaxAnisotropy(self, *args):
        """setMaxAnisotropy(TextureRef self, float anis)"""
        return _osg.TextureRef_setMaxAnisotropy(self, *args)

    def getMaxAnisotropy(self):
        """getMaxAnisotropy(TextureRef self) -> float"""
        return _osg.TextureRef_getMaxAnisotropy(self)

    def setSwizzle(self, *args):
        """setSwizzle(TextureRef self, Vec4i const & swizzle)"""
        return _osg.TextureRef_setSwizzle(self, *args)

    def getSwizzle(self):
        """getSwizzle(TextureRef self) -> Vec4i const &"""
        return _osg.TextureRef_getSwizzle(self)

    def setUseHardwareMipMapGeneration(self, *args):
        """setUseHardwareMipMapGeneration(TextureRef self, bool useHardwareMipMapGeneration)"""
        return _osg.TextureRef_setUseHardwareMipMapGeneration(self, *args)

    def getUseHardwareMipMapGeneration(self):
        """getUseHardwareMipMapGeneration(TextureRef self) -> bool"""
        return _osg.TextureRef_getUseHardwareMipMapGeneration(self)

    def setUnRefImageDataAfterApply(self, *args):
        """setUnRefImageDataAfterApply(TextureRef self, bool flag)"""
        return _osg.TextureRef_setUnRefImageDataAfterApply(self, *args)

    def getUnRefImageDataAfterApply(self):
        """getUnRefImageDataAfterApply(TextureRef self) -> bool"""
        return _osg.TextureRef_getUnRefImageDataAfterApply(self)

    def setClientStorageHint(self, *args):
        """setClientStorageHint(TextureRef self, bool flag)"""
        return _osg.TextureRef_setClientStorageHint(self, *args)

    def getClientStorageHint(self):
        """getClientStorageHint(TextureRef self) -> bool"""
        return _osg.TextureRef_getClientStorageHint(self)

    def setResizeNonPowerOfTwoHint(self, *args):
        """setResizeNonPowerOfTwoHint(TextureRef self, bool flag)"""
        return _osg.TextureRef_setResizeNonPowerOfTwoHint(self, *args)

    def getResizeNonPowerOfTwoHint(self):
        """getResizeNonPowerOfTwoHint(TextureRef self) -> bool"""
        return _osg.TextureRef_getResizeNonPowerOfTwoHint(self)

    def setInternalFormatMode(self, *args):
        """setInternalFormatMode(TextureRef self, osg::Texture::InternalFormatMode mode)"""
        return _osg.TextureRef_setInternalFormatMode(self, *args)

    def getInternalFormatMode(self):
        """getInternalFormatMode(TextureRef self) -> osg::Texture::InternalFormatMode"""
        return _osg.TextureRef_getInternalFormatMode(self)

    def setInternalFormat(self, *args):
        """setInternalFormat(TextureRef self, GLint internalFormat)"""
        return _osg.TextureRef_setInternalFormat(self, *args)

    def getInternalFormat(self):
        """getInternalFormat(TextureRef self) -> GLint"""
        return _osg.TextureRef_getInternalFormat(self)

    def isCompressedInternalFormat(self, *args):
        """
        isCompressedInternalFormat(TextureRef self) -> bool
        isCompressedInternalFormat(TextureRef self, GLint internalFormat) -> bool
        """
        return _osg.TextureRef_isCompressedInternalFormat(self, *args)

    def setSourceFormat(self, *args):
        """setSourceFormat(TextureRef self, GLenum sourceFormat)"""
        return _osg.TextureRef_setSourceFormat(self, *args)

    def getSourceFormat(self):
        """getSourceFormat(TextureRef self) -> GLenum"""
        return _osg.TextureRef_getSourceFormat(self)

    def setSourceType(self, *args):
        """setSourceType(TextureRef self, GLenum sourceType)"""
        return _osg.TextureRef_setSourceType(self, *args)

    def getSourceType(self):
        """getSourceType(TextureRef self) -> GLenum"""
        return _osg.TextureRef_getSourceType(self)

    def getInternalFormatType(self):
        """getInternalFormatType(TextureRef self) -> osg::Texture::InternalFormatType"""
        return _osg.TextureRef_getInternalFormatType(self)

    def getTextureObject(self, *args):
        """getTextureObject(TextureRef self, unsigned int contextID) -> osg::Texture::TextureObject *"""
        return _osg.TextureRef_getTextureObject(self, *args)

    def setTextureObject(self, *args):
        """setTextureObject(TextureRef self, unsigned int contextID, osg::Texture::TextureObject * to)"""
        return _osg.TextureRef_setTextureObject(self, *args)

    def dirtyTextureObject(self):
        """dirtyTextureObject(TextureRef self)"""
        return _osg.TextureRef_dirtyTextureObject(self)

    def areAllTextureObjectsLoaded(self):
        """areAllTextureObjectsLoaded(TextureRef self) -> bool"""
        return _osg.TextureRef_areAllTextureObjectsLoaded(self)

    def getTextureParameterDirty(self, *args):
        """getTextureParameterDirty(TextureRef self, unsigned int contextID) -> unsigned int &"""
        return _osg.TextureRef_getTextureParameterDirty(self, *args)

    def dirtyTextureParameters(self):
        """dirtyTextureParameters(TextureRef self)"""
        return _osg.TextureRef_dirtyTextureParameters(self)

    def allocateMipmapLevels(self):
        """allocateMipmapLevels(TextureRef self)"""
        return _osg.TextureRef_allocateMipmapLevels(self)

    def bindToImageUnit(self, *args):
        """
        bindToImageUnit(TextureRef self, unsigned int unit, GLenum access, GLenum format=0, int level=0, bool layered=False, 
            int layer=0)
        bindToImageUnit(TextureRef self, unsigned int unit, GLenum access, GLenum format=0, int level=0, bool layered=False)
        bindToImageUnit(TextureRef self, unsigned int unit, GLenum access, GLenum format=0, int level=0)
        bindToImageUnit(TextureRef self, unsigned int unit, GLenum access, GLenum format=0)
        bindToImageUnit(TextureRef self, unsigned int unit, GLenum access)
        """
        return _osg.TextureRef_bindToImageUnit(self, *args)

    def getImageAttachment(self, *args):
        """
        getImageAttachment(TextureRef self) -> osg::Texture::ImageAttachment
        getImageAttachment(TextureRef self) -> osg::Texture::ImageAttachment const &
        """
        return _osg.TextureRef_getImageAttachment(self, *args)

    def setShadowComparison(self, *args):
        """setShadowComparison(TextureRef self, bool flag)"""
        return _osg.TextureRef_setShadowComparison(self, *args)

    def getShadowComparison(self):
        """getShadowComparison(TextureRef self) -> bool"""
        return _osg.TextureRef_getShadowComparison(self)

    def setShadowCompareFunc(self, *args):
        """setShadowCompareFunc(TextureRef self, osg::Texture::ShadowCompareFunc func)"""
        return _osg.TextureRef_setShadowCompareFunc(self, *args)

    def getShadowCompareFunc(self):
        """getShadowCompareFunc(TextureRef self) -> osg::Texture::ShadowCompareFunc"""
        return _osg.TextureRef_getShadowCompareFunc(self)

    def setShadowTextureMode(self, *args):
        """setShadowTextureMode(TextureRef self, osg::Texture::ShadowTextureMode mode)"""
        return _osg.TextureRef_setShadowTextureMode(self, *args)

    def getShadowTextureMode(self):
        """getShadowTextureMode(TextureRef self) -> osg::Texture::ShadowTextureMode"""
        return _osg.TextureRef_getShadowTextureMode(self)

    def setShadowAmbient(self, *args):
        """setShadowAmbient(TextureRef self, float shadow_ambient)"""
        return _osg.TextureRef_setShadowAmbient(self, *args)

    def getShadowAmbient(self):
        """getShadowAmbient(TextureRef self) -> float"""
        return _osg.TextureRef_getShadowAmbient(self)

    def setImage(self, *args):
        """setImage(TextureRef self, unsigned int face, Image image)"""
        return _osg.TextureRef_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(TextureRef self, unsigned int face) -> Image
        getImage(TextureRef self, unsigned int face) -> Image
        """
        return _osg.TextureRef_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(TextureRef self) -> unsigned int"""
        return _osg.TextureRef_getNumImages(self)

    def setReadPBuffer(self, *args):
        """setReadPBuffer(TextureRef self, GraphicsContext context)"""
        return _osg.TextureRef_setReadPBuffer(self, *args)

    def getReadPBuffer(self, *args):
        """
        getReadPBuffer(TextureRef self) -> GraphicsContext
        getReadPBuffer(TextureRef self) -> GraphicsContext
        """
        return _osg.TextureRef_getReadPBuffer(self, *args)

    def apply(self, *args):
        """apply(TextureRef self, State state)"""
        return _osg.TextureRef_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(TextureRef self, State state)"""
        return _osg.TextureRef_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(TextureRef self, unsigned int maxSize)"""
        return _osg.TextureRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(TextureRef self, State state=None)
        releaseGLObjects(TextureRef self)
        """
        return _osg.TextureRef_releaseGLObjects(self, state)

    def getCompressedSize(self, *args):
        """
        getCompressedSize(TextureRef self, GLenum internalFormat, GLint width, GLint height, GLint depth, GLint & blockSize, 
            GLint & size)
        """
        return _osg.TextureRef_getCompressedSize(self, *args)

    def applyTexImage2D_load(self, *args):
        """applyTexImage2D_load(TextureRef self, State state, GLenum target, Image image, GLsizei width, GLsizei height, GLsizei numMipmapLevels)"""
        return _osg.TextureRef_applyTexImage2D_load(self, *args)

    def applyTexImage2D_subload(self, *args):
        """
        applyTexImage2D_subload(TextureRef self, State state, GLenum target, Image image, GLsizei width, GLsizei height, GLint inInternalFormat, 
            GLsizei numMipmapLevels)
        """
        return _osg.TextureRef_applyTexImage2D_subload(self, *args)

    def generateTextureObject(self, *args):
        """
        generateTextureObject(TextureRef self, Texture texture, unsigned int contextID, GLenum target) -> osg::Texture::TextureObject
        generateTextureObject(TextureRef self, Texture texture, unsigned int contextID, GLenum target, GLint numMipmapLevels, GLenum internalFormat, 
            GLsizei width, GLsizei height, GLsizei depth, GLint border) -> osg::Texture::TextureObject *
        """
        return _osg.TextureRef_generateTextureObject(self, *args)

    def deleteAllTextureObjects(self, *args):
        """deleteAllTextureObjects(TextureRef self, unsigned int contextID)"""
        return _osg.TextureRef_deleteAllTextureObjects(self, *args)

    def discardAllTextureObjects(self, *args):
        """discardAllTextureObjects(TextureRef self, unsigned int contextID)"""
        return _osg.TextureRef_discardAllTextureObjects(self, *args)

    def flushAllDeletedTextureObjects(self, *args):
        """flushAllDeletedTextureObjects(TextureRef self, unsigned int contextID)"""
        return _osg.TextureRef_flushAllDeletedTextureObjects(self, *args)

    def discardAllDeletedTextureObjects(self, *args):
        """discardAllDeletedTextureObjects(TextureRef self, unsigned int contextID)"""
        return _osg.TextureRef_discardAllDeletedTextureObjects(self, *args)

    def flushDeletedTextureObjects(self, *args):
        """flushDeletedTextureObjects(TextureRef self, unsigned int contextID, double currentTime, double & availableTime)"""
        return _osg.TextureRef_flushDeletedTextureObjects(self, *args)

    def releaseTextureObject(self, *args):
        """releaseTextureObject(TextureRef self, unsigned int contextID, osg::Texture::TextureObject * to)"""
        return _osg.TextureRef_releaseTextureObject(self, *args)

    def getMember(self):
        """getMember(TextureRef self) -> unsigned int"""
        return _osg.TextureRef_getMember(self)

    def getTypeMemberPair(self):
        """getTypeMemberPair(TextureRef self) -> osg::StateAttribute::TypeMemberPair"""
        return _osg.TextureRef_getTypeMemberPair(self)

    def compare(self, *args):
        """compare(TextureRef self, StateAttribute sa) -> int"""
        return _osg.TextureRef_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(TextureRef self, StateAttribute rhs) -> bool"""
        return _osg.TextureRef___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(TextureRef self, StateAttribute rhs) -> bool"""
        return _osg.TextureRef___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(TextureRef self, StateAttribute rhs) -> bool"""
        return _osg.TextureRef___ne__(self, *args)

    def getParents(self):
        """getParents(TextureRef self) -> vectorStateSet"""
        return _osg.TextureRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(TextureRef self, unsigned int i) -> StateSet
        getParent(TextureRef self, unsigned int i) -> StateSet
        """
        return _osg.TextureRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(TextureRef self) -> unsigned int"""
        return _osg.TextureRef_getNumParents(self)

    def setShaderComponent(self, *args):
        """setShaderComponent(TextureRef self, ShaderComponent sc)"""
        return _osg.TextureRef_setShaderComponent(self, *args)

    def getShaderComponent(self, *args):
        """
        getShaderComponent(TextureRef self) -> ShaderComponent
        getShaderComponent(TextureRef self) -> ShaderComponent
        """
        return _osg.TextureRef_getShaderComponent(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(TextureRef self, State arg2) -> bool"""
        return _osg.TextureRef_checkValidityOfAssociatedModes(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(TextureRef self, bool threadSafe)"""
        return _osg.TextureRef_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(TextureRef self, std::string const & name)
        setName(TextureRef self, char const * name)
        """
        return _osg.TextureRef_setName(self, *args)

    def getName(self):
        """getName(TextureRef self) -> std::string const &"""
        return _osg.TextureRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(TextureRef self, osg::Object::DataVariance dv)"""
        return _osg.TextureRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(TextureRef self) -> osg::Object::DataVariance"""
        return _osg.TextureRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(TextureRef self)"""
        return _osg.TextureRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(TextureRef self, osg::UserDataContainer * udc)"""
        return _osg.TextureRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(TextureRef self) -> osg::UserDataContainer
        getUserDataContainer(TextureRef self) -> osg::UserDataContainer const *
        """
        return _osg.TextureRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(TextureRef self) -> osg::UserDataContainer *"""
        return _osg.TextureRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(TextureRef self, Referenced obj)"""
        return _osg.TextureRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(TextureRef self) -> Referenced
        getUserData(TextureRef self) -> Referenced
        """
        return _osg.TextureRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(TextureRef self) -> bool"""
        return _osg.TextureRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(TextureRef self) -> OpenThreads::Mutex *"""
        return _osg.TextureRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(TextureRef self) -> OpenThreads::Mutex *"""
        return _osg.TextureRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(TextureRef self) -> int"""
        return _osg.TextureRef_ref(self)

    def unref(self):
        """unref(TextureRef self) -> int"""
        return _osg.TextureRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(TextureRef self) -> int"""
        return _osg.TextureRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(TextureRef self) -> int"""
        return _osg.TextureRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(TextureRef self) -> osg::ObserverSet *"""
        return _osg.TextureRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(TextureRef self) -> osg::ObserverSet *"""
        return _osg.TextureRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(TextureRef self, osg::Observer * observer)"""
        return _osg.TextureRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(TextureRef self, osg::Observer * observer)"""
        return _osg.TextureRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(TextureRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.TextureRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(TextureRef self) -> bool"""
        return _osg.TextureRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(TextureRef self, DeleteHandler handler)"""
        return _osg.TextureRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(TextureRef self) -> DeleteHandler"""
        return _osg.TextureRef_getDeleteHandler(self)

TextureRef_swigregister = _osg.TextureRef_swigregister
TextureRef_swigregister(TextureRef)

class GroupRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Group)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroupRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroupRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Group)> self) -> GroupRef
        __init__(osg::ref_ptr<(osg::Group)> self, Group ptr) -> GroupRef
        __init__(osg::ref_ptr<(osg::Group)> self, GroupRef rp) -> GroupRef
        __init__(osg::ref_ptr<(osg::Group)> self, osg::observer_ptr< osg::Group > & optr) -> GroupRef
        """
        this = _osg.new_GroupRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_GroupRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(GroupRef self) -> Group"""
        return _osg.GroupRef___ref__(self)

    def __deref__(self):
        """__deref__(GroupRef self) -> Group"""
        return _osg.GroupRef___deref__(self)

    def get(self):
        """get(GroupRef self) -> Group"""
        return _osg.GroupRef_get(self)

    def valid(self):
        """valid(GroupRef self) -> bool"""
        return _osg.GroupRef_valid(self)

    def release(self):
        """release(GroupRef self) -> Group"""
        return _osg.GroupRef_release(self)

    def swap(self, *args):
        """swap(GroupRef self, GroupRef rp)"""
        return _osg.GroupRef_swap(self, *args)

    def cloneType(self):
        """cloneType(GroupRef self) -> Object"""
        return _osg.GroupRef_cloneType(self)

    def clone(self, *args):
        """clone(GroupRef self, CopyOp copyop) -> Object"""
        return _osg.GroupRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(GroupRef self, Object obj) -> bool"""
        return _osg.GroupRef_isSameKindAs(self, *args)

    def className(self):
        """className(GroupRef self) -> char const *"""
        return _osg.GroupRef_className(self)

    def libraryName(self):
        """libraryName(GroupRef self) -> char const *"""
        return _osg.GroupRef_libraryName(self)

    def accept(self, *args):
        """accept(GroupRef self, NodeVisitor nv)"""
        return _osg.GroupRef_accept(self, *args)

    def asGroup(self, *args):
        """
        asGroup(GroupRef self) -> Group
        asGroup(GroupRef self) -> Group
        """
        return _osg.GroupRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(GroupRef self, NodeVisitor nv)"""
        return _osg.GroupRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(GroupRef self, Node child) -> bool"""
        return _osg.GroupRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(GroupRef self, unsigned int index, Node child) -> bool"""
        return _osg.GroupRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(GroupRef self, Node child) -> bool
        removeChild(GroupRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(GroupRef self, unsigned int pos) -> bool
        """
        return _osg.GroupRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(GroupRef self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.GroupRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(GroupRef self, Node origChild, Node newChild) -> bool"""
        return _osg.GroupRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(GroupRef self) -> unsigned int"""
        return _osg.GroupRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(GroupRef self, unsigned int i, Node node) -> bool"""
        return _osg.GroupRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(GroupRef self, unsigned int i) -> Node
        getChild(GroupRef self, unsigned int i) -> Node
        """
        return _osg.GroupRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(GroupRef self, Node node) -> bool"""
        return _osg.GroupRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(GroupRef self, Node node) -> unsigned int"""
        return _osg.GroupRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(GroupRef self, bool threadSafe)"""
        return _osg.GroupRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(GroupRef self, unsigned int maxSize)"""
        return _osg.GroupRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(GroupRef self, State arg0=None)
        releaseGLObjects(GroupRef self)
        """
        return _osg.GroupRef_releaseGLObjects(self, arg0)

    def computeBound(self):
        """computeBound(GroupRef self) -> BoundingSpheref"""
        return _osg.GroupRef_computeBound(self)

    def asProxyNode(self):
        """asProxyNode(GroupRef self) -> ProxyNode"""
        return _osg.GroupRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(GroupRef self) -> Transform
        asTransform(GroupRef self) -> Transform
        """
        return _osg.GroupRef_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(GroupRef self) -> Camera
        asCamera(GroupRef self) -> Camera
        """
        return _osg.GroupRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(GroupRef self) -> Switch
        asSwitch(GroupRef self) -> Switch
        """
        return _osg.GroupRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(GroupRef self) -> Geode
        asGeode(GroupRef self) -> Geode
        """
        return _osg.GroupRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(GroupRef self) -> osgTerrain::Terrain
        asTerrain(GroupRef self) -> osgTerrain::Terrain const *
        """
        return _osg.GroupRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(GroupRef self, NodeVisitor nv)"""
        return _osg.GroupRef_ascend(self, *args)

    def getParents(self):
        """getParents(GroupRef self) -> vectorGroup"""
        return _osg.GroupRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(GroupRef self, unsigned int i) -> Group
        getParent(GroupRef self, unsigned int i) -> Group
        """
        return _osg.GroupRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(GroupRef self) -> unsigned int"""
        return _osg.GroupRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(GroupRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(GroupRef self) -> osg::NodePathList
        """
        return _osg.GroupRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(GroupRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(GroupRef self) -> vectorMatrix
        """
        return _osg.GroupRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(GroupRef self, NodeCallback nc)"""
        return _osg.GroupRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(GroupRef self) -> NodeCallback
        getUpdateCallback(GroupRef self) -> NodeCallback
        """
        return _osg.GroupRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(GroupRef self, NodeCallback nc)"""
        return _osg.GroupRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(GroupRef self, NodeCallback nc)"""
        return _osg.GroupRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(GroupRef self) -> unsigned int"""
        return _osg.GroupRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(GroupRef self, NodeCallback nc)"""
        return _osg.GroupRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(GroupRef self) -> NodeCallback
        getEventCallback(GroupRef self) -> NodeCallback
        """
        return _osg.GroupRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(GroupRef self, NodeCallback nc)"""
        return _osg.GroupRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(GroupRef self, NodeCallback nc)"""
        return _osg.GroupRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(GroupRef self) -> unsigned int"""
        return _osg.GroupRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(GroupRef self, NodeCallback nc)"""
        return _osg.GroupRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(GroupRef self) -> NodeCallback
        getCullCallback(GroupRef self) -> NodeCallback
        """
        return _osg.GroupRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(GroupRef self, NodeCallback nc)"""
        return _osg.GroupRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(GroupRef self, NodeCallback nc)"""
        return _osg.GroupRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(GroupRef self, bool active)"""
        return _osg.GroupRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(GroupRef self) -> bool"""
        return _osg.GroupRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(GroupRef self) -> unsigned int"""
        return _osg.GroupRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(GroupRef self) -> bool"""
        return _osg.GroupRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(GroupRef self) -> unsigned int"""
        return _osg.GroupRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(GroupRef self) -> bool"""
        return _osg.GroupRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(GroupRef self, osg::Node::NodeMask nm)"""
        return _osg.GroupRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(GroupRef self) -> osg::Node::NodeMask"""
        return _osg.GroupRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(GroupRef self, StateSet stateset)"""
        return _osg.GroupRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(GroupRef self) -> StateSet"""
        return _osg.GroupRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(GroupRef self) -> StateSet
        getStateSet(GroupRef self) -> StateSet
        """
        return _osg.GroupRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(GroupRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.GroupRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(GroupRef self) -> osg::Node::DescriptionList
        getDescriptions(GroupRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.GroupRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(GroupRef self, unsigned int i) -> std::string const
        getDescription(GroupRef self, unsigned int i) -> std::string &
        """
        return _osg.GroupRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(GroupRef self) -> unsigned int"""
        return _osg.GroupRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(GroupRef self, std::string const & desc)"""
        return _osg.GroupRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(GroupRef self, BoundingSpheref bsphere)"""
        return _osg.GroupRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(GroupRef self) -> BoundingSpheref"""
        return _osg.GroupRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(GroupRef self)"""
        return _osg.GroupRef_dirtyBound(self)

    def getBound(self):
        """getBound(GroupRef self) -> BoundingSpheref"""
        return _osg.GroupRef_getBound(self)

    def asLOD(self):
        """asLOD(GroupRef self) -> LOD"""
        return _osg.GroupRef_asLOD(self)

    def setName(self, *args):
        """
        setName(GroupRef self, std::string const & name)
        setName(GroupRef self, char const * name)
        """
        return _osg.GroupRef_setName(self, *args)

    def getName(self):
        """getName(GroupRef self) -> std::string const &"""
        return _osg.GroupRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(GroupRef self, osg::Object::DataVariance dv)"""
        return _osg.GroupRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(GroupRef self) -> osg::Object::DataVariance"""
        return _osg.GroupRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(GroupRef self)"""
        return _osg.GroupRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(GroupRef self, osg::UserDataContainer * udc)"""
        return _osg.GroupRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(GroupRef self) -> osg::UserDataContainer
        getUserDataContainer(GroupRef self) -> osg::UserDataContainer const *
        """
        return _osg.GroupRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(GroupRef self) -> osg::UserDataContainer *"""
        return _osg.GroupRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(GroupRef self, Referenced obj)"""
        return _osg.GroupRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(GroupRef self) -> Referenced
        getUserData(GroupRef self) -> Referenced
        """
        return _osg.GroupRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(GroupRef self) -> bool"""
        return _osg.GroupRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(GroupRef self) -> OpenThreads::Mutex *"""
        return _osg.GroupRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(GroupRef self) -> OpenThreads::Mutex *"""
        return _osg.GroupRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(GroupRef self) -> int"""
        return _osg.GroupRef_ref(self)

    def unref(self):
        """unref(GroupRef self) -> int"""
        return _osg.GroupRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(GroupRef self) -> int"""
        return _osg.GroupRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(GroupRef self) -> int"""
        return _osg.GroupRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(GroupRef self) -> osg::ObserverSet *"""
        return _osg.GroupRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(GroupRef self) -> osg::ObserverSet *"""
        return _osg.GroupRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(GroupRef self, osg::Observer * observer)"""
        return _osg.GroupRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(GroupRef self, osg::Observer * observer)"""
        return _osg.GroupRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(GroupRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.GroupRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(GroupRef self) -> bool"""
        return _osg.GroupRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(GroupRef self, DeleteHandler handler)"""
        return _osg.GroupRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(GroupRef self) -> DeleteHandler"""
        return _osg.GroupRef_getDeleteHandler(self)

GroupRef_swigregister = _osg.GroupRef_swigregister
GroupRef_swigregister(GroupRef)

class NodeRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Node)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Node)> self) -> NodeRef
        __init__(osg::ref_ptr<(osg::Node)> self, Node ptr) -> NodeRef
        __init__(osg::ref_ptr<(osg::Node)> self, NodeRef rp) -> NodeRef
        __init__(osg::ref_ptr<(osg::Node)> self, osg::observer_ptr< osg::Node > & optr) -> NodeRef
        """
        this = _osg.new_NodeRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_NodeRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(NodeRef self) -> Node"""
        return _osg.NodeRef___ref__(self)

    def __deref__(self):
        """__deref__(NodeRef self) -> Node"""
        return _osg.NodeRef___deref__(self)

    def get(self):
        """get(NodeRef self) -> Node"""
        return _osg.NodeRef_get(self)

    def valid(self):
        """valid(NodeRef self) -> bool"""
        return _osg.NodeRef_valid(self)

    def release(self):
        """release(NodeRef self) -> Node"""
        return _osg.NodeRef_release(self)

    def swap(self, *args):
        """swap(NodeRef self, NodeRef rp)"""
        return _osg.NodeRef_swap(self, *args)

    def cloneType(self):
        """cloneType(NodeRef self) -> Object"""
        return _osg.NodeRef_cloneType(self)

    def clone(self, *args):
        """clone(NodeRef self, CopyOp copyop) -> Object"""
        return _osg.NodeRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(NodeRef self, Object obj) -> bool"""
        return _osg.NodeRef_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(NodeRef self) -> char const *"""
        return _osg.NodeRef_libraryName(self)

    def className(self):
        """className(NodeRef self) -> char const *"""
        return _osg.NodeRef_className(self)

    def asGroup(self, *args):
        """
        asGroup(NodeRef self) -> Group
        asGroup(NodeRef self) -> Group
        """
        return _osg.NodeRef_asGroup(self, *args)

    def asTransform(self, *args):
        """
        asTransform(NodeRef self) -> Transform
        asTransform(NodeRef self) -> Transform
        """
        return _osg.NodeRef_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(NodeRef self) -> Camera
        asCamera(NodeRef self) -> Camera
        """
        return _osg.NodeRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(NodeRef self) -> Switch
        asSwitch(NodeRef self) -> Switch
        """
        return _osg.NodeRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(NodeRef self) -> Geode
        asGeode(NodeRef self) -> Geode
        """
        return _osg.NodeRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(NodeRef self) -> osgTerrain::Terrain
        asTerrain(NodeRef self) -> osgTerrain::Terrain const *
        """
        return _osg.NodeRef_asTerrain(self, *args)

    def accept(self, *args):
        """accept(NodeRef self, NodeVisitor nv)"""
        return _osg.NodeRef_accept(self, *args)

    def ascend(self, *args):
        """ascend(NodeRef self, NodeVisitor nv)"""
        return _osg.NodeRef_ascend(self, *args)

    def traverse(self, *args):
        """traverse(NodeRef self, NodeVisitor arg2)"""
        return _osg.NodeRef_traverse(self, *args)

    def getParents(self):
        """getParents(NodeRef self) -> vectorGroup"""
        return _osg.NodeRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(NodeRef self, unsigned int i) -> Group
        getParent(NodeRef self, unsigned int i) -> Group
        """
        return _osg.NodeRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(NodeRef self) -> unsigned int"""
        return _osg.NodeRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(NodeRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(NodeRef self) -> osg::NodePathList
        """
        return _osg.NodeRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(NodeRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(NodeRef self) -> vectorMatrix
        """
        return _osg.NodeRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(NodeRef self, NodeCallback nc)"""
        return _osg.NodeRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(NodeRef self) -> NodeCallback
        getUpdateCallback(NodeRef self) -> NodeCallback
        """
        return _osg.NodeRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(NodeRef self, NodeCallback nc)"""
        return _osg.NodeRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(NodeRef self, NodeCallback nc)"""
        return _osg.NodeRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(NodeRef self) -> unsigned int"""
        return _osg.NodeRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(NodeRef self, NodeCallback nc)"""
        return _osg.NodeRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(NodeRef self) -> NodeCallback
        getEventCallback(NodeRef self) -> NodeCallback
        """
        return _osg.NodeRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(NodeRef self, NodeCallback nc)"""
        return _osg.NodeRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(NodeRef self, NodeCallback nc)"""
        return _osg.NodeRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(NodeRef self) -> unsigned int"""
        return _osg.NodeRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(NodeRef self, NodeCallback nc)"""
        return _osg.NodeRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(NodeRef self) -> NodeCallback
        getCullCallback(NodeRef self) -> NodeCallback
        """
        return _osg.NodeRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(NodeRef self, NodeCallback nc)"""
        return _osg.NodeRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(NodeRef self, NodeCallback nc)"""
        return _osg.NodeRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(NodeRef self, bool active)"""
        return _osg.NodeRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(NodeRef self) -> bool"""
        return _osg.NodeRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(NodeRef self) -> unsigned int"""
        return _osg.NodeRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(NodeRef self) -> bool"""
        return _osg.NodeRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(NodeRef self) -> unsigned int"""
        return _osg.NodeRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(NodeRef self) -> bool"""
        return _osg.NodeRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(NodeRef self, osg::Node::NodeMask nm)"""
        return _osg.NodeRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(NodeRef self) -> osg::Node::NodeMask"""
        return _osg.NodeRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(NodeRef self, StateSet stateset)"""
        return _osg.NodeRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(NodeRef self) -> StateSet"""
        return _osg.NodeRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(NodeRef self) -> StateSet
        getStateSet(NodeRef self) -> StateSet
        """
        return _osg.NodeRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(NodeRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.NodeRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(NodeRef self) -> osg::Node::DescriptionList
        getDescriptions(NodeRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.NodeRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(NodeRef self, unsigned int i) -> std::string const
        getDescription(NodeRef self, unsigned int i) -> std::string &
        """
        return _osg.NodeRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(NodeRef self) -> unsigned int"""
        return _osg.NodeRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(NodeRef self, std::string const & desc)"""
        return _osg.NodeRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(NodeRef self, BoundingSpheref bsphere)"""
        return _osg.NodeRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(NodeRef self) -> BoundingSpheref"""
        return _osg.NodeRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(NodeRef self)"""
        return _osg.NodeRef_dirtyBound(self)

    def getBound(self):
        """getBound(NodeRef self) -> BoundingSpheref"""
        return _osg.NodeRef_getBound(self)

    def computeBound(self):
        """computeBound(NodeRef self) -> BoundingSpheref"""
        return _osg.NodeRef_computeBound(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(NodeRef self, bool threadSafe)"""
        return _osg.NodeRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(NodeRef self, unsigned int arg2)"""
        return _osg.NodeRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(NodeRef self, State arg2=None)
        releaseGLObjects(NodeRef self)
        """
        return _osg.NodeRef_releaseGLObjects(self, arg2)

    def asLOD(self):
        """asLOD(NodeRef self) -> LOD"""
        return _osg.NodeRef_asLOD(self)

    def setName(self, *args):
        """
        setName(NodeRef self, std::string const & name)
        setName(NodeRef self, char const * name)
        """
        return _osg.NodeRef_setName(self, *args)

    def getName(self):
        """getName(NodeRef self) -> std::string const &"""
        return _osg.NodeRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(NodeRef self, osg::Object::DataVariance dv)"""
        return _osg.NodeRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(NodeRef self) -> osg::Object::DataVariance"""
        return _osg.NodeRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(NodeRef self)"""
        return _osg.NodeRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(NodeRef self, osg::UserDataContainer * udc)"""
        return _osg.NodeRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(NodeRef self) -> osg::UserDataContainer
        getUserDataContainer(NodeRef self) -> osg::UserDataContainer const *
        """
        return _osg.NodeRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(NodeRef self) -> osg::UserDataContainer *"""
        return _osg.NodeRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(NodeRef self, Referenced obj)"""
        return _osg.NodeRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(NodeRef self) -> Referenced
        getUserData(NodeRef self) -> Referenced
        """
        return _osg.NodeRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(NodeRef self) -> bool"""
        return _osg.NodeRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(NodeRef self) -> OpenThreads::Mutex *"""
        return _osg.NodeRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(NodeRef self) -> OpenThreads::Mutex *"""
        return _osg.NodeRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(NodeRef self) -> int"""
        return _osg.NodeRef_ref(self)

    def unref(self):
        """unref(NodeRef self) -> int"""
        return _osg.NodeRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(NodeRef self) -> int"""
        return _osg.NodeRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(NodeRef self) -> int"""
        return _osg.NodeRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(NodeRef self) -> osg::ObserverSet *"""
        return _osg.NodeRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(NodeRef self) -> osg::ObserverSet *"""
        return _osg.NodeRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(NodeRef self, osg::Observer * observer)"""
        return _osg.NodeRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(NodeRef self, osg::Observer * observer)"""
        return _osg.NodeRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(NodeRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.NodeRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(NodeRef self) -> bool"""
        return _osg.NodeRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(NodeRef self, DeleteHandler handler)"""
        return _osg.NodeRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(NodeRef self) -> DeleteHandler"""
        return _osg.NodeRef_getDeleteHandler(self)

NodeRef_swigregister = _osg.NodeRef_swigregister
NodeRef_swigregister(NodeRef)

class TransformRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Transform)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransformRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Transform)> self) -> TransformRef
        __init__(osg::ref_ptr<(osg::Transform)> self, Transform ptr) -> TransformRef
        __init__(osg::ref_ptr<(osg::Transform)> self, TransformRef rp) -> TransformRef
        __init__(osg::ref_ptr<(osg::Transform)> self, osg::observer_ptr< osg::Transform > & optr) -> TransformRef
        """
        this = _osg.new_TransformRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_TransformRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(TransformRef self) -> Transform"""
        return _osg.TransformRef___ref__(self)

    def __deref__(self):
        """__deref__(TransformRef self) -> Transform"""
        return _osg.TransformRef___deref__(self)

    def get(self):
        """get(TransformRef self) -> Transform"""
        return _osg.TransformRef_get(self)

    def valid(self):
        """valid(TransformRef self) -> bool"""
        return _osg.TransformRef_valid(self)

    def release(self):
        """release(TransformRef self) -> Transform"""
        return _osg.TransformRef_release(self)

    def swap(self, *args):
        """swap(TransformRef self, TransformRef rp)"""
        return _osg.TransformRef_swap(self, *args)

    def cloneType(self):
        """cloneType(TransformRef self) -> Object"""
        return _osg.TransformRef_cloneType(self)

    def clone(self, *args):
        """clone(TransformRef self, CopyOp copyop) -> Object"""
        return _osg.TransformRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TransformRef self, Object obj) -> bool"""
        return _osg.TransformRef_isSameKindAs(self, *args)

    def className(self):
        """className(TransformRef self) -> char const *"""
        return _osg.TransformRef_className(self)

    def libraryName(self):
        """libraryName(TransformRef self) -> char const *"""
        return _osg.TransformRef_libraryName(self)

    def accept(self, *args):
        """accept(TransformRef self, NodeVisitor nv)"""
        return _osg.TransformRef_accept(self, *args)

    def asTransform(self, *args):
        """
        asTransform(TransformRef self) -> Transform
        asTransform(TransformRef self) -> Transform
        """
        return _osg.TransformRef_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(TransformRef self) -> MatrixTransform
        asMatrixTransform(TransformRef self) -> MatrixTransform
        """
        return _osg.TransformRef_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(TransformRef self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(TransformRef self) -> PositionAttitudeTransform
        """
        return _osg.TransformRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(TransformRef self, osg::Transform::ReferenceFrame rf)"""
        return _osg.TransformRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(TransformRef self) -> osg::Transform::ReferenceFrame"""
        return _osg.TransformRef_getReferenceFrame(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(TransformRef self, Matrixd matrix, NodeVisitor arg0) -> bool"""
        return _osg.TransformRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(TransformRef self, Matrixd matrix, NodeVisitor arg0) -> bool"""
        return _osg.TransformRef_computeWorldToLocalMatrix(self, *args)

    def computeBound(self):
        """computeBound(TransformRef self) -> BoundingSpheref"""
        return _osg.TransformRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(TransformRef self) -> Group
        asGroup(TransformRef self) -> Group
        """
        return _osg.TransformRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(TransformRef self, NodeVisitor nv)"""
        return _osg.TransformRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(TransformRef self, Node child) -> bool"""
        return _osg.TransformRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(TransformRef self, unsigned int index, Node child) -> bool"""
        return _osg.TransformRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(TransformRef self, Node child) -> bool
        removeChild(TransformRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(TransformRef self, unsigned int pos) -> bool
        """
        return _osg.TransformRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(TransformRef self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.TransformRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(TransformRef self, Node origChild, Node newChild) -> bool"""
        return _osg.TransformRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(TransformRef self) -> unsigned int"""
        return _osg.TransformRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(TransformRef self, unsigned int i, Node node) -> bool"""
        return _osg.TransformRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(TransformRef self, unsigned int i) -> Node
        getChild(TransformRef self, unsigned int i) -> Node
        """
        return _osg.TransformRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(TransformRef self, Node node) -> bool"""
        return _osg.TransformRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(TransformRef self, Node node) -> unsigned int"""
        return _osg.TransformRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(TransformRef self, bool threadSafe)"""
        return _osg.TransformRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(TransformRef self, unsigned int maxSize)"""
        return _osg.TransformRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(TransformRef self, State arg0=None)
        releaseGLObjects(TransformRef self)
        """
        return _osg.TransformRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(TransformRef self) -> ProxyNode"""
        return _osg.TransformRef_asProxyNode(self)

    def asCamera(self, *args):
        """
        asCamera(TransformRef self) -> Camera
        asCamera(TransformRef self) -> Camera
        """
        return _osg.TransformRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(TransformRef self) -> Switch
        asSwitch(TransformRef self) -> Switch
        """
        return _osg.TransformRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(TransformRef self) -> Geode
        asGeode(TransformRef self) -> Geode
        """
        return _osg.TransformRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(TransformRef self) -> osgTerrain::Terrain
        asTerrain(TransformRef self) -> osgTerrain::Terrain const *
        """
        return _osg.TransformRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(TransformRef self, NodeVisitor nv)"""
        return _osg.TransformRef_ascend(self, *args)

    def getParents(self):
        """getParents(TransformRef self) -> vectorGroup"""
        return _osg.TransformRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(TransformRef self, unsigned int i) -> Group
        getParent(TransformRef self, unsigned int i) -> Group
        """
        return _osg.TransformRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(TransformRef self) -> unsigned int"""
        return _osg.TransformRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(TransformRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(TransformRef self) -> osg::NodePathList
        """
        return _osg.TransformRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(TransformRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(TransformRef self) -> vectorMatrix
        """
        return _osg.TransformRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(TransformRef self, NodeCallback nc)"""
        return _osg.TransformRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(TransformRef self) -> NodeCallback
        getUpdateCallback(TransformRef self) -> NodeCallback
        """
        return _osg.TransformRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(TransformRef self, NodeCallback nc)"""
        return _osg.TransformRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(TransformRef self, NodeCallback nc)"""
        return _osg.TransformRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(TransformRef self) -> unsigned int"""
        return _osg.TransformRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(TransformRef self, NodeCallback nc)"""
        return _osg.TransformRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(TransformRef self) -> NodeCallback
        getEventCallback(TransformRef self) -> NodeCallback
        """
        return _osg.TransformRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(TransformRef self, NodeCallback nc)"""
        return _osg.TransformRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(TransformRef self, NodeCallback nc)"""
        return _osg.TransformRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(TransformRef self) -> unsigned int"""
        return _osg.TransformRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(TransformRef self, NodeCallback nc)"""
        return _osg.TransformRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(TransformRef self) -> NodeCallback
        getCullCallback(TransformRef self) -> NodeCallback
        """
        return _osg.TransformRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(TransformRef self, NodeCallback nc)"""
        return _osg.TransformRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(TransformRef self, NodeCallback nc)"""
        return _osg.TransformRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(TransformRef self, bool active)"""
        return _osg.TransformRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(TransformRef self) -> bool"""
        return _osg.TransformRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(TransformRef self) -> unsigned int"""
        return _osg.TransformRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(TransformRef self) -> bool"""
        return _osg.TransformRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(TransformRef self) -> unsigned int"""
        return _osg.TransformRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(TransformRef self) -> bool"""
        return _osg.TransformRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(TransformRef self, osg::Node::NodeMask nm)"""
        return _osg.TransformRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(TransformRef self) -> osg::Node::NodeMask"""
        return _osg.TransformRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(TransformRef self, StateSet stateset)"""
        return _osg.TransformRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(TransformRef self) -> StateSet"""
        return _osg.TransformRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(TransformRef self) -> StateSet
        getStateSet(TransformRef self) -> StateSet
        """
        return _osg.TransformRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(TransformRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.TransformRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(TransformRef self) -> osg::Node::DescriptionList
        getDescriptions(TransformRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.TransformRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(TransformRef self, unsigned int i) -> std::string const
        getDescription(TransformRef self, unsigned int i) -> std::string &
        """
        return _osg.TransformRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(TransformRef self) -> unsigned int"""
        return _osg.TransformRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(TransformRef self, std::string const & desc)"""
        return _osg.TransformRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(TransformRef self, BoundingSpheref bsphere)"""
        return _osg.TransformRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(TransformRef self) -> BoundingSpheref"""
        return _osg.TransformRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(TransformRef self)"""
        return _osg.TransformRef_dirtyBound(self)

    def getBound(self):
        """getBound(TransformRef self) -> BoundingSpheref"""
        return _osg.TransformRef_getBound(self)

    def asLOD(self):
        """asLOD(TransformRef self) -> LOD"""
        return _osg.TransformRef_asLOD(self)

    def setName(self, *args):
        """
        setName(TransformRef self, std::string const & name)
        setName(TransformRef self, char const * name)
        """
        return _osg.TransformRef_setName(self, *args)

    def getName(self):
        """getName(TransformRef self) -> std::string const &"""
        return _osg.TransformRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(TransformRef self, osg::Object::DataVariance dv)"""
        return _osg.TransformRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(TransformRef self) -> osg::Object::DataVariance"""
        return _osg.TransformRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(TransformRef self)"""
        return _osg.TransformRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(TransformRef self, osg::UserDataContainer * udc)"""
        return _osg.TransformRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(TransformRef self) -> osg::UserDataContainer
        getUserDataContainer(TransformRef self) -> osg::UserDataContainer const *
        """
        return _osg.TransformRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(TransformRef self) -> osg::UserDataContainer *"""
        return _osg.TransformRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(TransformRef self, Referenced obj)"""
        return _osg.TransformRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(TransformRef self) -> Referenced
        getUserData(TransformRef self) -> Referenced
        """
        return _osg.TransformRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(TransformRef self) -> bool"""
        return _osg.TransformRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(TransformRef self) -> OpenThreads::Mutex *"""
        return _osg.TransformRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(TransformRef self) -> OpenThreads::Mutex *"""
        return _osg.TransformRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(TransformRef self) -> int"""
        return _osg.TransformRef_ref(self)

    def unref(self):
        """unref(TransformRef self) -> int"""
        return _osg.TransformRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(TransformRef self) -> int"""
        return _osg.TransformRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(TransformRef self) -> int"""
        return _osg.TransformRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(TransformRef self) -> osg::ObserverSet *"""
        return _osg.TransformRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(TransformRef self) -> osg::ObserverSet *"""
        return _osg.TransformRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(TransformRef self, osg::Observer * observer)"""
        return _osg.TransformRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(TransformRef self, osg::Observer * observer)"""
        return _osg.TransformRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(TransformRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.TransformRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(TransformRef self) -> bool"""
        return _osg.TransformRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(TransformRef self, DeleteHandler handler)"""
        return _osg.TransformRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(TransformRef self) -> DeleteHandler"""
        return _osg.TransformRef_getDeleteHandler(self)

TransformRef_swigregister = _osg.TransformRef_swigregister
TransformRef_swigregister(TransformRef)

class GeodeRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Geode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeodeRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeodeRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Geode)> self) -> GeodeRef
        __init__(osg::ref_ptr<(osg::Geode)> self, Geode ptr) -> GeodeRef
        __init__(osg::ref_ptr<(osg::Geode)> self, GeodeRef rp) -> GeodeRef
        __init__(osg::ref_ptr<(osg::Geode)> self, osg::observer_ptr< osg::Geode > & optr) -> GeodeRef
        """
        this = _osg.new_GeodeRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_GeodeRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(GeodeRef self) -> Geode"""
        return _osg.GeodeRef___ref__(self)

    def __deref__(self):
        """__deref__(GeodeRef self) -> Geode"""
        return _osg.GeodeRef___deref__(self)

    def get(self):
        """get(GeodeRef self) -> Geode"""
        return _osg.GeodeRef_get(self)

    def valid(self):
        """valid(GeodeRef self) -> bool"""
        return _osg.GeodeRef_valid(self)

    def release(self):
        """release(GeodeRef self) -> Geode"""
        return _osg.GeodeRef_release(self)

    def swap(self, *args):
        """swap(GeodeRef self, GeodeRef rp)"""
        return _osg.GeodeRef_swap(self, *args)

    def cloneType(self):
        """cloneType(GeodeRef self) -> Object"""
        return _osg.GeodeRef_cloneType(self)

    def clone(self, *args):
        """clone(GeodeRef self, CopyOp copyop) -> Object"""
        return _osg.GeodeRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(GeodeRef self, Object obj) -> bool"""
        return _osg.GeodeRef_isSameKindAs(self, *args)

    def className(self):
        """className(GeodeRef self) -> char const *"""
        return _osg.GeodeRef_className(self)

    def libraryName(self):
        """libraryName(GeodeRef self) -> char const *"""
        return _osg.GeodeRef_libraryName(self)

    def accept(self, *args):
        """accept(GeodeRef self, NodeVisitor nv)"""
        return _osg.GeodeRef_accept(self, *args)

    def asGeode(self, *args):
        """
        asGeode(GeodeRef self) -> Geode
        asGeode(GeodeRef self) -> Geode
        """
        return _osg.GeodeRef_asGeode(self, *args)

    def addDrawable(self, *args):
        """addDrawable(GeodeRef self, Drawable drawable) -> bool"""
        return _osg.GeodeRef_addDrawable(self, *args)

    def removeDrawable(self, *args):
        """removeDrawable(GeodeRef self, Drawable drawable) -> bool"""
        return _osg.GeodeRef_removeDrawable(self, *args)

    def removeDrawables(self, *args):
        """
        removeDrawables(GeodeRef self, unsigned int i, unsigned int numDrawablesToRemove=1) -> bool
        removeDrawables(GeodeRef self, unsigned int i) -> bool
        """
        return _osg.GeodeRef_removeDrawables(self, *args)

    def replaceDrawable(self, *args):
        """replaceDrawable(GeodeRef self, Drawable origDraw, Drawable newDraw) -> bool"""
        return _osg.GeodeRef_replaceDrawable(self, *args)

    def setDrawable(self, *args):
        """setDrawable(GeodeRef self, unsigned int i, Drawable drawable) -> bool"""
        return _osg.GeodeRef_setDrawable(self, *args)

    def getNumDrawables(self):
        """getNumDrawables(GeodeRef self) -> unsigned int"""
        return _osg.GeodeRef_getNumDrawables(self)

    def getDrawable(self, *args):
        """
        getDrawable(GeodeRef self, unsigned int i) -> Drawable
        getDrawable(GeodeRef self, unsigned int i) -> Drawable
        """
        return _osg.GeodeRef_getDrawable(self, *args)

    def containsDrawable(self, *args):
        """containsDrawable(GeodeRef self, Drawable gset) -> bool"""
        return _osg.GeodeRef_containsDrawable(self, *args)

    def getDrawableIndex(self, *args):
        """getDrawableIndex(GeodeRef self, Drawable drawable) -> unsigned int"""
        return _osg.GeodeRef_getDrawableIndex(self, *args)

    def getDrawableList(self):
        """getDrawableList(GeodeRef self) -> osg::Geode::DrawableList const &"""
        return _osg.GeodeRef_getDrawableList(self)

    def compileDrawables(self, *args):
        """compileDrawables(GeodeRef self, RenderInfo renderInfo)"""
        return _osg.GeodeRef_compileDrawables(self, *args)

    def getBoundingBox(self):
        """getBoundingBox(GeodeRef self) -> BoundingBoxf"""
        return _osg.GeodeRef_getBoundingBox(self)

    def computeBound(self):
        """computeBound(GeodeRef self) -> BoundingSpheref"""
        return _osg.GeodeRef_computeBound(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(GeodeRef self, bool threadSafe)"""
        return _osg.GeodeRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(GeodeRef self, unsigned int maxSize)"""
        return _osg.GeodeRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(GeodeRef self, State arg2=None)
        releaseGLObjects(GeodeRef self)
        """
        return _osg.GeodeRef_releaseGLObjects(self, arg2)

    def asGroup(self, *args):
        """
        asGroup(GeodeRef self) -> Group
        asGroup(GeodeRef self) -> Group
        """
        return _osg.GeodeRef_asGroup(self, *args)

    def asTransform(self, *args):
        """
        asTransform(GeodeRef self) -> Transform
        asTransform(GeodeRef self) -> Transform
        """
        return _osg.GeodeRef_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(GeodeRef self) -> Camera
        asCamera(GeodeRef self) -> Camera
        """
        return _osg.GeodeRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(GeodeRef self) -> Switch
        asSwitch(GeodeRef self) -> Switch
        """
        return _osg.GeodeRef_asSwitch(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(GeodeRef self) -> osgTerrain::Terrain
        asTerrain(GeodeRef self) -> osgTerrain::Terrain const *
        """
        return _osg.GeodeRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(GeodeRef self, NodeVisitor nv)"""
        return _osg.GeodeRef_ascend(self, *args)

    def traverse(self, *args):
        """traverse(GeodeRef self, NodeVisitor arg2)"""
        return _osg.GeodeRef_traverse(self, *args)

    def getParents(self):
        """getParents(GeodeRef self) -> vectorGroup"""
        return _osg.GeodeRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(GeodeRef self, unsigned int i) -> Group
        getParent(GeodeRef self, unsigned int i) -> Group
        """
        return _osg.GeodeRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(GeodeRef self) -> unsigned int"""
        return _osg.GeodeRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(GeodeRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(GeodeRef self) -> osg::NodePathList
        """
        return _osg.GeodeRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(GeodeRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(GeodeRef self) -> vectorMatrix
        """
        return _osg.GeodeRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(GeodeRef self, NodeCallback nc)"""
        return _osg.GeodeRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(GeodeRef self) -> NodeCallback
        getUpdateCallback(GeodeRef self) -> NodeCallback
        """
        return _osg.GeodeRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(GeodeRef self, NodeCallback nc)"""
        return _osg.GeodeRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(GeodeRef self, NodeCallback nc)"""
        return _osg.GeodeRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(GeodeRef self) -> unsigned int"""
        return _osg.GeodeRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(GeodeRef self, NodeCallback nc)"""
        return _osg.GeodeRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(GeodeRef self) -> NodeCallback
        getEventCallback(GeodeRef self) -> NodeCallback
        """
        return _osg.GeodeRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(GeodeRef self, NodeCallback nc)"""
        return _osg.GeodeRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(GeodeRef self, NodeCallback nc)"""
        return _osg.GeodeRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(GeodeRef self) -> unsigned int"""
        return _osg.GeodeRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(GeodeRef self, NodeCallback nc)"""
        return _osg.GeodeRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(GeodeRef self) -> NodeCallback
        getCullCallback(GeodeRef self) -> NodeCallback
        """
        return _osg.GeodeRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(GeodeRef self, NodeCallback nc)"""
        return _osg.GeodeRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(GeodeRef self, NodeCallback nc)"""
        return _osg.GeodeRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(GeodeRef self, bool active)"""
        return _osg.GeodeRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(GeodeRef self) -> bool"""
        return _osg.GeodeRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(GeodeRef self) -> unsigned int"""
        return _osg.GeodeRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(GeodeRef self) -> bool"""
        return _osg.GeodeRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(GeodeRef self) -> unsigned int"""
        return _osg.GeodeRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(GeodeRef self) -> bool"""
        return _osg.GeodeRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(GeodeRef self, osg::Node::NodeMask nm)"""
        return _osg.GeodeRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(GeodeRef self) -> osg::Node::NodeMask"""
        return _osg.GeodeRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(GeodeRef self, StateSet stateset)"""
        return _osg.GeodeRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(GeodeRef self) -> StateSet"""
        return _osg.GeodeRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(GeodeRef self) -> StateSet
        getStateSet(GeodeRef self) -> StateSet
        """
        return _osg.GeodeRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(GeodeRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.GeodeRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(GeodeRef self) -> osg::Node::DescriptionList
        getDescriptions(GeodeRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.GeodeRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(GeodeRef self, unsigned int i) -> std::string const
        getDescription(GeodeRef self, unsigned int i) -> std::string &
        """
        return _osg.GeodeRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(GeodeRef self) -> unsigned int"""
        return _osg.GeodeRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(GeodeRef self, std::string const & desc)"""
        return _osg.GeodeRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(GeodeRef self, BoundingSpheref bsphere)"""
        return _osg.GeodeRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(GeodeRef self) -> BoundingSpheref"""
        return _osg.GeodeRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(GeodeRef self)"""
        return _osg.GeodeRef_dirtyBound(self)

    def getBound(self):
        """getBound(GeodeRef self) -> BoundingSpheref"""
        return _osg.GeodeRef_getBound(self)

    def asLOD(self):
        """asLOD(GeodeRef self) -> LOD"""
        return _osg.GeodeRef_asLOD(self)

    def setName(self, *args):
        """
        setName(GeodeRef self, std::string const & name)
        setName(GeodeRef self, char const * name)
        """
        return _osg.GeodeRef_setName(self, *args)

    def getName(self):
        """getName(GeodeRef self) -> std::string const &"""
        return _osg.GeodeRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(GeodeRef self, osg::Object::DataVariance dv)"""
        return _osg.GeodeRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(GeodeRef self) -> osg::Object::DataVariance"""
        return _osg.GeodeRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(GeodeRef self)"""
        return _osg.GeodeRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(GeodeRef self, osg::UserDataContainer * udc)"""
        return _osg.GeodeRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(GeodeRef self) -> osg::UserDataContainer
        getUserDataContainer(GeodeRef self) -> osg::UserDataContainer const *
        """
        return _osg.GeodeRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(GeodeRef self) -> osg::UserDataContainer *"""
        return _osg.GeodeRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(GeodeRef self, Referenced obj)"""
        return _osg.GeodeRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(GeodeRef self) -> Referenced
        getUserData(GeodeRef self) -> Referenced
        """
        return _osg.GeodeRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(GeodeRef self) -> bool"""
        return _osg.GeodeRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(GeodeRef self) -> OpenThreads::Mutex *"""
        return _osg.GeodeRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(GeodeRef self) -> OpenThreads::Mutex *"""
        return _osg.GeodeRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(GeodeRef self) -> int"""
        return _osg.GeodeRef_ref(self)

    def unref(self):
        """unref(GeodeRef self) -> int"""
        return _osg.GeodeRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(GeodeRef self) -> int"""
        return _osg.GeodeRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(GeodeRef self) -> int"""
        return _osg.GeodeRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(GeodeRef self) -> osg::ObserverSet *"""
        return _osg.GeodeRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(GeodeRef self) -> osg::ObserverSet *"""
        return _osg.GeodeRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(GeodeRef self, osg::Observer * observer)"""
        return _osg.GeodeRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(GeodeRef self, osg::Observer * observer)"""
        return _osg.GeodeRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(GeodeRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.GeodeRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(GeodeRef self) -> bool"""
        return _osg.GeodeRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(GeodeRef self, DeleteHandler handler)"""
        return _osg.GeodeRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(GeodeRef self) -> DeleteHandler"""
        return _osg.GeodeRef_getDeleteHandler(self)

GeodeRef_swigregister = _osg.GeodeRef_swigregister
GeodeRef_swigregister(GeodeRef)

class BillboardRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Billboard)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BillboardRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BillboardRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Billboard)> self) -> BillboardRef
        __init__(osg::ref_ptr<(osg::Billboard)> self, Billboard ptr) -> BillboardRef
        __init__(osg::ref_ptr<(osg::Billboard)> self, BillboardRef rp) -> BillboardRef
        __init__(osg::ref_ptr<(osg::Billboard)> self, osg::observer_ptr< osg::Billboard > & optr) -> BillboardRef
        """
        this = _osg.new_BillboardRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_BillboardRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(BillboardRef self) -> Billboard"""
        return _osg.BillboardRef___ref__(self)

    def __deref__(self):
        """__deref__(BillboardRef self) -> Billboard"""
        return _osg.BillboardRef___deref__(self)

    def get(self):
        """get(BillboardRef self) -> Billboard"""
        return _osg.BillboardRef_get(self)

    def valid(self):
        """valid(BillboardRef self) -> bool"""
        return _osg.BillboardRef_valid(self)

    def release(self):
        """release(BillboardRef self) -> Billboard"""
        return _osg.BillboardRef_release(self)

    def swap(self, *args):
        """swap(BillboardRef self, BillboardRef rp)"""
        return _osg.BillboardRef_swap(self, *args)

    def cloneType(self):
        """cloneType(BillboardRef self) -> Object"""
        return _osg.BillboardRef_cloneType(self)

    def clone(self, *args):
        """clone(BillboardRef self, CopyOp copyop) -> Object"""
        return _osg.BillboardRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(BillboardRef self, Object obj) -> bool"""
        return _osg.BillboardRef_isSameKindAs(self, *args)

    def className(self):
        """className(BillboardRef self) -> char const *"""
        return _osg.BillboardRef_className(self)

    def libraryName(self):
        """libraryName(BillboardRef self) -> char const *"""
        return _osg.BillboardRef_libraryName(self)

    def accept(self, *args):
        """accept(BillboardRef self, NodeVisitor nv)"""
        return _osg.BillboardRef_accept(self, *args)

    def setMode(self, *args):
        """setMode(BillboardRef self, osg::Billboard::Mode mode)"""
        return _osg.BillboardRef_setMode(self, *args)

    def getMode(self):
        """getMode(BillboardRef self) -> osg::Billboard::Mode"""
        return _osg.BillboardRef_getMode(self)

    def setAxis(self, *args):
        """setAxis(BillboardRef self, Vec3f axis)"""
        return _osg.BillboardRef_setAxis(self, *args)

    def getAxis(self):
        """getAxis(BillboardRef self) -> Vec3f"""
        return _osg.BillboardRef_getAxis(self)

    def setNormal(self, *args):
        """setNormal(BillboardRef self, Vec3f normal)"""
        return _osg.BillboardRef_setNormal(self, *args)

    def getNormal(self):
        """getNormal(BillboardRef self) -> Vec3f"""
        return _osg.BillboardRef_getNormal(self)

    def setPosition(self, *args):
        """setPosition(BillboardRef self, unsigned int i, Vec3f pos)"""
        return _osg.BillboardRef_setPosition(self, *args)

    def getPosition(self, *args):
        """getPosition(BillboardRef self, unsigned int i) -> Vec3f"""
        return _osg.BillboardRef_getPosition(self, *args)

    def setPositionList(self, *args):
        """setPositionList(BillboardRef self, vectorVec3 pl)"""
        return _osg.BillboardRef_setPositionList(self, *args)

    def getPositionList(self, *args):
        """
        getPositionList(BillboardRef self) -> vectorVec3
        getPositionList(BillboardRef self) -> vectorVec3
        """
        return _osg.BillboardRef_getPositionList(self, *args)

    def addDrawable(self, *args):
        """
        addDrawable(BillboardRef self, Drawable gset) -> bool
        addDrawable(BillboardRef self, Drawable gset, Vec3f pos) -> bool
        """
        return _osg.BillboardRef_addDrawable(self, *args)

    def removeDrawable(self, *args):
        """removeDrawable(BillboardRef self, Drawable gset) -> bool"""
        return _osg.BillboardRef_removeDrawable(self, *args)

    def computeMatrix(self, *args):
        """computeMatrix(BillboardRef self, Matrixd modelview, Vec3f eye_local, Vec3f pos_local) -> bool"""
        return _osg.BillboardRef_computeMatrix(self, *args)

    def computeBound(self):
        """computeBound(BillboardRef self) -> BoundingSpheref"""
        return _osg.BillboardRef_computeBound(self)

    def asGeode(self, *args):
        """
        asGeode(BillboardRef self) -> Geode
        asGeode(BillboardRef self) -> Geode
        """
        return _osg.BillboardRef_asGeode(self, *args)

    def removeDrawables(self, *args):
        """
        removeDrawables(BillboardRef self, unsigned int i, unsigned int numDrawablesToRemove=1) -> bool
        removeDrawables(BillboardRef self, unsigned int i) -> bool
        """
        return _osg.BillboardRef_removeDrawables(self, *args)

    def replaceDrawable(self, *args):
        """replaceDrawable(BillboardRef self, Drawable origDraw, Drawable newDraw) -> bool"""
        return _osg.BillboardRef_replaceDrawable(self, *args)

    def setDrawable(self, *args):
        """setDrawable(BillboardRef self, unsigned int i, Drawable drawable) -> bool"""
        return _osg.BillboardRef_setDrawable(self, *args)

    def getNumDrawables(self):
        """getNumDrawables(BillboardRef self) -> unsigned int"""
        return _osg.BillboardRef_getNumDrawables(self)

    def getDrawable(self, *args):
        """
        getDrawable(BillboardRef self, unsigned int i) -> Drawable
        getDrawable(BillboardRef self, unsigned int i) -> Drawable
        """
        return _osg.BillboardRef_getDrawable(self, *args)

    def containsDrawable(self, *args):
        """containsDrawable(BillboardRef self, Drawable gset) -> bool"""
        return _osg.BillboardRef_containsDrawable(self, *args)

    def getDrawableIndex(self, *args):
        """getDrawableIndex(BillboardRef self, Drawable drawable) -> unsigned int"""
        return _osg.BillboardRef_getDrawableIndex(self, *args)

    def getDrawableList(self):
        """getDrawableList(BillboardRef self) -> osg::Geode::DrawableList const &"""
        return _osg.BillboardRef_getDrawableList(self)

    def compileDrawables(self, *args):
        """compileDrawables(BillboardRef self, RenderInfo renderInfo)"""
        return _osg.BillboardRef_compileDrawables(self, *args)

    def getBoundingBox(self):
        """getBoundingBox(BillboardRef self) -> BoundingBoxf"""
        return _osg.BillboardRef_getBoundingBox(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(BillboardRef self, bool threadSafe)"""
        return _osg.BillboardRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(BillboardRef self, unsigned int maxSize)"""
        return _osg.BillboardRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(BillboardRef self, State arg2=None)
        releaseGLObjects(BillboardRef self)
        """
        return _osg.BillboardRef_releaseGLObjects(self, arg2)

    def asGroup(self, *args):
        """
        asGroup(BillboardRef self) -> Group
        asGroup(BillboardRef self) -> Group
        """
        return _osg.BillboardRef_asGroup(self, *args)

    def asTransform(self, *args):
        """
        asTransform(BillboardRef self) -> Transform
        asTransform(BillboardRef self) -> Transform
        """
        return _osg.BillboardRef_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(BillboardRef self) -> Camera
        asCamera(BillboardRef self) -> Camera
        """
        return _osg.BillboardRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(BillboardRef self) -> Switch
        asSwitch(BillboardRef self) -> Switch
        """
        return _osg.BillboardRef_asSwitch(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(BillboardRef self) -> osgTerrain::Terrain
        asTerrain(BillboardRef self) -> osgTerrain::Terrain const *
        """
        return _osg.BillboardRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(BillboardRef self, NodeVisitor nv)"""
        return _osg.BillboardRef_ascend(self, *args)

    def traverse(self, *args):
        """traverse(BillboardRef self, NodeVisitor arg2)"""
        return _osg.BillboardRef_traverse(self, *args)

    def getParents(self):
        """getParents(BillboardRef self) -> vectorGroup"""
        return _osg.BillboardRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(BillboardRef self, unsigned int i) -> Group
        getParent(BillboardRef self, unsigned int i) -> Group
        """
        return _osg.BillboardRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(BillboardRef self) -> unsigned int"""
        return _osg.BillboardRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(BillboardRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(BillboardRef self) -> osg::NodePathList
        """
        return _osg.BillboardRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(BillboardRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(BillboardRef self) -> vectorMatrix
        """
        return _osg.BillboardRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(BillboardRef self, NodeCallback nc)"""
        return _osg.BillboardRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(BillboardRef self) -> NodeCallback
        getUpdateCallback(BillboardRef self) -> NodeCallback
        """
        return _osg.BillboardRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(BillboardRef self, NodeCallback nc)"""
        return _osg.BillboardRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(BillboardRef self, NodeCallback nc)"""
        return _osg.BillboardRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(BillboardRef self) -> unsigned int"""
        return _osg.BillboardRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(BillboardRef self, NodeCallback nc)"""
        return _osg.BillboardRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(BillboardRef self) -> NodeCallback
        getEventCallback(BillboardRef self) -> NodeCallback
        """
        return _osg.BillboardRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(BillboardRef self, NodeCallback nc)"""
        return _osg.BillboardRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(BillboardRef self, NodeCallback nc)"""
        return _osg.BillboardRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(BillboardRef self) -> unsigned int"""
        return _osg.BillboardRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(BillboardRef self, NodeCallback nc)"""
        return _osg.BillboardRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(BillboardRef self) -> NodeCallback
        getCullCallback(BillboardRef self) -> NodeCallback
        """
        return _osg.BillboardRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(BillboardRef self, NodeCallback nc)"""
        return _osg.BillboardRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(BillboardRef self, NodeCallback nc)"""
        return _osg.BillboardRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(BillboardRef self, bool active)"""
        return _osg.BillboardRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(BillboardRef self) -> bool"""
        return _osg.BillboardRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(BillboardRef self) -> unsigned int"""
        return _osg.BillboardRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(BillboardRef self) -> bool"""
        return _osg.BillboardRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(BillboardRef self) -> unsigned int"""
        return _osg.BillboardRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(BillboardRef self) -> bool"""
        return _osg.BillboardRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(BillboardRef self, osg::Node::NodeMask nm)"""
        return _osg.BillboardRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(BillboardRef self) -> osg::Node::NodeMask"""
        return _osg.BillboardRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(BillboardRef self, StateSet stateset)"""
        return _osg.BillboardRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(BillboardRef self) -> StateSet"""
        return _osg.BillboardRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(BillboardRef self) -> StateSet
        getStateSet(BillboardRef self) -> StateSet
        """
        return _osg.BillboardRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(BillboardRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.BillboardRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(BillboardRef self) -> osg::Node::DescriptionList
        getDescriptions(BillboardRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.BillboardRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(BillboardRef self, unsigned int i) -> std::string const
        getDescription(BillboardRef self, unsigned int i) -> std::string &
        """
        return _osg.BillboardRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(BillboardRef self) -> unsigned int"""
        return _osg.BillboardRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(BillboardRef self, std::string const & desc)"""
        return _osg.BillboardRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(BillboardRef self, BoundingSpheref bsphere)"""
        return _osg.BillboardRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(BillboardRef self) -> BoundingSpheref"""
        return _osg.BillboardRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(BillboardRef self)"""
        return _osg.BillboardRef_dirtyBound(self)

    def getBound(self):
        """getBound(BillboardRef self) -> BoundingSpheref"""
        return _osg.BillboardRef_getBound(self)

    def asLOD(self):
        """asLOD(BillboardRef self) -> LOD"""
        return _osg.BillboardRef_asLOD(self)

    def setName(self, *args):
        """
        setName(BillboardRef self, std::string const & name)
        setName(BillboardRef self, char const * name)
        """
        return _osg.BillboardRef_setName(self, *args)

    def getName(self):
        """getName(BillboardRef self) -> std::string const &"""
        return _osg.BillboardRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(BillboardRef self, osg::Object::DataVariance dv)"""
        return _osg.BillboardRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(BillboardRef self) -> osg::Object::DataVariance"""
        return _osg.BillboardRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(BillboardRef self)"""
        return _osg.BillboardRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(BillboardRef self, osg::UserDataContainer * udc)"""
        return _osg.BillboardRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(BillboardRef self) -> osg::UserDataContainer
        getUserDataContainer(BillboardRef self) -> osg::UserDataContainer const *
        """
        return _osg.BillboardRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(BillboardRef self) -> osg::UserDataContainer *"""
        return _osg.BillboardRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(BillboardRef self, Referenced obj)"""
        return _osg.BillboardRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(BillboardRef self) -> Referenced
        getUserData(BillboardRef self) -> Referenced
        """
        return _osg.BillboardRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(BillboardRef self) -> bool"""
        return _osg.BillboardRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(BillboardRef self) -> OpenThreads::Mutex *"""
        return _osg.BillboardRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(BillboardRef self) -> OpenThreads::Mutex *"""
        return _osg.BillboardRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(BillboardRef self) -> int"""
        return _osg.BillboardRef_ref(self)

    def unref(self):
        """unref(BillboardRef self) -> int"""
        return _osg.BillboardRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(BillboardRef self) -> int"""
        return _osg.BillboardRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(BillboardRef self) -> int"""
        return _osg.BillboardRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(BillboardRef self) -> osg::ObserverSet *"""
        return _osg.BillboardRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(BillboardRef self) -> osg::ObserverSet *"""
        return _osg.BillboardRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(BillboardRef self, osg::Observer * observer)"""
        return _osg.BillboardRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(BillboardRef self, osg::Observer * observer)"""
        return _osg.BillboardRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(BillboardRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.BillboardRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(BillboardRef self) -> bool"""
        return _osg.BillboardRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(BillboardRef self, DeleteHandler handler)"""
        return _osg.BillboardRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(BillboardRef self) -> DeleteHandler"""
        return _osg.BillboardRef_getDeleteHandler(self)

BillboardRef_swigregister = _osg.BillboardRef_swigregister
BillboardRef_swigregister(BillboardRef)

class SwitchRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Switch)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Switch)> self) -> SwitchRef
        __init__(osg::ref_ptr<(osg::Switch)> self, Switch ptr) -> SwitchRef
        __init__(osg::ref_ptr<(osg::Switch)> self, SwitchRef rp) -> SwitchRef
        __init__(osg::ref_ptr<(osg::Switch)> self, osg::observer_ptr< osg::Switch > & optr) -> SwitchRef
        """
        this = _osg.new_SwitchRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_SwitchRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(SwitchRef self) -> Switch"""
        return _osg.SwitchRef___ref__(self)

    def __deref__(self):
        """__deref__(SwitchRef self) -> Switch"""
        return _osg.SwitchRef___deref__(self)

    def get(self):
        """get(SwitchRef self) -> Switch"""
        return _osg.SwitchRef_get(self)

    def valid(self):
        """valid(SwitchRef self) -> bool"""
        return _osg.SwitchRef_valid(self)

    def release(self):
        """release(SwitchRef self) -> Switch"""
        return _osg.SwitchRef_release(self)

    def swap(self, *args):
        """swap(SwitchRef self, SwitchRef rp)"""
        return _osg.SwitchRef_swap(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(SwitchRef self) -> Switch
        asSwitch(SwitchRef self) -> Switch
        """
        return _osg.SwitchRef_asSwitch(self, *args)

    def cloneType(self):
        """cloneType(SwitchRef self) -> Object"""
        return _osg.SwitchRef_cloneType(self)

    def clone(self, *args):
        """clone(SwitchRef self, CopyOp copyop) -> Object"""
        return _osg.SwitchRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(SwitchRef self, Object obj) -> bool"""
        return _osg.SwitchRef_isSameKindAs(self, *args)

    def className(self):
        """className(SwitchRef self) -> char const *"""
        return _osg.SwitchRef_className(self)

    def libraryName(self):
        """libraryName(SwitchRef self) -> char const *"""
        return _osg.SwitchRef_libraryName(self)

    def accept(self, *args):
        """accept(SwitchRef self, NodeVisitor nv)"""
        return _osg.SwitchRef_accept(self, *args)

    def traverse(self, *args):
        """traverse(SwitchRef self, NodeVisitor nv)"""
        return _osg.SwitchRef_traverse(self, *args)

    def setNewChildDefaultValue(self, *args):
        """setNewChildDefaultValue(SwitchRef self, bool value)"""
        return _osg.SwitchRef_setNewChildDefaultValue(self, *args)

    def getNewChildDefaultValue(self):
        """getNewChildDefaultValue(SwitchRef self) -> bool"""
        return _osg.SwitchRef_getNewChildDefaultValue(self)

    def addChild(self, *args):
        """
        addChild(SwitchRef self, Node child) -> bool
        addChild(SwitchRef self, Node child, bool value) -> bool
        """
        return _osg.SwitchRef_addChild(self, *args)

    def insertChild(self, *args):
        """
        insertChild(SwitchRef self, unsigned int index, Node child) -> bool
        insertChild(SwitchRef self, unsigned int index, Node child, bool value) -> bool
        """
        return _osg.SwitchRef_insertChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(SwitchRef self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.SwitchRef_removeChildren(self, *args)

    def setValue(self, *args):
        """setValue(SwitchRef self, unsigned int pos, bool value)"""
        return _osg.SwitchRef_setValue(self, *args)

    def getValue(self, *args):
        """getValue(SwitchRef self, unsigned int pos) -> bool"""
        return _osg.SwitchRef_getValue(self, *args)

    def setChildValue(self, *args):
        """setChildValue(SwitchRef self, Node child, bool value)"""
        return _osg.SwitchRef_setChildValue(self, *args)

    def getChildValue(self, *args):
        """getChildValue(SwitchRef self, Node child) -> bool"""
        return _osg.SwitchRef_getChildValue(self, *args)

    def setAllChildrenOff(self):
        """setAllChildrenOff(SwitchRef self) -> bool"""
        return _osg.SwitchRef_setAllChildrenOff(self)

    def setAllChildrenOn(self):
        """setAllChildrenOn(SwitchRef self) -> bool"""
        return _osg.SwitchRef_setAllChildrenOn(self)

    def setSingleChildOn(self, *args):
        """setSingleChildOn(SwitchRef self, unsigned int pos) -> bool"""
        return _osg.SwitchRef_setSingleChildOn(self, *args)

    def setValueList(self, *args):
        """setValueList(SwitchRef self, osg::Switch::ValueList const & values)"""
        return _osg.SwitchRef_setValueList(self, *args)

    def getValueList(self):
        """getValueList(SwitchRef self) -> osg::Switch::ValueList const &"""
        return _osg.SwitchRef_getValueList(self)

    def computeBound(self):
        """computeBound(SwitchRef self) -> BoundingSpheref"""
        return _osg.SwitchRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(SwitchRef self) -> Group
        asGroup(SwitchRef self) -> Group
        """
        return _osg.SwitchRef_asGroup(self, *args)

    def removeChild(self, *args):
        """
        removeChild(SwitchRef self, Node child) -> bool
        removeChild(SwitchRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(SwitchRef self, unsigned int pos) -> bool
        """
        return _osg.SwitchRef_removeChild(self, *args)

    def replaceChild(self, *args):
        """replaceChild(SwitchRef self, Node origChild, Node newChild) -> bool"""
        return _osg.SwitchRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(SwitchRef self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(SwitchRef self, unsigned int i, Node node) -> bool"""
        return _osg.SwitchRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(SwitchRef self, unsigned int i) -> Node
        getChild(SwitchRef self, unsigned int i) -> Node
        """
        return _osg.SwitchRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(SwitchRef self, Node node) -> bool"""
        return _osg.SwitchRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(SwitchRef self, Node node) -> unsigned int"""
        return _osg.SwitchRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(SwitchRef self, bool threadSafe)"""
        return _osg.SwitchRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(SwitchRef self, unsigned int maxSize)"""
        return _osg.SwitchRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(SwitchRef self, State arg0=None)
        releaseGLObjects(SwitchRef self)
        """
        return _osg.SwitchRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(SwitchRef self) -> ProxyNode"""
        return _osg.SwitchRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(SwitchRef self) -> Transform
        asTransform(SwitchRef self) -> Transform
        """
        return _osg.SwitchRef_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(SwitchRef self) -> Camera
        asCamera(SwitchRef self) -> Camera
        """
        return _osg.SwitchRef_asCamera(self, *args)

    def asGeode(self, *args):
        """
        asGeode(SwitchRef self) -> Geode
        asGeode(SwitchRef self) -> Geode
        """
        return _osg.SwitchRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(SwitchRef self) -> osgTerrain::Terrain
        asTerrain(SwitchRef self) -> osgTerrain::Terrain const *
        """
        return _osg.SwitchRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(SwitchRef self, NodeVisitor nv)"""
        return _osg.SwitchRef_ascend(self, *args)

    def getParents(self):
        """getParents(SwitchRef self) -> vectorGroup"""
        return _osg.SwitchRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(SwitchRef self, unsigned int i) -> Group
        getParent(SwitchRef self, unsigned int i) -> Group
        """
        return _osg.SwitchRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(SwitchRef self) -> unsigned int"""
        return _osg.SwitchRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(SwitchRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(SwitchRef self) -> osg::NodePathList
        """
        return _osg.SwitchRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(SwitchRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(SwitchRef self) -> vectorMatrix
        """
        return _osg.SwitchRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(SwitchRef self, NodeCallback nc)"""
        return _osg.SwitchRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(SwitchRef self) -> NodeCallback
        getUpdateCallback(SwitchRef self) -> NodeCallback
        """
        return _osg.SwitchRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(SwitchRef self, NodeCallback nc)"""
        return _osg.SwitchRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(SwitchRef self, NodeCallback nc)"""
        return _osg.SwitchRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(SwitchRef self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(SwitchRef self, NodeCallback nc)"""
        return _osg.SwitchRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(SwitchRef self) -> NodeCallback
        getEventCallback(SwitchRef self) -> NodeCallback
        """
        return _osg.SwitchRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(SwitchRef self, NodeCallback nc)"""
        return _osg.SwitchRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(SwitchRef self, NodeCallback nc)"""
        return _osg.SwitchRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(SwitchRef self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(SwitchRef self, NodeCallback nc)"""
        return _osg.SwitchRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(SwitchRef self) -> NodeCallback
        getCullCallback(SwitchRef self) -> NodeCallback
        """
        return _osg.SwitchRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(SwitchRef self, NodeCallback nc)"""
        return _osg.SwitchRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(SwitchRef self, NodeCallback nc)"""
        return _osg.SwitchRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(SwitchRef self, bool active)"""
        return _osg.SwitchRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(SwitchRef self) -> bool"""
        return _osg.SwitchRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(SwitchRef self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(SwitchRef self) -> bool"""
        return _osg.SwitchRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(SwitchRef self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(SwitchRef self) -> bool"""
        return _osg.SwitchRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(SwitchRef self, osg::Node::NodeMask nm)"""
        return _osg.SwitchRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(SwitchRef self) -> osg::Node::NodeMask"""
        return _osg.SwitchRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(SwitchRef self, StateSet stateset)"""
        return _osg.SwitchRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(SwitchRef self) -> StateSet"""
        return _osg.SwitchRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(SwitchRef self) -> StateSet
        getStateSet(SwitchRef self) -> StateSet
        """
        return _osg.SwitchRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(SwitchRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.SwitchRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(SwitchRef self) -> osg::Node::DescriptionList
        getDescriptions(SwitchRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.SwitchRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(SwitchRef self, unsigned int i) -> std::string const
        getDescription(SwitchRef self, unsigned int i) -> std::string &
        """
        return _osg.SwitchRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(SwitchRef self) -> unsigned int"""
        return _osg.SwitchRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(SwitchRef self, std::string const & desc)"""
        return _osg.SwitchRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(SwitchRef self, BoundingSpheref bsphere)"""
        return _osg.SwitchRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(SwitchRef self) -> BoundingSpheref"""
        return _osg.SwitchRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(SwitchRef self)"""
        return _osg.SwitchRef_dirtyBound(self)

    def getBound(self):
        """getBound(SwitchRef self) -> BoundingSpheref"""
        return _osg.SwitchRef_getBound(self)

    def asLOD(self):
        """asLOD(SwitchRef self) -> LOD"""
        return _osg.SwitchRef_asLOD(self)

    def setName(self, *args):
        """
        setName(SwitchRef self, std::string const & name)
        setName(SwitchRef self, char const * name)
        """
        return _osg.SwitchRef_setName(self, *args)

    def getName(self):
        """getName(SwitchRef self) -> std::string const &"""
        return _osg.SwitchRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(SwitchRef self, osg::Object::DataVariance dv)"""
        return _osg.SwitchRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(SwitchRef self) -> osg::Object::DataVariance"""
        return _osg.SwitchRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(SwitchRef self)"""
        return _osg.SwitchRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(SwitchRef self, osg::UserDataContainer * udc)"""
        return _osg.SwitchRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(SwitchRef self) -> osg::UserDataContainer
        getUserDataContainer(SwitchRef self) -> osg::UserDataContainer const *
        """
        return _osg.SwitchRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(SwitchRef self) -> osg::UserDataContainer *"""
        return _osg.SwitchRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(SwitchRef self, Referenced obj)"""
        return _osg.SwitchRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(SwitchRef self) -> Referenced
        getUserData(SwitchRef self) -> Referenced
        """
        return _osg.SwitchRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(SwitchRef self) -> bool"""
        return _osg.SwitchRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(SwitchRef self) -> OpenThreads::Mutex *"""
        return _osg.SwitchRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(SwitchRef self) -> OpenThreads::Mutex *"""
        return _osg.SwitchRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(SwitchRef self) -> int"""
        return _osg.SwitchRef_ref(self)

    def unref(self):
        """unref(SwitchRef self) -> int"""
        return _osg.SwitchRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(SwitchRef self) -> int"""
        return _osg.SwitchRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(SwitchRef self) -> int"""
        return _osg.SwitchRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(SwitchRef self) -> osg::ObserverSet *"""
        return _osg.SwitchRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(SwitchRef self) -> osg::ObserverSet *"""
        return _osg.SwitchRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(SwitchRef self, osg::Observer * observer)"""
        return _osg.SwitchRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(SwitchRef self, osg::Observer * observer)"""
        return _osg.SwitchRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(SwitchRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.SwitchRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(SwitchRef self) -> bool"""
        return _osg.SwitchRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(SwitchRef self, DeleteHandler handler)"""
        return _osg.SwitchRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(SwitchRef self) -> DeleteHandler"""
        return _osg.SwitchRef_getDeleteHandler(self)

SwitchRef_swigregister = _osg.SwitchRef_swigregister
SwitchRef_swigregister(SwitchRef)

class LODRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::LOD)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LODRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LODRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::LOD)> self) -> LODRef
        __init__(osg::ref_ptr<(osg::LOD)> self, LOD ptr) -> LODRef
        __init__(osg::ref_ptr<(osg::LOD)> self, LODRef rp) -> LODRef
        __init__(osg::ref_ptr<(osg::LOD)> self, osg::observer_ptr< osg::LOD > & optr) -> LODRef
        """
        this = _osg.new_LODRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_LODRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(LODRef self) -> LOD"""
        return _osg.LODRef___ref__(self)

    def __deref__(self):
        """__deref__(LODRef self) -> LOD"""
        return _osg.LODRef___deref__(self)

    def get(self):
        """get(LODRef self) -> LOD"""
        return _osg.LODRef_get(self)

    def valid(self):
        """valid(LODRef self) -> bool"""
        return _osg.LODRef_valid(self)

    def release(self):
        """release(LODRef self) -> LOD"""
        return _osg.LODRef_release(self)

    def swap(self, *args):
        """swap(LODRef self, LODRef rp)"""
        return _osg.LODRef_swap(self, *args)

    def cloneType(self):
        """cloneType(LODRef self) -> Object"""
        return _osg.LODRef_cloneType(self)

    def clone(self, *args):
        """clone(LODRef self, CopyOp copyop) -> Object"""
        return _osg.LODRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(LODRef self, Object obj) -> bool"""
        return _osg.LODRef_isSameKindAs(self, *args)

    def className(self):
        """className(LODRef self) -> char const *"""
        return _osg.LODRef_className(self)

    def libraryName(self):
        """libraryName(LODRef self) -> char const *"""
        return _osg.LODRef_libraryName(self)

    def accept(self, *args):
        """accept(LODRef self, NodeVisitor nv)"""
        return _osg.LODRef_accept(self, *args)

    def traverse(self, *args):
        """traverse(LODRef self, NodeVisitor nv)"""
        return _osg.LODRef_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(LODRef self, Node child) -> bool
        addChild(LODRef self, Node child, float min, float max) -> bool
        """
        return _osg.LODRef_addChild(self, *args)

    def removeChildren(self, *args):
        """
        removeChildren(LODRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChildren(LODRef self, unsigned int pos) -> bool
        """
        return _osg.LODRef_removeChildren(self, *args)

    def setCenterMode(self, *args):
        """setCenterMode(LODRef self, osg::LOD::CenterMode mode)"""
        return _osg.LODRef_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(LODRef self) -> osg::LOD::CenterMode"""
        return _osg.LODRef_getCenterMode(self)

    def setRangeMode(self, *args):
        """setRangeMode(LODRef self, osg::LOD::RangeMode mode)"""
        return _osg.LODRef_setRangeMode(self, *args)

    def getRangeMode(self):
        """getRangeMode(LODRef self) -> osg::LOD::RangeMode"""
        return _osg.LODRef_getRangeMode(self)

    def setRange(self, *args):
        """setRange(LODRef self, unsigned int childNo, float min, float max)"""
        return _osg.LODRef_setRange(self, *args)

    def getMinRange(self, *args):
        """getMinRange(LODRef self, unsigned int childNo) -> float"""
        return _osg.LODRef_getMinRange(self, *args)

    def getMaxRange(self, *args):
        """getMaxRange(LODRef self, unsigned int childNo) -> float"""
        return _osg.LODRef_getMaxRange(self, *args)

    def getNumRanges(self):
        """getNumRanges(LODRef self) -> unsigned int"""
        return _osg.LODRef_getNumRanges(self)

    def setRangeList(self, *args):
        """setRangeList(LODRef self, osg::LOD::RangeList const & rangeList)"""
        return _osg.LODRef_setRangeList(self, *args)

    def getRangeList(self):
        """getRangeList(LODRef self) -> osg::LOD::RangeList const &"""
        return _osg.LODRef_getRangeList(self)

    def computeBound(self):
        """computeBound(LODRef self) -> BoundingSpheref"""
        return _osg.LODRef_computeBound(self)

    def getCenter(self):
        """getCenter(LODRef self) -> Vec3f"""
        return _osg.LODRef_getCenter(self)

    def setCenter(self, *args):
        """setCenter(LODRef self, Vec3f center)"""
        return _osg.LODRef_setCenter(self, *args)

    def getRadius(self):
        """getRadius(LODRef self) -> float"""
        return _osg.LODRef_getRadius(self)

    def setRadius(self, *args):
        """setRadius(LODRef self, float radius)"""
        return _osg.LODRef_setRadius(self, *args)

    def asPagedLOD(self):
        """asPagedLOD(LODRef self) -> PagedLOD"""
        return _osg.LODRef_asPagedLOD(self)

    def asGroup(self, *args):
        """
        asGroup(LODRef self) -> Group
        asGroup(LODRef self) -> Group
        """
        return _osg.LODRef_asGroup(self, *args)

    def insertChild(self, *args):
        """insertChild(LODRef self, unsigned int index, Node child) -> bool"""
        return _osg.LODRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(LODRef self, Node child) -> bool
        removeChild(LODRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(LODRef self, unsigned int pos) -> bool
        """
        return _osg.LODRef_removeChild(self, *args)

    def replaceChild(self, *args):
        """replaceChild(LODRef self, Node origChild, Node newChild) -> bool"""
        return _osg.LODRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(LODRef self) -> unsigned int"""
        return _osg.LODRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(LODRef self, unsigned int i, Node node) -> bool"""
        return _osg.LODRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(LODRef self, unsigned int i) -> Node
        getChild(LODRef self, unsigned int i) -> Node
        """
        return _osg.LODRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(LODRef self, Node node) -> bool"""
        return _osg.LODRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(LODRef self, Node node) -> unsigned int"""
        return _osg.LODRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(LODRef self, bool threadSafe)"""
        return _osg.LODRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(LODRef self, unsigned int maxSize)"""
        return _osg.LODRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(LODRef self, State arg0=None)
        releaseGLObjects(LODRef self)
        """
        return _osg.LODRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(LODRef self) -> ProxyNode"""
        return _osg.LODRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(LODRef self) -> Transform
        asTransform(LODRef self) -> Transform
        """
        return _osg.LODRef_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(LODRef self) -> Camera
        asCamera(LODRef self) -> Camera
        """
        return _osg.LODRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(LODRef self) -> Switch
        asSwitch(LODRef self) -> Switch
        """
        return _osg.LODRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(LODRef self) -> Geode
        asGeode(LODRef self) -> Geode
        """
        return _osg.LODRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(LODRef self) -> osgTerrain::Terrain
        asTerrain(LODRef self) -> osgTerrain::Terrain const *
        """
        return _osg.LODRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(LODRef self, NodeVisitor nv)"""
        return _osg.LODRef_ascend(self, *args)

    def getParents(self):
        """getParents(LODRef self) -> vectorGroup"""
        return _osg.LODRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(LODRef self, unsigned int i) -> Group
        getParent(LODRef self, unsigned int i) -> Group
        """
        return _osg.LODRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(LODRef self) -> unsigned int"""
        return _osg.LODRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(LODRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(LODRef self) -> osg::NodePathList
        """
        return _osg.LODRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(LODRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(LODRef self) -> vectorMatrix
        """
        return _osg.LODRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(LODRef self, NodeCallback nc)"""
        return _osg.LODRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(LODRef self) -> NodeCallback
        getUpdateCallback(LODRef self) -> NodeCallback
        """
        return _osg.LODRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(LODRef self, NodeCallback nc)"""
        return _osg.LODRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(LODRef self, NodeCallback nc)"""
        return _osg.LODRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(LODRef self) -> unsigned int"""
        return _osg.LODRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(LODRef self, NodeCallback nc)"""
        return _osg.LODRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(LODRef self) -> NodeCallback
        getEventCallback(LODRef self) -> NodeCallback
        """
        return _osg.LODRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(LODRef self, NodeCallback nc)"""
        return _osg.LODRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(LODRef self, NodeCallback nc)"""
        return _osg.LODRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(LODRef self) -> unsigned int"""
        return _osg.LODRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(LODRef self, NodeCallback nc)"""
        return _osg.LODRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(LODRef self) -> NodeCallback
        getCullCallback(LODRef self) -> NodeCallback
        """
        return _osg.LODRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(LODRef self, NodeCallback nc)"""
        return _osg.LODRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(LODRef self, NodeCallback nc)"""
        return _osg.LODRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(LODRef self, bool active)"""
        return _osg.LODRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(LODRef self) -> bool"""
        return _osg.LODRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(LODRef self) -> unsigned int"""
        return _osg.LODRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(LODRef self) -> bool"""
        return _osg.LODRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(LODRef self) -> unsigned int"""
        return _osg.LODRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(LODRef self) -> bool"""
        return _osg.LODRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(LODRef self, osg::Node::NodeMask nm)"""
        return _osg.LODRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(LODRef self) -> osg::Node::NodeMask"""
        return _osg.LODRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(LODRef self, StateSet stateset)"""
        return _osg.LODRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(LODRef self) -> StateSet"""
        return _osg.LODRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(LODRef self) -> StateSet
        getStateSet(LODRef self) -> StateSet
        """
        return _osg.LODRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(LODRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.LODRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(LODRef self) -> osg::Node::DescriptionList
        getDescriptions(LODRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.LODRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(LODRef self, unsigned int i) -> std::string const
        getDescription(LODRef self, unsigned int i) -> std::string &
        """
        return _osg.LODRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(LODRef self) -> unsigned int"""
        return _osg.LODRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(LODRef self, std::string const & desc)"""
        return _osg.LODRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(LODRef self, BoundingSpheref bsphere)"""
        return _osg.LODRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(LODRef self) -> BoundingSpheref"""
        return _osg.LODRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(LODRef self)"""
        return _osg.LODRef_dirtyBound(self)

    def getBound(self):
        """getBound(LODRef self) -> BoundingSpheref"""
        return _osg.LODRef_getBound(self)

    def asLOD(self):
        """asLOD(LODRef self) -> LOD"""
        return _osg.LODRef_asLOD(self)

    def setName(self, *args):
        """
        setName(LODRef self, std::string const & name)
        setName(LODRef self, char const * name)
        """
        return _osg.LODRef_setName(self, *args)

    def getName(self):
        """getName(LODRef self) -> std::string const &"""
        return _osg.LODRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(LODRef self, osg::Object::DataVariance dv)"""
        return _osg.LODRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(LODRef self) -> osg::Object::DataVariance"""
        return _osg.LODRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(LODRef self)"""
        return _osg.LODRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(LODRef self, osg::UserDataContainer * udc)"""
        return _osg.LODRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(LODRef self) -> osg::UserDataContainer
        getUserDataContainer(LODRef self) -> osg::UserDataContainer const *
        """
        return _osg.LODRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(LODRef self) -> osg::UserDataContainer *"""
        return _osg.LODRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(LODRef self, Referenced obj)"""
        return _osg.LODRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(LODRef self) -> Referenced
        getUserData(LODRef self) -> Referenced
        """
        return _osg.LODRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(LODRef self) -> bool"""
        return _osg.LODRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(LODRef self) -> OpenThreads::Mutex *"""
        return _osg.LODRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(LODRef self) -> OpenThreads::Mutex *"""
        return _osg.LODRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(LODRef self) -> int"""
        return _osg.LODRef_ref(self)

    def unref(self):
        """unref(LODRef self) -> int"""
        return _osg.LODRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(LODRef self) -> int"""
        return _osg.LODRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(LODRef self) -> int"""
        return _osg.LODRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(LODRef self) -> osg::ObserverSet *"""
        return _osg.LODRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(LODRef self) -> osg::ObserverSet *"""
        return _osg.LODRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(LODRef self, osg::Observer * observer)"""
        return _osg.LODRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(LODRef self, osg::Observer * observer)"""
        return _osg.LODRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(LODRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.LODRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(LODRef self) -> bool"""
        return _osg.LODRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(LODRef self, DeleteHandler handler)"""
        return _osg.LODRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(LODRef self) -> DeleteHandler"""
        return _osg.LODRef_getDeleteHandler(self)

LODRef_swigregister = _osg.LODRef_swigregister
LODRef_swigregister(LODRef)

class PagedLODRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::PagedLOD)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PagedLODRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PagedLODRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::PagedLOD)> self) -> PagedLODRef
        __init__(osg::ref_ptr<(osg::PagedLOD)> self, PagedLOD ptr) -> PagedLODRef
        __init__(osg::ref_ptr<(osg::PagedLOD)> self, PagedLODRef rp) -> PagedLODRef
        __init__(osg::ref_ptr<(osg::PagedLOD)> self, osg::observer_ptr< osg::PagedLOD > & optr) -> PagedLODRef
        """
        this = _osg.new_PagedLODRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_PagedLODRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(PagedLODRef self) -> PagedLOD"""
        return _osg.PagedLODRef___ref__(self)

    def __deref__(self):
        """__deref__(PagedLODRef self) -> PagedLOD"""
        return _osg.PagedLODRef___deref__(self)

    def get(self):
        """get(PagedLODRef self) -> PagedLOD"""
        return _osg.PagedLODRef_get(self)

    def valid(self):
        """valid(PagedLODRef self) -> bool"""
        return _osg.PagedLODRef_valid(self)

    def release(self):
        """release(PagedLODRef self) -> PagedLOD"""
        return _osg.PagedLODRef_release(self)

    def swap(self, *args):
        """swap(PagedLODRef self, PagedLODRef rp)"""
        return _osg.PagedLODRef_swap(self, *args)

    def cloneType(self):
        """cloneType(PagedLODRef self) -> Object"""
        return _osg.PagedLODRef_cloneType(self)

    def clone(self, *args):
        """clone(PagedLODRef self, CopyOp copyop) -> Object"""
        return _osg.PagedLODRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(PagedLODRef self, Object obj) -> bool"""
        return _osg.PagedLODRef_isSameKindAs(self, *args)

    def className(self):
        """className(PagedLODRef self) -> char const *"""
        return _osg.PagedLODRef_className(self)

    def libraryName(self):
        """libraryName(PagedLODRef self) -> char const *"""
        return _osg.PagedLODRef_libraryName(self)

    def accept(self, *args):
        """accept(PagedLODRef self, NodeVisitor nv)"""
        return _osg.PagedLODRef_accept(self, *args)

    def traverse(self, *args):
        """traverse(PagedLODRef self, NodeVisitor nv)"""
        return _osg.PagedLODRef_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(PagedLODRef self, Node child) -> bool
        addChild(PagedLODRef self, Node child, float min, float max) -> bool
        addChild(PagedLODRef self, Node child, float min, float max, std::string const & filename, float priorityOffset=0.0, 
            float priorityScale=1.0) -> bool
        addChild(PagedLODRef self, Node child, float min, float max, std::string const & filename, float priorityOffset=0.0) -> bool
        addChild(PagedLODRef self, Node child, float min, float max, std::string const & filename) -> bool
        """
        return _osg.PagedLODRef_addChild(self, *args)

    def removeChildren(self, *args):
        """
        removeChildren(PagedLODRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChildren(PagedLODRef self, unsigned int pos) -> bool
        """
        return _osg.PagedLODRef_removeChildren(self, *args)

    def setDatabaseOptions(self, *args):
        """setDatabaseOptions(PagedLODRef self, Referenced options)"""
        return _osg.PagedLODRef_setDatabaseOptions(self, *args)

    def getDatabaseOptions(self, *args):
        """
        getDatabaseOptions(PagedLODRef self) -> Referenced
        getDatabaseOptions(PagedLODRef self) -> Referenced
        """
        return _osg.PagedLODRef_getDatabaseOptions(self, *args)

    def setDatabasePath(self, *args):
        """setDatabasePath(PagedLODRef self, std::string const & path)"""
        return _osg.PagedLODRef_setDatabasePath(self, *args)

    def getDatabasePath(self):
        """getDatabasePath(PagedLODRef self) -> std::string const &"""
        return _osg.PagedLODRef_getDatabasePath(self)

    def setFileName(self, *args):
        """setFileName(PagedLODRef self, unsigned int childNo, std::string const & filename)"""
        return _osg.PagedLODRef_setFileName(self, *args)

    def getFileName(self, *args):
        """getFileName(PagedLODRef self, unsigned int childNo) -> std::string const &"""
        return _osg.PagedLODRef_getFileName(self, *args)

    def getNumFileNames(self):
        """getNumFileNames(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumFileNames(self)

    def setPriorityOffset(self, *args):
        """setPriorityOffset(PagedLODRef self, unsigned int childNo, float priorityOffset)"""
        return _osg.PagedLODRef_setPriorityOffset(self, *args)

    def getPriorityOffset(self, *args):
        """getPriorityOffset(PagedLODRef self, unsigned int childNo) -> float"""
        return _osg.PagedLODRef_getPriorityOffset(self, *args)

    def getNumPriorityOffsets(self):
        """getNumPriorityOffsets(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumPriorityOffsets(self)

    def setPriorityScale(self, *args):
        """setPriorityScale(PagedLODRef self, unsigned int childNo, float priorityScale)"""
        return _osg.PagedLODRef_setPriorityScale(self, *args)

    def getPriorityScale(self, *args):
        """getPriorityScale(PagedLODRef self, unsigned int childNo) -> float"""
        return _osg.PagedLODRef_getPriorityScale(self, *args)

    def getNumPriorityScales(self):
        """getNumPriorityScales(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumPriorityScales(self)

    def setMinimumExpiryTime(self, *args):
        """setMinimumExpiryTime(PagedLODRef self, unsigned int childNo, double minTime)"""
        return _osg.PagedLODRef_setMinimumExpiryTime(self, *args)

    def getMinimumExpiryTime(self, *args):
        """getMinimumExpiryTime(PagedLODRef self, unsigned int childNo) -> double"""
        return _osg.PagedLODRef_getMinimumExpiryTime(self, *args)

    def getNumMinimumExpiryTimes(self):
        """getNumMinimumExpiryTimes(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumMinimumExpiryTimes(self)

    def setMinimumExpiryFrames(self, *args):
        """setMinimumExpiryFrames(PagedLODRef self, unsigned int childNo, unsigned int minFrames)"""
        return _osg.PagedLODRef_setMinimumExpiryFrames(self, *args)

    def getMinimumExpiryFrames(self, *args):
        """getMinimumExpiryFrames(PagedLODRef self, unsigned int childNo) -> unsigned int"""
        return _osg.PagedLODRef_getMinimumExpiryFrames(self, *args)

    def getNumMinimumExpiryFrames(self):
        """getNumMinimumExpiryFrames(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumMinimumExpiryFrames(self)

    def setTimeStamp(self, *args):
        """setTimeStamp(PagedLODRef self, unsigned int childNo, double timeStamp)"""
        return _osg.PagedLODRef_setTimeStamp(self, *args)

    def getTimeStamp(self, *args):
        """getTimeStamp(PagedLODRef self, unsigned int childNo) -> double"""
        return _osg.PagedLODRef_getTimeStamp(self, *args)

    def getNumTimeStamps(self):
        """getNumTimeStamps(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumTimeStamps(self)

    def setFrameNumber(self, *args):
        """setFrameNumber(PagedLODRef self, unsigned int childNo, unsigned int frameNumber)"""
        return _osg.PagedLODRef_setFrameNumber(self, *args)

    def getFrameNumber(self, *args):
        """getFrameNumber(PagedLODRef self, unsigned int childNo) -> unsigned int"""
        return _osg.PagedLODRef_getFrameNumber(self, *args)

    def getNumFrameNumbers(self):
        """getNumFrameNumbers(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumFrameNumbers(self)

    def getDatabaseRequest(self, *args):
        """
        getDatabaseRequest(PagedLODRef self, unsigned int childNo) -> osg::ref_ptr< osg::Referenced >
        getDatabaseRequest(PagedLODRef self, unsigned int childNo) -> osg::ref_ptr< osg::Referenced > const &
        """
        return _osg.PagedLODRef_getDatabaseRequest(self, *args)

    def setFrameNumberOfLastTraversal(self, *args):
        """setFrameNumberOfLastTraversal(PagedLODRef self, unsigned int frameNumber)"""
        return _osg.PagedLODRef_setFrameNumberOfLastTraversal(self, *args)

    def getFrameNumberOfLastTraversal(self):
        """getFrameNumberOfLastTraversal(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getFrameNumberOfLastTraversal(self)

    def setNumChildrenThatCannotBeExpired(self, *args):
        """setNumChildrenThatCannotBeExpired(PagedLODRef self, unsigned int num)"""
        return _osg.PagedLODRef_setNumChildrenThatCannotBeExpired(self, *args)

    def getNumChildrenThatCannotBeExpired(self):
        """getNumChildrenThatCannotBeExpired(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenThatCannotBeExpired(self)

    def setDisableExternalChildrenPaging(self, *args):
        """setDisableExternalChildrenPaging(PagedLODRef self, bool flag)"""
        return _osg.PagedLODRef_setDisableExternalChildrenPaging(self, *args)

    def getDisableExternalChildrenPaging(self):
        """getDisableExternalChildrenPaging(PagedLODRef self) -> bool"""
        return _osg.PagedLODRef_getDisableExternalChildrenPaging(self)

    def removeExpiredChildren(self, *args):
        """removeExpiredChildren(PagedLODRef self, double expiryTime, unsigned int expiryFrame, osg::NodeList & removedChildren) -> bool"""
        return _osg.PagedLODRef_removeExpiredChildren(self, *args)

    def getCenter(self):
        """getCenter(PagedLODRef self) -> Vec3f"""
        return _osg.PagedLODRef_getCenter(self)

    def setCenter(self, *args):
        """setCenter(PagedLODRef self, Vec3f center)"""
        return _osg.PagedLODRef_setCenter(self, *args)

    def getRadius(self):
        """getRadius(PagedLODRef self) -> float"""
        return _osg.PagedLODRef_getRadius(self)

    def setRadius(self, *args):
        """setRadius(PagedLODRef self, float radius)"""
        return _osg.PagedLODRef_setRadius(self, *args)

    def setCenterMode(self, *args):
        """setCenterMode(PagedLODRef self, osg::LOD::CenterMode mode)"""
        return _osg.PagedLODRef_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(PagedLODRef self) -> osg::LOD::CenterMode"""
        return _osg.PagedLODRef_getCenterMode(self)

    def setRangeMode(self, *args):
        """setRangeMode(PagedLODRef self, osg::LOD::RangeMode mode)"""
        return _osg.PagedLODRef_setRangeMode(self, *args)

    def getRangeMode(self):
        """getRangeMode(PagedLODRef self) -> osg::LOD::RangeMode"""
        return _osg.PagedLODRef_getRangeMode(self)

    def setRange(self, *args):
        """setRange(PagedLODRef self, unsigned int childNo, float min, float max)"""
        return _osg.PagedLODRef_setRange(self, *args)

    def getMinRange(self, *args):
        """getMinRange(PagedLODRef self, unsigned int childNo) -> float"""
        return _osg.PagedLODRef_getMinRange(self, *args)

    def getMaxRange(self, *args):
        """getMaxRange(PagedLODRef self, unsigned int childNo) -> float"""
        return _osg.PagedLODRef_getMaxRange(self, *args)

    def getNumRanges(self):
        """getNumRanges(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumRanges(self)

    def setRangeList(self, *args):
        """setRangeList(PagedLODRef self, osg::LOD::RangeList const & rangeList)"""
        return _osg.PagedLODRef_setRangeList(self, *args)

    def getRangeList(self):
        """getRangeList(PagedLODRef self) -> osg::LOD::RangeList const &"""
        return _osg.PagedLODRef_getRangeList(self)

    def computeBound(self):
        """computeBound(PagedLODRef self) -> BoundingSpheref"""
        return _osg.PagedLODRef_computeBound(self)

    def asPagedLOD(self):
        """asPagedLOD(PagedLODRef self) -> PagedLOD"""
        return _osg.PagedLODRef_asPagedLOD(self)

    def asGroup(self, *args):
        """
        asGroup(PagedLODRef self) -> Group
        asGroup(PagedLODRef self) -> Group
        """
        return _osg.PagedLODRef_asGroup(self, *args)

    def insertChild(self, *args):
        """insertChild(PagedLODRef self, unsigned int index, Node child) -> bool"""
        return _osg.PagedLODRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(PagedLODRef self, Node child) -> bool
        removeChild(PagedLODRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(PagedLODRef self, unsigned int pos) -> bool
        """
        return _osg.PagedLODRef_removeChild(self, *args)

    def replaceChild(self, *args):
        """replaceChild(PagedLODRef self, Node origChild, Node newChild) -> bool"""
        return _osg.PagedLODRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(PagedLODRef self, unsigned int i, Node node) -> bool"""
        return _osg.PagedLODRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(PagedLODRef self, unsigned int i) -> Node
        getChild(PagedLODRef self, unsigned int i) -> Node
        """
        return _osg.PagedLODRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(PagedLODRef self, Node node) -> bool"""
        return _osg.PagedLODRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(PagedLODRef self, Node node) -> unsigned int"""
        return _osg.PagedLODRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(PagedLODRef self, bool threadSafe)"""
        return _osg.PagedLODRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(PagedLODRef self, unsigned int maxSize)"""
        return _osg.PagedLODRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(PagedLODRef self, State arg0=None)
        releaseGLObjects(PagedLODRef self)
        """
        return _osg.PagedLODRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(PagedLODRef self) -> ProxyNode"""
        return _osg.PagedLODRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(PagedLODRef self) -> Transform
        asTransform(PagedLODRef self) -> Transform
        """
        return _osg.PagedLODRef_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(PagedLODRef self) -> Camera
        asCamera(PagedLODRef self) -> Camera
        """
        return _osg.PagedLODRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(PagedLODRef self) -> Switch
        asSwitch(PagedLODRef self) -> Switch
        """
        return _osg.PagedLODRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(PagedLODRef self) -> Geode
        asGeode(PagedLODRef self) -> Geode
        """
        return _osg.PagedLODRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(PagedLODRef self) -> osgTerrain::Terrain
        asTerrain(PagedLODRef self) -> osgTerrain::Terrain const *
        """
        return _osg.PagedLODRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(PagedLODRef self, NodeVisitor nv)"""
        return _osg.PagedLODRef_ascend(self, *args)

    def getParents(self):
        """getParents(PagedLODRef self) -> vectorGroup"""
        return _osg.PagedLODRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(PagedLODRef self, unsigned int i) -> Group
        getParent(PagedLODRef self, unsigned int i) -> Group
        """
        return _osg.PagedLODRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(PagedLODRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(PagedLODRef self) -> osg::NodePathList
        """
        return _osg.PagedLODRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(PagedLODRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(PagedLODRef self) -> vectorMatrix
        """
        return _osg.PagedLODRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(PagedLODRef self, NodeCallback nc)"""
        return _osg.PagedLODRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(PagedLODRef self) -> NodeCallback
        getUpdateCallback(PagedLODRef self) -> NodeCallback
        """
        return _osg.PagedLODRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(PagedLODRef self, NodeCallback nc)"""
        return _osg.PagedLODRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(PagedLODRef self, NodeCallback nc)"""
        return _osg.PagedLODRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(PagedLODRef self, NodeCallback nc)"""
        return _osg.PagedLODRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(PagedLODRef self) -> NodeCallback
        getEventCallback(PagedLODRef self) -> NodeCallback
        """
        return _osg.PagedLODRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(PagedLODRef self, NodeCallback nc)"""
        return _osg.PagedLODRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(PagedLODRef self, NodeCallback nc)"""
        return _osg.PagedLODRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(PagedLODRef self, NodeCallback nc)"""
        return _osg.PagedLODRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(PagedLODRef self) -> NodeCallback
        getCullCallback(PagedLODRef self) -> NodeCallback
        """
        return _osg.PagedLODRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(PagedLODRef self, NodeCallback nc)"""
        return _osg.PagedLODRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(PagedLODRef self, NodeCallback nc)"""
        return _osg.PagedLODRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(PagedLODRef self, bool active)"""
        return _osg.PagedLODRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(PagedLODRef self) -> bool"""
        return _osg.PagedLODRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(PagedLODRef self) -> bool"""
        return _osg.PagedLODRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(PagedLODRef self) -> bool"""
        return _osg.PagedLODRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(PagedLODRef self, osg::Node::NodeMask nm)"""
        return _osg.PagedLODRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(PagedLODRef self) -> osg::Node::NodeMask"""
        return _osg.PagedLODRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(PagedLODRef self, StateSet stateset)"""
        return _osg.PagedLODRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(PagedLODRef self) -> StateSet"""
        return _osg.PagedLODRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(PagedLODRef self) -> StateSet
        getStateSet(PagedLODRef self) -> StateSet
        """
        return _osg.PagedLODRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(PagedLODRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.PagedLODRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(PagedLODRef self) -> osg::Node::DescriptionList
        getDescriptions(PagedLODRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.PagedLODRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(PagedLODRef self, unsigned int i) -> std::string const
        getDescription(PagedLODRef self, unsigned int i) -> std::string &
        """
        return _osg.PagedLODRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(PagedLODRef self) -> unsigned int"""
        return _osg.PagedLODRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(PagedLODRef self, std::string const & desc)"""
        return _osg.PagedLODRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(PagedLODRef self, BoundingSpheref bsphere)"""
        return _osg.PagedLODRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(PagedLODRef self) -> BoundingSpheref"""
        return _osg.PagedLODRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(PagedLODRef self)"""
        return _osg.PagedLODRef_dirtyBound(self)

    def getBound(self):
        """getBound(PagedLODRef self) -> BoundingSpheref"""
        return _osg.PagedLODRef_getBound(self)

    def asLOD(self):
        """asLOD(PagedLODRef self) -> LOD"""
        return _osg.PagedLODRef_asLOD(self)

    def setName(self, *args):
        """
        setName(PagedLODRef self, std::string const & name)
        setName(PagedLODRef self, char const * name)
        """
        return _osg.PagedLODRef_setName(self, *args)

    def getName(self):
        """getName(PagedLODRef self) -> std::string const &"""
        return _osg.PagedLODRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(PagedLODRef self, osg::Object::DataVariance dv)"""
        return _osg.PagedLODRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(PagedLODRef self) -> osg::Object::DataVariance"""
        return _osg.PagedLODRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(PagedLODRef self)"""
        return _osg.PagedLODRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(PagedLODRef self, osg::UserDataContainer * udc)"""
        return _osg.PagedLODRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(PagedLODRef self) -> osg::UserDataContainer
        getUserDataContainer(PagedLODRef self) -> osg::UserDataContainer const *
        """
        return _osg.PagedLODRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(PagedLODRef self) -> osg::UserDataContainer *"""
        return _osg.PagedLODRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(PagedLODRef self, Referenced obj)"""
        return _osg.PagedLODRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(PagedLODRef self) -> Referenced
        getUserData(PagedLODRef self) -> Referenced
        """
        return _osg.PagedLODRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(PagedLODRef self) -> bool"""
        return _osg.PagedLODRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(PagedLODRef self) -> OpenThreads::Mutex *"""
        return _osg.PagedLODRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(PagedLODRef self) -> OpenThreads::Mutex *"""
        return _osg.PagedLODRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(PagedLODRef self) -> int"""
        return _osg.PagedLODRef_ref(self)

    def unref(self):
        """unref(PagedLODRef self) -> int"""
        return _osg.PagedLODRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(PagedLODRef self) -> int"""
        return _osg.PagedLODRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(PagedLODRef self) -> int"""
        return _osg.PagedLODRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(PagedLODRef self) -> osg::ObserverSet *"""
        return _osg.PagedLODRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(PagedLODRef self) -> osg::ObserverSet *"""
        return _osg.PagedLODRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(PagedLODRef self, osg::Observer * observer)"""
        return _osg.PagedLODRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(PagedLODRef self, osg::Observer * observer)"""
        return _osg.PagedLODRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(PagedLODRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.PagedLODRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(PagedLODRef self) -> bool"""
        return _osg.PagedLODRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(PagedLODRef self, DeleteHandler handler)"""
        return _osg.PagedLODRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(PagedLODRef self) -> DeleteHandler"""
        return _osg.PagedLODRef_getDeleteHandler(self)

PagedLODRef_swigregister = _osg.PagedLODRef_swigregister
PagedLODRef_swigregister(PagedLODRef)

class ProxyNodeRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::ProxyNode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyNodeRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyNodeRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::ProxyNode)> self) -> ProxyNodeRef
        __init__(osg::ref_ptr<(osg::ProxyNode)> self, ProxyNode ptr) -> ProxyNodeRef
        __init__(osg::ref_ptr<(osg::ProxyNode)> self, ProxyNodeRef rp) -> ProxyNodeRef
        __init__(osg::ref_ptr<(osg::ProxyNode)> self, osg::observer_ptr< osg::ProxyNode > & optr) -> ProxyNodeRef
        """
        this = _osg.new_ProxyNodeRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ProxyNodeRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(ProxyNodeRef self) -> ProxyNode"""
        return _osg.ProxyNodeRef___ref__(self)

    def __deref__(self):
        """__deref__(ProxyNodeRef self) -> ProxyNode"""
        return _osg.ProxyNodeRef___deref__(self)

    def get(self):
        """get(ProxyNodeRef self) -> ProxyNode"""
        return _osg.ProxyNodeRef_get(self)

    def valid(self):
        """valid(ProxyNodeRef self) -> bool"""
        return _osg.ProxyNodeRef_valid(self)

    def release(self):
        """release(ProxyNodeRef self) -> ProxyNode"""
        return _osg.ProxyNodeRef_release(self)

    def swap(self, *args):
        """swap(ProxyNodeRef self, ProxyNodeRef rp)"""
        return _osg.ProxyNodeRef_swap(self, *args)

    def cloneType(self):
        """cloneType(ProxyNodeRef self) -> Object"""
        return _osg.ProxyNodeRef_cloneType(self)

    def clone(self, *args):
        """clone(ProxyNodeRef self, CopyOp copyop) -> Object"""
        return _osg.ProxyNodeRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ProxyNodeRef self, Object obj) -> bool"""
        return _osg.ProxyNodeRef_isSameKindAs(self, *args)

    def className(self):
        """className(ProxyNodeRef self) -> char const *"""
        return _osg.ProxyNodeRef_className(self)

    def libraryName(self):
        """libraryName(ProxyNodeRef self) -> char const *"""
        return _osg.ProxyNodeRef_libraryName(self)

    def accept(self, *args):
        """accept(ProxyNodeRef self, NodeVisitor nv)"""
        return _osg.ProxyNodeRef_accept(self, *args)

    def traverse(self, *args):
        """traverse(ProxyNodeRef self, NodeVisitor nv)"""
        return _osg.ProxyNodeRef_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(ProxyNodeRef self, Node child) -> bool
        addChild(ProxyNodeRef self, Node child, std::string const & filename) -> bool
        """
        return _osg.ProxyNodeRef_addChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(ProxyNodeRef self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.ProxyNodeRef_removeChildren(self, *args)

    def setDatabaseOptions(self, *args):
        """setDatabaseOptions(ProxyNodeRef self, Referenced options)"""
        return _osg.ProxyNodeRef_setDatabaseOptions(self, *args)

    def getDatabaseOptions(self, *args):
        """
        getDatabaseOptions(ProxyNodeRef self) -> Referenced
        getDatabaseOptions(ProxyNodeRef self) -> Referenced
        """
        return _osg.ProxyNodeRef_getDatabaseOptions(self, *args)

    def setDatabasePath(self, *args):
        """setDatabasePath(ProxyNodeRef self, std::string const & path)"""
        return _osg.ProxyNodeRef_setDatabasePath(self, *args)

    def getDatabasePath(self):
        """getDatabasePath(ProxyNodeRef self) -> std::string const &"""
        return _osg.ProxyNodeRef_getDatabasePath(self)

    def setFileName(self, *args):
        """setFileName(ProxyNodeRef self, unsigned int childNo, std::string const & filename)"""
        return _osg.ProxyNodeRef_setFileName(self, *args)

    def getFileName(self, *args):
        """getFileName(ProxyNodeRef self, unsigned int childNo) -> std::string const &"""
        return _osg.ProxyNodeRef_getFileName(self, *args)

    def getNumFileNames(self):
        """getNumFileNames(ProxyNodeRef self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumFileNames(self)

    def getDatabaseRequest(self, *args):
        """
        getDatabaseRequest(ProxyNodeRef self, unsigned int childNo) -> osg::ref_ptr< osg::Referenced >
        getDatabaseRequest(ProxyNodeRef self, unsigned int childNo) -> osg::ref_ptr< osg::Referenced > const &
        """
        return _osg.ProxyNodeRef_getDatabaseRequest(self, *args)

    def setCenterMode(self, *args):
        """setCenterMode(ProxyNodeRef self, osg::ProxyNode::CenterMode mode)"""
        return _osg.ProxyNodeRef_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(ProxyNodeRef self) -> osg::ProxyNode::CenterMode"""
        return _osg.ProxyNodeRef_getCenterMode(self)

    def setLoadingExternalReferenceMode(self, *args):
        """setLoadingExternalReferenceMode(ProxyNodeRef self, osg::ProxyNode::LoadingExternalReferenceMode mode)"""
        return _osg.ProxyNodeRef_setLoadingExternalReferenceMode(self, *args)

    def getLoadingExternalReferenceMode(self):
        """getLoadingExternalReferenceMode(ProxyNodeRef self) -> osg::ProxyNode::LoadingExternalReferenceMode"""
        return _osg.ProxyNodeRef_getLoadingExternalReferenceMode(self)

    def computeBound(self):
        """computeBound(ProxyNodeRef self) -> BoundingSpheref"""
        return _osg.ProxyNodeRef_computeBound(self)

    def getCenter(self):
        """getCenter(ProxyNodeRef self) -> Vec3f"""
        return _osg.ProxyNodeRef_getCenter(self)

    def setCenter(self, *args):
        """setCenter(ProxyNodeRef self, Vec3f center)"""
        return _osg.ProxyNodeRef_setCenter(self, *args)

    def getRadius(self):
        """getRadius(ProxyNodeRef self) -> float"""
        return _osg.ProxyNodeRef_getRadius(self)

    def setRadius(self, *args):
        """setRadius(ProxyNodeRef self, float radius)"""
        return _osg.ProxyNodeRef_setRadius(self, *args)

    def asGroup(self, *args):
        """
        asGroup(ProxyNodeRef self) -> Group
        asGroup(ProxyNodeRef self) -> Group
        """
        return _osg.ProxyNodeRef_asGroup(self, *args)

    def insertChild(self, *args):
        """insertChild(ProxyNodeRef self, unsigned int index, Node child) -> bool"""
        return _osg.ProxyNodeRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(ProxyNodeRef self, Node child) -> bool
        removeChild(ProxyNodeRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(ProxyNodeRef self, unsigned int pos) -> bool
        """
        return _osg.ProxyNodeRef_removeChild(self, *args)

    def replaceChild(self, *args):
        """replaceChild(ProxyNodeRef self, Node origChild, Node newChild) -> bool"""
        return _osg.ProxyNodeRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(ProxyNodeRef self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(ProxyNodeRef self, unsigned int i, Node node) -> bool"""
        return _osg.ProxyNodeRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(ProxyNodeRef self, unsigned int i) -> Node
        getChild(ProxyNodeRef self, unsigned int i) -> Node
        """
        return _osg.ProxyNodeRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(ProxyNodeRef self, Node node) -> bool"""
        return _osg.ProxyNodeRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(ProxyNodeRef self, Node node) -> unsigned int"""
        return _osg.ProxyNodeRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(ProxyNodeRef self, bool threadSafe)"""
        return _osg.ProxyNodeRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(ProxyNodeRef self, unsigned int maxSize)"""
        return _osg.ProxyNodeRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(ProxyNodeRef self, State arg0=None)
        releaseGLObjects(ProxyNodeRef self)
        """
        return _osg.ProxyNodeRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(ProxyNodeRef self) -> ProxyNode"""
        return _osg.ProxyNodeRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(ProxyNodeRef self) -> Transform
        asTransform(ProxyNodeRef self) -> Transform
        """
        return _osg.ProxyNodeRef_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(ProxyNodeRef self) -> Camera
        asCamera(ProxyNodeRef self) -> Camera
        """
        return _osg.ProxyNodeRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(ProxyNodeRef self) -> Switch
        asSwitch(ProxyNodeRef self) -> Switch
        """
        return _osg.ProxyNodeRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(ProxyNodeRef self) -> Geode
        asGeode(ProxyNodeRef self) -> Geode
        """
        return _osg.ProxyNodeRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(ProxyNodeRef self) -> osgTerrain::Terrain
        asTerrain(ProxyNodeRef self) -> osgTerrain::Terrain const *
        """
        return _osg.ProxyNodeRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(ProxyNodeRef self, NodeVisitor nv)"""
        return _osg.ProxyNodeRef_ascend(self, *args)

    def getParents(self):
        """getParents(ProxyNodeRef self) -> vectorGroup"""
        return _osg.ProxyNodeRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(ProxyNodeRef self, unsigned int i) -> Group
        getParent(ProxyNodeRef self, unsigned int i) -> Group
        """
        return _osg.ProxyNodeRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(ProxyNodeRef self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(ProxyNodeRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(ProxyNodeRef self) -> osg::NodePathList
        """
        return _osg.ProxyNodeRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(ProxyNodeRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(ProxyNodeRef self) -> vectorMatrix
        """
        return _osg.ProxyNodeRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(ProxyNodeRef self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(ProxyNodeRef self) -> NodeCallback
        getUpdateCallback(ProxyNodeRef self) -> NodeCallback
        """
        return _osg.ProxyNodeRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(ProxyNodeRef self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(ProxyNodeRef self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(ProxyNodeRef self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(ProxyNodeRef self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(ProxyNodeRef self) -> NodeCallback
        getEventCallback(ProxyNodeRef self) -> NodeCallback
        """
        return _osg.ProxyNodeRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(ProxyNodeRef self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(ProxyNodeRef self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(ProxyNodeRef self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(ProxyNodeRef self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(ProxyNodeRef self) -> NodeCallback
        getCullCallback(ProxyNodeRef self) -> NodeCallback
        """
        return _osg.ProxyNodeRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(ProxyNodeRef self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(ProxyNodeRef self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(ProxyNodeRef self, bool active)"""
        return _osg.ProxyNodeRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(ProxyNodeRef self) -> bool"""
        return _osg.ProxyNodeRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(ProxyNodeRef self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(ProxyNodeRef self) -> bool"""
        return _osg.ProxyNodeRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(ProxyNodeRef self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(ProxyNodeRef self) -> bool"""
        return _osg.ProxyNodeRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(ProxyNodeRef self, osg::Node::NodeMask nm)"""
        return _osg.ProxyNodeRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(ProxyNodeRef self) -> osg::Node::NodeMask"""
        return _osg.ProxyNodeRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(ProxyNodeRef self, StateSet stateset)"""
        return _osg.ProxyNodeRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(ProxyNodeRef self) -> StateSet"""
        return _osg.ProxyNodeRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(ProxyNodeRef self) -> StateSet
        getStateSet(ProxyNodeRef self) -> StateSet
        """
        return _osg.ProxyNodeRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(ProxyNodeRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.ProxyNodeRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(ProxyNodeRef self) -> osg::Node::DescriptionList
        getDescriptions(ProxyNodeRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.ProxyNodeRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(ProxyNodeRef self, unsigned int i) -> std::string const
        getDescription(ProxyNodeRef self, unsigned int i) -> std::string &
        """
        return _osg.ProxyNodeRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(ProxyNodeRef self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(ProxyNodeRef self, std::string const & desc)"""
        return _osg.ProxyNodeRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(ProxyNodeRef self, BoundingSpheref bsphere)"""
        return _osg.ProxyNodeRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(ProxyNodeRef self) -> BoundingSpheref"""
        return _osg.ProxyNodeRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(ProxyNodeRef self)"""
        return _osg.ProxyNodeRef_dirtyBound(self)

    def getBound(self):
        """getBound(ProxyNodeRef self) -> BoundingSpheref"""
        return _osg.ProxyNodeRef_getBound(self)

    def asLOD(self):
        """asLOD(ProxyNodeRef self) -> LOD"""
        return _osg.ProxyNodeRef_asLOD(self)

    def setName(self, *args):
        """
        setName(ProxyNodeRef self, std::string const & name)
        setName(ProxyNodeRef self, char const * name)
        """
        return _osg.ProxyNodeRef_setName(self, *args)

    def getName(self):
        """getName(ProxyNodeRef self) -> std::string const &"""
        return _osg.ProxyNodeRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(ProxyNodeRef self, osg::Object::DataVariance dv)"""
        return _osg.ProxyNodeRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(ProxyNodeRef self) -> osg::Object::DataVariance"""
        return _osg.ProxyNodeRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(ProxyNodeRef self)"""
        return _osg.ProxyNodeRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(ProxyNodeRef self, osg::UserDataContainer * udc)"""
        return _osg.ProxyNodeRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(ProxyNodeRef self) -> osg::UserDataContainer
        getUserDataContainer(ProxyNodeRef self) -> osg::UserDataContainer const *
        """
        return _osg.ProxyNodeRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(ProxyNodeRef self) -> osg::UserDataContainer *"""
        return _osg.ProxyNodeRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(ProxyNodeRef self, Referenced obj)"""
        return _osg.ProxyNodeRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(ProxyNodeRef self) -> Referenced
        getUserData(ProxyNodeRef self) -> Referenced
        """
        return _osg.ProxyNodeRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(ProxyNodeRef self) -> bool"""
        return _osg.ProxyNodeRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(ProxyNodeRef self) -> OpenThreads::Mutex *"""
        return _osg.ProxyNodeRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(ProxyNodeRef self) -> OpenThreads::Mutex *"""
        return _osg.ProxyNodeRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(ProxyNodeRef self) -> int"""
        return _osg.ProxyNodeRef_ref(self)

    def unref(self):
        """unref(ProxyNodeRef self) -> int"""
        return _osg.ProxyNodeRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(ProxyNodeRef self) -> int"""
        return _osg.ProxyNodeRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(ProxyNodeRef self) -> int"""
        return _osg.ProxyNodeRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(ProxyNodeRef self) -> osg::ObserverSet *"""
        return _osg.ProxyNodeRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(ProxyNodeRef self) -> osg::ObserverSet *"""
        return _osg.ProxyNodeRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(ProxyNodeRef self, osg::Observer * observer)"""
        return _osg.ProxyNodeRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(ProxyNodeRef self, osg::Observer * observer)"""
        return _osg.ProxyNodeRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(ProxyNodeRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.ProxyNodeRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(ProxyNodeRef self) -> bool"""
        return _osg.ProxyNodeRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(ProxyNodeRef self, DeleteHandler handler)"""
        return _osg.ProxyNodeRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(ProxyNodeRef self) -> DeleteHandler"""
        return _osg.ProxyNodeRef_getDeleteHandler(self)

ProxyNodeRef_swigregister = _osg.ProxyNodeRef_swigregister
ProxyNodeRef_swigregister(ProxyNodeRef)

class ProjectionRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Projection)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectionRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectionRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Projection)> self) -> ProjectionRef
        __init__(osg::ref_ptr<(osg::Projection)> self, Projection ptr) -> ProjectionRef
        __init__(osg::ref_ptr<(osg::Projection)> self, ProjectionRef rp) -> ProjectionRef
        __init__(osg::ref_ptr<(osg::Projection)> self, osg::observer_ptr< osg::Projection > & optr) -> ProjectionRef
        """
        this = _osg.new_ProjectionRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ProjectionRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(ProjectionRef self) -> Projection"""
        return _osg.ProjectionRef___ref__(self)

    def __deref__(self):
        """__deref__(ProjectionRef self) -> Projection"""
        return _osg.ProjectionRef___deref__(self)

    def get(self):
        """get(ProjectionRef self) -> Projection"""
        return _osg.ProjectionRef_get(self)

    def valid(self):
        """valid(ProjectionRef self) -> bool"""
        return _osg.ProjectionRef_valid(self)

    def release(self):
        """release(ProjectionRef self) -> Projection"""
        return _osg.ProjectionRef_release(self)

    def swap(self, *args):
        """swap(ProjectionRef self, ProjectionRef rp)"""
        return _osg.ProjectionRef_swap(self, *args)

    def cloneType(self):
        """cloneType(ProjectionRef self) -> Object"""
        return _osg.ProjectionRef_cloneType(self)

    def clone(self, *args):
        """clone(ProjectionRef self, CopyOp copyop) -> Object"""
        return _osg.ProjectionRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ProjectionRef self, Object obj) -> bool"""
        return _osg.ProjectionRef_isSameKindAs(self, *args)

    def className(self):
        """className(ProjectionRef self) -> char const *"""
        return _osg.ProjectionRef_className(self)

    def libraryName(self):
        """libraryName(ProjectionRef self) -> char const *"""
        return _osg.ProjectionRef_libraryName(self)

    def accept(self, *args):
        """accept(ProjectionRef self, NodeVisitor nv)"""
        return _osg.ProjectionRef_accept(self, *args)

    def setMatrix(self, *args):
        """setMatrix(ProjectionRef self, Matrixd mat)"""
        return _osg.ProjectionRef_setMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(ProjectionRef self) -> Matrixd"""
        return _osg.ProjectionRef_getMatrix(self)

    def preMult(self, *args):
        """preMult(ProjectionRef self, Matrixd mat)"""
        return _osg.ProjectionRef_preMult(self, *args)

    def postMult(self, *args):
        """postMult(ProjectionRef self, Matrixd mat)"""
        return _osg.ProjectionRef_postMult(self, *args)

    def asGroup(self, *args):
        """
        asGroup(ProjectionRef self) -> Group
        asGroup(ProjectionRef self) -> Group
        """
        return _osg.ProjectionRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(ProjectionRef self, NodeVisitor nv)"""
        return _osg.ProjectionRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(ProjectionRef self, Node child) -> bool"""
        return _osg.ProjectionRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(ProjectionRef self, unsigned int index, Node child) -> bool"""
        return _osg.ProjectionRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(ProjectionRef self, Node child) -> bool
        removeChild(ProjectionRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(ProjectionRef self, unsigned int pos) -> bool
        """
        return _osg.ProjectionRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(ProjectionRef self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.ProjectionRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(ProjectionRef self, Node origChild, Node newChild) -> bool"""
        return _osg.ProjectionRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(ProjectionRef self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(ProjectionRef self, unsigned int i, Node node) -> bool"""
        return _osg.ProjectionRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(ProjectionRef self, unsigned int i) -> Node
        getChild(ProjectionRef self, unsigned int i) -> Node
        """
        return _osg.ProjectionRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(ProjectionRef self, Node node) -> bool"""
        return _osg.ProjectionRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(ProjectionRef self, Node node) -> unsigned int"""
        return _osg.ProjectionRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(ProjectionRef self, bool threadSafe)"""
        return _osg.ProjectionRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(ProjectionRef self, unsigned int maxSize)"""
        return _osg.ProjectionRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(ProjectionRef self, State arg0=None)
        releaseGLObjects(ProjectionRef self)
        """
        return _osg.ProjectionRef_releaseGLObjects(self, arg0)

    def computeBound(self):
        """computeBound(ProjectionRef self) -> BoundingSpheref"""
        return _osg.ProjectionRef_computeBound(self)

    def asProxyNode(self):
        """asProxyNode(ProjectionRef self) -> ProxyNode"""
        return _osg.ProjectionRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(ProjectionRef self) -> Transform
        asTransform(ProjectionRef self) -> Transform
        """
        return _osg.ProjectionRef_asTransform(self, *args)

    def asCamera(self, *args):
        """
        asCamera(ProjectionRef self) -> Camera
        asCamera(ProjectionRef self) -> Camera
        """
        return _osg.ProjectionRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(ProjectionRef self) -> Switch
        asSwitch(ProjectionRef self) -> Switch
        """
        return _osg.ProjectionRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(ProjectionRef self) -> Geode
        asGeode(ProjectionRef self) -> Geode
        """
        return _osg.ProjectionRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(ProjectionRef self) -> osgTerrain::Terrain
        asTerrain(ProjectionRef self) -> osgTerrain::Terrain const *
        """
        return _osg.ProjectionRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(ProjectionRef self, NodeVisitor nv)"""
        return _osg.ProjectionRef_ascend(self, *args)

    def getParents(self):
        """getParents(ProjectionRef self) -> vectorGroup"""
        return _osg.ProjectionRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(ProjectionRef self, unsigned int i) -> Group
        getParent(ProjectionRef self, unsigned int i) -> Group
        """
        return _osg.ProjectionRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(ProjectionRef self) -> unsigned int"""
        return _osg.ProjectionRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(ProjectionRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(ProjectionRef self) -> osg::NodePathList
        """
        return _osg.ProjectionRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(ProjectionRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(ProjectionRef self) -> vectorMatrix
        """
        return _osg.ProjectionRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(ProjectionRef self, NodeCallback nc)"""
        return _osg.ProjectionRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(ProjectionRef self) -> NodeCallback
        getUpdateCallback(ProjectionRef self) -> NodeCallback
        """
        return _osg.ProjectionRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(ProjectionRef self, NodeCallback nc)"""
        return _osg.ProjectionRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(ProjectionRef self, NodeCallback nc)"""
        return _osg.ProjectionRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(ProjectionRef self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(ProjectionRef self, NodeCallback nc)"""
        return _osg.ProjectionRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(ProjectionRef self) -> NodeCallback
        getEventCallback(ProjectionRef self) -> NodeCallback
        """
        return _osg.ProjectionRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(ProjectionRef self, NodeCallback nc)"""
        return _osg.ProjectionRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(ProjectionRef self, NodeCallback nc)"""
        return _osg.ProjectionRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(ProjectionRef self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(ProjectionRef self, NodeCallback nc)"""
        return _osg.ProjectionRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(ProjectionRef self) -> NodeCallback
        getCullCallback(ProjectionRef self) -> NodeCallback
        """
        return _osg.ProjectionRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(ProjectionRef self, NodeCallback nc)"""
        return _osg.ProjectionRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(ProjectionRef self, NodeCallback nc)"""
        return _osg.ProjectionRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(ProjectionRef self, bool active)"""
        return _osg.ProjectionRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(ProjectionRef self) -> bool"""
        return _osg.ProjectionRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(ProjectionRef self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(ProjectionRef self) -> bool"""
        return _osg.ProjectionRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(ProjectionRef self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(ProjectionRef self) -> bool"""
        return _osg.ProjectionRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(ProjectionRef self, osg::Node::NodeMask nm)"""
        return _osg.ProjectionRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(ProjectionRef self) -> osg::Node::NodeMask"""
        return _osg.ProjectionRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(ProjectionRef self, StateSet stateset)"""
        return _osg.ProjectionRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(ProjectionRef self) -> StateSet"""
        return _osg.ProjectionRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(ProjectionRef self) -> StateSet
        getStateSet(ProjectionRef self) -> StateSet
        """
        return _osg.ProjectionRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(ProjectionRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.ProjectionRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(ProjectionRef self) -> osg::Node::DescriptionList
        getDescriptions(ProjectionRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.ProjectionRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(ProjectionRef self, unsigned int i) -> std::string const
        getDescription(ProjectionRef self, unsigned int i) -> std::string &
        """
        return _osg.ProjectionRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(ProjectionRef self) -> unsigned int"""
        return _osg.ProjectionRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(ProjectionRef self, std::string const & desc)"""
        return _osg.ProjectionRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(ProjectionRef self, BoundingSpheref bsphere)"""
        return _osg.ProjectionRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(ProjectionRef self) -> BoundingSpheref"""
        return _osg.ProjectionRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(ProjectionRef self)"""
        return _osg.ProjectionRef_dirtyBound(self)

    def getBound(self):
        """getBound(ProjectionRef self) -> BoundingSpheref"""
        return _osg.ProjectionRef_getBound(self)

    def asLOD(self):
        """asLOD(ProjectionRef self) -> LOD"""
        return _osg.ProjectionRef_asLOD(self)

    def setName(self, *args):
        """
        setName(ProjectionRef self, std::string const & name)
        setName(ProjectionRef self, char const * name)
        """
        return _osg.ProjectionRef_setName(self, *args)

    def getName(self):
        """getName(ProjectionRef self) -> std::string const &"""
        return _osg.ProjectionRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(ProjectionRef self, osg::Object::DataVariance dv)"""
        return _osg.ProjectionRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(ProjectionRef self) -> osg::Object::DataVariance"""
        return _osg.ProjectionRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(ProjectionRef self)"""
        return _osg.ProjectionRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(ProjectionRef self, osg::UserDataContainer * udc)"""
        return _osg.ProjectionRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(ProjectionRef self) -> osg::UserDataContainer
        getUserDataContainer(ProjectionRef self) -> osg::UserDataContainer const *
        """
        return _osg.ProjectionRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(ProjectionRef self) -> osg::UserDataContainer *"""
        return _osg.ProjectionRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(ProjectionRef self, Referenced obj)"""
        return _osg.ProjectionRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(ProjectionRef self) -> Referenced
        getUserData(ProjectionRef self) -> Referenced
        """
        return _osg.ProjectionRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(ProjectionRef self) -> bool"""
        return _osg.ProjectionRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(ProjectionRef self) -> OpenThreads::Mutex *"""
        return _osg.ProjectionRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(ProjectionRef self) -> OpenThreads::Mutex *"""
        return _osg.ProjectionRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(ProjectionRef self) -> int"""
        return _osg.ProjectionRef_ref(self)

    def unref(self):
        """unref(ProjectionRef self) -> int"""
        return _osg.ProjectionRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(ProjectionRef self) -> int"""
        return _osg.ProjectionRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(ProjectionRef self) -> int"""
        return _osg.ProjectionRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(ProjectionRef self) -> osg::ObserverSet *"""
        return _osg.ProjectionRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(ProjectionRef self) -> osg::ObserverSet *"""
        return _osg.ProjectionRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(ProjectionRef self, osg::Observer * observer)"""
        return _osg.ProjectionRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(ProjectionRef self, osg::Observer * observer)"""
        return _osg.ProjectionRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(ProjectionRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.ProjectionRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(ProjectionRef self) -> bool"""
        return _osg.ProjectionRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(ProjectionRef self, DeleteHandler handler)"""
        return _osg.ProjectionRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(ProjectionRef self) -> DeleteHandler"""
        return _osg.ProjectionRef_getDeleteHandler(self)

ProjectionRef_swigregister = _osg.ProjectionRef_swigregister
ProjectionRef_swigregister(ProjectionRef)

class LightRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Light)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Light)> self) -> LightRef
        __init__(osg::ref_ptr<(osg::Light)> self, Light ptr) -> LightRef
        __init__(osg::ref_ptr<(osg::Light)> self, LightRef rp) -> LightRef
        __init__(osg::ref_ptr<(osg::Light)> self, osg::observer_ptr< osg::Light > & optr) -> LightRef
        """
        this = _osg.new_LightRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_LightRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(LightRef self) -> Light"""
        return _osg.LightRef___ref__(self)

    def __deref__(self):
        """__deref__(LightRef self) -> Light"""
        return _osg.LightRef___deref__(self)

    def get(self):
        """get(LightRef self) -> Light"""
        return _osg.LightRef_get(self)

    def valid(self):
        """valid(LightRef self) -> bool"""
        return _osg.LightRef_valid(self)

    def release(self):
        """release(LightRef self) -> Light"""
        return _osg.LightRef_release(self)

    def swap(self, *args):
        """swap(LightRef self, LightRef rp)"""
        return _osg.LightRef_swap(self, *args)

    def cloneType(self):
        """cloneType(LightRef self) -> Object"""
        return _osg.LightRef_cloneType(self)

    def clone(self, *args):
        """clone(LightRef self, CopyOp copyop) -> Object"""
        return _osg.LightRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(LightRef self, Object obj) -> bool"""
        return _osg.LightRef_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(LightRef self) -> char const *"""
        return _osg.LightRef_libraryName(self)

    def className(self):
        """className(LightRef self) -> char const *"""
        return _osg.LightRef_className(self)

    def getType(self):
        """getType(LightRef self) -> osg::StateAttribute::Type"""
        return _osg.LightRef_getType(self)

    def compare(self, *args):
        """compare(LightRef self, StateAttribute sa) -> int"""
        return _osg.LightRef_compare(self, *args)

    def getMember(self):
        """getMember(LightRef self) -> unsigned int"""
        return _osg.LightRef_getMember(self)

    def setLightNum(self, *args):
        """setLightNum(LightRef self, int num)"""
        return _osg.LightRef_setLightNum(self, *args)

    def getLightNum(self):
        """getLightNum(LightRef self) -> int"""
        return _osg.LightRef_getLightNum(self)

    def setAmbient(self, *args):
        """setAmbient(LightRef self, Vec4f ambient)"""
        return _osg.LightRef_setAmbient(self, *args)

    def getAmbient(self):
        """getAmbient(LightRef self) -> Vec4f"""
        return _osg.LightRef_getAmbient(self)

    def setDiffuse(self, *args):
        """setDiffuse(LightRef self, Vec4f diffuse)"""
        return _osg.LightRef_setDiffuse(self, *args)

    def getDiffuse(self):
        """getDiffuse(LightRef self) -> Vec4f"""
        return _osg.LightRef_getDiffuse(self)

    def setSpecular(self, *args):
        """setSpecular(LightRef self, Vec4f specular)"""
        return _osg.LightRef_setSpecular(self, *args)

    def getSpecular(self):
        """getSpecular(LightRef self) -> Vec4f"""
        return _osg.LightRef_getSpecular(self)

    def setPosition(self, *args):
        """setPosition(LightRef self, Vec4f position)"""
        return _osg.LightRef_setPosition(self, *args)

    def getPosition(self):
        """getPosition(LightRef self) -> Vec4f"""
        return _osg.LightRef_getPosition(self)

    def setDirection(self, *args):
        """setDirection(LightRef self, Vec3f direction)"""
        return _osg.LightRef_setDirection(self, *args)

    def getDirection(self):
        """getDirection(LightRef self) -> Vec3f"""
        return _osg.LightRef_getDirection(self)

    def setConstantAttenuation(self, *args):
        """setConstantAttenuation(LightRef self, float constant_attenuation)"""
        return _osg.LightRef_setConstantAttenuation(self, *args)

    def getConstantAttenuation(self):
        """getConstantAttenuation(LightRef self) -> float"""
        return _osg.LightRef_getConstantAttenuation(self)

    def setLinearAttenuation(self, *args):
        """setLinearAttenuation(LightRef self, float linear_attenuation)"""
        return _osg.LightRef_setLinearAttenuation(self, *args)

    def getLinearAttenuation(self):
        """getLinearAttenuation(LightRef self) -> float"""
        return _osg.LightRef_getLinearAttenuation(self)

    def setQuadraticAttenuation(self, *args):
        """setQuadraticAttenuation(LightRef self, float quadratic_attenuation)"""
        return _osg.LightRef_setQuadraticAttenuation(self, *args)

    def getQuadraticAttenuation(self):
        """getQuadraticAttenuation(LightRef self) -> float"""
        return _osg.LightRef_getQuadraticAttenuation(self)

    def setSpotExponent(self, *args):
        """setSpotExponent(LightRef self, float spot_exponent)"""
        return _osg.LightRef_setSpotExponent(self, *args)

    def getSpotExponent(self):
        """getSpotExponent(LightRef self) -> float"""
        return _osg.LightRef_getSpotExponent(self)

    def setSpotCutoff(self, *args):
        """setSpotCutoff(LightRef self, float spot_cutoff)"""
        return _osg.LightRef_setSpotCutoff(self, *args)

    def getSpotCutoff(self):
        """getSpotCutoff(LightRef self) -> float"""
        return _osg.LightRef_getSpotCutoff(self)

    def captureLightState(self):
        """captureLightState(LightRef self)"""
        return _osg.LightRef_captureLightState(self)

    def apply(self, *args):
        """apply(LightRef self, State state)"""
        return _osg.LightRef_apply(self, *args)

    def asTexture(self, *args):
        """
        asTexture(LightRef self) -> Texture
        asTexture(LightRef self) -> Texture
        """
        return _osg.LightRef_asTexture(self, *args)

    def getTypeMemberPair(self):
        """getTypeMemberPair(LightRef self) -> osg::StateAttribute::TypeMemberPair"""
        return _osg.LightRef_getTypeMemberPair(self)

    def isTextureAttribute(self):
        """isTextureAttribute(LightRef self) -> bool"""
        return _osg.LightRef_isTextureAttribute(self)

    def __lt__(self, *args):
        """__lt__(LightRef self, StateAttribute rhs) -> bool"""
        return _osg.LightRef___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(LightRef self, StateAttribute rhs) -> bool"""
        return _osg.LightRef___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(LightRef self, StateAttribute rhs) -> bool"""
        return _osg.LightRef___ne__(self, *args)

    def getParents(self):
        """getParents(LightRef self) -> vectorStateSet"""
        return _osg.LightRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(LightRef self, unsigned int i) -> StateSet
        getParent(LightRef self, unsigned int i) -> StateSet
        """
        return _osg.LightRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(LightRef self) -> unsigned int"""
        return _osg.LightRef_getNumParents(self)

    def setShaderComponent(self, *args):
        """setShaderComponent(LightRef self, ShaderComponent sc)"""
        return _osg.LightRef_setShaderComponent(self, *args)

    def getShaderComponent(self, *args):
        """
        getShaderComponent(LightRef self) -> ShaderComponent
        getShaderComponent(LightRef self) -> ShaderComponent
        """
        return _osg.LightRef_getShaderComponent(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(LightRef self, State arg2) -> bool"""
        return _osg.LightRef_checkValidityOfAssociatedModes(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(LightRef self, State arg2)"""
        return _osg.LightRef_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(LightRef self, unsigned int arg2)"""
        return _osg.LightRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(LightRef self, State arg2=None)
        releaseGLObjects(LightRef self)
        """
        return _osg.LightRef_releaseGLObjects(self, arg2)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(LightRef self, bool threadSafe)"""
        return _osg.LightRef_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(LightRef self, std::string const & name)
        setName(LightRef self, char const * name)
        """
        return _osg.LightRef_setName(self, *args)

    def getName(self):
        """getName(LightRef self) -> std::string const &"""
        return _osg.LightRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(LightRef self, osg::Object::DataVariance dv)"""
        return _osg.LightRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(LightRef self) -> osg::Object::DataVariance"""
        return _osg.LightRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(LightRef self)"""
        return _osg.LightRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(LightRef self, osg::UserDataContainer * udc)"""
        return _osg.LightRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(LightRef self) -> osg::UserDataContainer
        getUserDataContainer(LightRef self) -> osg::UserDataContainer const *
        """
        return _osg.LightRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(LightRef self) -> osg::UserDataContainer *"""
        return _osg.LightRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(LightRef self, Referenced obj)"""
        return _osg.LightRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(LightRef self) -> Referenced
        getUserData(LightRef self) -> Referenced
        """
        return _osg.LightRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(LightRef self) -> bool"""
        return _osg.LightRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(LightRef self) -> OpenThreads::Mutex *"""
        return _osg.LightRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(LightRef self) -> OpenThreads::Mutex *"""
        return _osg.LightRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(LightRef self) -> int"""
        return _osg.LightRef_ref(self)

    def unref(self):
        """unref(LightRef self) -> int"""
        return _osg.LightRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(LightRef self) -> int"""
        return _osg.LightRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(LightRef self) -> int"""
        return _osg.LightRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(LightRef self) -> osg::ObserverSet *"""
        return _osg.LightRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(LightRef self) -> osg::ObserverSet *"""
        return _osg.LightRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(LightRef self, osg::Observer * observer)"""
        return _osg.LightRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(LightRef self, osg::Observer * observer)"""
        return _osg.LightRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(LightRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.LightRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(LightRef self) -> bool"""
        return _osg.LightRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(LightRef self, DeleteHandler handler)"""
        return _osg.LightRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(LightRef self) -> DeleteHandler"""
        return _osg.LightRef_getDeleteHandler(self)

LightRef_swigregister = _osg.LightRef_swigregister
LightRef_swigregister(LightRef)

class MatrixTransformRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::MatrixTransform)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixTransformRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixTransformRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::MatrixTransform)> self) -> MatrixTransformRef
        __init__(osg::ref_ptr<(osg::MatrixTransform)> self, MatrixTransform ptr) -> MatrixTransformRef
        __init__(osg::ref_ptr<(osg::MatrixTransform)> self, MatrixTransformRef rp) -> MatrixTransformRef
        __init__(osg::ref_ptr<(osg::MatrixTransform)> self, osg::observer_ptr< osg::MatrixTransform > & optr) -> MatrixTransformRef
        """
        this = _osg.new_MatrixTransformRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_MatrixTransformRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(MatrixTransformRef self) -> MatrixTransform"""
        return _osg.MatrixTransformRef___ref__(self)

    def __deref__(self):
        """__deref__(MatrixTransformRef self) -> MatrixTransform"""
        return _osg.MatrixTransformRef___deref__(self)

    def get(self):
        """get(MatrixTransformRef self) -> MatrixTransform"""
        return _osg.MatrixTransformRef_get(self)

    def valid(self):
        """valid(MatrixTransformRef self) -> bool"""
        return _osg.MatrixTransformRef_valid(self)

    def release(self):
        """release(MatrixTransformRef self) -> MatrixTransform"""
        return _osg.MatrixTransformRef_release(self)

    def swap(self, *args):
        """swap(MatrixTransformRef self, MatrixTransformRef rp)"""
        return _osg.MatrixTransformRef_swap(self, *args)

    def cloneType(self):
        """cloneType(MatrixTransformRef self) -> Object"""
        return _osg.MatrixTransformRef_cloneType(self)

    def clone(self, *args):
        """clone(MatrixTransformRef self, CopyOp copyop) -> Object"""
        return _osg.MatrixTransformRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(MatrixTransformRef self, Object obj) -> bool"""
        return _osg.MatrixTransformRef_isSameKindAs(self, *args)

    def className(self):
        """className(MatrixTransformRef self) -> char const *"""
        return _osg.MatrixTransformRef_className(self)

    def libraryName(self):
        """libraryName(MatrixTransformRef self) -> char const *"""
        return _osg.MatrixTransformRef_libraryName(self)

    def accept(self, *args):
        """accept(MatrixTransformRef self, NodeVisitor nv)"""
        return _osg.MatrixTransformRef_accept(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(MatrixTransformRef self) -> MatrixTransform
        asMatrixTransform(MatrixTransformRef self) -> MatrixTransform
        """
        return _osg.MatrixTransformRef_asMatrixTransform(self, *args)

    def setMatrix(self, *args):
        """setMatrix(MatrixTransformRef self, Matrixd mat)"""
        return _osg.MatrixTransformRef_setMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(MatrixTransformRef self) -> Matrixd"""
        return _osg.MatrixTransformRef_getMatrix(self)

    def preMult(self, *args):
        """preMult(MatrixTransformRef self, Matrixd mat)"""
        return _osg.MatrixTransformRef_preMult(self, *args)

    def postMult(self, *args):
        """postMult(MatrixTransformRef self, Matrixd mat)"""
        return _osg.MatrixTransformRef_postMult(self, *args)

    def getInverseMatrix(self):
        """getInverseMatrix(MatrixTransformRef self) -> Matrixd"""
        return _osg.MatrixTransformRef_getInverseMatrix(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(MatrixTransformRef self, Matrixd matrix, NodeVisitor arg0) -> bool"""
        return _osg.MatrixTransformRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(MatrixTransformRef self, Matrixd matrix, NodeVisitor arg0) -> bool"""
        return _osg.MatrixTransformRef_computeWorldToLocalMatrix(self, *args)

    def asTransform(self, *args):
        """
        asTransform(MatrixTransformRef self) -> Transform
        asTransform(MatrixTransformRef self) -> Transform
        """
        return _osg.MatrixTransformRef_asTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(MatrixTransformRef self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(MatrixTransformRef self) -> PositionAttitudeTransform
        """
        return _osg.MatrixTransformRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(MatrixTransformRef self, osg::Transform::ReferenceFrame rf)"""
        return _osg.MatrixTransformRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(MatrixTransformRef self) -> osg::Transform::ReferenceFrame"""
        return _osg.MatrixTransformRef_getReferenceFrame(self)

    def computeBound(self):
        """computeBound(MatrixTransformRef self) -> BoundingSpheref"""
        return _osg.MatrixTransformRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(MatrixTransformRef self) -> Group
        asGroup(MatrixTransformRef self) -> Group
        """
        return _osg.MatrixTransformRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(MatrixTransformRef self, NodeVisitor nv)"""
        return _osg.MatrixTransformRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(MatrixTransformRef self, Node child) -> bool"""
        return _osg.MatrixTransformRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(MatrixTransformRef self, unsigned int index, Node child) -> bool"""
        return _osg.MatrixTransformRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(MatrixTransformRef self, Node child) -> bool
        removeChild(MatrixTransformRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(MatrixTransformRef self, unsigned int pos) -> bool
        """
        return _osg.MatrixTransformRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(MatrixTransformRef self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.MatrixTransformRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(MatrixTransformRef self, Node origChild, Node newChild) -> bool"""
        return _osg.MatrixTransformRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(MatrixTransformRef self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(MatrixTransformRef self, unsigned int i, Node node) -> bool"""
        return _osg.MatrixTransformRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(MatrixTransformRef self, unsigned int i) -> Node
        getChild(MatrixTransformRef self, unsigned int i) -> Node
        """
        return _osg.MatrixTransformRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(MatrixTransformRef self, Node node) -> bool"""
        return _osg.MatrixTransformRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(MatrixTransformRef self, Node node) -> unsigned int"""
        return _osg.MatrixTransformRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(MatrixTransformRef self, bool threadSafe)"""
        return _osg.MatrixTransformRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(MatrixTransformRef self, unsigned int maxSize)"""
        return _osg.MatrixTransformRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(MatrixTransformRef self, State arg0=None)
        releaseGLObjects(MatrixTransformRef self)
        """
        return _osg.MatrixTransformRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(MatrixTransformRef self) -> ProxyNode"""
        return _osg.MatrixTransformRef_asProxyNode(self)

    def asCamera(self, *args):
        """
        asCamera(MatrixTransformRef self) -> Camera
        asCamera(MatrixTransformRef self) -> Camera
        """
        return _osg.MatrixTransformRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(MatrixTransformRef self) -> Switch
        asSwitch(MatrixTransformRef self) -> Switch
        """
        return _osg.MatrixTransformRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(MatrixTransformRef self) -> Geode
        asGeode(MatrixTransformRef self) -> Geode
        """
        return _osg.MatrixTransformRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(MatrixTransformRef self) -> osgTerrain::Terrain
        asTerrain(MatrixTransformRef self) -> osgTerrain::Terrain const *
        """
        return _osg.MatrixTransformRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(MatrixTransformRef self, NodeVisitor nv)"""
        return _osg.MatrixTransformRef_ascend(self, *args)

    def getParents(self):
        """getParents(MatrixTransformRef self) -> vectorGroup"""
        return _osg.MatrixTransformRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(MatrixTransformRef self, unsigned int i) -> Group
        getParent(MatrixTransformRef self, unsigned int i) -> Group
        """
        return _osg.MatrixTransformRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(MatrixTransformRef self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(MatrixTransformRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(MatrixTransformRef self) -> osg::NodePathList
        """
        return _osg.MatrixTransformRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(MatrixTransformRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(MatrixTransformRef self) -> vectorMatrix
        """
        return _osg.MatrixTransformRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(MatrixTransformRef self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(MatrixTransformRef self) -> NodeCallback
        getUpdateCallback(MatrixTransformRef self) -> NodeCallback
        """
        return _osg.MatrixTransformRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(MatrixTransformRef self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(MatrixTransformRef self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(MatrixTransformRef self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(MatrixTransformRef self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(MatrixTransformRef self) -> NodeCallback
        getEventCallback(MatrixTransformRef self) -> NodeCallback
        """
        return _osg.MatrixTransformRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(MatrixTransformRef self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(MatrixTransformRef self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(MatrixTransformRef self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(MatrixTransformRef self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(MatrixTransformRef self) -> NodeCallback
        getCullCallback(MatrixTransformRef self) -> NodeCallback
        """
        return _osg.MatrixTransformRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(MatrixTransformRef self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(MatrixTransformRef self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(MatrixTransformRef self, bool active)"""
        return _osg.MatrixTransformRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(MatrixTransformRef self) -> bool"""
        return _osg.MatrixTransformRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(MatrixTransformRef self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(MatrixTransformRef self) -> bool"""
        return _osg.MatrixTransformRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(MatrixTransformRef self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(MatrixTransformRef self) -> bool"""
        return _osg.MatrixTransformRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(MatrixTransformRef self, osg::Node::NodeMask nm)"""
        return _osg.MatrixTransformRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(MatrixTransformRef self) -> osg::Node::NodeMask"""
        return _osg.MatrixTransformRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(MatrixTransformRef self, StateSet stateset)"""
        return _osg.MatrixTransformRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(MatrixTransformRef self) -> StateSet"""
        return _osg.MatrixTransformRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(MatrixTransformRef self) -> StateSet
        getStateSet(MatrixTransformRef self) -> StateSet
        """
        return _osg.MatrixTransformRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(MatrixTransformRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.MatrixTransformRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(MatrixTransformRef self) -> osg::Node::DescriptionList
        getDescriptions(MatrixTransformRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.MatrixTransformRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(MatrixTransformRef self, unsigned int i) -> std::string const
        getDescription(MatrixTransformRef self, unsigned int i) -> std::string &
        """
        return _osg.MatrixTransformRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(MatrixTransformRef self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(MatrixTransformRef self, std::string const & desc)"""
        return _osg.MatrixTransformRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(MatrixTransformRef self, BoundingSpheref bsphere)"""
        return _osg.MatrixTransformRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(MatrixTransformRef self) -> BoundingSpheref"""
        return _osg.MatrixTransformRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(MatrixTransformRef self)"""
        return _osg.MatrixTransformRef_dirtyBound(self)

    def getBound(self):
        """getBound(MatrixTransformRef self) -> BoundingSpheref"""
        return _osg.MatrixTransformRef_getBound(self)

    def asLOD(self):
        """asLOD(MatrixTransformRef self) -> LOD"""
        return _osg.MatrixTransformRef_asLOD(self)

    def setName(self, *args):
        """
        setName(MatrixTransformRef self, std::string const & name)
        setName(MatrixTransformRef self, char const * name)
        """
        return _osg.MatrixTransformRef_setName(self, *args)

    def getName(self):
        """getName(MatrixTransformRef self) -> std::string const &"""
        return _osg.MatrixTransformRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(MatrixTransformRef self, osg::Object::DataVariance dv)"""
        return _osg.MatrixTransformRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(MatrixTransformRef self) -> osg::Object::DataVariance"""
        return _osg.MatrixTransformRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(MatrixTransformRef self)"""
        return _osg.MatrixTransformRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(MatrixTransformRef self, osg::UserDataContainer * udc)"""
        return _osg.MatrixTransformRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(MatrixTransformRef self) -> osg::UserDataContainer
        getUserDataContainer(MatrixTransformRef self) -> osg::UserDataContainer const *
        """
        return _osg.MatrixTransformRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(MatrixTransformRef self) -> osg::UserDataContainer *"""
        return _osg.MatrixTransformRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(MatrixTransformRef self, Referenced obj)"""
        return _osg.MatrixTransformRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(MatrixTransformRef self) -> Referenced
        getUserData(MatrixTransformRef self) -> Referenced
        """
        return _osg.MatrixTransformRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(MatrixTransformRef self) -> bool"""
        return _osg.MatrixTransformRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(MatrixTransformRef self) -> OpenThreads::Mutex *"""
        return _osg.MatrixTransformRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(MatrixTransformRef self) -> OpenThreads::Mutex *"""
        return _osg.MatrixTransformRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(MatrixTransformRef self) -> int"""
        return _osg.MatrixTransformRef_ref(self)

    def unref(self):
        """unref(MatrixTransformRef self) -> int"""
        return _osg.MatrixTransformRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(MatrixTransformRef self) -> int"""
        return _osg.MatrixTransformRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(MatrixTransformRef self) -> int"""
        return _osg.MatrixTransformRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(MatrixTransformRef self) -> osg::ObserverSet *"""
        return _osg.MatrixTransformRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(MatrixTransformRef self) -> osg::ObserverSet *"""
        return _osg.MatrixTransformRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(MatrixTransformRef self, osg::Observer * observer)"""
        return _osg.MatrixTransformRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(MatrixTransformRef self, osg::Observer * observer)"""
        return _osg.MatrixTransformRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(MatrixTransformRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.MatrixTransformRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(MatrixTransformRef self) -> bool"""
        return _osg.MatrixTransformRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(MatrixTransformRef self, DeleteHandler handler)"""
        return _osg.MatrixTransformRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(MatrixTransformRef self) -> DeleteHandler"""
        return _osg.MatrixTransformRef_getDeleteHandler(self)

MatrixTransformRef_swigregister = _osg.MatrixTransformRef_swigregister
MatrixTransformRef_swigregister(MatrixTransformRef)

class AutoTransformRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::AutoTransform)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoTransformRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoTransformRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::AutoTransform)> self) -> AutoTransformRef
        __init__(osg::ref_ptr<(osg::AutoTransform)> self, AutoTransform ptr) -> AutoTransformRef
        __init__(osg::ref_ptr<(osg::AutoTransform)> self, AutoTransformRef rp) -> AutoTransformRef
        __init__(osg::ref_ptr<(osg::AutoTransform)> self, osg::observer_ptr< osg::AutoTransform > & optr) -> AutoTransformRef
        """
        this = _osg.new_AutoTransformRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_AutoTransformRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(AutoTransformRef self) -> AutoTransform"""
        return _osg.AutoTransformRef___ref__(self)

    def __deref__(self):
        """__deref__(AutoTransformRef self) -> AutoTransform"""
        return _osg.AutoTransformRef___deref__(self)

    def get(self):
        """get(AutoTransformRef self) -> AutoTransform"""
        return _osg.AutoTransformRef_get(self)

    def valid(self):
        """valid(AutoTransformRef self) -> bool"""
        return _osg.AutoTransformRef_valid(self)

    def release(self):
        """release(AutoTransformRef self) -> AutoTransform"""
        return _osg.AutoTransformRef_release(self)

    def swap(self, *args):
        """swap(AutoTransformRef self, AutoTransformRef rp)"""
        return _osg.AutoTransformRef_swap(self, *args)

    def cloneType(self):
        """cloneType(AutoTransformRef self) -> Object"""
        return _osg.AutoTransformRef_cloneType(self)

    def clone(self, *args):
        """clone(AutoTransformRef self, CopyOp copyop) -> Object"""
        return _osg.AutoTransformRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(AutoTransformRef self, Object obj) -> bool"""
        return _osg.AutoTransformRef_isSameKindAs(self, *args)

    def className(self):
        """className(AutoTransformRef self) -> char const *"""
        return _osg.AutoTransformRef_className(self)

    def libraryName(self):
        """libraryName(AutoTransformRef self) -> char const *"""
        return _osg.AutoTransformRef_libraryName(self)

    def accept(self, *args):
        """accept(AutoTransformRef self, NodeVisitor nv)"""
        return _osg.AutoTransformRef_accept(self, *args)

    def asAutoTransform(self, *args):
        """
        asAutoTransform(AutoTransformRef self) -> AutoTransform
        asAutoTransform(AutoTransformRef self) -> AutoTransform
        """
        return _osg.AutoTransformRef_asAutoTransform(self, *args)

    def setPosition(self, *args):
        """setPosition(AutoTransformRef self, Vec3d pos)"""
        return _osg.AutoTransformRef_setPosition(self, *args)

    def getPosition(self):
        """getPosition(AutoTransformRef self) -> Vec3d"""
        return _osg.AutoTransformRef_getPosition(self)

    def setRotation(self, *args):
        """setRotation(AutoTransformRef self, Quat quat)"""
        return _osg.AutoTransformRef_setRotation(self, *args)

    def getRotation(self):
        """getRotation(AutoTransformRef self) -> Quat"""
        return _osg.AutoTransformRef_getRotation(self)

    def setScale(self, *args):
        """
        setScale(AutoTransformRef self, double scale)
        setScale(AutoTransformRef self, Vec3d scale)
        """
        return _osg.AutoTransformRef_setScale(self, *args)

    def getScale(self):
        """getScale(AutoTransformRef self) -> Vec3d"""
        return _osg.AutoTransformRef_getScale(self)

    def setMinimumScale(self, *args):
        """setMinimumScale(AutoTransformRef self, double minimumScale)"""
        return _osg.AutoTransformRef_setMinimumScale(self, *args)

    def getMinimumScale(self):
        """getMinimumScale(AutoTransformRef self) -> double"""
        return _osg.AutoTransformRef_getMinimumScale(self)

    def setMaximumScale(self, *args):
        """setMaximumScale(AutoTransformRef self, double maximumScale)"""
        return _osg.AutoTransformRef_setMaximumScale(self, *args)

    def getMaximumScale(self):
        """getMaximumScale(AutoTransformRef self) -> double"""
        return _osg.AutoTransformRef_getMaximumScale(self)

    def setPivotPoint(self, *args):
        """setPivotPoint(AutoTransformRef self, Vec3d pivot)"""
        return _osg.AutoTransformRef_setPivotPoint(self, *args)

    def getPivotPoint(self):
        """getPivotPoint(AutoTransformRef self) -> Vec3d"""
        return _osg.AutoTransformRef_getPivotPoint(self)

    def setAutoUpdateEyeMovementTolerance(self, *args):
        """setAutoUpdateEyeMovementTolerance(AutoTransformRef self, float tolerance)"""
        return _osg.AutoTransformRef_setAutoUpdateEyeMovementTolerance(self, *args)

    def getAutoUpdateEyeMovementTolerance(self):
        """getAutoUpdateEyeMovementTolerance(AutoTransformRef self) -> float"""
        return _osg.AutoTransformRef_getAutoUpdateEyeMovementTolerance(self)

    def setAutoRotateMode(self, *args):
        """setAutoRotateMode(AutoTransformRef self, osg::AutoTransform::AutoRotateMode mode)"""
        return _osg.AutoTransformRef_setAutoRotateMode(self, *args)

    def getAutoRotateMode(self):
        """getAutoRotateMode(AutoTransformRef self) -> osg::AutoTransform::AutoRotateMode"""
        return _osg.AutoTransformRef_getAutoRotateMode(self)

    def setAxis(self, *args):
        """setAxis(AutoTransformRef self, Vec3f axis)"""
        return _osg.AutoTransformRef_setAxis(self, *args)

    def getAxis(self):
        """getAxis(AutoTransformRef self) -> Vec3f"""
        return _osg.AutoTransformRef_getAxis(self)

    def setNormal(self, *args):
        """setNormal(AutoTransformRef self, Vec3f normal)"""
        return _osg.AutoTransformRef_setNormal(self, *args)

    def getNormal(self):
        """getNormal(AutoTransformRef self) -> Vec3f"""
        return _osg.AutoTransformRef_getNormal(self)

    def setAutoScaleToScreen(self, *args):
        """setAutoScaleToScreen(AutoTransformRef self, bool autoScaleToScreen)"""
        return _osg.AutoTransformRef_setAutoScaleToScreen(self, *args)

    def getAutoScaleToScreen(self):
        """getAutoScaleToScreen(AutoTransformRef self) -> bool"""
        return _osg.AutoTransformRef_getAutoScaleToScreen(self)

    def setAutoScaleTransitionWidthRatio(self, *args):
        """setAutoScaleTransitionWidthRatio(AutoTransformRef self, float ratio)"""
        return _osg.AutoTransformRef_setAutoScaleTransitionWidthRatio(self, *args)

    def getAutoScaleTransitionWidthRatio(self):
        """getAutoScaleTransitionWidthRatio(AutoTransformRef self) -> float"""
        return _osg.AutoTransformRef_getAutoScaleTransitionWidthRatio(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(AutoTransformRef self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.AutoTransformRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(AutoTransformRef self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.AutoTransformRef_computeWorldToLocalMatrix(self, *args)

    def computeBound(self):
        """computeBound(AutoTransformRef self) -> BoundingSpheref"""
        return _osg.AutoTransformRef_computeBound(self)

    def asTransform(self, *args):
        """
        asTransform(AutoTransformRef self) -> Transform
        asTransform(AutoTransformRef self) -> Transform
        """
        return _osg.AutoTransformRef_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(AutoTransformRef self) -> MatrixTransform
        asMatrixTransform(AutoTransformRef self) -> MatrixTransform
        """
        return _osg.AutoTransformRef_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(AutoTransformRef self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(AutoTransformRef self) -> PositionAttitudeTransform
        """
        return _osg.AutoTransformRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(AutoTransformRef self, osg::Transform::ReferenceFrame rf)"""
        return _osg.AutoTransformRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(AutoTransformRef self) -> osg::Transform::ReferenceFrame"""
        return _osg.AutoTransformRef_getReferenceFrame(self)

    def asGroup(self, *args):
        """
        asGroup(AutoTransformRef self) -> Group
        asGroup(AutoTransformRef self) -> Group
        """
        return _osg.AutoTransformRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(AutoTransformRef self, NodeVisitor nv)"""
        return _osg.AutoTransformRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(AutoTransformRef self, Node child) -> bool"""
        return _osg.AutoTransformRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(AutoTransformRef self, unsigned int index, Node child) -> bool"""
        return _osg.AutoTransformRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(AutoTransformRef self, Node child) -> bool
        removeChild(AutoTransformRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(AutoTransformRef self, unsigned int pos) -> bool
        """
        return _osg.AutoTransformRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(AutoTransformRef self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.AutoTransformRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(AutoTransformRef self, Node origChild, Node newChild) -> bool"""
        return _osg.AutoTransformRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(AutoTransformRef self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(AutoTransformRef self, unsigned int i, Node node) -> bool"""
        return _osg.AutoTransformRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(AutoTransformRef self, unsigned int i) -> Node
        getChild(AutoTransformRef self, unsigned int i) -> Node
        """
        return _osg.AutoTransformRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(AutoTransformRef self, Node node) -> bool"""
        return _osg.AutoTransformRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(AutoTransformRef self, Node node) -> unsigned int"""
        return _osg.AutoTransformRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(AutoTransformRef self, bool threadSafe)"""
        return _osg.AutoTransformRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(AutoTransformRef self, unsigned int maxSize)"""
        return _osg.AutoTransformRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(AutoTransformRef self, State arg0=None)
        releaseGLObjects(AutoTransformRef self)
        """
        return _osg.AutoTransformRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(AutoTransformRef self) -> ProxyNode"""
        return _osg.AutoTransformRef_asProxyNode(self)

    def asCamera(self, *args):
        """
        asCamera(AutoTransformRef self) -> Camera
        asCamera(AutoTransformRef self) -> Camera
        """
        return _osg.AutoTransformRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(AutoTransformRef self) -> Switch
        asSwitch(AutoTransformRef self) -> Switch
        """
        return _osg.AutoTransformRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(AutoTransformRef self) -> Geode
        asGeode(AutoTransformRef self) -> Geode
        """
        return _osg.AutoTransformRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(AutoTransformRef self) -> osgTerrain::Terrain
        asTerrain(AutoTransformRef self) -> osgTerrain::Terrain const *
        """
        return _osg.AutoTransformRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(AutoTransformRef self, NodeVisitor nv)"""
        return _osg.AutoTransformRef_ascend(self, *args)

    def getParents(self):
        """getParents(AutoTransformRef self) -> vectorGroup"""
        return _osg.AutoTransformRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(AutoTransformRef self, unsigned int i) -> Group
        getParent(AutoTransformRef self, unsigned int i) -> Group
        """
        return _osg.AutoTransformRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(AutoTransformRef self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(AutoTransformRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(AutoTransformRef self) -> osg::NodePathList
        """
        return _osg.AutoTransformRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(AutoTransformRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(AutoTransformRef self) -> vectorMatrix
        """
        return _osg.AutoTransformRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(AutoTransformRef self, NodeCallback nc)"""
        return _osg.AutoTransformRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(AutoTransformRef self) -> NodeCallback
        getUpdateCallback(AutoTransformRef self) -> NodeCallback
        """
        return _osg.AutoTransformRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(AutoTransformRef self, NodeCallback nc)"""
        return _osg.AutoTransformRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(AutoTransformRef self, NodeCallback nc)"""
        return _osg.AutoTransformRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(AutoTransformRef self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(AutoTransformRef self, NodeCallback nc)"""
        return _osg.AutoTransformRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(AutoTransformRef self) -> NodeCallback
        getEventCallback(AutoTransformRef self) -> NodeCallback
        """
        return _osg.AutoTransformRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(AutoTransformRef self, NodeCallback nc)"""
        return _osg.AutoTransformRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(AutoTransformRef self, NodeCallback nc)"""
        return _osg.AutoTransformRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(AutoTransformRef self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(AutoTransformRef self, NodeCallback nc)"""
        return _osg.AutoTransformRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(AutoTransformRef self) -> NodeCallback
        getCullCallback(AutoTransformRef self) -> NodeCallback
        """
        return _osg.AutoTransformRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(AutoTransformRef self, NodeCallback nc)"""
        return _osg.AutoTransformRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(AutoTransformRef self, NodeCallback nc)"""
        return _osg.AutoTransformRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(AutoTransformRef self, bool active)"""
        return _osg.AutoTransformRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(AutoTransformRef self) -> bool"""
        return _osg.AutoTransformRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(AutoTransformRef self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(AutoTransformRef self) -> bool"""
        return _osg.AutoTransformRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(AutoTransformRef self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(AutoTransformRef self) -> bool"""
        return _osg.AutoTransformRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(AutoTransformRef self, osg::Node::NodeMask nm)"""
        return _osg.AutoTransformRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(AutoTransformRef self) -> osg::Node::NodeMask"""
        return _osg.AutoTransformRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(AutoTransformRef self, StateSet stateset)"""
        return _osg.AutoTransformRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(AutoTransformRef self) -> StateSet"""
        return _osg.AutoTransformRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(AutoTransformRef self) -> StateSet
        getStateSet(AutoTransformRef self) -> StateSet
        """
        return _osg.AutoTransformRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(AutoTransformRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.AutoTransformRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(AutoTransformRef self) -> osg::Node::DescriptionList
        getDescriptions(AutoTransformRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.AutoTransformRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(AutoTransformRef self, unsigned int i) -> std::string const
        getDescription(AutoTransformRef self, unsigned int i) -> std::string &
        """
        return _osg.AutoTransformRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(AutoTransformRef self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(AutoTransformRef self, std::string const & desc)"""
        return _osg.AutoTransformRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(AutoTransformRef self, BoundingSpheref bsphere)"""
        return _osg.AutoTransformRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(AutoTransformRef self) -> BoundingSpheref"""
        return _osg.AutoTransformRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(AutoTransformRef self)"""
        return _osg.AutoTransformRef_dirtyBound(self)

    def getBound(self):
        """getBound(AutoTransformRef self) -> BoundingSpheref"""
        return _osg.AutoTransformRef_getBound(self)

    def asLOD(self):
        """asLOD(AutoTransformRef self) -> LOD"""
        return _osg.AutoTransformRef_asLOD(self)

    def setName(self, *args):
        """
        setName(AutoTransformRef self, std::string const & name)
        setName(AutoTransformRef self, char const * name)
        """
        return _osg.AutoTransformRef_setName(self, *args)

    def getName(self):
        """getName(AutoTransformRef self) -> std::string const &"""
        return _osg.AutoTransformRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(AutoTransformRef self, osg::Object::DataVariance dv)"""
        return _osg.AutoTransformRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(AutoTransformRef self) -> osg::Object::DataVariance"""
        return _osg.AutoTransformRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(AutoTransformRef self)"""
        return _osg.AutoTransformRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(AutoTransformRef self, osg::UserDataContainer * udc)"""
        return _osg.AutoTransformRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(AutoTransformRef self) -> osg::UserDataContainer
        getUserDataContainer(AutoTransformRef self) -> osg::UserDataContainer const *
        """
        return _osg.AutoTransformRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(AutoTransformRef self) -> osg::UserDataContainer *"""
        return _osg.AutoTransformRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(AutoTransformRef self, Referenced obj)"""
        return _osg.AutoTransformRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(AutoTransformRef self) -> Referenced
        getUserData(AutoTransformRef self) -> Referenced
        """
        return _osg.AutoTransformRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(AutoTransformRef self) -> bool"""
        return _osg.AutoTransformRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(AutoTransformRef self) -> OpenThreads::Mutex *"""
        return _osg.AutoTransformRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(AutoTransformRef self) -> OpenThreads::Mutex *"""
        return _osg.AutoTransformRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(AutoTransformRef self) -> int"""
        return _osg.AutoTransformRef_ref(self)

    def unref(self):
        """unref(AutoTransformRef self) -> int"""
        return _osg.AutoTransformRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(AutoTransformRef self) -> int"""
        return _osg.AutoTransformRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(AutoTransformRef self) -> int"""
        return _osg.AutoTransformRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(AutoTransformRef self) -> osg::ObserverSet *"""
        return _osg.AutoTransformRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(AutoTransformRef self) -> osg::ObserverSet *"""
        return _osg.AutoTransformRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(AutoTransformRef self, osg::Observer * observer)"""
        return _osg.AutoTransformRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(AutoTransformRef self, osg::Observer * observer)"""
        return _osg.AutoTransformRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(AutoTransformRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.AutoTransformRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(AutoTransformRef self) -> bool"""
        return _osg.AutoTransformRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(AutoTransformRef self, DeleteHandler handler)"""
        return _osg.AutoTransformRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(AutoTransformRef self) -> DeleteHandler"""
        return _osg.AutoTransformRef_getDeleteHandler(self)

AutoTransformRef_swigregister = _osg.AutoTransformRef_swigregister
AutoTransformRef_swigregister(AutoTransformRef)

class CameraNodeRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::CameraNode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraNodeRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraNodeRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::CameraNode)> self) -> CameraNodeRef
        __init__(osg::ref_ptr<(osg::CameraNode)> self, osg::CameraNode * ptr) -> CameraNodeRef
        __init__(osg::ref_ptr<(osg::CameraNode)> self, CameraNodeRef rp) -> CameraNodeRef
        __init__(osg::ref_ptr<(osg::CameraNode)> self, osg::observer_ptr< osg::CameraNode > & optr) -> CameraNodeRef
        """
        this = _osg.new_CameraNodeRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CameraNodeRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(CameraNodeRef self) -> osg::CameraNode &"""
        return _osg.CameraNodeRef___ref__(self)

    def __deref__(self):
        """__deref__(CameraNodeRef self) -> osg::CameraNode *"""
        return _osg.CameraNodeRef___deref__(self)

    def get(self):
        """get(CameraNodeRef self) -> osg::CameraNode *"""
        return _osg.CameraNodeRef_get(self)

    def valid(self):
        """valid(CameraNodeRef self) -> bool"""
        return _osg.CameraNodeRef_valid(self)

    def release(self):
        """release(CameraNodeRef self) -> osg::CameraNode *"""
        return _osg.CameraNodeRef_release(self)

    def swap(self, *args):
        """swap(CameraNodeRef self, CameraNodeRef rp)"""
        return _osg.CameraNodeRef_swap(self, *args)

CameraNodeRef_swigregister = _osg.CameraNodeRef_swigregister
CameraNodeRef_swigregister(CameraNodeRef)

class CameraViewRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::CameraView)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraViewRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraViewRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::CameraView)> self) -> CameraViewRef
        __init__(osg::ref_ptr<(osg::CameraView)> self, CameraView ptr) -> CameraViewRef
        __init__(osg::ref_ptr<(osg::CameraView)> self, CameraViewRef rp) -> CameraViewRef
        __init__(osg::ref_ptr<(osg::CameraView)> self, osg::observer_ptr< osg::CameraView > & optr) -> CameraViewRef
        """
        this = _osg.new_CameraViewRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CameraViewRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(CameraViewRef self) -> CameraView"""
        return _osg.CameraViewRef___ref__(self)

    def __deref__(self):
        """__deref__(CameraViewRef self) -> CameraView"""
        return _osg.CameraViewRef___deref__(self)

    def get(self):
        """get(CameraViewRef self) -> CameraView"""
        return _osg.CameraViewRef_get(self)

    def valid(self):
        """valid(CameraViewRef self) -> bool"""
        return _osg.CameraViewRef_valid(self)

    def release(self):
        """release(CameraViewRef self) -> CameraView"""
        return _osg.CameraViewRef_release(self)

    def swap(self, *args):
        """swap(CameraViewRef self, CameraViewRef rp)"""
        return _osg.CameraViewRef_swap(self, *args)

    def cloneType(self):
        """cloneType(CameraViewRef self) -> Object"""
        return _osg.CameraViewRef_cloneType(self)

    def clone(self, *args):
        """clone(CameraViewRef self, CopyOp copyop) -> Object"""
        return _osg.CameraViewRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(CameraViewRef self, Object obj) -> bool"""
        return _osg.CameraViewRef_isSameKindAs(self, *args)

    def className(self):
        """className(CameraViewRef self) -> char const *"""
        return _osg.CameraViewRef_className(self)

    def libraryName(self):
        """libraryName(CameraViewRef self) -> char const *"""
        return _osg.CameraViewRef_libraryName(self)

    def accept(self, *args):
        """accept(CameraViewRef self, NodeVisitor nv)"""
        return _osg.CameraViewRef_accept(self, *args)

    def setPosition(self, *args):
        """setPosition(CameraViewRef self, Vec3d pos)"""
        return _osg.CameraViewRef_setPosition(self, *args)

    def getPosition(self):
        """getPosition(CameraViewRef self) -> Vec3d"""
        return _osg.CameraViewRef_getPosition(self)

    def setAttitude(self, *args):
        """setAttitude(CameraViewRef self, Quat quat)"""
        return _osg.CameraViewRef_setAttitude(self, *args)

    def getAttitude(self):
        """getAttitude(CameraViewRef self) -> Quat"""
        return _osg.CameraViewRef_getAttitude(self)

    def setFieldOfView(self, *args):
        """setFieldOfView(CameraViewRef self, double fieldOfView)"""
        return _osg.CameraViewRef_setFieldOfView(self, *args)

    def getFieldOfView(self):
        """getFieldOfView(CameraViewRef self) -> double"""
        return _osg.CameraViewRef_getFieldOfView(self)

    def setFieldOfViewMode(self, *args):
        """setFieldOfViewMode(CameraViewRef self, osg::CameraView::FieldOfViewMode mode)"""
        return _osg.CameraViewRef_setFieldOfViewMode(self, *args)

    def getFieldOfViewMode(self):
        """getFieldOfViewMode(CameraViewRef self) -> osg::CameraView::FieldOfViewMode"""
        return _osg.CameraViewRef_getFieldOfViewMode(self)

    def setFocalLength(self, *args):
        """setFocalLength(CameraViewRef self, double focalLength)"""
        return _osg.CameraViewRef_setFocalLength(self, *args)

    def getFocalLength(self):
        """getFocalLength(CameraViewRef self) -> double"""
        return _osg.CameraViewRef_getFocalLength(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(CameraViewRef self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.CameraViewRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(CameraViewRef self, Matrixd matrix, NodeVisitor nv) -> bool"""
        return _osg.CameraViewRef_computeWorldToLocalMatrix(self, *args)

    def asTransform(self, *args):
        """
        asTransform(CameraViewRef self) -> Transform
        asTransform(CameraViewRef self) -> Transform
        """
        return _osg.CameraViewRef_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(CameraViewRef self) -> MatrixTransform
        asMatrixTransform(CameraViewRef self) -> MatrixTransform
        """
        return _osg.CameraViewRef_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(CameraViewRef self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(CameraViewRef self) -> PositionAttitudeTransform
        """
        return _osg.CameraViewRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(CameraViewRef self, osg::Transform::ReferenceFrame rf)"""
        return _osg.CameraViewRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(CameraViewRef self) -> osg::Transform::ReferenceFrame"""
        return _osg.CameraViewRef_getReferenceFrame(self)

    def computeBound(self):
        """computeBound(CameraViewRef self) -> BoundingSpheref"""
        return _osg.CameraViewRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(CameraViewRef self) -> Group
        asGroup(CameraViewRef self) -> Group
        """
        return _osg.CameraViewRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(CameraViewRef self, NodeVisitor nv)"""
        return _osg.CameraViewRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(CameraViewRef self, Node child) -> bool"""
        return _osg.CameraViewRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(CameraViewRef self, unsigned int index, Node child) -> bool"""
        return _osg.CameraViewRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(CameraViewRef self, Node child) -> bool
        removeChild(CameraViewRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(CameraViewRef self, unsigned int pos) -> bool
        """
        return _osg.CameraViewRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(CameraViewRef self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.CameraViewRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(CameraViewRef self, Node origChild, Node newChild) -> bool"""
        return _osg.CameraViewRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(CameraViewRef self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(CameraViewRef self, unsigned int i, Node node) -> bool"""
        return _osg.CameraViewRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(CameraViewRef self, unsigned int i) -> Node
        getChild(CameraViewRef self, unsigned int i) -> Node
        """
        return _osg.CameraViewRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(CameraViewRef self, Node node) -> bool"""
        return _osg.CameraViewRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(CameraViewRef self, Node node) -> unsigned int"""
        return _osg.CameraViewRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(CameraViewRef self, bool threadSafe)"""
        return _osg.CameraViewRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(CameraViewRef self, unsigned int maxSize)"""
        return _osg.CameraViewRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0=None):
        """
        releaseGLObjects(CameraViewRef self, State arg0=None)
        releaseGLObjects(CameraViewRef self)
        """
        return _osg.CameraViewRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(CameraViewRef self) -> ProxyNode"""
        return _osg.CameraViewRef_asProxyNode(self)

    def asCamera(self, *args):
        """
        asCamera(CameraViewRef self) -> Camera
        asCamera(CameraViewRef self) -> Camera
        """
        return _osg.CameraViewRef_asCamera(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(CameraViewRef self) -> Switch
        asSwitch(CameraViewRef self) -> Switch
        """
        return _osg.CameraViewRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(CameraViewRef self) -> Geode
        asGeode(CameraViewRef self) -> Geode
        """
        return _osg.CameraViewRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(CameraViewRef self) -> osgTerrain::Terrain
        asTerrain(CameraViewRef self) -> osgTerrain::Terrain const *
        """
        return _osg.CameraViewRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(CameraViewRef self, NodeVisitor nv)"""
        return _osg.CameraViewRef_ascend(self, *args)

    def getParents(self):
        """getParents(CameraViewRef self) -> vectorGroup"""
        return _osg.CameraViewRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(CameraViewRef self, unsigned int i) -> Group
        getParent(CameraViewRef self, unsigned int i) -> Group
        """
        return _osg.CameraViewRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(CameraViewRef self) -> unsigned int"""
        return _osg.CameraViewRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(CameraViewRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(CameraViewRef self) -> osg::NodePathList
        """
        return _osg.CameraViewRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(CameraViewRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(CameraViewRef self) -> vectorMatrix
        """
        return _osg.CameraViewRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(CameraViewRef self, NodeCallback nc)"""
        return _osg.CameraViewRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(CameraViewRef self) -> NodeCallback
        getUpdateCallback(CameraViewRef self) -> NodeCallback
        """
        return _osg.CameraViewRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(CameraViewRef self, NodeCallback nc)"""
        return _osg.CameraViewRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(CameraViewRef self, NodeCallback nc)"""
        return _osg.CameraViewRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(CameraViewRef self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(CameraViewRef self, NodeCallback nc)"""
        return _osg.CameraViewRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(CameraViewRef self) -> NodeCallback
        getEventCallback(CameraViewRef self) -> NodeCallback
        """
        return _osg.CameraViewRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(CameraViewRef self, NodeCallback nc)"""
        return _osg.CameraViewRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(CameraViewRef self, NodeCallback nc)"""
        return _osg.CameraViewRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(CameraViewRef self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(CameraViewRef self, NodeCallback nc)"""
        return _osg.CameraViewRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(CameraViewRef self) -> NodeCallback
        getCullCallback(CameraViewRef self) -> NodeCallback
        """
        return _osg.CameraViewRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(CameraViewRef self, NodeCallback nc)"""
        return _osg.CameraViewRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(CameraViewRef self, NodeCallback nc)"""
        return _osg.CameraViewRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(CameraViewRef self, bool active)"""
        return _osg.CameraViewRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(CameraViewRef self) -> bool"""
        return _osg.CameraViewRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(CameraViewRef self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(CameraViewRef self) -> bool"""
        return _osg.CameraViewRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(CameraViewRef self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(CameraViewRef self) -> bool"""
        return _osg.CameraViewRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(CameraViewRef self, osg::Node::NodeMask nm)"""
        return _osg.CameraViewRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(CameraViewRef self) -> osg::Node::NodeMask"""
        return _osg.CameraViewRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(CameraViewRef self, StateSet stateset)"""
        return _osg.CameraViewRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(CameraViewRef self) -> StateSet"""
        return _osg.CameraViewRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(CameraViewRef self) -> StateSet
        getStateSet(CameraViewRef self) -> StateSet
        """
        return _osg.CameraViewRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(CameraViewRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.CameraViewRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(CameraViewRef self) -> osg::Node::DescriptionList
        getDescriptions(CameraViewRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.CameraViewRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(CameraViewRef self, unsigned int i) -> std::string const
        getDescription(CameraViewRef self, unsigned int i) -> std::string &
        """
        return _osg.CameraViewRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(CameraViewRef self) -> unsigned int"""
        return _osg.CameraViewRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(CameraViewRef self, std::string const & desc)"""
        return _osg.CameraViewRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(CameraViewRef self, BoundingSpheref bsphere)"""
        return _osg.CameraViewRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(CameraViewRef self) -> BoundingSpheref"""
        return _osg.CameraViewRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(CameraViewRef self)"""
        return _osg.CameraViewRef_dirtyBound(self)

    def getBound(self):
        """getBound(CameraViewRef self) -> BoundingSpheref"""
        return _osg.CameraViewRef_getBound(self)

    def asLOD(self):
        """asLOD(CameraViewRef self) -> LOD"""
        return _osg.CameraViewRef_asLOD(self)

    def setName(self, *args):
        """
        setName(CameraViewRef self, std::string const & name)
        setName(CameraViewRef self, char const * name)
        """
        return _osg.CameraViewRef_setName(self, *args)

    def getName(self):
        """getName(CameraViewRef self) -> std::string const &"""
        return _osg.CameraViewRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(CameraViewRef self, osg::Object::DataVariance dv)"""
        return _osg.CameraViewRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(CameraViewRef self) -> osg::Object::DataVariance"""
        return _osg.CameraViewRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(CameraViewRef self)"""
        return _osg.CameraViewRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(CameraViewRef self, osg::UserDataContainer * udc)"""
        return _osg.CameraViewRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(CameraViewRef self) -> osg::UserDataContainer
        getUserDataContainer(CameraViewRef self) -> osg::UserDataContainer const *
        """
        return _osg.CameraViewRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(CameraViewRef self) -> osg::UserDataContainer *"""
        return _osg.CameraViewRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(CameraViewRef self, Referenced obj)"""
        return _osg.CameraViewRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(CameraViewRef self) -> Referenced
        getUserData(CameraViewRef self) -> Referenced
        """
        return _osg.CameraViewRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(CameraViewRef self) -> bool"""
        return _osg.CameraViewRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(CameraViewRef self) -> OpenThreads::Mutex *"""
        return _osg.CameraViewRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(CameraViewRef self) -> OpenThreads::Mutex *"""
        return _osg.CameraViewRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(CameraViewRef self) -> int"""
        return _osg.CameraViewRef_ref(self)

    def unref(self):
        """unref(CameraViewRef self) -> int"""
        return _osg.CameraViewRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(CameraViewRef self) -> int"""
        return _osg.CameraViewRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(CameraViewRef self) -> int"""
        return _osg.CameraViewRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(CameraViewRef self) -> osg::ObserverSet *"""
        return _osg.CameraViewRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(CameraViewRef self) -> osg::ObserverSet *"""
        return _osg.CameraViewRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(CameraViewRef self, osg::Observer * observer)"""
        return _osg.CameraViewRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(CameraViewRef self, osg::Observer * observer)"""
        return _osg.CameraViewRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(CameraViewRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.CameraViewRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(CameraViewRef self) -> bool"""
        return _osg.CameraViewRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(CameraViewRef self, DeleteHandler handler)"""
        return _osg.CameraViewRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(CameraViewRef self) -> DeleteHandler"""
        return _osg.CameraViewRef_getDeleteHandler(self)

CameraViewRef_swigregister = _osg.CameraViewRef_swigregister
CameraViewRef_swigregister(CameraViewRef)

class CameraRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Camera)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ref_ptr<(osg::Camera)> self) -> CameraRef
        __init__(osg::ref_ptr<(osg::Camera)> self, Camera ptr) -> CameraRef
        __init__(osg::ref_ptr<(osg::Camera)> self, CameraRef rp) -> CameraRef
        __init__(osg::ref_ptr<(osg::Camera)> self, osg::observer_ptr< osg::Camera > & optr) -> CameraRef
        """
        this = _osg.new_CameraRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CameraRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(CameraRef self) -> Camera"""
        return _osg.CameraRef___ref__(self)

    def __deref__(self):
        """__deref__(CameraRef self) -> Camera"""
        return _osg.CameraRef___deref__(self)

    def get(self):
        """get(CameraRef self) -> Camera"""
        return _osg.CameraRef_get(self)

    def valid(self):
        """valid(CameraRef self) -> bool"""
        return _osg.CameraRef_valid(self)

    def release(self):
        """release(CameraRef self) -> Camera"""
        return _osg.CameraRef_release(self)

    def swap(self, *args):
        """swap(CameraRef self, CameraRef rp)"""
        return _osg.CameraRef_swap(self, *args)

    def cloneType(self):
        """cloneType(CameraRef self) -> Object"""
        return _osg.CameraRef_cloneType(self)

    def clone(self, *args):
        """clone(CameraRef self, CopyOp copyop) -> Object"""
        return _osg.CameraRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(CameraRef self, Object obj) -> bool"""
        return _osg.CameraRef_isSameKindAs(self, *args)

    def className(self):
        """className(CameraRef self) -> char const *"""
        return _osg.CameraRef_className(self)

    def libraryName(self):
        """libraryName(CameraRef self) -> char const *"""
        return _osg.CameraRef_libraryName(self)

    def accept(self, *args):
        """accept(CameraRef self, NodeVisitor nv)"""
        return _osg.CameraRef_accept(self, *args)

    def asCamera(self, *args):
        """
        asCamera(CameraRef self) -> Camera
        asCamera(CameraRef self) -> Camera
        """
        return _osg.CameraRef_asCamera(self, *args)

    def setView(self, *args):
        """setView(CameraRef self, View view)"""
        return _osg.CameraRef_setView(self, *args)

    def getView(self, *args):
        """
        getView(CameraRef self) -> View
        getView(CameraRef self) -> View
        """
        return _osg.CameraRef_getView(self, *args)

    def setStats(self, *args):
        """setStats(CameraRef self, Stats stats)"""
        return _osg.CameraRef_setStats(self, *args)

    def getStats(self, *args):
        """
        getStats(CameraRef self) -> Stats
        getStats(CameraRef self) -> Stats
        """
        return _osg.CameraRef_getStats(self, *args)

    def setAllowEventFocus(self, *args):
        """setAllowEventFocus(CameraRef self, bool focus)"""
        return _osg.CameraRef_setAllowEventFocus(self, *args)

    def getAllowEventFocus(self):
        """getAllowEventFocus(CameraRef self) -> bool"""
        return _osg.CameraRef_getAllowEventFocus(self)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(CameraRef self, DisplaySettings ds)"""
        return _osg.CameraRef_setDisplaySettings(self, *args)

    def getDisplaySettings(self, *args):
        """
        getDisplaySettings(CameraRef self) -> DisplaySettings
        getDisplaySettings(CameraRef self) -> DisplaySettings
        """
        return _osg.CameraRef_getDisplaySettings(self, *args)

    def setClearMask(self, *args):
        """setClearMask(CameraRef self, GLbitfield mask)"""
        return _osg.CameraRef_setClearMask(self, *args)

    def getClearMask(self):
        """getClearMask(CameraRef self) -> GLbitfield"""
        return _osg.CameraRef_getClearMask(self)

    def setClearColor(self, *args):
        """setClearColor(CameraRef self, Vec4f color)"""
        return _osg.CameraRef_setClearColor(self, *args)

    def getClearColor(self):
        """getClearColor(CameraRef self) -> Vec4f"""
        return _osg.CameraRef_getClearColor(self)

    def setClearAccum(self, *args):
        """setClearAccum(CameraRef self, Vec4f color)"""
        return _osg.CameraRef_setClearAccum(self, *args)

    def getClearAccum(self):
        """getClearAccum(CameraRef self) -> Vec4f"""
        return _osg.CameraRef_getClearAccum(self)

    def setClearDepth(self, *args):
        """setClearDepth(CameraRef self, double depth)"""
        return _osg.CameraRef_setClearDepth(self, *args)

    def getClearDepth(self):
        """getClearDepth(CameraRef self) -> double"""
        return _osg.CameraRef_getClearDepth(self)

    def setClearStencil(self, *args):
        """setClearStencil(CameraRef self, int stencil)"""
        return _osg.CameraRef_setClearStencil(self, *args)

    def getClearStencil(self):
        """getClearStencil(CameraRef self) -> int"""
        return _osg.CameraRef_getClearStencil(self)

    def setColorMask(self, *args):
        """
        setColorMask(CameraRef self, ColorMask colorMask)
        setColorMask(CameraRef self, bool red, bool green, bool blue, bool alpha)
        """
        return _osg.CameraRef_setColorMask(self, *args)

    def getColorMask(self, *args):
        """
        getColorMask(CameraRef self) -> ColorMask
        getColorMask(CameraRef self) -> ColorMask
        """
        return _osg.CameraRef_getColorMask(self, *args)

    def setViewport(self, *args):
        """
        setViewport(CameraRef self, Viewport viewport)
        setViewport(CameraRef self, int x, int y, int width, int height)
        """
        return _osg.CameraRef_setViewport(self, *args)

    def getViewport(self, *args):
        """
        getViewport(CameraRef self) -> Viewport
        getViewport(CameraRef self) -> Viewport
        """
        return _osg.CameraRef_getViewport(self, *args)

    def setTransformOrder(self, *args):
        """setTransformOrder(CameraRef self, osg::Camera::TransformOrder order)"""
        return _osg.CameraRef_setTransformOrder(self, *args)

    def getTransformOrder(self):
        """getTransformOrder(CameraRef self) -> osg::Camera::TransformOrder"""
        return _osg.CameraRef_getTransformOrder(self)

    def setProjectionResizePolicy(self, *args):
        """setProjectionResizePolicy(CameraRef self, osg::Camera::ProjectionResizePolicy policy)"""
        return _osg.CameraRef_setProjectionResizePolicy(self, *args)

    def getProjectionResizePolicy(self):
        """getProjectionResizePolicy(CameraRef self) -> osg::Camera::ProjectionResizePolicy"""
        return _osg.CameraRef_getProjectionResizePolicy(self)

    def setProjectionMatrix(self, *args):
        """
        setProjectionMatrix(CameraRef self, Matrixf matrix)
        setProjectionMatrix(CameraRef self, Matrixd matrix)
        """
        return _osg.CameraRef_setProjectionMatrix(self, *args)

    def setProjectionMatrixAsOrtho(self, *args):
        """setProjectionMatrixAsOrtho(CameraRef self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osg.CameraRef_setProjectionMatrixAsOrtho(self, *args)

    def setProjectionMatrixAsOrtho2D(self, *args):
        """setProjectionMatrixAsOrtho2D(CameraRef self, double left, double right, double bottom, double top)"""
        return _osg.CameraRef_setProjectionMatrixAsOrtho2D(self, *args)

    def setProjectionMatrixAsFrustum(self, *args):
        """setProjectionMatrixAsFrustum(CameraRef self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osg.CameraRef_setProjectionMatrixAsFrustum(self, *args)

    def setProjectionMatrixAsPerspective(self, *args):
        """setProjectionMatrixAsPerspective(CameraRef self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osg.CameraRef_setProjectionMatrixAsPerspective(self, *args)

    def getProjectionMatrix(self, *args):
        """
        getProjectionMatrix(CameraRef self) -> Matrixd
        getProjectionMatrix(CameraRef self) -> Matrixd
        """
        return _osg.CameraRef_getProjectionMatrix(self, *args)

    def getProjectionMatrixAsOrtho(self, *args):
        """getProjectionMatrixAsOrtho(CameraRef self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool"""
        return _osg.CameraRef_getProjectionMatrixAsOrtho(self, *args)

    def getProjectionMatrixAsFrustum(self, *args):
        """getProjectionMatrixAsFrustum(CameraRef self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool"""
        return _osg.CameraRef_getProjectionMatrixAsFrustum(self, *args)

    def getProjectionMatrixAsPerspective(self, *args):
        """getProjectionMatrixAsPerspective(CameraRef self, double & fovy, double & aspectRatio, double & zNear, double & zFar) -> bool"""
        return _osg.CameraRef_getProjectionMatrixAsPerspective(self, *args)

    def setViewMatrix(self, *args):
        """
        setViewMatrix(CameraRef self, Matrixf matrix)
        setViewMatrix(CameraRef self, Matrixd matrix)
        """
        return _osg.CameraRef_setViewMatrix(self, *args)

    def getViewMatrix(self, *args):
        """
        getViewMatrix(CameraRef self) -> Matrixd
        getViewMatrix(CameraRef self) -> Matrixd
        """
        return _osg.CameraRef_getViewMatrix(self, *args)

    def setViewMatrixAsLookAt(self, *args):
        """setViewMatrixAsLookAt(CameraRef self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osg.CameraRef_setViewMatrixAsLookAt(self, *args)

    def getViewMatrixAsLookAt(self, *args):
        """
        getViewMatrixAsLookAt(CameraRef self, Vec3d eye, Vec3d center, Vec3d up, double lookDistance=1.0)
        getViewMatrixAsLookAt(CameraRef self, Vec3d eye, Vec3d center, Vec3d up)
        getViewMatrixAsLookAt(CameraRef self, Vec3f eye, Vec3f center, Vec3f up, float lookDistance=1.0)
        getViewMatrixAsLookAt(CameraRef self, Vec3f eye, Vec3f center, Vec3f up)
        """
        return _osg.CameraRef_getViewMatrixAsLookAt(self, *args)

    def getInverseViewMatrix(self):
        """getInverseViewMatrix(CameraRef self) -> Matrixd"""
        return _osg.CameraRef_getInverseViewMatrix(self)

    def setRenderOrder(self, *args):
        """
        setRenderOrder(CameraRef self, osg::Camera::RenderOrder order, int orderNum=0)
        setRenderOrder(CameraRef self, osg::Camera::RenderOrder order)
        """
        return _osg.CameraRef_setRenderOrder(self, *args)

    def getRenderOrder(self):
        """getRenderOrder(CameraRef self) -> osg::Camera::RenderOrder"""
        return _osg.CameraRef_getRenderOrder(self)

    def getRenderOrderNum(self):
        """getRenderOrderNum(CameraRef self) -> int"""
        return _osg.CameraRef_getRenderOrderNum(self)

    def isRenderToTextureCamera(self):
        """isRenderToTextureCamera(CameraRef self) -> bool"""
        return _osg.CameraRef_isRenderToTextureCamera(self)

    def setRenderTargetImplementation(self, *args):
        """
        setRenderTargetImplementation(CameraRef self, osg::Camera::RenderTargetImplementation impl)
        setRenderTargetImplementation(CameraRef self, osg::Camera::RenderTargetImplementation impl, osg::Camera::RenderTargetImplementation fallback)
        """
        return _osg.CameraRef_setRenderTargetImplementation(self, *args)

    def getRenderTargetImplementation(self):
        """getRenderTargetImplementation(CameraRef self) -> osg::Camera::RenderTargetImplementation"""
        return _osg.CameraRef_getRenderTargetImplementation(self)

    def getRenderTargetFallback(self):
        """getRenderTargetFallback(CameraRef self) -> osg::Camera::RenderTargetImplementation"""
        return _osg.CameraRef_getRenderTargetFallback(self)

    def setDrawBuffer(self, *args):
        """setDrawBuffer(CameraRef self, GLenum buffer)"""
        return _osg.CameraRef_setDrawBuffer(self, *args)

    def getDrawBuffer(self):
        """getDrawBuffer(CameraRef self) -> GLenum"""
        return _osg.CameraRef_getDrawBuffer(self)

    def setReadBuffer(self, *args):
        """setReadBuffer(CameraRef self, GLenum buffer)"""
        return _osg.CameraRef_setReadBuffer(self, *args)

    def getReadBuffer(self):
        """getReadBuffer(CameraRef self) -> GLenum"""
        return _osg.CameraRef_getReadBuffer(self)

    __swig_getmethods__["FACE_CONTROLLED_BY_GEOMETRY_SHADER"] = _osg.CameraRef_FACE_CONTROLLED_BY_GEOMETRY_SHADER_get
    if _newclass:FACE_CONTROLLED_BY_GEOMETRY_SHADER = _swig_property(_osg.CameraRef_FACE_CONTROLLED_BY_GEOMETRY_SHADER_get)
    def attach(self, *args):
        """
        attach(CameraRef self, osg::Camera::BufferComponent buffer, GLenum internalFormat)
        attach(CameraRef self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0, unsigned int face=0, 
            bool mipMapGeneration=False, unsigned int multisampleSamples=0, 
            unsigned int multisampleColorSamples=0)
        attach(CameraRef self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0, unsigned int face=0, 
            bool mipMapGeneration=False, unsigned int multisampleSamples=0)
        attach(CameraRef self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0, unsigned int face=0, 
            bool mipMapGeneration=False)
        attach(CameraRef self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0, unsigned int face=0)
        attach(CameraRef self, osg::Camera::BufferComponent buffer, Texture texture, unsigned int level=0)
        attach(CameraRef self, osg::Camera::BufferComponent buffer, Texture texture)
        attach(CameraRef self, osg::Camera::BufferComponent buffer, Image image, unsigned int multisampleSamples=0, 
            unsigned int multisampleColorSamples=0)
        attach(CameraRef self, osg::Camera::BufferComponent buffer, Image image, unsigned int multisampleSamples=0)
        attach(CameraRef self, osg::Camera::BufferComponent buffer, Image image)
        """
        return _osg.CameraRef_attach(self, *args)

    def detach(self, *args):
        """detach(CameraRef self, osg::Camera::BufferComponent buffer)"""
        return _osg.CameraRef_detach(self, *args)

    def setImplicitBufferAttachmentMask(self, *args):
        """
        setImplicitBufferAttachmentMask(CameraRef self, osg::Camera::ImplicitBufferAttachmentMask renderMask=DEFAULT_IMPLICIT_BUFFER_ATTACHMENT, 
            osg::Camera::ImplicitBufferAttachmentMask resolveMask=DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(CameraRef self, osg::Camera::ImplicitBufferAttachmentMask renderMask=DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(CameraRef self)
        """
        return _osg.CameraRef_setImplicitBufferAttachmentMask(self, *args)

    def setImplicitBufferAttachmentRenderMask(self, *args):
        """setImplicitBufferAttachmentRenderMask(CameraRef self, osg::Camera::ImplicitBufferAttachmentMask implicitBufferAttachmentRenderMask)"""
        return _osg.CameraRef_setImplicitBufferAttachmentRenderMask(self, *args)

    def setImplicitBufferAttachmentResolveMask(self, *args):
        """setImplicitBufferAttachmentResolveMask(CameraRef self, osg::Camera::ImplicitBufferAttachmentMask implicitBufferAttachmentResolveMask)"""
        return _osg.CameraRef_setImplicitBufferAttachmentResolveMask(self, *args)

    def getImplicitBufferAttachmentRenderMask(self, effectiveMask=False):
        """
        getImplicitBufferAttachmentRenderMask(CameraRef self, bool effectiveMask=False) -> osg::Camera::ImplicitBufferAttachmentMask
        getImplicitBufferAttachmentRenderMask(CameraRef self) -> osg::Camera::ImplicitBufferAttachmentMask
        """
        return _osg.CameraRef_getImplicitBufferAttachmentRenderMask(self, effectiveMask)

    def getImplicitBufferAttachmentResolveMask(self, effectiveMask=False):
        """
        getImplicitBufferAttachmentResolveMask(CameraRef self, bool effectiveMask=False) -> osg::Camera::ImplicitBufferAttachmentMask
        getImplicitBufferAttachmentResolveMask(CameraRef self) -> osg::Camera::ImplicitBufferAttachmentMask
        """
        return _osg.CameraRef_getImplicitBufferAttachmentResolveMask(self, effectiveMask)

    def createCameraThread(self):
        """createCameraThread(CameraRef self)"""
        return _osg.CameraRef_createCameraThread(self)

    def setGraphicsContext(self, *args):
        """setGraphicsContext(CameraRef self, GraphicsContext context)"""
        return _osg.CameraRef_setGraphicsContext(self, *args)

    def getGraphicsContext(self, *args):
        """
        getGraphicsContext(CameraRef self) -> GraphicsContext
        getGraphicsContext(CameraRef self) -> GraphicsContext
        """
        return _osg.CameraRef_getGraphicsContext(self, *args)

    def setRenderer(self, *args):
        """setRenderer(CameraRef self, GraphicsOperation rc)"""
        return _osg.CameraRef_setRenderer(self, *args)

    def getRenderer(self, *args):
        """
        getRenderer(CameraRef self) -> GraphicsOperation
        getRenderer(CameraRef self) -> GraphicsOperation
        """
        return _osg.CameraRef_getRenderer(self, *args)

    def setRenderingCache(self, *args):
        """setRenderingCache(CameraRef self, Object rc)"""
        return _osg.CameraRef_setRenderingCache(self, *args)

    def getRenderingCache(self, *args):
        """
        getRenderingCache(CameraRef self) -> Object
        getRenderingCache(CameraRef self) -> Object
        """
        return _osg.CameraRef_getRenderingCache(self, *args)

    def setInitialDrawCallback(self, *args):
        """setInitialDrawCallback(CameraRef self, osg::Camera::DrawCallback * cb)"""
        return _osg.CameraRef_setInitialDrawCallback(self, *args)

    def getInitialDrawCallback(self, *args):
        """
        getInitialDrawCallback(CameraRef self) -> osg::Camera::DrawCallback
        getInitialDrawCallback(CameraRef self) -> osg::Camera::DrawCallback const *
        """
        return _osg.CameraRef_getInitialDrawCallback(self, *args)

    def setPreDrawCallback(self, *args):
        """setPreDrawCallback(CameraRef self, osg::Camera::DrawCallback * cb)"""
        return _osg.CameraRef_setPreDrawCallback(self, *args)

    def getPreDrawCallback(self, *args):
        """
        getPreDrawCallback(CameraRef self) -> osg::Camera::DrawCallback
        getPreDrawCallback(CameraRef self) -> osg::Camera::DrawCallback const *
        """
        return _osg.CameraRef_getPreDrawCallback(self, *args)

    def setPostDrawCallback(self, *args):
        """setPostDrawCallback(CameraRef self, osg::Camera::DrawCallback * cb)"""
        return _osg.CameraRef_setPostDrawCallback(self, *args)

    def getPostDrawCallback(self, *args):
        """
        getPostDrawCallback(CameraRef self) -> osg::Camera::DrawCallback
        getPostDrawCallback(CameraRef self) -> osg::Camera::DrawCallback const *
        """
        return _osg.CameraRef_getPostDrawCallback(self, *args)

    def setFinalDrawCallback(self, *args):
        """setFinalDrawCallback(CameraRef self, osg::Camera::DrawCallback * cb)"""
        return _osg.CameraRef_setFinalDrawCallback(self, *args)

    def getFinalDrawCallback(self, *args):
        """
        getFinalDrawCallback(CameraRef self) -> osg::Camera::DrawCallback
        getFinalDrawCallback(CameraRef self) -> osg::Camera::DrawCallback const *
        """
        return _osg.CameraRef_getFinalDrawCallback(self, *args)

    def getDataChangeMutex(self):
        """getDataChangeMutex(CameraRef self) -> OpenThreads::Mutex *"""
        return _osg.CameraRef_getDataChangeMutex(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(CameraRef self, unsigned int maxSize)"""
        return _osg.CameraRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg2=None):
        """
        releaseGLObjects(CameraRef self, State arg2=None)
        releaseGLObjects(CameraRef self)
        """
        return _osg.CameraRef_releaseGLObjects(self, arg2)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(CameraRef self, Matrixd matrix, NodeVisitor arg3) -> bool"""
        return _osg.CameraRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(CameraRef self, Matrixd matrix, NodeVisitor arg3) -> bool"""
        return _osg.CameraRef_computeWorldToLocalMatrix(self, *args)

    def inheritCullSettings(self, *args):
        """inheritCullSettings(CameraRef self, CullSettings settings, unsigned int inheritanceMask)"""
        return _osg.CameraRef_inheritCullSettings(self, *args)

    def asTransform(self, *args):
        """
        asTransform(CameraRef self) -> Transform
        asTransform(CameraRef self) -> Transform
        """
        return _osg.CameraRef_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(CameraRef self) -> MatrixTransform
        asMatrixTransform(CameraRef self) -> MatrixTransform
        """
        return _osg.CameraRef_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(CameraRef self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(CameraRef self) -> PositionAttitudeTransform
        """
        return _osg.CameraRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(CameraRef self, osg::Transform::ReferenceFrame rf)"""
        return _osg.CameraRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(CameraRef self) -> osg::Transform::ReferenceFrame"""
        return _osg.CameraRef_getReferenceFrame(self)

    def computeBound(self):
        """computeBound(CameraRef self) -> BoundingSpheref"""
        return _osg.CameraRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(CameraRef self) -> Group
        asGroup(CameraRef self) -> Group
        """
        return _osg.CameraRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(CameraRef self, NodeVisitor nv)"""
        return _osg.CameraRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(CameraRef self, Node child) -> bool"""
        return _osg.CameraRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(CameraRef self, unsigned int index, Node child) -> bool"""
        return _osg.CameraRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(CameraRef self, Node child) -> bool
        removeChild(CameraRef self, unsigned int pos, unsigned int numChildrenToRemove=1) -> bool
        removeChild(CameraRef self, unsigned int pos) -> bool
        """
        return _osg.CameraRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(CameraRef self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.CameraRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(CameraRef self, Node origChild, Node newChild) -> bool"""
        return _osg.CameraRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(CameraRef self) -> unsigned int"""
        return _osg.CameraRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(CameraRef self, unsigned int i, Node node) -> bool"""
        return _osg.CameraRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(CameraRef self, unsigned int i) -> Node
        getChild(CameraRef self, unsigned int i) -> Node
        """
        return _osg.CameraRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(CameraRef self, Node node) -> bool"""
        return _osg.CameraRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(CameraRef self, Node node) -> unsigned int"""
        return _osg.CameraRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(CameraRef self, bool threadSafe)"""
        return _osg.CameraRef_setThreadSafeRefUnref(self, *args)

    def asProxyNode(self):
        """asProxyNode(CameraRef self) -> ProxyNode"""
        return _osg.CameraRef_asProxyNode(self)

    def asSwitch(self, *args):
        """
        asSwitch(CameraRef self) -> Switch
        asSwitch(CameraRef self) -> Switch
        """
        return _osg.CameraRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(CameraRef self) -> Geode
        asGeode(CameraRef self) -> Geode
        """
        return _osg.CameraRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(CameraRef self) -> osgTerrain::Terrain
        asTerrain(CameraRef self) -> osgTerrain::Terrain const *
        """
        return _osg.CameraRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(CameraRef self, NodeVisitor nv)"""
        return _osg.CameraRef_ascend(self, *args)

    def getParents(self):
        """getParents(CameraRef self) -> vectorGroup"""
        return _osg.CameraRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(CameraRef self, unsigned int i) -> Group
        getParent(CameraRef self, unsigned int i) -> Group
        """
        return _osg.CameraRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(CameraRef self) -> unsigned int"""
        return _osg.CameraRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode=None):
        """
        getParentalNodePaths(CameraRef self, Node haltTraversalAtNode=None) -> osg::NodePathList
        getParentalNodePaths(CameraRef self) -> osg::NodePathList
        """
        return _osg.CameraRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode=None):
        """
        getWorldMatrices(CameraRef self, Node haltTraversalAtNode=None) -> vectorMatrix
        getWorldMatrices(CameraRef self) -> vectorMatrix
        """
        return _osg.CameraRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(CameraRef self, NodeCallback nc)"""
        return _osg.CameraRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(CameraRef self) -> NodeCallback
        getUpdateCallback(CameraRef self) -> NodeCallback
        """
        return _osg.CameraRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(CameraRef self, NodeCallback nc)"""
        return _osg.CameraRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(CameraRef self, NodeCallback nc)"""
        return _osg.CameraRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(CameraRef self) -> unsigned int"""
        return _osg.CameraRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(CameraRef self, NodeCallback nc)"""
        return _osg.CameraRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(CameraRef self) -> NodeCallback
        getEventCallback(CameraRef self) -> NodeCallback
        """
        return _osg.CameraRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(CameraRef self, NodeCallback nc)"""
        return _osg.CameraRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(CameraRef self, NodeCallback nc)"""
        return _osg.CameraRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(CameraRef self) -> unsigned int"""
        return _osg.CameraRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(CameraRef self, NodeCallback nc)"""
        return _osg.CameraRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(CameraRef self) -> NodeCallback
        getCullCallback(CameraRef self) -> NodeCallback
        """
        return _osg.CameraRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(CameraRef self, NodeCallback nc)"""
        return _osg.CameraRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(CameraRef self, NodeCallback nc)"""
        return _osg.CameraRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(CameraRef self, bool active)"""
        return _osg.CameraRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(CameraRef self) -> bool"""
        return _osg.CameraRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(CameraRef self) -> unsigned int"""
        return _osg.CameraRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(CameraRef self) -> bool"""
        return _osg.CameraRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(CameraRef self) -> unsigned int"""
        return _osg.CameraRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(CameraRef self) -> bool"""
        return _osg.CameraRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(CameraRef self, osg::Node::NodeMask nm)"""
        return _osg.CameraRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(CameraRef self) -> osg::Node::NodeMask"""
        return _osg.CameraRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(CameraRef self, StateSet stateset)"""
        return _osg.CameraRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(CameraRef self) -> StateSet"""
        return _osg.CameraRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(CameraRef self) -> StateSet
        getStateSet(CameraRef self) -> StateSet
        """
        return _osg.CameraRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(CameraRef self, osg::Node::DescriptionList const & descriptions)"""
        return _osg.CameraRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(CameraRef self) -> osg::Node::DescriptionList
        getDescriptions(CameraRef self) -> osg::Node::DescriptionList const &
        """
        return _osg.CameraRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(CameraRef self, unsigned int i) -> std::string const
        getDescription(CameraRef self, unsigned int i) -> std::string &
        """
        return _osg.CameraRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(CameraRef self) -> unsigned int"""
        return _osg.CameraRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(CameraRef self, std::string const & desc)"""
        return _osg.CameraRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(CameraRef self, BoundingSpheref bsphere)"""
        return _osg.CameraRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(CameraRef self) -> BoundingSpheref"""
        return _osg.CameraRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(CameraRef self)"""
        return _osg.CameraRef_dirtyBound(self)

    def getBound(self):
        """getBound(CameraRef self) -> BoundingSpheref"""
        return _osg.CameraRef_getBound(self)

    def asLOD(self):
        """asLOD(CameraRef self) -> LOD"""
        return _osg.CameraRef_asLOD(self)

    def setName(self, *args):
        """
        setName(CameraRef self, std::string const & name)
        setName(CameraRef self, char const * name)
        """
        return _osg.CameraRef_setName(self, *args)

    def getName(self):
        """getName(CameraRef self) -> std::string const &"""
        return _osg.CameraRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(CameraRef self, osg::Object::DataVariance dv)"""
        return _osg.CameraRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(CameraRef self) -> osg::Object::DataVariance"""
        return _osg.CameraRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(CameraRef self)"""
        return _osg.CameraRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(CameraRef self, osg::UserDataContainer * udc)"""
        return _osg.CameraRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(CameraRef self) -> osg::UserDataContainer
        getUserDataContainer(CameraRef self) -> osg::UserDataContainer const *
        """
        return _osg.CameraRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(CameraRef self) -> osg::UserDataContainer *"""
        return _osg.CameraRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(CameraRef self, Referenced obj)"""
        return _osg.CameraRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(CameraRef self) -> Referenced
        getUserData(CameraRef self) -> Referenced
        """
        return _osg.CameraRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(CameraRef self) -> bool"""
        return _osg.CameraRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(CameraRef self) -> OpenThreads::Mutex *"""
        return _osg.CameraRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(CameraRef self) -> OpenThreads::Mutex *"""
        return _osg.CameraRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(CameraRef self) -> int"""
        return _osg.CameraRef_ref(self)

    def unref(self):
        """unref(CameraRef self) -> int"""
        return _osg.CameraRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(CameraRef self) -> int"""
        return _osg.CameraRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(CameraRef self) -> int"""
        return _osg.CameraRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(CameraRef self) -> osg::ObserverSet *"""
        return _osg.CameraRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(CameraRef self) -> osg::ObserverSet *"""
        return _osg.CameraRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(CameraRef self, osg::Observer * observer)"""
        return _osg.CameraRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(CameraRef self, osg::Observer * observer)"""
        return _osg.CameraRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(CameraRef self, bool enableThreadSafeReferenceCounting)"""
        return _osg.CameraRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(CameraRef self) -> bool"""
        return _osg.CameraRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(CameraRef self, DeleteHandler handler)"""
        return _osg.CameraRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(CameraRef self) -> DeleteHandler"""
        return _osg.CameraRef_getDeleteHandler(self)

    def setDefaults(self):
        """setDefaults(CameraRef self)"""
        return _osg.CameraRef_setDefaults(self)

    def setInheritanceMask(self, *args):
        """setInheritanceMask(CameraRef self, osg::CullSettings::InheritanceMask mask)"""
        return _osg.CameraRef_setInheritanceMask(self, *args)

    def getInheritanceMask(self):
        """getInheritanceMask(CameraRef self) -> osg::CullSettings::InheritanceMask"""
        return _osg.CameraRef_getInheritanceMask(self)

    def setCullSettings(self, *args):
        """setCullSettings(CameraRef self, CullSettings settings)"""
        return _osg.CameraRef_setCullSettings(self, *args)

    def readEnvironmentalVariables(self):
        """readEnvironmentalVariables(CameraRef self)"""
        return _osg.CameraRef_readEnvironmentalVariables(self)

    def readCommandLine(self, *args):
        """readCommandLine(CameraRef self, ArgumentParser arguments)"""
        return _osg.CameraRef_readCommandLine(self, *args)

    def setInheritanceMaskActionOnAttributeSetting(self, *args):
        """setInheritanceMaskActionOnAttributeSetting(CameraRef self, osg::CullSettings::InheritanceMaskActionOnAttributeSetting action)"""
        return _osg.CameraRef_setInheritanceMaskActionOnAttributeSetting(self, *args)

    def getInheritanceMaskActionOnAttributeSetting(self):
        """getInheritanceMaskActionOnAttributeSetting(CameraRef self) -> osg::CullSettings::InheritanceMaskActionOnAttributeSetting"""
        return _osg.CameraRef_getInheritanceMaskActionOnAttributeSetting(self)

    def applyMaskAction(self, *args):
        """applyMaskAction(CameraRef self, unsigned int maskBit)"""
        return _osg.CameraRef_applyMaskAction(self, *args)

    def setImpostorsActive(self, *args):
        """setImpostorsActive(CameraRef self, bool active)"""
        return _osg.CameraRef_setImpostorsActive(self, *args)

    def getImpostorsActive(self):
        """getImpostorsActive(CameraRef self) -> bool"""
        return _osg.CameraRef_getImpostorsActive(self)

    def setImpostorPixelErrorThreshold(self, *args):
        """setImpostorPixelErrorThreshold(CameraRef self, float numPixels)"""
        return _osg.CameraRef_setImpostorPixelErrorThreshold(self, *args)

    def getImpostorPixelErrorThreshold(self):
        """getImpostorPixelErrorThreshold(CameraRef self) -> float"""
        return _osg.CameraRef_getImpostorPixelErrorThreshold(self)

    def setDepthSortImpostorSprites(self, *args):
        """setDepthSortImpostorSprites(CameraRef self, bool doDepthSort)"""
        return _osg.CameraRef_setDepthSortImpostorSprites(self, *args)

    def getDepthSortImpostorSprites(self):
        """getDepthSortImpostorSprites(CameraRef self) -> bool"""
        return _osg.CameraRef_getDepthSortImpostorSprites(self)

    def setNumberOfFrameToKeepImpostorSprites(self, *args):
        """setNumberOfFrameToKeepImpostorSprites(CameraRef self, int numFrames)"""
        return _osg.CameraRef_setNumberOfFrameToKeepImpostorSprites(self, *args)

    def getNumberOfFrameToKeepImpostorSprites(self):
        """getNumberOfFrameToKeepImpostorSprites(CameraRef self) -> int"""
        return _osg.CameraRef_getNumberOfFrameToKeepImpostorSprites(self)

    def setComputeNearFarMode(self, *args):
        """setComputeNearFarMode(CameraRef self, osg::CullSettings::ComputeNearFarMode cnfm)"""
        return _osg.CameraRef_setComputeNearFarMode(self, *args)

    def getComputeNearFarMode(self):
        """getComputeNearFarMode(CameraRef self) -> osg::CullSettings::ComputeNearFarMode"""
        return _osg.CameraRef_getComputeNearFarMode(self)

    def setNearFarRatio(self, *args):
        """setNearFarRatio(CameraRef self, double ratio)"""
        return _osg.CameraRef_setNearFarRatio(self, *args)

    def getNearFarRatio(self):
        """getNearFarRatio(CameraRef self) -> double"""
        return _osg.CameraRef_getNearFarRatio(self)

    def setCullingMode(self, *args):
        """setCullingMode(CameraRef self, osg::CullSettings::CullingMode mode)"""
        return _osg.CameraRef_setCullingMode(self, *args)

    def getCullingMode(self):
        """getCullingMode(CameraRef self) -> osg::CullSettings::CullingMode"""
        return _osg.CameraRef_getCullingMode(self)

    def setCullMask(self, *args):
        """setCullMask(CameraRef self, osg::Node::NodeMask nm)"""
        return _osg.CameraRef_setCullMask(self, *args)

    def getCullMask(self):
        """getCullMask(CameraRef self) -> osg::Node::NodeMask"""
        return _osg.CameraRef_getCullMask(self)

    def setCullMaskLeft(self, *args):
        """setCullMaskLeft(CameraRef self, osg::Node::NodeMask nm)"""
        return _osg.CameraRef_setCullMaskLeft(self, *args)

    def getCullMaskLeft(self):
        """getCullMaskLeft(CameraRef self) -> osg::Node::NodeMask"""
        return _osg.CameraRef_getCullMaskLeft(self)

    def setCullMaskRight(self, *args):
        """setCullMaskRight(CameraRef self, osg::Node::NodeMask nm)"""
        return _osg.CameraRef_setCullMaskRight(self, *args)

    def getCullMaskRight(self):
        """getCullMaskRight(CameraRef self) -> osg::Node::NodeMask"""
        return _osg.CameraRef_getCullMaskRight(self)

    def setLODScale(self, *args):
        """setLODScale(CameraRef self, float scale)"""
        return _osg.CameraRef_setLODScale(self, *args)

    def getLODScale(self):
        """getLODScale(CameraRef self) -> float"""
        return _osg.CameraRef_getLODScale(self)

    def setSmallFeatureCullingPixelSize(self, *args):
        """setSmallFeatureCullingPixelSize(CameraRef self, float value)"""
        return _osg.CameraRef_setSmallFeatureCullingPixelSize(self, *args)

    def getSmallFeatureCullingPixelSize(self):
        """getSmallFeatureCullingPixelSize(CameraRef self) -> float"""
        return _osg.CameraRef_getSmallFeatureCullingPixelSize(self)

    def write(self, *args):
        """write(CameraRef self, std::ostream & out)"""
        return _osg.CameraRef_write(self, *args)

CameraRef_swigregister = _osg.CameraRef_swigregister
CameraRef_swigregister(CameraRef)

class BoundingBoxf(_object):
    """Proxy of C++ osg::BoundingBoxImpl<(osg::Vec3f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBoxf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBoxf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_min"] = _osg.BoundingBoxf__min_set
    __swig_getmethods__["_min"] = _osg.BoundingBoxf__min_get
    if _newclass:_min = _swig_property(_osg.BoundingBoxf__min_get, _osg.BoundingBoxf__min_set)
    __swig_setmethods__["_max"] = _osg.BoundingBoxf__max_set
    __swig_getmethods__["_max"] = _osg.BoundingBoxf__max_get
    if _newclass:_max = _swig_property(_osg.BoundingBoxf__max_get, _osg.BoundingBoxf__max_set)
    def __init__(self, *args): 
        """
        __init__(osg::BoundingBoxImpl<(osg::Vec3f)> self) -> BoundingBoxf
        __init__(osg::BoundingBoxImpl<(osg::Vec3f)> self, osg::BoundingBoxImpl< osg::Vec3f >::value_type xmin, osg::BoundingBoxImpl< osg::Vec3f >::value_type ymin, 
            osg::BoundingBoxImpl< osg::Vec3f >::value_type zmin, 
            osg::BoundingBoxImpl< osg::Vec3f >::value_type xmax, osg::BoundingBoxImpl< osg::Vec3f >::value_type ymax, 
            osg::BoundingBoxImpl< osg::Vec3f >::value_type zmax) -> BoundingBoxf
        __init__(osg::BoundingBoxImpl<(osg::Vec3f)> self, Vec3f min, Vec3f max) -> BoundingBoxf
        """
        this = _osg.new_BoundingBoxf(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self):
        """init(BoundingBoxf self)"""
        return _osg.BoundingBoxf_init(self)

    def __eq__(self, *args):
        """__eq__(BoundingBoxf self, BoundingBoxf rhs) -> bool"""
        return _osg.BoundingBoxf___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(BoundingBoxf self, BoundingBoxf rhs) -> bool"""
        return _osg.BoundingBoxf___ne__(self, *args)

    def valid(self):
        """valid(BoundingBoxf self) -> bool"""
        return _osg.BoundingBoxf_valid(self)

    def set(self, *args):
        """
        set(BoundingBoxf self, osg::BoundingBoxImpl< osg::Vec3f >::value_type xmin, osg::BoundingBoxImpl< osg::Vec3f >::value_type ymin, 
            osg::BoundingBoxImpl< osg::Vec3f >::value_type zmin, 
            osg::BoundingBoxImpl< osg::Vec3f >::value_type xmax, osg::BoundingBoxImpl< osg::Vec3f >::value_type ymax, 
            osg::BoundingBoxImpl< osg::Vec3f >::value_type zmax)
        set(BoundingBoxf self, Vec3f min, Vec3f max)
        """
        return _osg.BoundingBoxf_set(self, *args)

    def xMin(self):
        """xMin(BoundingBoxf self) -> osg::BoundingBoxImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingBoxf_xMin(self)

    def yMin(self):
        """yMin(BoundingBoxf self) -> osg::BoundingBoxImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingBoxf_yMin(self)

    def zMin(self):
        """zMin(BoundingBoxf self) -> osg::BoundingBoxImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingBoxf_zMin(self)

    def xMax(self):
        """xMax(BoundingBoxf self) -> osg::BoundingBoxImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingBoxf_xMax(self)

    def yMax(self):
        """yMax(BoundingBoxf self) -> osg::BoundingBoxImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingBoxf_yMax(self)

    def zMax(self):
        """zMax(BoundingBoxf self) -> osg::BoundingBoxImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingBoxf_zMax(self)

    def center(self):
        """center(BoundingBoxf self) -> Vec3f"""
        return _osg.BoundingBoxf_center(self)

    def radius(self):
        """radius(BoundingBoxf self) -> osg::BoundingBoxImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingBoxf_radius(self)

    def radius2(self):
        """radius2(BoundingBoxf self) -> osg::BoundingBoxImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingBoxf_radius2(self)

    def corner(self, *args):
        """corner(BoundingBoxf self, unsigned int pos) -> Vec3f"""
        return _osg.BoundingBoxf_corner(self, *args)

    def expandBy(self, *args):
        """
        expandBy(BoundingBoxf self, Vec3f v)
        expandBy(BoundingBoxf self, osg::BoundingBoxImpl< osg::Vec3f >::value_type x, osg::BoundingBoxImpl< osg::Vec3f >::value_type y, 
            osg::BoundingBoxImpl< osg::Vec3f >::value_type z)
        expandBy(BoundingBoxf self, BoundingBoxf bb)
        """
        return _osg.BoundingBoxf_expandBy(self, *args)

    def intersect(self, *args):
        """intersect(BoundingBoxf self, BoundingBoxf bb) -> BoundingBoxf"""
        return _osg.BoundingBoxf_intersect(self, *args)

    def intersects(self, *args):
        """intersects(BoundingBoxf self, BoundingBoxf bb) -> bool"""
        return _osg.BoundingBoxf_intersects(self, *args)

    def contains(self, *args):
        """
        contains(BoundingBoxf self, Vec3f v) -> bool
        contains(BoundingBoxf self, Vec3f v, osg::BoundingBoxImpl< osg::Vec3f >::value_type epsilon) -> bool
        """
        return _osg.BoundingBoxf_contains(self, *args)

    __swig_destroy__ = _osg.delete_BoundingBoxf
    __del__ = lambda self : None;
BoundingBoxf_swigregister = _osg.BoundingBoxf_swigregister
BoundingBoxf_swigregister(BoundingBoxf)

class BoundingSpheref(_object):
    """Proxy of C++ osg::BoundingSphereImpl<(osg::Vec3f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingSpheref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingSpheref, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_center"] = _osg.BoundingSpheref__center_set
    __swig_getmethods__["_center"] = _osg.BoundingSpheref__center_get
    if _newclass:_center = _swig_property(_osg.BoundingSpheref__center_get, _osg.BoundingSpheref__center_set)
    __swig_setmethods__["_radius"] = _osg.BoundingSpheref__radius_set
    __swig_getmethods__["_radius"] = _osg.BoundingSpheref__radius_get
    if _newclass:_radius = _swig_property(_osg.BoundingSpheref__radius_get, _osg.BoundingSpheref__radius_set)
    def __init__(self, *args): 
        """
        __init__(osg::BoundingSphereImpl<(osg::Vec3f)> self) -> BoundingSpheref
        __init__(osg::BoundingSphereImpl<(osg::Vec3f)> self, Vec3f center, osg::BoundingSphereImpl< osg::Vec3f >::value_type radius) -> BoundingSpheref
        __init__(osg::BoundingSphereImpl<(osg::Vec3f)> self, BoundingSpheref bs) -> BoundingSpheref
        __init__(osg::BoundingSphereImpl<(osg::Vec3f)> self, BoundingBoxf bb) -> BoundingSpheref
        """
        this = _osg.new_BoundingSpheref(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self):
        """init(BoundingSpheref self)"""
        return _osg.BoundingSpheref_init(self)

    def valid(self):
        """valid(BoundingSpheref self) -> bool"""
        return _osg.BoundingSpheref_valid(self)

    def __eq__(self, *args):
        """__eq__(BoundingSpheref self, BoundingSpheref rhs) -> bool"""
        return _osg.BoundingSpheref___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(BoundingSpheref self, BoundingSpheref rhs) -> bool"""
        return _osg.BoundingSpheref___ne__(self, *args)

    def set(self, *args):
        """set(BoundingSpheref self, Vec3f center, osg::BoundingSphereImpl< osg::Vec3f >::value_type radius)"""
        return _osg.BoundingSpheref_set(self, *args)

    def center(self):
        """center(BoundingSpheref self) -> Vec3f"""
        return _osg.BoundingSpheref_center(self)

    def radius(self):
        """radius(BoundingSpheref self) -> osg::BoundingSphereImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingSpheref_radius(self)

    def radius2(self):
        """radius2(BoundingSpheref self) -> osg::BoundingSphereImpl< osg::Vec3f >::value_type"""
        return _osg.BoundingSpheref_radius2(self)

    def expandBy(self, *args):
        """expandBy(BoundingSpheref self, BoundingSpheref sh)"""
        return _osg.BoundingSpheref_expandBy(self, *args)

    def expandRadiusBy(self, *args):
        """expandRadiusBy(BoundingSpheref self, BoundingSpheref sh)"""
        return _osg.BoundingSpheref_expandRadiusBy(self, *args)

    def contains(self, *args):
        """contains(BoundingSpheref self, Vec3f v) -> bool"""
        return _osg.BoundingSpheref_contains(self, *args)

    def intersects(self, *args):
        """intersects(BoundingSpheref self, BoundingSpheref bs) -> bool"""
        return _osg.BoundingSpheref_intersects(self, *args)

    __swig_destroy__ = _osg.delete_BoundingSpheref
    __del__ = lambda self : None;
BoundingSpheref_swigregister = _osg.BoundingSpheref_swigregister
BoundingSpheref_swigregister(BoundingSpheref)

BoundingBox = BoundingBoxf
BoundingSphere = BoundingSpheref

OSG_UNIFORM = _osg.OSG_UNIFORM
class Uniform(Object):
    """Proxy of C++ osg::Uniform class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uniform, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Uniform, name)
    __repr__ = _swig_repr
    FLOAT = _osg.Uniform_FLOAT
    FLOAT_VEC2 = _osg.Uniform_FLOAT_VEC2
    FLOAT_VEC3 = _osg.Uniform_FLOAT_VEC3
    FLOAT_VEC4 = _osg.Uniform_FLOAT_VEC4
    DOUBLE = _osg.Uniform_DOUBLE
    DOUBLE_VEC2 = _osg.Uniform_DOUBLE_VEC2
    DOUBLE_VEC3 = _osg.Uniform_DOUBLE_VEC3
    DOUBLE_VEC4 = _osg.Uniform_DOUBLE_VEC4
    INT = _osg.Uniform_INT
    INT_VEC2 = _osg.Uniform_INT_VEC2
    INT_VEC3 = _osg.Uniform_INT_VEC3
    INT_VEC4 = _osg.Uniform_INT_VEC4
    UNSIGNED_INT = _osg.Uniform_UNSIGNED_INT
    UNSIGNED_INT_VEC2 = _osg.Uniform_UNSIGNED_INT_VEC2
    UNSIGNED_INT_VEC3 = _osg.Uniform_UNSIGNED_INT_VEC3
    UNSIGNED_INT_VEC4 = _osg.Uniform_UNSIGNED_INT_VEC4
    BOOL = _osg.Uniform_BOOL
    BOOL_VEC2 = _osg.Uniform_BOOL_VEC2
    BOOL_VEC3 = _osg.Uniform_BOOL_VEC3
    BOOL_VEC4 = _osg.Uniform_BOOL_VEC4
    FLOAT_MAT2 = _osg.Uniform_FLOAT_MAT2
    FLOAT_MAT3 = _osg.Uniform_FLOAT_MAT3
    FLOAT_MAT4 = _osg.Uniform_FLOAT_MAT4
    FLOAT_MAT2x3 = _osg.Uniform_FLOAT_MAT2x3
    FLOAT_MAT2x4 = _osg.Uniform_FLOAT_MAT2x4
    FLOAT_MAT3x2 = _osg.Uniform_FLOAT_MAT3x2
    FLOAT_MAT3x4 = _osg.Uniform_FLOAT_MAT3x4
    FLOAT_MAT4x2 = _osg.Uniform_FLOAT_MAT4x2
    FLOAT_MAT4x3 = _osg.Uniform_FLOAT_MAT4x3
    DOUBLE_MAT2 = _osg.Uniform_DOUBLE_MAT2
    DOUBLE_MAT3 = _osg.Uniform_DOUBLE_MAT3
    DOUBLE_MAT4 = _osg.Uniform_DOUBLE_MAT4
    DOUBLE_MAT2x3 = _osg.Uniform_DOUBLE_MAT2x3
    DOUBLE_MAT2x4 = _osg.Uniform_DOUBLE_MAT2x4
    DOUBLE_MAT3x2 = _osg.Uniform_DOUBLE_MAT3x2
    DOUBLE_MAT3x4 = _osg.Uniform_DOUBLE_MAT3x4
    DOUBLE_MAT4x2 = _osg.Uniform_DOUBLE_MAT4x2
    DOUBLE_MAT4x3 = _osg.Uniform_DOUBLE_MAT4x3
    SAMPLER_1D = _osg.Uniform_SAMPLER_1D
    SAMPLER_2D = _osg.Uniform_SAMPLER_2D
    SAMPLER_3D = _osg.Uniform_SAMPLER_3D
    SAMPLER_CUBE = _osg.Uniform_SAMPLER_CUBE
    SAMPLER_1D_SHADOW = _osg.Uniform_SAMPLER_1D_SHADOW
    SAMPLER_2D_SHADOW = _osg.Uniform_SAMPLER_2D_SHADOW
    SAMPLER_1D_ARRAY = _osg.Uniform_SAMPLER_1D_ARRAY
    SAMPLER_2D_ARRAY = _osg.Uniform_SAMPLER_2D_ARRAY
    SAMPLER_CUBE_MAP_ARRAY = _osg.Uniform_SAMPLER_CUBE_MAP_ARRAY
    SAMPLER_1D_ARRAY_SHADOW = _osg.Uniform_SAMPLER_1D_ARRAY_SHADOW
    SAMPLER_2D_ARRAY_SHADOW = _osg.Uniform_SAMPLER_2D_ARRAY_SHADOW
    SAMPLER_2D_MULTISAMPLE = _osg.Uniform_SAMPLER_2D_MULTISAMPLE
    SAMPLER_2D_MULTISAMPLE_ARRAY = _osg.Uniform_SAMPLER_2D_MULTISAMPLE_ARRAY
    SAMPLER_CUBE_SHADOW = _osg.Uniform_SAMPLER_CUBE_SHADOW
    SAMPLER_CUBE_MAP_ARRAY_SHADOW = _osg.Uniform_SAMPLER_CUBE_MAP_ARRAY_SHADOW
    SAMPLER_BUFFER = _osg.Uniform_SAMPLER_BUFFER
    SAMPLER_2D_RECT = _osg.Uniform_SAMPLER_2D_RECT
    SAMPLER_2D_RECT_SHADOW = _osg.Uniform_SAMPLER_2D_RECT_SHADOW
    INT_SAMPLER_1D = _osg.Uniform_INT_SAMPLER_1D
    INT_SAMPLER_2D = _osg.Uniform_INT_SAMPLER_2D
    INT_SAMPLER_3D = _osg.Uniform_INT_SAMPLER_3D
    INT_SAMPLER_CUBE = _osg.Uniform_INT_SAMPLER_CUBE
    INT_SAMPLER_1D_ARRAY = _osg.Uniform_INT_SAMPLER_1D_ARRAY
    INT_SAMPLER_2D_ARRAY = _osg.Uniform_INT_SAMPLER_2D_ARRAY
    INT_SAMPLER_CUBE_MAP_ARRAY = _osg.Uniform_INT_SAMPLER_CUBE_MAP_ARRAY
    INT_SAMPLER_2D_MULTISAMPLE = _osg.Uniform_INT_SAMPLER_2D_MULTISAMPLE
    INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _osg.Uniform_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
    INT_SAMPLER_BUFFER = _osg.Uniform_INT_SAMPLER_BUFFER
    INT_SAMPLER_2D_RECT = _osg.Uniform_INT_SAMPLER_2D_RECT
    UNSIGNED_INT_SAMPLER_1D = _osg.Uniform_UNSIGNED_INT_SAMPLER_1D
    UNSIGNED_INT_SAMPLER_2D = _osg.Uniform_UNSIGNED_INT_SAMPLER_2D
    UNSIGNED_INT_SAMPLER_3D = _osg.Uniform_UNSIGNED_INT_SAMPLER_3D
    UNSIGNED_INT_SAMPLER_CUBE = _osg.Uniform_UNSIGNED_INT_SAMPLER_CUBE
    UNSIGNED_INT_SAMPLER_1D_ARRAY = _osg.Uniform_UNSIGNED_INT_SAMPLER_1D_ARRAY
    UNSIGNED_INT_SAMPLER_2D_ARRAY = _osg.Uniform_UNSIGNED_INT_SAMPLER_2D_ARRAY
    UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = _osg.Uniform_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
    UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = _osg.Uniform_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
    UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _osg.Uniform_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
    UNSIGNED_INT_SAMPLER_BUFFER = _osg.Uniform_UNSIGNED_INT_SAMPLER_BUFFER
    UNSIGNED_INT_SAMPLER_2D_RECT = _osg.Uniform_UNSIGNED_INT_SAMPLER_2D_RECT
    IMAGE_1D = _osg.Uniform_IMAGE_1D
    IMAGE_2D = _osg.Uniform_IMAGE_2D
    IMAGE_3D = _osg.Uniform_IMAGE_3D
    IMAGE_2D_RECT = _osg.Uniform_IMAGE_2D_RECT
    IMAGE_CUBE = _osg.Uniform_IMAGE_CUBE
    IMAGE_BUFFER = _osg.Uniform_IMAGE_BUFFER
    IMAGE_1D_ARRAY = _osg.Uniform_IMAGE_1D_ARRAY
    IMAGE_2D_ARRAY = _osg.Uniform_IMAGE_2D_ARRAY
    IMAGE_CUBE_MAP_ARRAY = _osg.Uniform_IMAGE_CUBE_MAP_ARRAY
    IMAGE_2D_MULTISAMPLE = _osg.Uniform_IMAGE_2D_MULTISAMPLE
    IMAGE_2D_MULTISAMPLE_ARRAY = _osg.Uniform_IMAGE_2D_MULTISAMPLE_ARRAY
    INT_IMAGE_1D = _osg.Uniform_INT_IMAGE_1D
    INT_IMAGE_2D = _osg.Uniform_INT_IMAGE_2D
    INT_IMAGE_3D = _osg.Uniform_INT_IMAGE_3D
    INT_IMAGE_2D_RECT = _osg.Uniform_INT_IMAGE_2D_RECT
    INT_IMAGE_CUBE = _osg.Uniform_INT_IMAGE_CUBE
    INT_IMAGE_BUFFER = _osg.Uniform_INT_IMAGE_BUFFER
    INT_IMAGE_1D_ARRAY = _osg.Uniform_INT_IMAGE_1D_ARRAY
    INT_IMAGE_2D_ARRAY = _osg.Uniform_INT_IMAGE_2D_ARRAY
    INT_IMAGE_CUBE_MAP_ARRAY = _osg.Uniform_INT_IMAGE_CUBE_MAP_ARRAY
    INT_IMAGE_2D_MULTISAMPLE = _osg.Uniform_INT_IMAGE_2D_MULTISAMPLE
    INT_IMAGE_2D_MULTISAMPLE_ARRAY = _osg.Uniform_INT_IMAGE_2D_MULTISAMPLE_ARRAY
    UNSIGNED_INT_IMAGE_1D = _osg.Uniform_UNSIGNED_INT_IMAGE_1D
    UNSIGNED_INT_IMAGE_2D = _osg.Uniform_UNSIGNED_INT_IMAGE_2D
    UNSIGNED_INT_IMAGE_3D = _osg.Uniform_UNSIGNED_INT_IMAGE_3D
    UNSIGNED_INT_IMAGE_2D_RECT = _osg.Uniform_UNSIGNED_INT_IMAGE_2D_RECT
    UNSIGNED_INT_IMAGE_CUBE = _osg.Uniform_UNSIGNED_INT_IMAGE_CUBE
    UNSIGNED_INT_IMAGE_BUFFER = _osg.Uniform_UNSIGNED_INT_IMAGE_BUFFER
    UNSIGNED_INT_IMAGE_1D_ARRAY = _osg.Uniform_UNSIGNED_INT_IMAGE_1D_ARRAY
    UNSIGNED_INT_IMAGE_2D_ARRAY = _osg.Uniform_UNSIGNED_INT_IMAGE_2D_ARRAY
    UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = _osg.Uniform_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
    UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = _osg.Uniform_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
    UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = _osg.Uniform_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
    UNDEFINED = _osg.Uniform_UNDEFINED
    def cloneType(self):
        """cloneType(Uniform self) -> Object"""
        return _osg.Uniform_cloneType(self)

    def clone(self, *args):
        """clone(Uniform self, CopyOp copyop) -> Object"""
        return _osg.Uniform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Uniform self, Object obj) -> bool"""
        return _osg.Uniform_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Uniform self) -> char const *"""
        return _osg.Uniform_libraryName(self)

    def className(self):
        """className(Uniform self) -> char const *"""
        return _osg.Uniform_className(self)

    def setType(self, *args):
        """setType(Uniform self, osg::Uniform::Type t) -> bool"""
        return _osg.Uniform_setType(self, *args)

    def getType(self):
        """getType(Uniform self) -> osg::Uniform::Type"""
        return _osg.Uniform_getType(self)

    def setName(self, *args):
        """setName(Uniform self, std::string const & name)"""
        return _osg.Uniform_setName(self, *args)

    def setNumElements(self, *args):
        """setNumElements(Uniform self, unsigned int numElements)"""
        return _osg.Uniform_setNumElements(self, *args)

    def getNumElements(self):
        """getNumElements(Uniform self) -> unsigned int"""
        return _osg.Uniform_getNumElements(self)

    def getInternalArrayNumElements(self):
        """getInternalArrayNumElements(Uniform self) -> unsigned int"""
        return _osg.Uniform_getInternalArrayNumElements(self)

    def getTypename(*args):
        """getTypename(osg::Uniform::Type t) -> char const *"""
        return _osg.Uniform_getTypename(*args)

    if _newclass:getTypename = staticmethod(getTypename)
    __swig_getmethods__["getTypename"] = lambda x: getTypename
    def getTypeNumComponents(*args):
        """getTypeNumComponents(osg::Uniform::Type t) -> int"""
        return _osg.Uniform_getTypeNumComponents(*args)

    if _newclass:getTypeNumComponents = staticmethod(getTypeNumComponents)
    __swig_getmethods__["getTypeNumComponents"] = lambda x: getTypeNumComponents
    def getTypeId(*args):
        """getTypeId(std::string const & tname) -> osg::Uniform::Type"""
        return _osg.Uniform_getTypeId(*args)

    if _newclass:getTypeId = staticmethod(getTypeId)
    __swig_getmethods__["getTypeId"] = lambda x: getTypeId
    def getGlApiType(*args):
        """getGlApiType(osg::Uniform::Type t) -> osg::Uniform::Type"""
        return _osg.Uniform_getGlApiType(*args)

    if _newclass:getGlApiType = staticmethod(getGlApiType)
    __swig_getmethods__["getGlApiType"] = lambda x: getGlApiType
    def getInternalArrayType(*args):
        """getInternalArrayType(osg::Uniform::Type t) -> GLenum"""
        return _osg.Uniform_getInternalArrayType(*args)

    if _newclass:getInternalArrayType = staticmethod(getInternalArrayType)
    __swig_getmethods__["getInternalArrayType"] = lambda x: getInternalArrayType
    def __init__(self, *args): 
        """
        __init__(osg::Uniform self) -> Uniform
        __init__(osg::Uniform self, osg::Uniform::Type type, std::string const & name, int numElements=1) -> Uniform
        __init__(osg::Uniform self, osg::Uniform::Type type, std::string const & name) -> Uniform
        __init__(osg::Uniform self, Uniform rhs, CopyOp copyop=SHALLOW_COPY) -> Uniform
        __init__(osg::Uniform self, Uniform rhs) -> Uniform
        __init__(osg::Uniform self, char const * name, float f) -> Uniform
        __init__(osg::Uniform self, char const * name, double d) -> Uniform
        __init__(osg::Uniform self, char const * name, int i) -> Uniform
        __init__(osg::Uniform self, char const * name, unsigned int ui) -> Uniform
        __init__(osg::Uniform self, char const * name, bool b) -> Uniform
        __init__(osg::Uniform self, char const * name, Vec2f v2) -> Uniform
        __init__(osg::Uniform self, char const * name, Vec3f v3) -> Uniform
        __init__(osg::Uniform self, char const * name, Vec4f v4) -> Uniform
        __init__(osg::Uniform self, char const * name, Vec2d v2) -> Uniform
        __init__(osg::Uniform self, char const * name, Vec3d v3) -> Uniform
        __init__(osg::Uniform self, char const * name, Vec4d v4) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix2 const & m2) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix3 const & m3) -> Uniform
        __init__(osg::Uniform self, char const * name, Matrixf m4) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix2x3 const & m2x3) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix2x4 const & m2x4) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix3x2 const & m3x2) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix3x4 const & m3x4) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix4x2 const & m4x2) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix4x3 const & m4x3) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix2d const & m2) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix3d const & m3) -> Uniform
        __init__(osg::Uniform self, char const * name, Matrixd m4) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix2x3d const & m2x3) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix2x4d const & m2x4) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix3x2d const & m3x2) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix3x4d const & m3x4) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix4x2d const & m4x2) -> Uniform
        __init__(osg::Uniform self, char const * name, osg::Matrix4x3d const & m4x3) -> Uniform
        __init__(osg::Uniform self, char const * name, int i0, int i1) -> Uniform
        __init__(osg::Uniform self, char const * name, int i0, int i1, int i2) -> Uniform
        __init__(osg::Uniform self, char const * name, int i0, int i1, int i2, int i3) -> Uniform
        __init__(osg::Uniform self, char const * name, unsigned int ui0, unsigned int ui1) -> Uniform
        __init__(osg::Uniform self, char const * name, unsigned int ui0, unsigned int ui1, unsigned int ui2) -> Uniform
        __init__(osg::Uniform self, char const * name, unsigned int ui0, unsigned int ui1, unsigned int ui2, unsigned int ui3) -> Uniform
        __init__(osg::Uniform self, char const * name, bool b0, bool b1) -> Uniform
        __init__(osg::Uniform self, char const * name, bool b0, bool b1, bool b2) -> Uniform
        __init__(osg::Uniform self, char const * name, bool b0, bool b1, bool b2, bool b3) -> Uniform
        """
        this = _osg.new_Uniform(*args)
        try: self.this.append(this)
        except: self.this = this
    def compare(self, *args):
        """compare(Uniform self, Uniform rhs) -> int"""
        return _osg.Uniform_compare(self, *args)

    def compareData(self, *args):
        """compareData(Uniform self, Uniform rhs) -> int"""
        return _osg.Uniform_compareData(self, *args)

    def __lt__(self, *args):
        """__lt__(Uniform self, Uniform rhs) -> bool"""
        return _osg.Uniform___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(Uniform self, Uniform rhs) -> bool"""
        return _osg.Uniform___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Uniform self, Uniform rhs) -> bool"""
        return _osg.Uniform___ne__(self, *args)

    def copyData(self, *args):
        """copyData(Uniform self, Uniform rhs)"""
        return _osg.Uniform_copyData(self, *args)

    def getParents(self):
        """getParents(Uniform self) -> vectorStateSet"""
        return _osg.Uniform_getParents(self)

    def getParent(self, *args):
        """
        getParent(Uniform self, unsigned int i) -> StateSet
        getParent(Uniform self, unsigned int i) -> StateSet
        """
        return _osg.Uniform_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(Uniform self) -> unsigned int"""
        return _osg.Uniform_getNumParents(self)

    def set_float(self, *args):
        """set_float(Uniform self, float f) -> bool"""
        return _osg.Uniform_set_float(self, *args)

    def set_int(self, *args):
        """set_int(Uniform self, int i) -> bool"""
        return _osg.Uniform_set_int(self, *args)

    def set_uint(self, *args):
        """set_uint(Uniform self, unsigned int ui) -> bool"""
        return _osg.Uniform_set_uint(self, *args)

    def set_bool(self, *args):
        """set_bool(Uniform self, bool b) -> bool"""
        return _osg.Uniform_set_bool(self, *args)

    def set_vec2(self, *args):
        """set_vec2(Uniform self, Vec2f v2) -> bool"""
        return _osg.Uniform_set_vec2(self, *args)

    def set_vec3(self, *args):
        """set_vec3(Uniform self, Vec3f v3) -> bool"""
        return _osg.Uniform_set_vec3(self, *args)

    def set_vec4(self, *args):
        """set_vec4(Uniform self, Vec4f v4) -> bool"""
        return _osg.Uniform_set_vec4(self, *args)

    def set_m2(self, *args):
        """set_m2(Uniform self, osg::Matrix2 const & m2) -> bool"""
        return _osg.Uniform_set_m2(self, *args)

    def set_m3(self, *args):
        """set_m3(Uniform self, osg::Matrix3 const & m3) -> bool"""
        return _osg.Uniform_set_m3(self, *args)

    def set_m4f(self, *args):
        """set_m4f(Uniform self, Matrixf m4) -> bool"""
        return _osg.Uniform_set_m4f(self, *args)

    def set_m4d(self, *args):
        """set_m4d(Uniform self, Matrixd m4) -> bool"""
        return _osg.Uniform_set_m4d(self, *args)

    def set(self, *args):
        """
        set(Uniform self, double d) -> bool
        set(Uniform self, Vec2d v2) -> bool
        set(Uniform self, Vec3d v3) -> bool
        set(Uniform self, Vec4d v4) -> bool
        set(Uniform self, osg::Matrix2x3 const & m2x3) -> bool
        set(Uniform self, osg::Matrix2x4 const & m2x4) -> bool
        set(Uniform self, osg::Matrix3x2 const & m3x2) -> bool
        set(Uniform self, osg::Matrix3x4 const & m3x4) -> bool
        set(Uniform self, osg::Matrix4x2 const & m4x2) -> bool
        set(Uniform self, osg::Matrix4x3 const & m4x3) -> bool
        set(Uniform self, osg::Matrix2d const & m2) -> bool
        set(Uniform self, osg::Matrix3d const & m3) -> bool
        set(Uniform self, osg::Matrix2x3d const & m2x3) -> bool
        set(Uniform self, osg::Matrix2x4d const & m2x4) -> bool
        set(Uniform self, osg::Matrix3x2d const & m3x2) -> bool
        set(Uniform self, osg::Matrix3x4d const & m3x4) -> bool
        set(Uniform self, osg::Matrix4x2d const & m4x2) -> bool
        set(Uniform self, osg::Matrix4x3d const & m4x3) -> bool
        """
        return _osg.Uniform_set(self, *args)

    def set_int2(self, *args):
        """set_int2(Uniform self, int i0, int i1) -> bool"""
        return _osg.Uniform_set_int2(self, *args)

    def set_int3(self, *args):
        """set_int3(Uniform self, int i0, int i1, int i2) -> bool"""
        return _osg.Uniform_set_int3(self, *args)

    def set_int4(self, *args):
        """set_int4(Uniform self, int i0, int i1, int i2, int i3) -> bool"""
        return _osg.Uniform_set_int4(self, *args)

    def set_uint2(self, *args):
        """set_uint2(Uniform self, unsigned int ui0, unsigned int ui1) -> bool"""
        return _osg.Uniform_set_uint2(self, *args)

    def set_uint3(self, *args):
        """set_uint3(Uniform self, unsigned int ui0, unsigned int ui1, unsigned int ui2) -> bool"""
        return _osg.Uniform_set_uint3(self, *args)

    def set_uint4(self, *args):
        """set_uint4(Uniform self, unsigned int ui0, unsigned int ui1, unsigned int ui2, unsigned int ui3) -> bool"""
        return _osg.Uniform_set_uint4(self, *args)

    def set_bool2(self, *args):
        """set_bool2(Uniform self, bool b0, bool b1) -> bool"""
        return _osg.Uniform_set_bool2(self, *args)

    def set_bool3(self, *args):
        """set_bool3(Uniform self, bool b0, bool b1, bool b2) -> bool"""
        return _osg.Uniform_set_bool3(self, *args)

    def set_bool4(self, *args):
        """set_bool4(Uniform self, bool b0, bool b1, bool b2, bool b3) -> bool"""
        return _osg.Uniform_set_bool4(self, *args)

    def get_float(self):
        """get_float(Uniform self) -> bool"""
        return _osg.Uniform_get_float(self)

    def get_int(self):
        """get_int(Uniform self) -> bool"""
        return _osg.Uniform_get_int(self)

    def get_blool(self, *args):
        """get_blool(Uniform self, bool & b) -> bool"""
        return _osg.Uniform_get_blool(self, *args)

    def get_vec2(self, *args):
        """get_vec2(Uniform self, Vec2f v2) -> bool"""
        return _osg.Uniform_get_vec2(self, *args)

    def get_vec3(self, *args):
        """get_vec3(Uniform self, Vec3f v3) -> bool"""
        return _osg.Uniform_get_vec3(self, *args)

    def get_vec4(self, *args):
        """get_vec4(Uniform self, Vec4f v4) -> bool"""
        return _osg.Uniform_get_vec4(self, *args)

    def get_m2(self, *args):
        """get_m2(Uniform self, osg::Matrix2 & m2) -> bool"""
        return _osg.Uniform_get_m2(self, *args)

    def get_m3(self, *args):
        """get_m3(Uniform self, osg::Matrix3 & m3) -> bool"""
        return _osg.Uniform_get_m3(self, *args)

    def get_mf(self, *args):
        """get_mf(Uniform self, Matrixf m4) -> bool"""
        return _osg.Uniform_get_mf(self, *args)

    def get_m4(self, *args):
        """get_m4(Uniform self, Matrixd m4) -> bool"""
        return _osg.Uniform_get_m4(self, *args)

    def get(self, *args):
        """
        get(Uniform self) -> bool
        get(Uniform self, unsigned int & ui) -> bool
        get(Uniform self, Vec2d v2) -> bool
        get(Uniform self, Vec3d v3) -> bool
        get(Uniform self, Vec4d v4) -> bool
        get(Uniform self, osg::Matrix2x3 & m2x3) -> bool
        get(Uniform self, osg::Matrix2x4 & m2x4) -> bool
        get(Uniform self, osg::Matrix3x2 & m3x2) -> bool
        get(Uniform self, osg::Matrix3x4 & m3x4) -> bool
        get(Uniform self, osg::Matrix4x2 & m4x2) -> bool
        get(Uniform self, osg::Matrix4x3 & m4x3) -> bool
        get(Uniform self, osg::Matrix2d & m2) -> bool
        get(Uniform self, osg::Matrix3d & m3) -> bool
        get(Uniform self, osg::Matrix2x3d & m2x3) -> bool
        get(Uniform self, osg::Matrix2x4d & m2x4) -> bool
        get(Uniform self, osg::Matrix3x2d & m3x2) -> bool
        get(Uniform self, osg::Matrix3x4d & m3x4) -> bool
        get(Uniform self, osg::Matrix4x2d & m4x2) -> bool
        get(Uniform self, osg::Matrix4x3d & m4x3) -> bool
        """
        return _osg.Uniform_get(self, *args)

    def get_int2(self):
        """get_int2(Uniform self) -> bool"""
        return _osg.Uniform_get_int2(self)

    def get_int3(self):
        """get_int3(Uniform self) -> bool"""
        return _osg.Uniform_get_int3(self)

    def get_int4(self):
        """get_int4(Uniform self) -> bool"""
        return _osg.Uniform_get_int4(self)

    def get_uint2(self, *args):
        """get_uint2(Uniform self, unsigned int & ui0, unsigned int & ui1) -> bool"""
        return _osg.Uniform_get_uint2(self, *args)

    def get_uint3(self, *args):
        """get_uint3(Uniform self, unsigned int & ui0, unsigned int & ui1, unsigned int & ui2) -> bool"""
        return _osg.Uniform_get_uint3(self, *args)

    def get_uint4(self, *args):
        """get_uint4(Uniform self, unsigned int & ui0, unsigned int & ui1, unsigned int & ui2, unsigned int & ui3) -> bool"""
        return _osg.Uniform_get_uint4(self, *args)

    def get_bool2(self):
        """get_bool2(Uniform self) -> bool"""
        return _osg.Uniform_get_bool2(self)

    def get_bool3(self):
        """get_bool3(Uniform self) -> bool"""
        return _osg.Uniform_get_bool3(self)

    def get_bool4(self):
        """get_bool4(Uniform self) -> bool"""
        return _osg.Uniform_get_bool4(self)

    def set_int_float(self, *args):
        """set_int_float(Uniform self, unsigned int index, float f) -> bool"""
        return _osg.Uniform_set_int_float(self, *args)

    def set_int_int(self, *args):
        """set_int_int(Uniform self, unsigned int index, int i) -> bool"""
        return _osg.Uniform_set_int_int(self, *args)

    def set_int_uint(self, *args):
        """set_int_uint(Uniform self, unsigned int index, unsigned int ui) -> bool"""
        return _osg.Uniform_set_int_uint(self, *args)

    def set_int_bool(self, *args):
        """set_int_bool(Uniform self, unsigned int index, bool b) -> bool"""
        return _osg.Uniform_set_int_bool(self, *args)

    def set_int_vec2(self, *args):
        """set_int_vec2(Uniform self, unsigned int index, Vec2f v2) -> bool"""
        return _osg.Uniform_set_int_vec2(self, *args)

    def set_int_vec3(self, *args):
        """set_int_vec3(Uniform self, unsigned int index, Vec3f v3) -> bool"""
        return _osg.Uniform_set_int_vec3(self, *args)

    def set_int_vec4(self, *args):
        """set_int_vec4(Uniform self, unsigned int index, Vec4f v4) -> bool"""
        return _osg.Uniform_set_int_vec4(self, *args)

    def set_int_m2(self, *args):
        """set_int_m2(Uniform self, unsigned int index, osg::Matrix2 const & m2) -> bool"""
        return _osg.Uniform_set_int_m2(self, *args)

    def set_int_m3(self, *args):
        """set_int_m3(Uniform self, unsigned int index, osg::Matrix3 const & m3) -> bool"""
        return _osg.Uniform_set_int_m3(self, *args)

    def set_int_mf(self, *args):
        """set_int_mf(Uniform self, unsigned int index, Matrixf m4) -> bool"""
        return _osg.Uniform_set_int_mf(self, *args)

    def set_int_md(self, *args):
        """set_int_md(Uniform self, unsigned int index, Matrixd m4) -> bool"""
        return _osg.Uniform_set_int_md(self, *args)

    def setElement(self, *args):
        """
        setElement(Uniform self, unsigned int index, double d) -> bool
        setElement(Uniform self, unsigned int index, Vec2d v2) -> bool
        setElement(Uniform self, unsigned int index, Vec3d v3) -> bool
        setElement(Uniform self, unsigned int index, Vec4d v4) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix2x3 const & m2x3) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix2x4 const & m2x4) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix3x2 const & m3x2) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix3x4 const & m3x4) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix4x2 const & m4x2) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix4x3 const & m4x3) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix2d const & m2) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix3d const & m3) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix2x3d const & m2x3) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix2x4d const & m2x4) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix3x2d const & m3x2) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix3x4d const & m3x4) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix4x2d const & m4x2) -> bool
        setElement(Uniform self, unsigned int index, osg::Matrix4x3d const & m4x3) -> bool
        """
        return _osg.Uniform_setElement(self, *args)

    def set_int_int2(self, *args):
        """set_int_int2(Uniform self, unsigned int index, int i0, int i1) -> bool"""
        return _osg.Uniform_set_int_int2(self, *args)

    def set_int_int3(self, *args):
        """set_int_int3(Uniform self, unsigned int index, int i0, int i1, int i2) -> bool"""
        return _osg.Uniform_set_int_int3(self, *args)

    def set_int_int4(self, *args):
        """set_int_int4(Uniform self, unsigned int index, int i0, int i1, int i2, int i3) -> bool"""
        return _osg.Uniform_set_int_int4(self, *args)

    def set_int_uint2(self, *args):
        """set_int_uint2(Uniform self, unsigned int index, unsigned int ui0, unsigned int ui1) -> bool"""
        return _osg.Uniform_set_int_uint2(self, *args)

    def set_int_uint3(self, *args):
        """set_int_uint3(Uniform self, unsigned int index, unsigned int ui0, unsigned int ui1, unsigned int ui2) -> bool"""
        return _osg.Uniform_set_int_uint3(self, *args)

    def set_int_uint4(self, *args):
        """set_int_uint4(Uniform self, unsigned int index, unsigned int ui0, unsigned int ui1, unsigned int ui2, unsigned int ui3) -> bool"""
        return _osg.Uniform_set_int_uint4(self, *args)

    def set_int_bool2(self, *args):
        """set_int_bool2(Uniform self, unsigned int index, bool b0, bool b1) -> bool"""
        return _osg.Uniform_set_int_bool2(self, *args)

    def set_int_bool3(self, *args):
        """set_int_bool3(Uniform self, unsigned int index, bool b0, bool b1, bool b2) -> bool"""
        return _osg.Uniform_set_int_bool3(self, *args)

    def set_int_bool4(self, *args):
        """set_int_bool4(Uniform self, unsigned int index, bool b0, bool b1, bool b2, bool b3) -> bool"""
        return _osg.Uniform_set_int_bool4(self, *args)

    def get_int_float(self, *args):
        """get_int_float(Uniform self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_float(self, *args)

    def get_int_int(self, *args):
        """get_int_int(Uniform self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_int(self, *args)

    def get_int_uint(self, *args):
        """get_int_uint(Uniform self, unsigned int index, unsigned int & ui) -> bool"""
        return _osg.Uniform_get_int_uint(self, *args)

    def get_int_bool(self, *args):
        """get_int_bool(Uniform self, unsigned int index, bool & b) -> bool"""
        return _osg.Uniform_get_int_bool(self, *args)

    def get_int_vec2(self, *args):
        """get_int_vec2(Uniform self, unsigned int index, Vec2f v2) -> bool"""
        return _osg.Uniform_get_int_vec2(self, *args)

    def get_int_vec3(self, *args):
        """get_int_vec3(Uniform self, unsigned int index, Vec3f v3) -> bool"""
        return _osg.Uniform_get_int_vec3(self, *args)

    def get_int_vec4(self, *args):
        """get_int_vec4(Uniform self, unsigned int index, Vec4f v4) -> bool"""
        return _osg.Uniform_get_int_vec4(self, *args)

    def get_int_m2(self, *args):
        """get_int_m2(Uniform self, unsigned int index, osg::Matrix2 & m2) -> bool"""
        return _osg.Uniform_get_int_m2(self, *args)

    def get_int_m3(self, *args):
        """get_int_m3(Uniform self, unsigned int index, osg::Matrix3 & m3) -> bool"""
        return _osg.Uniform_get_int_m3(self, *args)

    def get_int_mf(self, *args):
        """get_int_mf(Uniform self, unsigned int index, Matrixf m4) -> bool"""
        return _osg.Uniform_get_int_mf(self, *args)

    def get_int_md(self, *args):
        """get_int_md(Uniform self, unsigned int index, Matrixd m4) -> bool"""
        return _osg.Uniform_get_int_md(self, *args)

    def getElement(self, *args):
        """
        getElement(Uniform self, unsigned int index) -> bool
        getElement(Uniform self, unsigned int index, Vec2d v2) -> bool
        getElement(Uniform self, unsigned int index, Vec3d v3) -> bool
        getElement(Uniform self, unsigned int index, Vec4d v4) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix2x3 & m2x3) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix2x4 & m2x4) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix3x2 & m3x2) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix3x4 & m3x4) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix4x2 & m4x2) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix4x3 & m4x3) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix2d & m2) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix3d & m3) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix2x3d & m2x3) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix2x4d & m2x4) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix3x2d & m3x2) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix3x4d & m3x4) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix4x2d & m4x2) -> bool
        getElement(Uniform self, unsigned int index, osg::Matrix4x3d & m4x3) -> bool
        """
        return _osg.Uniform_getElement(self, *args)

    def get_int_int2(self, *args):
        """get_int_int2(Uniform self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_int2(self, *args)

    def get_int_int3(self, *args):
        """get_int_int3(Uniform self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_int3(self, *args)

    def get_int_int4(self, *args):
        """get_int_int4(Uniform self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_int4(self, *args)

    def get_int_uint2(self, *args):
        """get_int_uint2(Uniform self, unsigned int index, unsigned int & ui0, unsigned int & ui1) -> bool"""
        return _osg.Uniform_get_int_uint2(self, *args)

    def get_int_uint3(self, *args):
        """get_int_uint3(Uniform self, unsigned int index, unsigned int & ui0, unsigned int & ui1, unsigned int & ui2) -> bool"""
        return _osg.Uniform_get_int_uint3(self, *args)

    def get_int_uint4(self, *args):
        """get_int_uint4(Uniform self, unsigned int index, unsigned int & ui0, unsigned int & ui1, unsigned int & ui2, unsigned int & ui3) -> bool"""
        return _osg.Uniform_get_int_uint4(self, *args)

    def get_int_bool2(self, *args):
        """get_int_bool2(Uniform self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_bool2(self, *args)

    def get_int_bool3(self, *args):
        """get_int_bool3(Uniform self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_bool3(self, *args)

    def get_int_bool4(self, *args):
        """get_int_bool4(Uniform self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_bool4(self, *args)

    def dirty(self):
        """dirty(Uniform self)"""
        return _osg.Uniform_dirty(self)

    def setArray(self, *args):
        """
        setArray(Uniform self, osg::FloatArray * array) -> bool
        setArray(Uniform self, osg::DoubleArray * array) -> bool
        setArray(Uniform self, IntArray array) -> bool
        setArray(Uniform self, UIntArray array) -> bool
        """
        return _osg.Uniform_setArray(self, *args)

    def getFloatArray(self, *args):
        """
        getFloatArray(Uniform self) -> osg::FloatArray
        getFloatArray(Uniform self) -> osg::FloatArray const *
        """
        return _osg.Uniform_getFloatArray(self, *args)

    def getDoubleArray(self, *args):
        """
        getDoubleArray(Uniform self) -> osg::DoubleArray
        getDoubleArray(Uniform self) -> osg::DoubleArray const *
        """
        return _osg.Uniform_getDoubleArray(self, *args)

    def getIntArray(self, *args):
        """
        getIntArray(Uniform self) -> IntArray
        getIntArray(Uniform self) -> IntArray
        """
        return _osg.Uniform_getIntArray(self, *args)

    def getUIntArray(self, *args):
        """
        getUIntArray(Uniform self) -> UIntArray
        getUIntArray(Uniform self) -> UIntArray
        """
        return _osg.Uniform_getUIntArray(self, *args)

    def setModifiedCount(self, *args):
        """setModifiedCount(Uniform self, unsigned int mc)"""
        return _osg.Uniform_setModifiedCount(self, *args)

    def getModifiedCount(self):
        """getModifiedCount(Uniform self) -> unsigned int"""
        return _osg.Uniform_getModifiedCount(self)

    def getNameID(self, *args):
        """
        getNameID(Uniform self, std::string const & name) -> unsigned int
        getNameID(Uniform self) -> unsigned int
        """
        return _osg.Uniform_getNameID(self, *args)

    def apply(self, *args):
        """apply(Uniform self, GL2Extensions const * ext, GLint location)"""
        return _osg.Uniform_apply(self, *args)

Uniform_swigregister = _osg.Uniform_swigregister
Uniform_swigregister(Uniform)

def Uniform_getTypename(*args):
  """Uniform_getTypename(osg::Uniform::Type t) -> char const *"""
  return _osg.Uniform_getTypename(*args)

def Uniform_getTypeNumComponents(*args):
  """Uniform_getTypeNumComponents(osg::Uniform::Type t) -> int"""
  return _osg.Uniform_getTypeNumComponents(*args)

def Uniform_getTypeId(*args):
  """Uniform_getTypeId(std::string const & tname) -> osg::Uniform::Type"""
  return _osg.Uniform_getTypeId(*args)

def Uniform_getGlApiType(*args):
  """Uniform_getGlApiType(osg::Uniform::Type t) -> osg::Uniform::Type"""
  return _osg.Uniform_getGlApiType(*args)

def Uniform_getInternalArrayType(*args):
  """Uniform_getInternalArrayType(osg::Uniform::Type t) -> GLenum"""
  return _osg.Uniform_getInternalArrayType(*args)

OSG_STATS = _osg.OSG_STATS
class Stats(Referenced):
    """Proxy of C++ osg::Stats class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stats, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::Stats self, std::string const & name) -> Stats
        __init__(osg::Stats self, std::string const & name, unsigned int numberOfFrames) -> Stats
        """
        this = _osg.new_Stats(*args)
        try: self.this.append(this)
        except: self.this = this
    def setName(self, *args):
        """setName(Stats self, std::string const & name)"""
        return _osg.Stats_setName(self, *args)

    def getName(self):
        """getName(Stats self) -> std::string const &"""
        return _osg.Stats_getName(self)

    def allocate(self, *args):
        """allocate(Stats self, unsigned int numberOfFrames)"""
        return _osg.Stats_allocate(self, *args)

    def getEarliestFrameNumber(self):
        """getEarliestFrameNumber(Stats self) -> unsigned int"""
        return _osg.Stats_getEarliestFrameNumber(self)

    def getLatestFrameNumber(self):
        """getLatestFrameNumber(Stats self) -> unsigned int"""
        return _osg.Stats_getLatestFrameNumber(self)

    def setAttribute(self, *args):
        """setAttribute(Stats self, unsigned int frameNumber, std::string const & attributeName, double value) -> bool"""
        return _osg.Stats_setAttribute(self, *args)

    def getAttribute(self, *args):
        """getAttribute(Stats self, unsigned int frameNumber, std::string const & attributeName) -> bool"""
        return _osg.Stats_getAttribute(self, *args)

    def getAveragedAttribute(self, *args):
        """
        getAveragedAttribute(Stats self, std::string const & attributeName, bool averageInInverseSpace=False) -> bool
        getAveragedAttribute(Stats self, std::string const & attributeName) -> bool
        getAveragedAttribute(Stats self, unsigned int startFrameNumber, unsigned int endFrameNumber, std::string const & attributeName, 
            bool averageInInverseSpace=False) -> bool
        getAveragedAttribute(Stats self, unsigned int startFrameNumber, unsigned int endFrameNumber, std::string const & attributeName) -> bool
        """
        return _osg.Stats_getAveragedAttribute(self, *args)

    def collectStats(self, *args):
        """
        collectStats(Stats self, std::string const & str, bool flag)
        collectStats(Stats self, std::string const & str) -> bool
        """
        return _osg.Stats_collectStats(self, *args)

Stats_swigregister = _osg.Stats_swigregister
Stats_swigregister(Stats)

OSG_TIMER = _osg.OSG_TIMER
class Timer(_object):
    """Proxy of C++ osg::Timer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osg::Timer self) -> Timer"""
        this = _osg.new_Timer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Timer
    __del__ = lambda self : None;
    def instance():
        """instance() -> Timer"""
        return _osg.Timer_instance()

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def tick(self):
        """tick(Timer self) -> osg::Timer_t"""
        return _osg.Timer_tick(self)

    def setStartTick(self, *args):
        """
        setStartTick(Timer self)
        setStartTick(Timer self, osg::Timer_t t)
        """
        return _osg.Timer_setStartTick(self, *args)

    def getStartTick(self):
        """getStartTick(Timer self) -> osg::Timer_t"""
        return _osg.Timer_getStartTick(self)

    def time_s(self):
        """time_s(Timer self) -> double"""
        return _osg.Timer_time_s(self)

    def time_m(self):
        """time_m(Timer self) -> double"""
        return _osg.Timer_time_m(self)

    def time_u(self):
        """time_u(Timer self) -> double"""
        return _osg.Timer_time_u(self)

    def time_n(self):
        """time_n(Timer self) -> double"""
        return _osg.Timer_time_n(self)

    def delta_s(self, *args):
        """delta_s(Timer self, osg::Timer_t t1, osg::Timer_t t2) -> double"""
        return _osg.Timer_delta_s(self, *args)

    def delta_m(self, *args):
        """delta_m(Timer self, osg::Timer_t t1, osg::Timer_t t2) -> double"""
        return _osg.Timer_delta_m(self, *args)

    def delta_u(self, *args):
        """delta_u(Timer self, osg::Timer_t t1, osg::Timer_t t2) -> double"""
        return _osg.Timer_delta_u(self, *args)

    def delta_n(self, *args):
        """delta_n(Timer self, osg::Timer_t t1, osg::Timer_t t2) -> double"""
        return _osg.Timer_delta_n(self, *args)

    def getSecondsPerTick(self):
        """getSecondsPerTick(Timer self) -> double"""
        return _osg.Timer_getSecondsPerTick(self)

Timer_swigregister = _osg.Timer_swigregister
Timer_swigregister(Timer)

def Timer_instance():
  """Timer_instance() -> Timer"""
  return _osg.Timer_instance()

class ElapsedTime(_object):
    """Proxy of C++ osg::ElapsedTime class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElapsedTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElapsedTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osg::ElapsedTime self, double * elapsedTime, Timer timer=None) -> ElapsedTime
        __init__(osg::ElapsedTime self, double * elapsedTime) -> ElapsedTime
        __init__(osg::ElapsedTime self, Timer timer=None) -> ElapsedTime
        __init__(osg::ElapsedTime self) -> ElapsedTime
        """
        this = _osg.new_ElapsedTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ElapsedTime
    __del__ = lambda self : None;
    def reset(self):
        """reset(ElapsedTime self)"""
        return _osg.ElapsedTime_reset(self)

    def elapsedTime(self):
        """elapsedTime(ElapsedTime self) -> double"""
        return _osg.ElapsedTime_elapsedTime(self)

    def elapsedTime_m(self):
        """elapsedTime_m(ElapsedTime self) -> double"""
        return _osg.ElapsedTime_elapsedTime_m(self)

    def elapsedTime_u(self):
        """elapsedTime_u(ElapsedTime self) -> double"""
        return _osg.ElapsedTime_elapsedTime_u(self)

    def elapsedTime_n(self):
        """elapsedTime_n(ElapsedTime self) -> double"""
        return _osg.ElapsedTime_elapsedTime_n(self)

    def finish(self):
        """finish(ElapsedTime self)"""
        return _osg.ElapsedTime_finish(self)

ElapsedTime_swigregister = _osg.ElapsedTime_swigregister
ElapsedTime_swigregister(ElapsedTime)


def NodeToGeode(*args):
  """NodeToGeode(Node b) -> Geode"""
  return _osg.NodeToGeode(*args)

def NodeToPositionAttitudeTransform(*args):
  """NodeToPositionAttitudeTransform(Node b) -> PositionAttitudeTransform"""
  return _osg.NodeToPositionAttitudeTransform(*args)

def NodeToMatrixTransform(*args):
  """NodeToMatrixTransform(Node b) -> MatrixTransform"""
  return _osg.NodeToMatrixTransform(*args)

def StateAttributeToTexture(*args):
  """StateAttributeToTexture(StateAttribute b) -> Texture"""
  return _osg.StateAttributeToTexture(*args)

def NodeToLOD(*args):
  """NodeToLOD(Node b) -> LOD"""
  return _osg.NodeToLOD(*args)

def NodeToPagedLOD(*args):
  """NodeToPagedLOD(Node b) -> PagedLOD"""
  return _osg.NodeToPagedLOD(*args)

def NodeToProxyNode(*args):
  """NodeToProxyNode(Node b) -> ProxyNode"""
  return _osg.NodeToProxyNode(*args)

def ReferencedToNode(*args):
  """ReferencedToNode(Referenced b) -> Node"""
  return _osg.ReferencedToNode(*args)
# This file is compatible with both classic and new-style classes.


