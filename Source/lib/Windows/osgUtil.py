# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osgUtil', [dirname(__file__)])
        except ImportError:
            import _osgUtil
            return _osgUtil
        if fp is not None:
            try:
                _mod = imp.load_module('_osgUtil', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osgUtil = swig_import_helper()
    del swig_import_helper
else:
    import _osgUtil
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgUtil.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _osgUtil.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgUtil.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgUtil.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _osgUtil.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgUtil.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _osgUtil.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _osgUtil.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _osgUtil.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _osgUtil.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgUtil.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgUtil.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgUtil.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgUtil.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgUtil.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgUtil.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osgUtil.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osgUtil.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import osg
OSGUTIL_RENDERLEAF = _osgUtil.OSGUTIL_RENDERLEAF
class RenderLeaf(osg.Referenced):
    """Proxy of C++ osgUtil::RenderLeaf class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderLeaf, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderLeaf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::RenderLeaf self, Drawable drawable, RefMatrixd projection, RefMatrixd modelview, float depth=0.0, 
            unsigned int traversalNumber=0) -> RenderLeaf
        __init__(osgUtil::RenderLeaf self, Drawable drawable, RefMatrixd projection, RefMatrixd modelview, float depth=0.0) -> RenderLeaf
        __init__(osgUtil::RenderLeaf self, Drawable drawable, RefMatrixd projection, RefMatrixd modelview) -> RenderLeaf
        """
        this = _osgUtil.new_RenderLeaf(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """
        set(RenderLeaf self, Drawable drawable, RefMatrixd projection, RefMatrixd modelview, float depth=0.0, 
            unsigned int traversalNumber=0)
        set(RenderLeaf self, Drawable drawable, RefMatrixd projection, RefMatrixd modelview, float depth=0.0)
        set(RenderLeaf self, Drawable drawable, RefMatrixd projection, RefMatrixd modelview)
        """
        return _osgUtil.RenderLeaf_set(self, *args)

    def reset(self):
        """reset(RenderLeaf self)"""
        return _osgUtil.RenderLeaf_reset(self)

    def render(self, *args):
        """render(RenderLeaf self, RenderInfo renderInfo, RenderLeaf previous)"""
        return _osgUtil.RenderLeaf_render(self, *args)

    __swig_setmethods__["_parent"] = _osgUtil.RenderLeaf__parent_set
    __swig_getmethods__["_parent"] = _osgUtil.RenderLeaf__parent_get
    if _newclass:_parent = _swig_property(_osgUtil.RenderLeaf__parent_get, _osgUtil.RenderLeaf__parent_set)
    __swig_setmethods__["_drawable"] = _osgUtil.RenderLeaf__drawable_set
    __swig_getmethods__["_drawable"] = _osgUtil.RenderLeaf__drawable_get
    if _newclass:_drawable = _swig_property(_osgUtil.RenderLeaf__drawable_get, _osgUtil.RenderLeaf__drawable_set)
    def getDrawable(self):
        """getDrawable(RenderLeaf self) -> Drawable"""
        return _osgUtil.RenderLeaf_getDrawable(self)

    __swig_setmethods__["_projection"] = _osgUtil.RenderLeaf__projection_set
    __swig_getmethods__["_projection"] = _osgUtil.RenderLeaf__projection_get
    if _newclass:_projection = _swig_property(_osgUtil.RenderLeaf__projection_get, _osgUtil.RenderLeaf__projection_set)
    __swig_setmethods__["_modelview"] = _osgUtil.RenderLeaf__modelview_set
    __swig_getmethods__["_modelview"] = _osgUtil.RenderLeaf__modelview_get
    if _newclass:_modelview = _swig_property(_osgUtil.RenderLeaf__modelview_get, _osgUtil.RenderLeaf__modelview_set)
    __swig_setmethods__["_depth"] = _osgUtil.RenderLeaf__depth_set
    __swig_getmethods__["_depth"] = _osgUtil.RenderLeaf__depth_get
    if _newclass:_depth = _swig_property(_osgUtil.RenderLeaf__depth_get, _osgUtil.RenderLeaf__depth_set)
    __swig_setmethods__["_dynamic"] = _osgUtil.RenderLeaf__dynamic_set
    __swig_getmethods__["_dynamic"] = _osgUtil.RenderLeaf__dynamic_get
    if _newclass:_dynamic = _swig_property(_osgUtil.RenderLeaf__dynamic_get, _osgUtil.RenderLeaf__dynamic_set)
    __swig_setmethods__["_traversalNumber"] = _osgUtil.RenderLeaf__traversalNumber_set
    __swig_getmethods__["_traversalNumber"] = _osgUtil.RenderLeaf__traversalNumber_get
    if _newclass:_traversalNumber = _swig_property(_osgUtil.RenderLeaf__traversalNumber_get, _osgUtil.RenderLeaf__traversalNumber_set)
    __swig_destroy__ = _osgUtil.delete_RenderLeaf
    __del__ = lambda self : None;
RenderLeaf_swigregister = _osgUtil.RenderLeaf_swigregister
RenderLeaf_swigregister(RenderLeaf)

OSGUTIL_STATEGRAPH = _osgUtil.OSGUTIL_STATEGRAPH
class LessDepthSortFunctor(_object):
    """Proxy of C++ osgUtil::LessDepthSortFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LessDepthSortFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LessDepthSortFunctor, name)
    __repr__ = _swig_repr
    def __call__(self, *args):
        """__call__(LessDepthSortFunctor self, osg::ref_ptr< osgUtil::RenderLeaf > const & lhs, osg::ref_ptr< osgUtil::RenderLeaf > const & rhs) -> bool"""
        return _osgUtil.LessDepthSortFunctor___call__(self, *args)

    def __init__(self): 
        """__init__(osgUtil::LessDepthSortFunctor self) -> LessDepthSortFunctor"""
        this = _osgUtil.new_LessDepthSortFunctor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_LessDepthSortFunctor
    __del__ = lambda self : None;
LessDepthSortFunctor_swigregister = _osgUtil.LessDepthSortFunctor_swigregister
LessDepthSortFunctor_swigregister(LessDepthSortFunctor)

class StateGraph(osg.Referenced):
    """Proxy of C++ osgUtil::StateGraph class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateGraph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_parent"] = _osgUtil.StateGraph__parent_set
    __swig_getmethods__["_parent"] = _osgUtil.StateGraph__parent_get
    if _newclass:_parent = _swig_property(_osgUtil.StateGraph__parent_get, _osgUtil.StateGraph__parent_set)
    __swig_setmethods__["_stateset"] = _osgUtil.StateGraph__stateset_set
    __swig_getmethods__["_stateset"] = _osgUtil.StateGraph__stateset_get
    if _newclass:_stateset = _swig_property(_osgUtil.StateGraph__stateset_get, _osgUtil.StateGraph__stateset_set)
    __swig_setmethods__["_depth"] = _osgUtil.StateGraph__depth_set
    __swig_getmethods__["_depth"] = _osgUtil.StateGraph__depth_get
    if _newclass:_depth = _swig_property(_osgUtil.StateGraph__depth_get, _osgUtil.StateGraph__depth_set)
    __swig_setmethods__["_children"] = _osgUtil.StateGraph__children_set
    __swig_getmethods__["_children"] = _osgUtil.StateGraph__children_get
    if _newclass:_children = _swig_property(_osgUtil.StateGraph__children_get, _osgUtil.StateGraph__children_set)
    __swig_setmethods__["_leaves"] = _osgUtil.StateGraph__leaves_set
    __swig_getmethods__["_leaves"] = _osgUtil.StateGraph__leaves_get
    if _newclass:_leaves = _swig_property(_osgUtil.StateGraph__leaves_get, _osgUtil.StateGraph__leaves_set)
    __swig_setmethods__["_averageDistance"] = _osgUtil.StateGraph__averageDistance_set
    __swig_getmethods__["_averageDistance"] = _osgUtil.StateGraph__averageDistance_get
    if _newclass:_averageDistance = _swig_property(_osgUtil.StateGraph__averageDistance_get, _osgUtil.StateGraph__averageDistance_set)
    __swig_setmethods__["_minimumDistance"] = _osgUtil.StateGraph__minimumDistance_set
    __swig_getmethods__["_minimumDistance"] = _osgUtil.StateGraph__minimumDistance_get
    if _newclass:_minimumDistance = _swig_property(_osgUtil.StateGraph__minimumDistance_get, _osgUtil.StateGraph__minimumDistance_set)
    __swig_setmethods__["_userData"] = _osgUtil.StateGraph__userData_set
    __swig_getmethods__["_userData"] = _osgUtil.StateGraph__userData_get
    if _newclass:_userData = _swig_property(_osgUtil.StateGraph__userData_get, _osgUtil.StateGraph__userData_set)
    __swig_setmethods__["_dynamic"] = _osgUtil.StateGraph__dynamic_set
    __swig_getmethods__["_dynamic"] = _osgUtil.StateGraph__dynamic_get
    if _newclass:_dynamic = _swig_property(_osgUtil.StateGraph__dynamic_get, _osgUtil.StateGraph__dynamic_set)
    def __init__(self, *args): 
        """
        __init__(osgUtil::StateGraph self) -> StateGraph
        __init__(osgUtil::StateGraph self, StateGraph parent, StateSet stateset) -> StateGraph
        """
        this = _osgUtil.new_StateGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_StateGraph
    __del__ = lambda self : None;
    def cloneType(self):
        """cloneType(StateGraph self) -> StateGraph"""
        return _osgUtil.StateGraph_cloneType(self)

    def setUserData(self, *args):
        """setUserData(StateGraph self, Referenced obj)"""
        return _osgUtil.StateGraph_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(StateGraph self) -> Referenced
        getUserData(StateGraph self) -> Referenced
        """
        return _osgUtil.StateGraph_getUserData(self, *args)

    def setStateSet(self, *args):
        """setStateSet(StateGraph self, StateSet stateset)"""
        return _osgUtil.StateGraph_setStateSet(self, *args)

    def getStateSet(self):
        """getStateSet(StateGraph self) -> StateSet"""
        return _osgUtil.StateGraph_getStateSet(self)

    def empty(self):
        """empty(StateGraph self) -> bool"""
        return _osgUtil.StateGraph_empty(self)

    def leaves_empty(self):
        """leaves_empty(StateGraph self) -> bool"""
        return _osgUtil.StateGraph_leaves_empty(self)

    def getAverageDistance(self):
        """getAverageDistance(StateGraph self) -> float"""
        return _osgUtil.StateGraph_getAverageDistance(self)

    def getMinimumDistance(self):
        """getMinimumDistance(StateGraph self) -> float"""
        return _osgUtil.StateGraph_getMinimumDistance(self)

    def sortFrontToBack(self):
        """sortFrontToBack(StateGraph self)"""
        return _osgUtil.StateGraph_sortFrontToBack(self)

    def reset(self):
        """reset(StateGraph self)"""
        return _osgUtil.StateGraph_reset(self)

    def clean(self):
        """clean(StateGraph self)"""
        return _osgUtil.StateGraph_clean(self)

    def prune(self):
        """prune(StateGraph self)"""
        return _osgUtil.StateGraph_prune(self)

    def find_or_insert(self, *args):
        """find_or_insert(StateGraph self, StateSet stateset) -> StateGraph"""
        return _osgUtil.StateGraph_find_or_insert(self, *args)

    def addLeaf(self, *args):
        """addLeaf(StateGraph self, RenderLeaf leaf)"""
        return _osgUtil.StateGraph_addLeaf(self, *args)

    def moveStateGraph(*args):
        """moveStateGraph(State state, StateGraph sg_curr, StateGraph sg_new)"""
        return _osgUtil.StateGraph_moveStateGraph(*args)

    if _newclass:moveStateGraph = staticmethod(moveStateGraph)
    __swig_getmethods__["moveStateGraph"] = lambda x: moveStateGraph
    def moveToRootStateGraph(*args):
        """moveToRootStateGraph(State state, StateGraph sg_curr)"""
        return _osgUtil.StateGraph_moveToRootStateGraph(*args)

    if _newclass:moveToRootStateGraph = staticmethod(moveToRootStateGraph)
    __swig_getmethods__["moveToRootStateGraph"] = lambda x: moveToRootStateGraph
    def numToPop(*args):
        """numToPop(StateGraph sg_curr) -> int"""
        return _osgUtil.StateGraph_numToPop(*args)

    if _newclass:numToPop = staticmethod(numToPop)
    __swig_getmethods__["numToPop"] = lambda x: numToPop
StateGraph_swigregister = _osgUtil.StateGraph_swigregister
StateGraph_swigregister(StateGraph)

def StateGraph_moveStateGraph(*args):
  """StateGraph_moveStateGraph(State state, StateGraph sg_curr, StateGraph sg_new)"""
  return _osgUtil.StateGraph_moveStateGraph(*args)

def StateGraph_moveToRootStateGraph(*args):
  """StateGraph_moveToRootStateGraph(State state, StateGraph sg_curr)"""
  return _osgUtil.StateGraph_moveToRootStateGraph(*args)

def StateGraph_numToPop(*args):
  """StateGraph_numToPop(StateGraph sg_curr) -> int"""
  return _osgUtil.StateGraph_numToPop(*args)

OSGUTIL_RENDERBIN = _osgUtil.OSGUTIL_RENDERBIN
class RenderBin(osg.Object):
    """Proxy of C++ osgUtil::RenderBin class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderBin, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderBin, name)
    __repr__ = _swig_repr
    SORT_BY_STATE = _osgUtil.RenderBin_SORT_BY_STATE
    SORT_BY_STATE_THEN_FRONT_TO_BACK = _osgUtil.RenderBin_SORT_BY_STATE_THEN_FRONT_TO_BACK
    SORT_FRONT_TO_BACK = _osgUtil.RenderBin_SORT_FRONT_TO_BACK
    SORT_BACK_TO_FRONT = _osgUtil.RenderBin_SORT_BACK_TO_FRONT
    TRAVERSAL_ORDER = _osgUtil.RenderBin_TRAVERSAL_ORDER
    def createRenderBin(*args):
        """createRenderBin(std::string const & binName) -> RenderBin"""
        return _osgUtil.RenderBin_createRenderBin(*args)

    if _newclass:createRenderBin = staticmethod(createRenderBin)
    __swig_getmethods__["createRenderBin"] = lambda x: createRenderBin
    def getRenderBinPrototype(*args):
        """getRenderBinPrototype(std::string const & binName) -> RenderBin"""
        return _osgUtil.RenderBin_getRenderBinPrototype(*args)

    if _newclass:getRenderBinPrototype = staticmethod(getRenderBinPrototype)
    __swig_getmethods__["getRenderBinPrototype"] = lambda x: getRenderBinPrototype
    def addRenderBinPrototype(*args):
        """addRenderBinPrototype(std::string const & binName, RenderBin proto)"""
        return _osgUtil.RenderBin_addRenderBinPrototype(*args)

    if _newclass:addRenderBinPrototype = staticmethod(addRenderBinPrototype)
    __swig_getmethods__["addRenderBinPrototype"] = lambda x: addRenderBinPrototype
    def removeRenderBinPrototype(*args):
        """removeRenderBinPrototype(RenderBin proto)"""
        return _osgUtil.RenderBin_removeRenderBinPrototype(*args)

    if _newclass:removeRenderBinPrototype = staticmethod(removeRenderBinPrototype)
    __swig_getmethods__["removeRenderBinPrototype"] = lambda x: removeRenderBinPrototype
    def setDefaultRenderBinSortMode(*args):
        """setDefaultRenderBinSortMode(osgUtil::RenderBin::SortMode mode)"""
        return _osgUtil.RenderBin_setDefaultRenderBinSortMode(*args)

    if _newclass:setDefaultRenderBinSortMode = staticmethod(setDefaultRenderBinSortMode)
    __swig_getmethods__["setDefaultRenderBinSortMode"] = lambda x: setDefaultRenderBinSortMode
    def getDefaultRenderBinSortMode():
        """getDefaultRenderBinSortMode() -> osgUtil::RenderBin::SortMode"""
        return _osgUtil.RenderBin_getDefaultRenderBinSortMode()

    if _newclass:getDefaultRenderBinSortMode = staticmethod(getDefaultRenderBinSortMode)
    __swig_getmethods__["getDefaultRenderBinSortMode"] = lambda x: getDefaultRenderBinSortMode
    def __init__(self, *args): 
        """
        __init__(osgUtil::RenderBin self) -> RenderBin
        __init__(osgUtil::RenderBin self, osgUtil::RenderBin::SortMode mode) -> RenderBin
        __init__(osgUtil::RenderBin self, RenderBin rhs, CopyOp copyop=SHALLOW_COPY) -> RenderBin
        __init__(osgUtil::RenderBin self, RenderBin rhs) -> RenderBin
        """
        this = _osgUtil.new_RenderBin(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(RenderBin self) -> Object"""
        return _osgUtil.RenderBin_cloneType(self)

    def clone(self, *args):
        """clone(RenderBin self, CopyOp copyop) -> Object"""
        return _osgUtil.RenderBin_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(RenderBin self, Object obj) -> bool"""
        return _osgUtil.RenderBin_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(RenderBin self) -> char const *"""
        return _osgUtil.RenderBin_libraryName(self)

    def className(self):
        """className(RenderBin self) -> char const *"""
        return _osgUtil.RenderBin_className(self)

    def reset(self):
        """reset(RenderBin self)"""
        return _osgUtil.RenderBin_reset(self)

    def setStateSet(self, *args):
        """setStateSet(RenderBin self, StateSet stateset)"""
        return _osgUtil.RenderBin_setStateSet(self, *args)

    def getStateSet(self, *args):
        """
        getStateSet(RenderBin self) -> StateSet
        getStateSet(RenderBin self) -> StateSet
        """
        return _osgUtil.RenderBin_getStateSet(self, *args)

    def getParent(self, *args):
        """
        getParent(RenderBin self) -> RenderBin
        getParent(RenderBin self) -> RenderBin
        """
        return _osgUtil.RenderBin_getParent(self, *args)

    def getStage(self, *args):
        """
        getStage(RenderBin self) -> RenderStage
        getStage(RenderBin self) -> RenderStage
        """
        return _osgUtil.RenderBin_getStage(self, *args)

    def getBinNum(self):
        """getBinNum(RenderBin self) -> int"""
        return _osgUtil.RenderBin_getBinNum(self)

    def getStateGraphList(self, *args):
        """
        getStateGraphList(RenderBin self) -> osgUtil::RenderBin::StateGraphList
        getStateGraphList(RenderBin self) -> osgUtil::RenderBin::StateGraphList const &
        """
        return _osgUtil.RenderBin_getStateGraphList(self, *args)

    def getRenderBinList(self, *args):
        """
        getRenderBinList(RenderBin self) -> osgUtil::RenderBin::RenderBinList
        getRenderBinList(RenderBin self) -> osgUtil::RenderBin::RenderBinList const &
        """
        return _osgUtil.RenderBin_getRenderBinList(self, *args)

    def getRenderLeafList(self, *args):
        """
        getRenderLeafList(RenderBin self) -> osgUtil::RenderBin::RenderLeafList
        getRenderLeafList(RenderBin self) -> osgUtil::RenderBin::RenderLeafList const &
        """
        return _osgUtil.RenderBin_getRenderLeafList(self, *args)

    def find_or_insert(self, *args):
        """find_or_insert(RenderBin self, int binNum, std::string const & binName) -> RenderBin"""
        return _osgUtil.RenderBin_find_or_insert(self, *args)

    def addStateGraph(self, *args):
        """addStateGraph(RenderBin self, StateGraph rg)"""
        return _osgUtil.RenderBin_addStateGraph(self, *args)

    def sort(self):
        """sort(RenderBin self)"""
        return _osgUtil.RenderBin_sort(self)

    def sortImplementation(self):
        """sortImplementation(RenderBin self)"""
        return _osgUtil.RenderBin_sortImplementation(self)

    def setSortMode(self, *args):
        """setSortMode(RenderBin self, osgUtil::RenderBin::SortMode mode)"""
        return _osgUtil.RenderBin_setSortMode(self, *args)

    def getSortMode(self):
        """getSortMode(RenderBin self) -> osgUtil::RenderBin::SortMode"""
        return _osgUtil.RenderBin_getSortMode(self)

    def sortByState(self):
        """sortByState(RenderBin self)"""
        return _osgUtil.RenderBin_sortByState(self)

    def sortByStateThenFrontToBack(self):
        """sortByStateThenFrontToBack(RenderBin self)"""
        return _osgUtil.RenderBin_sortByStateThenFrontToBack(self)

    def sortFrontToBack(self):
        """sortFrontToBack(RenderBin self)"""
        return _osgUtil.RenderBin_sortFrontToBack(self)

    def sortBackToFront(self):
        """sortBackToFront(RenderBin self)"""
        return _osgUtil.RenderBin_sortBackToFront(self)

    def sortTraversalOrder(self):
        """sortTraversalOrder(RenderBin self)"""
        return _osgUtil.RenderBin_sortTraversalOrder(self)

    def draw(self, *args):
        """draw(RenderBin self, RenderInfo renderInfo, osgUtil::RenderLeaf *& previous)"""
        return _osgUtil.RenderBin_draw(self, *args)

    def drawImplementation(self, *args):
        """drawImplementation(RenderBin self, RenderInfo renderInfo, osgUtil::RenderLeaf *& previous)"""
        return _osgUtil.RenderBin_drawImplementation(self, *args)

    def getStats(self, *args):
        """getStats(RenderBin self, Statistics primStats) -> bool"""
        return _osgUtil.RenderBin_getStats(self, *args)

    def computeNumberOfDynamicRenderLeaves(self):
        """computeNumberOfDynamicRenderLeaves(RenderBin self) -> unsigned int"""
        return _osgUtil.RenderBin_computeNumberOfDynamicRenderLeaves(self)

    def copyLeavesFromStateGraphListToRenderLeafList(self):
        """copyLeavesFromStateGraphListToRenderLeafList(RenderBin self)"""
        return _osgUtil.RenderBin_copyLeavesFromStateGraphListToRenderLeafList(self)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(RenderBin self, State state=None)
        releaseGLObjects(RenderBin self)
        """
        return _osgUtil.RenderBin_releaseGLObjects(self, state)

RenderBin_swigregister = _osgUtil.RenderBin_swigregister
RenderBin_swigregister(RenderBin)

def RenderBin_createRenderBin(*args):
  """RenderBin_createRenderBin(std::string const & binName) -> RenderBin"""
  return _osgUtil.RenderBin_createRenderBin(*args)

def RenderBin_getRenderBinPrototype(*args):
  """RenderBin_getRenderBinPrototype(std::string const & binName) -> RenderBin"""
  return _osgUtil.RenderBin_getRenderBinPrototype(*args)

def RenderBin_addRenderBinPrototype(*args):
  """RenderBin_addRenderBinPrototype(std::string const & binName, RenderBin proto)"""
  return _osgUtil.RenderBin_addRenderBinPrototype(*args)

def RenderBin_removeRenderBinPrototype(*args):
  """RenderBin_removeRenderBinPrototype(RenderBin proto)"""
  return _osgUtil.RenderBin_removeRenderBinPrototype(*args)

def RenderBin_setDefaultRenderBinSortMode(*args):
  """RenderBin_setDefaultRenderBinSortMode(osgUtil::RenderBin::SortMode mode)"""
  return _osgUtil.RenderBin_setDefaultRenderBinSortMode(*args)

def RenderBin_getDefaultRenderBinSortMode():
  """RenderBin_getDefaultRenderBinSortMode() -> osgUtil::RenderBin::SortMode"""
  return _osgUtil.RenderBin_getDefaultRenderBinSortMode()

OSGUTIL_POSTIONALSTATECONTIANER = _osgUtil.OSGUTIL_POSTIONALSTATECONTIANER
class PositionalStateContainer(osg.Object):
    """Proxy of C++ osgUtil::PositionalStateContainer class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionalStateContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionalStateContainer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::PositionalStateContainer self) -> PositionalStateContainer"""
        this = _osgUtil.new_PositionalStateContainer()
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(PositionalStateContainer self) -> Object"""
        return _osgUtil.PositionalStateContainer_cloneType(self)

    def clone(self, *args):
        """clone(PositionalStateContainer self, CopyOp arg2) -> Object"""
        return _osgUtil.PositionalStateContainer_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(PositionalStateContainer self, Object obj) -> bool"""
        return _osgUtil.PositionalStateContainer_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(PositionalStateContainer self) -> char const *"""
        return _osgUtil.PositionalStateContainer_libraryName(self)

    def className(self):
        """className(PositionalStateContainer self) -> char const *"""
        return _osgUtil.PositionalStateContainer_className(self)

    def reset(self):
        """reset(PositionalStateContainer self)"""
        return _osgUtil.PositionalStateContainer_reset(self)

    def getAttrMatrixList(self):
        """getAttrMatrixList(PositionalStateContainer self) -> osgUtil::PositionalStateContainer::AttrMatrixList &"""
        return _osgUtil.PositionalStateContainer_getAttrMatrixList(self)

    def addPositionedAttribute(self, *args):
        """addPositionedAttribute(PositionalStateContainer self, RefMatrixd matrix, StateAttribute attr)"""
        return _osgUtil.PositionalStateContainer_addPositionedAttribute(self, *args)

    def getTexUnitAttrMatrixListMap(self):
        """getTexUnitAttrMatrixListMap(PositionalStateContainer self) -> osgUtil::PositionalStateContainer::TexUnitAttrMatrixListMap &"""
        return _osgUtil.PositionalStateContainer_getTexUnitAttrMatrixListMap(self)

    def addPositionedTextureAttribute(self, *args):
        """addPositionedTextureAttribute(PositionalStateContainer self, unsigned int textureUnit, RefMatrixd matrix, StateAttribute attr)"""
        return _osgUtil.PositionalStateContainer_addPositionedTextureAttribute(self, *args)

    def draw(self, *args):
        """
        draw(PositionalStateContainer self, State state, osgUtil::RenderLeaf *& previous, Matrixd postMultMatrix=None)
        draw(PositionalStateContainer self, State state, osgUtil::RenderLeaf *& previous)
        """
        return _osgUtil.PositionalStateContainer_draw(self, *args)

    __swig_setmethods__["_attrList"] = _osgUtil.PositionalStateContainer__attrList_set
    __swig_getmethods__["_attrList"] = _osgUtil.PositionalStateContainer__attrList_get
    if _newclass:_attrList = _swig_property(_osgUtil.PositionalStateContainer__attrList_get, _osgUtil.PositionalStateContainer__attrList_set)
    __swig_setmethods__["_texAttrListMap"] = _osgUtil.PositionalStateContainer__texAttrListMap_set
    __swig_getmethods__["_texAttrListMap"] = _osgUtil.PositionalStateContainer__texAttrListMap_get
    if _newclass:_texAttrListMap = _swig_property(_osgUtil.PositionalStateContainer__texAttrListMap_get, _osgUtil.PositionalStateContainer__texAttrListMap_set)
PositionalStateContainer_swigregister = _osgUtil.PositionalStateContainer_swigregister
PositionalStateContainer_swigregister(PositionalStateContainer)

OSGUTIL_RENDERSTAGE = _osgUtil.OSGUTIL_RENDERSTAGE
class RenderStage(RenderBin):
    """Proxy of C++ osgUtil::RenderStage class"""
    __swig_setmethods__ = {}
    for _s in [RenderBin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderStage, name, value)
    __swig_getmethods__ = {}
    for _s in [RenderBin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderStage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::RenderStage self) -> RenderStage
        __init__(osgUtil::RenderStage self, osgUtil::RenderBin::SortMode mode) -> RenderStage
        __init__(osgUtil::RenderStage self, RenderStage rhs, CopyOp copyop=SHALLOW_COPY) -> RenderStage
        __init__(osgUtil::RenderStage self, RenderStage rhs) -> RenderStage
        """
        this = _osgUtil.new_RenderStage(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(RenderStage self) -> Object"""
        return _osgUtil.RenderStage_cloneType(self)

    def clone(self, *args):
        """clone(RenderStage self, CopyOp copyop) -> Object"""
        return _osgUtil.RenderStage_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(RenderStage self, Object obj) -> bool"""
        return _osgUtil.RenderStage_isSameKindAs(self, *args)

    def className(self):
        """className(RenderStage self) -> char const *"""
        return _osgUtil.RenderStage_className(self)

    def reset(self):
        """reset(RenderStage self)"""
        return _osgUtil.RenderStage_reset(self)

    def setDrawBuffer(self, *args):
        """
        setDrawBuffer(RenderStage self, GLenum buffer, bool applyMask=True)
        setDrawBuffer(RenderStage self, GLenum buffer)
        """
        return _osgUtil.RenderStage_setDrawBuffer(self, *args)

    def getDrawBuffer(self):
        """getDrawBuffer(RenderStage self) -> GLenum"""
        return _osgUtil.RenderStage_getDrawBuffer(self)

    def getDrawBufferApplyMask(self):
        """getDrawBufferApplyMask(RenderStage self) -> bool"""
        return _osgUtil.RenderStage_getDrawBufferApplyMask(self)

    def setDrawBufferApplyMask(self, *args):
        """setDrawBufferApplyMask(RenderStage self, bool applyMask)"""
        return _osgUtil.RenderStage_setDrawBufferApplyMask(self, *args)

    def setReadBuffer(self, *args):
        """
        setReadBuffer(RenderStage self, GLenum buffer, bool applyMask=True)
        setReadBuffer(RenderStage self, GLenum buffer)
        """
        return _osgUtil.RenderStage_setReadBuffer(self, *args)

    def getReadBuffer(self):
        """getReadBuffer(RenderStage self) -> GLenum"""
        return _osgUtil.RenderStage_getReadBuffer(self)

    def getReadBufferApplyMask(self):
        """getReadBufferApplyMask(RenderStage self) -> bool"""
        return _osgUtil.RenderStage_getReadBufferApplyMask(self)

    def setReadBufferApplyMask(self, *args):
        """setReadBufferApplyMask(RenderStage self, bool applyMask)"""
        return _osgUtil.RenderStage_setReadBufferApplyMask(self, *args)

    def setViewport(self, *args):
        """setViewport(RenderStage self, Viewport viewport)"""
        return _osgUtil.RenderStage_setViewport(self, *args)

    def getViewport(self, *args):
        """
        getViewport(RenderStage self) -> Viewport
        getViewport(RenderStage self) -> Viewport
        """
        return _osgUtil.RenderStage_getViewport(self, *args)

    def setInitialViewMatrix(self, *args):
        """setInitialViewMatrix(RenderStage self, RefMatrixd matrix)"""
        return _osgUtil.RenderStage_setInitialViewMatrix(self, *args)

    def getInitialViewMatrix(self):
        """getInitialViewMatrix(RenderStage self) -> RefMatrixd"""
        return _osgUtil.RenderStage_getInitialViewMatrix(self)

    def setClearMask(self, *args):
        """setClearMask(RenderStage self, GLbitfield mask)"""
        return _osgUtil.RenderStage_setClearMask(self, *args)

    def getClearMask(self):
        """getClearMask(RenderStage self) -> GLbitfield"""
        return _osgUtil.RenderStage_getClearMask(self)

    def setColorMask(self, *args):
        """setColorMask(RenderStage self, ColorMask cm)"""
        return _osgUtil.RenderStage_setColorMask(self, *args)

    def getColorMask(self, *args):
        """
        getColorMask(RenderStage self) -> ColorMask
        getColorMask(RenderStage self) -> ColorMask
        """
        return _osgUtil.RenderStage_getColorMask(self, *args)

    def setClearColor(self, *args):
        """setClearColor(RenderStage self, Vec4f color)"""
        return _osgUtil.RenderStage_setClearColor(self, *args)

    def getClearColor(self):
        """getClearColor(RenderStage self) -> Vec4f"""
        return _osgUtil.RenderStage_getClearColor(self)

    def setClearAccum(self, *args):
        """setClearAccum(RenderStage self, Vec4f color)"""
        return _osgUtil.RenderStage_setClearAccum(self, *args)

    def getClearAccum(self):
        """getClearAccum(RenderStage self) -> Vec4f"""
        return _osgUtil.RenderStage_getClearAccum(self)

    def setClearDepth(self, *args):
        """setClearDepth(RenderStage self, double depth)"""
        return _osgUtil.RenderStage_setClearDepth(self, *args)

    def getClearDepth(self):
        """getClearDepth(RenderStage self) -> double"""
        return _osgUtil.RenderStage_getClearDepth(self)

    def setClearStencil(self, *args):
        """setClearStencil(RenderStage self, int stencil)"""
        return _osgUtil.RenderStage_setClearStencil(self, *args)

    def getClearStencil(self):
        """getClearStencil(RenderStage self) -> int"""
        return _osgUtil.RenderStage_getClearStencil(self)

    def setCamera(self, *args):
        """setCamera(RenderStage self, Camera camera)"""
        return _osgUtil.RenderStage_setCamera(self, *args)

    def getCamera(self, *args):
        """
        getCamera(RenderStage self) -> Camera
        getCamera(RenderStage self) -> Camera
        """
        return _osgUtil.RenderStage_getCamera(self, *args)

    def setCameraRequiresSetUp(self, *args):
        """setCameraRequiresSetUp(RenderStage self, bool flag)"""
        return _osgUtil.RenderStage_setCameraRequiresSetUp(self, *args)

    def getCameraRequiresSetUp(self):
        """getCameraRequiresSetUp(RenderStage self) -> bool"""
        return _osgUtil.RenderStage_getCameraRequiresSetUp(self)

    def runCameraSetUp(self, *args):
        """runCameraSetUp(RenderStage self, RenderInfo renderInfo)"""
        return _osgUtil.RenderStage_runCameraSetUp(self, *args)

    def setTexture(self, *args):
        """
        setTexture(RenderStage self, Texture texture, unsigned int level=0, unsigned int face=0)
        setTexture(RenderStage self, Texture texture, unsigned int level=0)
        setTexture(RenderStage self, Texture texture)
        """
        return _osgUtil.RenderStage_setTexture(self, *args)

    def getTexture(self):
        """getTexture(RenderStage self) -> Texture"""
        return _osgUtil.RenderStage_getTexture(self)

    def setImage(self, *args):
        """setImage(RenderStage self, Image image)"""
        return _osgUtil.RenderStage_setImage(self, *args)

    def getImage(self):
        """getImage(RenderStage self) -> Image"""
        return _osgUtil.RenderStage_getImage(self)

    def setImageReadPixelFormat(self, *args):
        """setImageReadPixelFormat(RenderStage self, GLenum format)"""
        return _osgUtil.RenderStage_setImageReadPixelFormat(self, *args)

    def getImageReadPixelFormat(self):
        """getImageReadPixelFormat(RenderStage self) -> GLenum"""
        return _osgUtil.RenderStage_getImageReadPixelFormat(self)

    def setImageReadPixelDataType(self, *args):
        """setImageReadPixelDataType(RenderStage self, GLenum type)"""
        return _osgUtil.RenderStage_setImageReadPixelDataType(self, *args)

    def getImageReadPixelDataType(self):
        """getImageReadPixelDataType(RenderStage self) -> GLenum"""
        return _osgUtil.RenderStage_getImageReadPixelDataType(self)

    def setFrameBufferObject(self, *args):
        """setFrameBufferObject(RenderStage self, osg::FrameBufferObject * fbo)"""
        return _osgUtil.RenderStage_setFrameBufferObject(self, *args)

    def getFrameBufferObject(self, *args):
        """
        getFrameBufferObject(RenderStage self) -> osg::FrameBufferObject
        getFrameBufferObject(RenderStage self) -> osg::FrameBufferObject const *
        """
        return _osgUtil.RenderStage_getFrameBufferObject(self, *args)

    def setMultisampleResolveFramebufferObject(self, *args):
        """setMultisampleResolveFramebufferObject(RenderStage self, osg::FrameBufferObject * fbo)"""
        return _osgUtil.RenderStage_setMultisampleResolveFramebufferObject(self, *args)

    def getMultisampleResolveFramebufferObject(self, *args):
        """
        getMultisampleResolveFramebufferObject(RenderStage self) -> osg::FrameBufferObject
        getMultisampleResolveFramebufferObject(RenderStage self) -> osg::FrameBufferObject const *
        """
        return _osgUtil.RenderStage_getMultisampleResolveFramebufferObject(self, *args)

    def setDisableFboAfterRender(self, *args):
        """setDisableFboAfterRender(RenderStage self, bool disable)"""
        return _osgUtil.RenderStage_setDisableFboAfterRender(self, *args)

    def getDisableFboAfterRender(self):
        """getDisableFboAfterRender(RenderStage self) -> bool"""
        return _osgUtil.RenderStage_getDisableFboAfterRender(self)

    def setGraphicsContext(self, *args):
        """setGraphicsContext(RenderStage self, GraphicsContext context)"""
        return _osgUtil.RenderStage_setGraphicsContext(self, *args)

    def getGraphicsContext(self, *args):
        """
        getGraphicsContext(RenderStage self) -> GraphicsContext
        getGraphicsContext(RenderStage self) -> GraphicsContext
        """
        return _osgUtil.RenderStage_getGraphicsContext(self, *args)

    def setInheritedPositionalStateContainerMatrix(self, *args):
        """setInheritedPositionalStateContainerMatrix(RenderStage self, Matrixd matrix)"""
        return _osgUtil.RenderStage_setInheritedPositionalStateContainerMatrix(self, *args)

    def getInheritedPositionalStateContainerMatrix(self):
        """getInheritedPositionalStateContainerMatrix(RenderStage self) -> Matrixd"""
        return _osgUtil.RenderStage_getInheritedPositionalStateContainerMatrix(self)

    def setInheritedPositionalStateContainer(self, *args):
        """setInheritedPositionalStateContainer(RenderStage self, PositionalStateContainer rsl)"""
        return _osgUtil.RenderStage_setInheritedPositionalStateContainer(self, *args)

    def getInheritedPositionalStateContainer(self):
        """getInheritedPositionalStateContainer(RenderStage self) -> PositionalStateContainer"""
        return _osgUtil.RenderStage_getInheritedPositionalStateContainer(self)

    def setPositionalStateContainer(self, *args):
        """setPositionalStateContainer(RenderStage self, PositionalStateContainer rsl)"""
        return _osgUtil.RenderStage_setPositionalStateContainer(self, *args)

    def getPositionalStateContainer(self):
        """getPositionalStateContainer(RenderStage self) -> PositionalStateContainer"""
        return _osgUtil.RenderStage_getPositionalStateContainer(self)

    def addPositionedAttribute(self, *args):
        """addPositionedAttribute(RenderStage self, RefMatrixd matrix, StateAttribute attr)"""
        return _osgUtil.RenderStage_addPositionedAttribute(self, *args)

    def addPositionedTextureAttribute(self, *args):
        """addPositionedTextureAttribute(RenderStage self, unsigned int textureUnit, RefMatrixd matrix, StateAttribute attr)"""
        return _osgUtil.RenderStage_addPositionedTextureAttribute(self, *args)

    def copyTexture(self, *args):
        """copyTexture(RenderStage self, RenderInfo renderInfo)"""
        return _osgUtil.RenderStage_copyTexture(self, *args)

    def sort(self):
        """sort(RenderStage self)"""
        return _osgUtil.RenderStage_sort(self)

    def drawPreRenderStages(self, *args):
        """drawPreRenderStages(RenderStage self, RenderInfo renderInfo, osgUtil::RenderLeaf *& previous)"""
        return _osgUtil.RenderStage_drawPreRenderStages(self, *args)

    def draw(self, *args):
        """draw(RenderStage self, RenderInfo renderInfo, osgUtil::RenderLeaf *& previous)"""
        return _osgUtil.RenderStage_draw(self, *args)

    def drawInner(self, *args):
        """drawInner(RenderStage self, RenderInfo renderInfo, osgUtil::RenderLeaf *& previous, bool & doCopyTexture)"""
        return _osgUtil.RenderStage_drawInner(self, *args)

    def drawPostRenderStages(self, *args):
        """drawPostRenderStages(RenderStage self, RenderInfo renderInfo, osgUtil::RenderLeaf *& previous)"""
        return _osgUtil.RenderStage_drawPostRenderStages(self, *args)

    def drawImplementation(self, *args):
        """drawImplementation(RenderStage self, RenderInfo renderInfo, osgUtil::RenderLeaf *& previous)"""
        return _osgUtil.RenderStage_drawImplementation(self, *args)

    def addToDependencyList(self, *args):
        """addToDependencyList(RenderStage self, RenderStage rs)"""
        return _osgUtil.RenderStage_addToDependencyList(self, *args)

    def addPreRenderStage(self, *args):
        """
        addPreRenderStage(RenderStage self, RenderStage rs, int order=0)
        addPreRenderStage(RenderStage self, RenderStage rs)
        """
        return _osgUtil.RenderStage_addPreRenderStage(self, *args)

    def addPostRenderStage(self, *args):
        """
        addPostRenderStage(RenderStage self, RenderStage rs, int order=0)
        addPostRenderStage(RenderStage self, RenderStage rs)
        """
        return _osgUtil.RenderStage_addPostRenderStage(self, *args)

    def getStats(self, *args):
        """getStats(RenderStage self, Statistics stats) -> bool"""
        return _osgUtil.RenderStage_getStats(self, *args)

    def computeNumberOfDynamicRenderLeaves(self):
        """computeNumberOfDynamicRenderLeaves(RenderStage self) -> unsigned int"""
        return _osgUtil.RenderStage_computeNumberOfDynamicRenderLeaves(self)

    def attach(self, *args):
        """attach(RenderStage self, osg::Camera::BufferComponent buffer, Image image)"""
        return _osgUtil.RenderStage_attach(self, *args)

    def collateReferencesToDependentCameras(self):
        """collateReferencesToDependentCameras(RenderStage self)"""
        return _osgUtil.RenderStage_collateReferencesToDependentCameras(self)

    def clearReferencesToDependentCameras(self):
        """clearReferencesToDependentCameras(RenderStage self)"""
        return _osgUtil.RenderStage_clearReferencesToDependentCameras(self)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(RenderStage self, State state=None)
        releaseGLObjects(RenderStage self)
        """
        return _osgUtil.RenderStage_releaseGLObjects(self, state)

RenderStage_swigregister = _osgUtil.RenderStage_swigregister
RenderStage_swigregister(RenderStage)

class CubeMapGenerator(osg.Referenced):
    """Proxy of C++ osgUtil::CubeMapGenerator class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubeMapGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubeMapGenerator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getImage(self, *args):
        """
        getImage(CubeMapGenerator self, osg::TextureCubeMap::Face face) -> Image
        getImage(CubeMapGenerator self, osg::TextureCubeMap::Face face) -> Image
        """
        return _osgUtil.CubeMapGenerator_getImage(self, *args)

    def generateMap(self, use_osg_system=True):
        """
        generateMap(CubeMapGenerator self, bool use_osg_system=True)
        generateMap(CubeMapGenerator self)
        """
        return _osgUtil.CubeMapGenerator_generateMap(self, use_osg_system)

CubeMapGenerator_swigregister = _osgUtil.CubeMapGenerator_swigregister
CubeMapGenerator_swigregister(CubeMapGenerator)

OSGUTIL_CULLVISITOR = _osgUtil.OSGUTIL_CULLVISITOR
class CullVisitor(osg.NodeVisitor):
    """Proxy of C++ osgUtil::CullVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CullVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CullVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::CullVisitor self) -> CullVisitor
        __init__(osgUtil::CullVisitor self, CullVisitor arg2) -> CullVisitor
        """
        this = _osgUtil.new_CullVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(CullVisitor self) -> char const *"""
        return _osgUtil.CullVisitor_libraryName(self)

    def className(self):
        """className(CullVisitor self) -> char const *"""
        return _osgUtil.CullVisitor_className(self)

    def clone(self):
        """clone(CullVisitor self) -> CullVisitor"""
        return _osgUtil.CullVisitor_clone(self)

    def prototype():
        """prototype() -> osg::ref_ptr< osgUtil::CullVisitor > &"""
        return _osgUtil.CullVisitor_prototype()

    if _newclass:prototype = staticmethod(prototype)
    __swig_getmethods__["prototype"] = lambda x: prototype
    def create():
        """create() -> CullVisitor"""
        return _osgUtil.CullVisitor_create()

    if _newclass:create = staticmethod(create)
    __swig_getmethods__["create"] = lambda x: create
    def reset(self):
        """reset(CullVisitor self)"""
        return _osgUtil.CullVisitor_reset(self)

    def getEyePoint(self):
        """getEyePoint(CullVisitor self) -> Vec3f"""
        return _osgUtil.CullVisitor_getEyePoint(self)

    def getViewPoint(self):
        """getViewPoint(CullVisitor self) -> Vec3f"""
        return _osgUtil.CullVisitor_getViewPoint(self)

    def getDistanceToEyePoint(self, *args):
        """getDistanceToEyePoint(CullVisitor self, Vec3f pos, bool withLODScale) -> float"""
        return _osgUtil.CullVisitor_getDistanceToEyePoint(self, *args)

    def getDistanceFromEyePoint(self, *args):
        """getDistanceFromEyePoint(CullVisitor self, Vec3f pos, bool withLODScale) -> float"""
        return _osgUtil.CullVisitor_getDistanceFromEyePoint(self, *args)

    def getDistanceToViewPoint(self, *args):
        """getDistanceToViewPoint(CullVisitor self, Vec3f pos, bool withLODScale) -> float"""
        return _osgUtil.CullVisitor_getDistanceToViewPoint(self, *args)

    def apply(self, *args):
        """
        apply(CullVisitor self, Node arg2)
        apply(CullVisitor self, Geode node)
        apply(CullVisitor self, Billboard node)
        apply(CullVisitor self, LightSource node)
        apply(CullVisitor self, ClipNode node)
        apply(CullVisitor self, TexGenNode node)
        apply(CullVisitor self, Group node)
        apply(CullVisitor self, Transform node)
        apply(CullVisitor self, Projection node)
        apply(CullVisitor self, Switch node)
        apply(CullVisitor self, LOD node)
        apply(CullVisitor self, osg::ClearNode & node)
        apply(CullVisitor self, Camera node)
        apply(CullVisitor self, osg::OccluderNode & node)
        apply(CullVisitor self, osg::OcclusionQueryNode & node)
        """
        return _osgUtil.CullVisitor_apply(self, *args)

    def pushStateSet(self, *args):
        """pushStateSet(CullVisitor self, StateSet ss)"""
        return _osgUtil.CullVisitor_pushStateSet(self, *args)

    def popStateSet(self):
        """popStateSet(CullVisitor self)"""
        return _osgUtil.CullVisitor_popStateSet(self)

    def setStateGraph(self, *args):
        """setStateGraph(CullVisitor self, StateGraph rg)"""
        return _osgUtil.CullVisitor_setStateGraph(self, *args)

    def getRootStateGraph(self):
        """getRootStateGraph(CullVisitor self) -> StateGraph"""
        return _osgUtil.CullVisitor_getRootStateGraph(self)

    def getCurrentStateGraph(self):
        """getCurrentStateGraph(CullVisitor self) -> StateGraph"""
        return _osgUtil.CullVisitor_getCurrentStateGraph(self)

    def setRenderStage(self, *args):
        """setRenderStage(CullVisitor self, RenderStage rg)"""
        return _osgUtil.CullVisitor_setRenderStage(self, *args)

    def getRenderStage(self):
        """getRenderStage(CullVisitor self) -> RenderStage"""
        return _osgUtil.CullVisitor_getRenderStage(self)

    def getCurrentRenderStage(self):
        """getCurrentRenderStage(CullVisitor self) -> RenderStage"""
        return _osgUtil.CullVisitor_getCurrentRenderStage(self)

    def getCurrentCamera(self):
        """getCurrentCamera(CullVisitor self) -> Camera"""
        return _osgUtil.CullVisitor_getCurrentCamera(self)

    def getCurrentRenderBin(self):
        """getCurrentRenderBin(CullVisitor self) -> RenderBin"""
        return _osgUtil.CullVisitor_getCurrentRenderBin(self)

    def setCurrentRenderBin(self, *args):
        """setCurrentRenderBin(CullVisitor self, RenderBin rb)"""
        return _osgUtil.CullVisitor_setCurrentRenderBin(self, *args)

    def setCalculatedNearPlane(self, *args):
        """setCalculatedNearPlane(CullVisitor self, osgUtil::CullVisitor::value_type value)"""
        return _osgUtil.CullVisitor_setCalculatedNearPlane(self, *args)

    def getCalculatedNearPlane(self):
        """getCalculatedNearPlane(CullVisitor self) -> osgUtil::CullVisitor::value_type"""
        return _osgUtil.CullVisitor_getCalculatedNearPlane(self)

    def setCalculatedFarPlane(self, *args):
        """setCalculatedFarPlane(CullVisitor self, osgUtil::CullVisitor::value_type value)"""
        return _osgUtil.CullVisitor_setCalculatedFarPlane(self, *args)

    def getCalculatedFarPlane(self):
        """getCalculatedFarPlane(CullVisitor self) -> osgUtil::CullVisitor::value_type"""
        return _osgUtil.CullVisitor_getCalculatedFarPlane(self)

    def computeNearestPointInFrustum(self, *args):
        """computeNearestPointInFrustum(CullVisitor self, Matrixd matrix, osg::Polytope::PlaneList const & planes, Drawable drawable) -> osgUtil::CullVisitor::value_type"""
        return _osgUtil.CullVisitor_computeNearestPointInFrustum(self, *args)

    def computeFurthestPointInFrustum(self, *args):
        """computeFurthestPointInFrustum(CullVisitor self, Matrixd matrix, osg::Polytope::PlaneList const & planes, Drawable drawable) -> osgUtil::CullVisitor::value_type"""
        return _osgUtil.CullVisitor_computeFurthestPointInFrustum(self, *args)

    def updateCalculatedNearFar(self, *args):
        """
        updateCalculatedNearFar(CullVisitor self, Matrixd matrix, BoundingBoxf bb) -> bool
        updateCalculatedNearFar(CullVisitor self, Matrixd matrix, Drawable drawable, bool isBillboard=False) -> bool
        updateCalculatedNearFar(CullVisitor self, Matrixd matrix, Drawable drawable) -> bool
        updateCalculatedNearFar(CullVisitor self, Vec3f pos)
        """
        return _osgUtil.CullVisitor_updateCalculatedNearFar(self, *args)

    def addDrawable(self, *args):
        """addDrawable(CullVisitor self, Drawable drawable, RefMatrixd matrix)"""
        return _osgUtil.CullVisitor_addDrawable(self, *args)

    def addDrawableAndDepth(self, *args):
        """addDrawableAndDepth(CullVisitor self, Drawable drawable, RefMatrixd matrix, float depth)"""
        return _osgUtil.CullVisitor_addDrawableAndDepth(self, *args)

    def addPositionedAttribute(self, *args):
        """addPositionedAttribute(CullVisitor self, RefMatrixd matrix, StateAttribute attr)"""
        return _osgUtil.CullVisitor_addPositionedAttribute(self, *args)

    def addPositionedTextureAttribute(self, *args):
        """addPositionedTextureAttribute(CullVisitor self, unsigned int textureUnit, RefMatrixd matrix, StateAttribute attr)"""
        return _osgUtil.CullVisitor_addPositionedTextureAttribute(self, *args)

    def computeNearPlane(self):
        """computeNearPlane(CullVisitor self)"""
        return _osgUtil.CullVisitor_computeNearPlane(self)

    def popProjectionMatrix(self):
        """popProjectionMatrix(CullVisitor self)"""
        return _osgUtil.CullVisitor_popProjectionMatrix(self)

    def clampProjectionMatrixImplementation(self, *args):
        """
        clampProjectionMatrixImplementation(CullVisitor self, Matrixf projection, double & znear, double & zfar) -> bool
        clampProjectionMatrixImplementation(CullVisitor self, Matrixd projection, double & znear, double & zfar) -> bool
        """
        return _osgUtil.CullVisitor_clampProjectionMatrixImplementation(self, *args)

    def clampProjectionMatrix(self, *args):
        """
        clampProjectionMatrix(CullVisitor self, Matrixf projection, osgUtil::CullVisitor::value_type & znear, osgUtil::CullVisitor::value_type & zfar) -> bool
        clampProjectionMatrix(CullVisitor self, Matrixd projection, osgUtil::CullVisitor::value_type & znear, osgUtil::CullVisitor::value_type & zfar) -> bool
        """
        return _osgUtil.CullVisitor_clampProjectionMatrix(self, *args)

    def setState(self, *args):
        """setState(CullVisitor self, State state)"""
        return _osgUtil.CullVisitor_setState(self, *args)

    def getState(self, *args):
        """
        getState(CullVisitor self) -> State
        getState(CullVisitor self) -> State
        """
        return _osgUtil.CullVisitor_getState(self, *args)

    def setRenderInfo(self, *args):
        """setRenderInfo(CullVisitor self, RenderInfo renderInfo)"""
        return _osgUtil.CullVisitor_setRenderInfo(self, *args)

    def getRenderInfo(self, *args):
        """
        getRenderInfo(CullVisitor self) -> RenderInfo
        getRenderInfo(CullVisitor self) -> RenderInfo
        """
        return _osgUtil.CullVisitor_getRenderInfo(self, *args)

CullVisitor_swigregister = _osgUtil.CullVisitor_swigregister
CullVisitor_swigregister(CullVisitor)

def CullVisitor_prototype():
  """CullVisitor_prototype() -> osg::ref_ptr< osgUtil::CullVisitor > &"""
  return _osgUtil.CullVisitor_prototype()

def CullVisitor_create():
  """CullVisitor_create() -> CullVisitor"""
  return _osgUtil.CullVisitor_create()

class DelaunayConstraint(osg.Geometry):
    """Proxy of C++ osgUtil::DelaunayConstraint class"""
    __swig_setmethods__ = {}
    for _s in [osg.Geometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DelaunayConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Geometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DelaunayConstraint, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::DelaunayConstraint self) -> DelaunayConstraint"""
        this = _osgUtil.new_DelaunayConstraint()
        try: self.this.append(this)
        except: self.this = this
    def addtriangle(self, *args):
        """addtriangle(DelaunayConstraint self, int i1, int i2, int i3)"""
        return _osgUtil.DelaunayConstraint_addtriangle(self, *args)

    def getTriangles(self, *args):
        """
        getTriangles(DelaunayConstraint self) -> DrawElementsUInt
        getTriangles(DelaunayConstraint self) -> DrawElementsUInt
        """
        return _osgUtil.DelaunayConstraint_getTriangles(self, *args)

    def getPoints(self, *args):
        """getPoints(DelaunayConstraint self, Vec3Array points) -> Vec3Array"""
        return _osgUtil.DelaunayConstraint_getPoints(self, *args)

    def makeDrawable(self):
        """makeDrawable(DelaunayConstraint self) -> DrawElementsUInt"""
        return _osgUtil.DelaunayConstraint_makeDrawable(self)

    def merge(self, *args):
        """merge(DelaunayConstraint self, DelaunayConstraint dco)"""
        return _osgUtil.DelaunayConstraint_merge(self, *args)

    def removeVerticesInside(self, *args):
        """removeVerticesInside(DelaunayConstraint self, DelaunayConstraint dco)"""
        return _osgUtil.DelaunayConstraint_removeVerticesInside(self, *args)

    def windingNumber(self, *args):
        """windingNumber(DelaunayConstraint self, Vec3f testpoint) -> float"""
        return _osgUtil.DelaunayConstraint_windingNumber(self, *args)

    def contains(self, *args):
        """contains(DelaunayConstraint self, Vec3f testpoint) -> bool"""
        return _osgUtil.DelaunayConstraint_contains(self, *args)

    def outside(self, *args):
        """outside(DelaunayConstraint self, Vec3f testpoint) -> bool"""
        return _osgUtil.DelaunayConstraint_outside(self, *args)

    def handleOverlaps(self):
        """handleOverlaps(DelaunayConstraint self)"""
        return _osgUtil.DelaunayConstraint_handleOverlaps(self)

DelaunayConstraint_swigregister = _osgUtil.DelaunayConstraint_swigregister
DelaunayConstraint_swigregister(DelaunayConstraint)

class DelaunayTriangulator(osg.Referenced):
    """Proxy of C++ osgUtil::DelaunayTriangulator class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DelaunayTriangulator, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DelaunayTriangulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::DelaunayTriangulator self) -> DelaunayTriangulator
        __init__(osgUtil::DelaunayTriangulator self, Vec3Array points, Vec3Array normals=None) -> DelaunayTriangulator
        __init__(osgUtil::DelaunayTriangulator self, Vec3Array points) -> DelaunayTriangulator
        __init__(osgUtil::DelaunayTriangulator self, DelaunayTriangulator copy, CopyOp copyop=SHALLOW_COPY) -> DelaunayTriangulator
        __init__(osgUtil::DelaunayTriangulator self, DelaunayTriangulator copy) -> DelaunayTriangulator
        """
        this = _osgUtil.new_DelaunayTriangulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def setInputPointArray(self, *args):
        """setInputPointArray(DelaunayTriangulator self, Vec3Array points)"""
        return _osgUtil.DelaunayTriangulator_setInputPointArray(self, *args)

    def getInputPointArray(self, *args):
        """
        getInputPointArray(DelaunayTriangulator self) -> Vec3Array
        getInputPointArray(DelaunayTriangulator self) -> Vec3Array
        """
        return _osgUtil.DelaunayTriangulator_getInputPointArray(self, *args)

    def setOutputNormalArray(self, *args):
        """setOutputNormalArray(DelaunayTriangulator self, Vec3Array normals)"""
        return _osgUtil.DelaunayTriangulator_setOutputNormalArray(self, *args)

    def getOutputNormalArray(self, *args):
        """
        getOutputNormalArray(DelaunayTriangulator self) -> Vec3Array
        getOutputNormalArray(DelaunayTriangulator self) -> Vec3Array
        """
        return _osgUtil.DelaunayTriangulator_getOutputNormalArray(self, *args)

    def addInputConstraint(self, *args):
        """addInputConstraint(DelaunayTriangulator self, DelaunayConstraint dc)"""
        return _osgUtil.DelaunayTriangulator_addInputConstraint(self, *args)

    def triangulate(self):
        """triangulate(DelaunayTriangulator self) -> bool"""
        return _osgUtil.DelaunayTriangulator_triangulate(self)

    def getTriangles(self, *args):
        """
        getTriangles(DelaunayTriangulator self) -> DrawElementsUInt
        getTriangles(DelaunayTriangulator self) -> DrawElementsUInt
        """
        return _osgUtil.DelaunayTriangulator_getTriangles(self, *args)

    def removeInternalTriangles(self, *args):
        """removeInternalTriangles(DelaunayTriangulator self, DelaunayConstraint constraint)"""
        return _osgUtil.DelaunayTriangulator_removeInternalTriangles(self, *args)

DelaunayTriangulator_swigregister = _osgUtil.DelaunayTriangulator_swigregister
DelaunayTriangulator_swigregister(DelaunayTriangulator)

OSGUTIL_DISPLAYREQUIREMENTSVISITOR = _osgUtil.OSGUTIL_DISPLAYREQUIREMENTSVISITOR
class DisplayRequirementsVisitor(osg.NodeVisitor):
    """Proxy of C++ osgUtil::DisplayRequirementsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayRequirementsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayRequirementsVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::DisplayRequirementsVisitor self) -> DisplayRequirementsVisitor"""
        this = _osgUtil.new_DisplayRequirementsVisitor()
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(DisplayRequirementsVisitor self) -> char const *"""
        return _osgUtil.DisplayRequirementsVisitor_libraryName(self)

    def className(self):
        """className(DisplayRequirementsVisitor self) -> char const *"""
        return _osgUtil.DisplayRequirementsVisitor_className(self)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(DisplayRequirementsVisitor self, DisplaySettings ds)"""
        return _osgUtil.DisplayRequirementsVisitor_setDisplaySettings(self, *args)

    def getDisplaySettings(self):
        """getDisplaySettings(DisplayRequirementsVisitor self) -> DisplaySettings"""
        return _osgUtil.DisplayRequirementsVisitor_getDisplaySettings(self)

    def applyStateSet(self, *args):
        """applyStateSet(DisplayRequirementsVisitor self, StateSet stateset)"""
        return _osgUtil.DisplayRequirementsVisitor_applyStateSet(self, *args)

    def apply(self, *args):
        """
        apply(DisplayRequirementsVisitor self, Node node)
        apply(DisplayRequirementsVisitor self, Geode geode)
        """
        return _osgUtil.DisplayRequirementsVisitor_apply(self, *args)

    __swig_destroy__ = _osgUtil.delete_DisplayRequirementsVisitor
    __del__ = lambda self : None;
DisplayRequirementsVisitor_swigregister = _osgUtil.DisplayRequirementsVisitor_swigregister
DisplayRequirementsVisitor_swigregister(DisplayRequirementsVisitor)

OSGUTIL_GLOBJECTSVISITOR = _osgUtil.OSGUTIL_GLOBJECTSVISITOR
class GLObjectsVisitor(osg.NodeVisitor):
    """Proxy of C++ osgUtil::GLObjectsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLObjectsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLObjectsVisitor, name)
    __repr__ = _swig_repr
    SWITCH_ON_DISPLAY_LISTS = _osgUtil.GLObjectsVisitor_SWITCH_ON_DISPLAY_LISTS
    SWITCH_OFF_DISPLAY_LISTS = _osgUtil.GLObjectsVisitor_SWITCH_OFF_DISPLAY_LISTS
    COMPILE_DISPLAY_LISTS = _osgUtil.GLObjectsVisitor_COMPILE_DISPLAY_LISTS
    COMPILE_STATE_ATTRIBUTES = _osgUtil.GLObjectsVisitor_COMPILE_STATE_ATTRIBUTES
    RELEASE_DISPLAY_LISTS = _osgUtil.GLObjectsVisitor_RELEASE_DISPLAY_LISTS
    RELEASE_STATE_ATTRIBUTES = _osgUtil.GLObjectsVisitor_RELEASE_STATE_ATTRIBUTES
    SWITCH_ON_VERTEX_BUFFER_OBJECTS = _osgUtil.GLObjectsVisitor_SWITCH_ON_VERTEX_BUFFER_OBJECTS
    SWITCH_OFF_VERTEX_BUFFER_OBJECTS = _osgUtil.GLObjectsVisitor_SWITCH_OFF_VERTEX_BUFFER_OBJECTS
    CHECK_BLACK_LISTED_MODES = _osgUtil.GLObjectsVisitor_CHECK_BLACK_LISTED_MODES
    def __init__(self, *args): 
        """
        __init__(osgUtil::GLObjectsVisitor self, osgUtil::GLObjectsVisitor::Mode mode=osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES|osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES) -> GLObjectsVisitor
        __init__(osgUtil::GLObjectsVisitor self) -> GLObjectsVisitor
        """
        this = _osgUtil.new_GLObjectsVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(GLObjectsVisitor self) -> char const *"""
        return _osgUtil.GLObjectsVisitor_libraryName(self)

    def className(self):
        """className(GLObjectsVisitor self) -> char const *"""
        return _osgUtil.GLObjectsVisitor_className(self)

    def reset(self):
        """reset(GLObjectsVisitor self)"""
        return _osgUtil.GLObjectsVisitor_reset(self)

    def setMode(self, *args):
        """setMode(GLObjectsVisitor self, osgUtil::GLObjectsVisitor::Mode mode)"""
        return _osgUtil.GLObjectsVisitor_setMode(self, *args)

    def getMode(self):
        """getMode(GLObjectsVisitor self) -> osgUtil::GLObjectsVisitor::Mode"""
        return _osgUtil.GLObjectsVisitor_getMode(self)

    def setState(self, *args):
        """setState(GLObjectsVisitor self, State state)"""
        return _osgUtil.GLObjectsVisitor_setState(self, *args)

    def getState(self):
        """getState(GLObjectsVisitor self) -> State"""
        return _osgUtil.GLObjectsVisitor_getState(self)

    def setRenderInfo(self, *args):
        """setRenderInfo(GLObjectsVisitor self, RenderInfo renderInfo)"""
        return _osgUtil.GLObjectsVisitor_setRenderInfo(self, *args)

    def getRenderInfo(self):
        """getRenderInfo(GLObjectsVisitor self) -> RenderInfo"""
        return _osgUtil.GLObjectsVisitor_getRenderInfo(self)

    def apply(self, *args):
        """
        apply(GLObjectsVisitor self, Node node)
        apply(GLObjectsVisitor self, Geode node)
        apply(GLObjectsVisitor self, Drawable drawable)
        apply(GLObjectsVisitor self, StateSet stateset)
        """
        return _osgUtil.GLObjectsVisitor_apply(self, *args)

    __swig_destroy__ = _osgUtil.delete_GLObjectsVisitor
    __del__ = lambda self : None;
GLObjectsVisitor_swigregister = _osgUtil.GLObjectsVisitor_swigregister
GLObjectsVisitor_swigregister(GLObjectsVisitor)

class GLObjectsOperation(osg.GraphicsOperation):
    """Proxy of C++ osgUtil::GLObjectsOperation class"""
    __swig_setmethods__ = {}
    for _s in [osg.GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLObjectsOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLObjectsOperation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::GLObjectsOperation self, osgUtil::GLObjectsVisitor::Mode mode=osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES|osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES) -> GLObjectsOperation
        __init__(osgUtil::GLObjectsOperation self) -> GLObjectsOperation
        __init__(osgUtil::GLObjectsOperation self, Node subgraph, osgUtil::GLObjectsVisitor::Mode mode=osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES|osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES) -> GLObjectsOperation
        __init__(osgUtil::GLObjectsOperation self, Node subgraph) -> GLObjectsOperation
        """
        this = _osgUtil.new_GLObjectsOperation(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """__call__(GLObjectsOperation self, GraphicsContext context)"""
        return _osgUtil.GLObjectsOperation___call__(self, *args)

    __swig_destroy__ = _osgUtil.delete_GLObjectsOperation
    __del__ = lambda self : None;
GLObjectsOperation_swigregister = _osgUtil.GLObjectsOperation_swigregister
GLObjectsOperation_swigregister(GLObjectsOperation)

class HalfWayMapGenerator(CubeMapGenerator):
    """Proxy of C++ osgUtil::HalfWayMapGenerator class"""
    __swig_setmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HalfWayMapGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HalfWayMapGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::HalfWayMapGenerator self, Vec3f light_direction, int texture_size=64) -> HalfWayMapGenerator
        __init__(osgUtil::HalfWayMapGenerator self, Vec3f light_direction) -> HalfWayMapGenerator
        __init__(osgUtil::HalfWayMapGenerator self, HalfWayMapGenerator copy, CopyOp copyop) -> HalfWayMapGenerator
        """
        this = _osgUtil.new_HalfWayMapGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
HalfWayMapGenerator_swigregister = _osgUtil.HalfWayMapGenerator_swigregister
HalfWayMapGenerator_swigregister(HalfWayMapGenerator)

class HighlightMapGenerator(CubeMapGenerator):
    """Proxy of C++ osgUtil::HighlightMapGenerator class"""
    __swig_setmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighlightMapGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HighlightMapGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::HighlightMapGenerator self, Vec3f light_direction, Vec4f light_color, float specular_exponent, int texture_size=64) -> HighlightMapGenerator
        __init__(osgUtil::HighlightMapGenerator self, Vec3f light_direction, Vec4f light_color, float specular_exponent) -> HighlightMapGenerator
        __init__(osgUtil::HighlightMapGenerator self, HighlightMapGenerator copy, CopyOp copyop=SHALLOW_COPY) -> HighlightMapGenerator
        __init__(osgUtil::HighlightMapGenerator self, HighlightMapGenerator copy) -> HighlightMapGenerator
        """
        this = _osgUtil.new_HighlightMapGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
HighlightMapGenerator_swigregister = _osgUtil.HighlightMapGenerator_swigregister
HighlightMapGenerator_swigregister(HighlightMapGenerator)

class ReadCallback(osg.Referenced):
    """Proxy of C++ ReadCallback class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def readNodeFile(self, *args):
        """readNodeFile(ReadCallback self, std::string const & filename) -> Node"""
        return _osgUtil.ReadCallback_readNodeFile(self, *args)

    __swig_destroy__ = _osgUtil.delete_ReadCallback
    __del__ = lambda self : None;
ReadCallback_swigregister = _osgUtil.ReadCallback_swigregister
ReadCallback_swigregister(ReadCallback)

OSGUTIL_INTERSECTIONVISITOR = _osgUtil.OSGUTIL_INTERSECTIONVISITOR
class Intersector(osg.Referenced):
    """Proxy of C++ osgUtil::Intersector class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Intersector, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Intersector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    WINDOW = _osgUtil.Intersector_WINDOW
    PROJECTION = _osgUtil.Intersector_PROJECTION
    VIEW = _osgUtil.Intersector_VIEW
    MODEL = _osgUtil.Intersector_MODEL
    NO_LIMIT = _osgUtil.Intersector_NO_LIMIT
    LIMIT_ONE_PER_DRAWABLE = _osgUtil.Intersector_LIMIT_ONE_PER_DRAWABLE
    LIMIT_ONE = _osgUtil.Intersector_LIMIT_ONE
    LIMIT_NEAREST = _osgUtil.Intersector_LIMIT_NEAREST
    def setCoordinateFrame(self, *args):
        """setCoordinateFrame(Intersector self, osgUtil::Intersector::CoordinateFrame cf)"""
        return _osgUtil.Intersector_setCoordinateFrame(self, *args)

    def getCoordinateFrame(self):
        """getCoordinateFrame(Intersector self) -> osgUtil::Intersector::CoordinateFrame"""
        return _osgUtil.Intersector_getCoordinateFrame(self)

    def setIntersectionLimit(self, *args):
        """setIntersectionLimit(Intersector self, osgUtil::Intersector::IntersectionLimit limit)"""
        return _osgUtil.Intersector_setIntersectionLimit(self, *args)

    def getIntersectionLimit(self):
        """getIntersectionLimit(Intersector self) -> osgUtil::Intersector::IntersectionLimit"""
        return _osgUtil.Intersector_getIntersectionLimit(self)

    def clone(self, *args):
        """clone(Intersector self, IntersectionVisitor iv) -> Intersector"""
        return _osgUtil.Intersector_clone(self, *args)

    def enter(self, *args):
        """enter(Intersector self, Node node) -> bool"""
        return _osgUtil.Intersector_enter(self, *args)

    def leave(self):
        """leave(Intersector self)"""
        return _osgUtil.Intersector_leave(self)

    def intersect(self, *args):
        """intersect(Intersector self, IntersectionVisitor iv, Drawable drawable)"""
        return _osgUtil.Intersector_intersect(self, *args)

    def reset(self):
        """reset(Intersector self)"""
        return _osgUtil.Intersector_reset(self)

    def containsIntersections(self):
        """containsIntersections(Intersector self) -> bool"""
        return _osgUtil.Intersector_containsIntersections(self)

    def disabled(self):
        """disabled(Intersector self) -> bool"""
        return _osgUtil.Intersector_disabled(self)

    def incrementDisabledCount(self):
        """incrementDisabledCount(Intersector self)"""
        return _osgUtil.Intersector_incrementDisabledCount(self)

    def decrementDisabledCount(self):
        """decrementDisabledCount(Intersector self)"""
        return _osgUtil.Intersector_decrementDisabledCount(self)

    def reachedLimit(self):
        """reachedLimit(Intersector self) -> bool"""
        return _osgUtil.Intersector_reachedLimit(self)

    __swig_destroy__ = _osgUtil.delete_Intersector
    __del__ = lambda self : None;
Intersector_swigregister = _osgUtil.Intersector_swigregister
Intersector_swigregister(Intersector)

class IntersectorGroup(Intersector):
    """Proxy of C++ osgUtil::IntersectorGroup class"""
    __swig_setmethods__ = {}
    for _s in [Intersector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectorGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [Intersector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectorGroup, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::IntersectorGroup self) -> IntersectorGroup"""
        this = _osgUtil.new_IntersectorGroup()
        try: self.this.append(this)
        except: self.this = this
    def addIntersector(self, *args):
        """addIntersector(IntersectorGroup self, Intersector intersector)"""
        return _osgUtil.IntersectorGroup_addIntersector(self, *args)

    def getIntersectors(self):
        """getIntersectors(IntersectorGroup self) -> osgUtil::IntersectorGroup::Intersectors &"""
        return _osgUtil.IntersectorGroup_getIntersectors(self)

    def clear(self):
        """clear(IntersectorGroup self)"""
        return _osgUtil.IntersectorGroup_clear(self)

    def clone(self, *args):
        """clone(IntersectorGroup self, IntersectionVisitor iv) -> Intersector"""
        return _osgUtil.IntersectorGroup_clone(self, *args)

    def enter(self, *args):
        """enter(IntersectorGroup self, Node node) -> bool"""
        return _osgUtil.IntersectorGroup_enter(self, *args)

    def leave(self):
        """leave(IntersectorGroup self)"""
        return _osgUtil.IntersectorGroup_leave(self)

    def intersect(self, *args):
        """intersect(IntersectorGroup self, IntersectionVisitor iv, Drawable drawable)"""
        return _osgUtil.IntersectorGroup_intersect(self, *args)

    def reset(self):
        """reset(IntersectorGroup self)"""
        return _osgUtil.IntersectorGroup_reset(self)

    def containsIntersections(self):
        """containsIntersections(IntersectorGroup self) -> bool"""
        return _osgUtil.IntersectorGroup_containsIntersections(self)

    __swig_destroy__ = _osgUtil.delete_IntersectorGroup
    __del__ = lambda self : None;
IntersectorGroup_swigregister = _osgUtil.IntersectorGroup_swigregister
IntersectorGroup_swigregister(IntersectorGroup)

class IntersectionVisitor(osg.NodeVisitor):
    """Proxy of C++ osgUtil::IntersectionVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectionVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectionVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, intersector=None, readCallback=None): 
        """
        __init__(osgUtil::IntersectionVisitor self, Intersector intersector=None, osgUtil::IntersectionVisitor::ReadCallback * readCallback=None) -> IntersectionVisitor
        __init__(osgUtil::IntersectionVisitor self, Intersector intersector=None) -> IntersectionVisitor
        __init__(osgUtil::IntersectionVisitor self) -> IntersectionVisitor
        """
        if self.__class__ == IntersectionVisitor:
            _self = None
        else:
            _self = self
        this = _osgUtil.new_IntersectionVisitor(_self, intersector, readCallback)
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(IntersectionVisitor self) -> char const *"""
        return _osgUtil.IntersectionVisitor_libraryName(self)

    def className(self):
        """className(IntersectionVisitor self) -> char const *"""
        return _osgUtil.IntersectionVisitor_className(self)

    def reset(self):
        """reset(IntersectionVisitor self)"""
        return _osgUtil.IntersectionVisitor_reset(self)

    def setIntersector(self, *args):
        """setIntersector(IntersectionVisitor self, Intersector intersector)"""
        return _osgUtil.IntersectionVisitor_setIntersector(self, *args)

    def getIntersector(self, *args):
        """
        getIntersector(IntersectionVisitor self) -> Intersector
        getIntersector(IntersectionVisitor self) -> Intersector
        """
        return _osgUtil.IntersectionVisitor_getIntersector(self, *args)

    def setUseKdTreeWhenAvailable(self, *args):
        """setUseKdTreeWhenAvailable(IntersectionVisitor self, bool useKdTrees)"""
        return _osgUtil.IntersectionVisitor_setUseKdTreeWhenAvailable(self, *args)

    def getUseKdTreeWhenAvailable(self):
        """getUseKdTreeWhenAvailable(IntersectionVisitor self) -> bool"""
        return _osgUtil.IntersectionVisitor_getUseKdTreeWhenAvailable(self)

    def setDoDummyTraversal(self, *args):
        """setDoDummyTraversal(IntersectionVisitor self, bool dummy)"""
        return _osgUtil.IntersectionVisitor_setDoDummyTraversal(self, *args)

    def getDoDummyTraversal(self):
        """getDoDummyTraversal(IntersectionVisitor self) -> bool"""
        return _osgUtil.IntersectionVisitor_getDoDummyTraversal(self)

    def setReadCallback(self, *args):
        """setReadCallback(IntersectionVisitor self, osgUtil::IntersectionVisitor::ReadCallback * rc)"""
        return _osgUtil.IntersectionVisitor_setReadCallback(self, *args)

    def getReadCallback(self, *args):
        """
        getReadCallback(IntersectionVisitor self) -> osgUtil::IntersectionVisitor::ReadCallback
        getReadCallback(IntersectionVisitor self) -> osgUtil::IntersectionVisitor::ReadCallback const *
        """
        return _osgUtil.IntersectionVisitor_getReadCallback(self, *args)

    def pushWindowMatrix(self, *args):
        """
        pushWindowMatrix(IntersectionVisitor self, RefMatrixd matrix)
        pushWindowMatrix(IntersectionVisitor self, Viewport viewport)
        """
        return _osgUtil.IntersectionVisitor_pushWindowMatrix(self, *args)

    def popWindowMatrix(self):
        """popWindowMatrix(IntersectionVisitor self)"""
        return _osgUtil.IntersectionVisitor_popWindowMatrix(self)

    def getWindowMatrix(self, *args):
        """
        getWindowMatrix(IntersectionVisitor self) -> RefMatrixd
        getWindowMatrix(IntersectionVisitor self) -> RefMatrixd
        """
        return _osgUtil.IntersectionVisitor_getWindowMatrix(self, *args)

    def pushProjectionMatrix(self, *args):
        """pushProjectionMatrix(IntersectionVisitor self, RefMatrixd matrix)"""
        return _osgUtil.IntersectionVisitor_pushProjectionMatrix(self, *args)

    def popProjectionMatrix(self):
        """popProjectionMatrix(IntersectionVisitor self)"""
        return _osgUtil.IntersectionVisitor_popProjectionMatrix(self)

    def getProjectionMatrix(self, *args):
        """
        getProjectionMatrix(IntersectionVisitor self) -> RefMatrixd
        getProjectionMatrix(IntersectionVisitor self) -> RefMatrixd
        """
        return _osgUtil.IntersectionVisitor_getProjectionMatrix(self, *args)

    def pushViewMatrix(self, *args):
        """pushViewMatrix(IntersectionVisitor self, RefMatrixd matrix)"""
        return _osgUtil.IntersectionVisitor_pushViewMatrix(self, *args)

    def popViewMatrix(self):
        """popViewMatrix(IntersectionVisitor self)"""
        return _osgUtil.IntersectionVisitor_popViewMatrix(self)

    def getViewMatrix(self, *args):
        """
        getViewMatrix(IntersectionVisitor self) -> RefMatrixd
        getViewMatrix(IntersectionVisitor self) -> RefMatrixd
        """
        return _osgUtil.IntersectionVisitor_getViewMatrix(self, *args)

    def pushModelMatrix(self, *args):
        """pushModelMatrix(IntersectionVisitor self, RefMatrixd matrix)"""
        return _osgUtil.IntersectionVisitor_pushModelMatrix(self, *args)

    def popModelMatrix(self):
        """popModelMatrix(IntersectionVisitor self)"""
        return _osgUtil.IntersectionVisitor_popModelMatrix(self)

    def getModelMatrix(self, *args):
        """
        getModelMatrix(IntersectionVisitor self) -> RefMatrixd
        getModelMatrix(IntersectionVisitor self) -> RefMatrixd
        """
        return _osgUtil.IntersectionVisitor_getModelMatrix(self, *args)

    def setReferenceEyePoint(self, *args):
        """setReferenceEyePoint(IntersectionVisitor self, Vec3f ep)"""
        return _osgUtil.IntersectionVisitor_setReferenceEyePoint(self, *args)

    def getReferenceEyePoint(self):
        """getReferenceEyePoint(IntersectionVisitor self) -> Vec3f"""
        return _osgUtil.IntersectionVisitor_getReferenceEyePoint(self)

    def setReferenceEyePointCoordinateFrame(self, *args):
        """setReferenceEyePointCoordinateFrame(IntersectionVisitor self, osgUtil::Intersector::CoordinateFrame cf)"""
        return _osgUtil.IntersectionVisitor_setReferenceEyePointCoordinateFrame(self, *args)

    def getReferenceEyePointCoordinateFrame(self):
        """getReferenceEyePointCoordinateFrame(IntersectionVisitor self) -> osgUtil::Intersector::CoordinateFrame"""
        return _osgUtil.IntersectionVisitor_getReferenceEyePointCoordinateFrame(self)

    def getEyePoint(self):
        """getEyePoint(IntersectionVisitor self) -> Vec3f"""
        return _osgUtil.IntersectionVisitor_getEyePoint(self)

    USE_HIGHEST_LEVEL_OF_DETAIL = _osgUtil.IntersectionVisitor_USE_HIGHEST_LEVEL_OF_DETAIL
    USE_EYE_POINT_FOR_LOD_LEVEL_SELECTION = _osgUtil.IntersectionVisitor_USE_EYE_POINT_FOR_LOD_LEVEL_SELECTION
    def setLODSelectionMode(self, *args):
        """setLODSelectionMode(IntersectionVisitor self, osgUtil::IntersectionVisitor::LODSelectionMode mode)"""
        return _osgUtil.IntersectionVisitor_setLODSelectionMode(self, *args)

    def getLODSelectionMode(self):
        """getLODSelectionMode(IntersectionVisitor self) -> osgUtil::IntersectionVisitor::LODSelectionMode"""
        return _osgUtil.IntersectionVisitor_getLODSelectionMode(self)

    def getDistanceToEyePoint(self, *args):
        """getDistanceToEyePoint(IntersectionVisitor self, Vec3f pos, bool withLODScale) -> float"""
        return _osgUtil.IntersectionVisitor_getDistanceToEyePoint(self, *args)

    def apply(self, *args):
        """
        apply(IntersectionVisitor self, Node node)
        apply(IntersectionVisitor self, Geode geode)
        apply(IntersectionVisitor self, Billboard geode)
        apply(IntersectionVisitor self, Group group)
        apply(IntersectionVisitor self, LOD lod)
        apply(IntersectionVisitor self, PagedLOD lod)
        apply(IntersectionVisitor self, Transform transform)
        apply(IntersectionVisitor self, Projection projection)
        apply(IntersectionVisitor self, Camera camera)
        """
        return _osgUtil.IntersectionVisitor_apply(self, *args)

    __swig_destroy__ = _osgUtil.delete_IntersectionVisitor
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _osgUtil.disown_IntersectionVisitor(self)
        return weakref_proxy(self)
IntersectionVisitor_swigregister = _osgUtil.IntersectionVisitor_swigregister
IntersectionVisitor_swigregister(IntersectionVisitor)

OSGUTIL_INTERSECTVISITOR = _osgUtil.OSGUTIL_INTERSECTVISITOR
class Hit(_object):
    """Proxy of C++ osgUtil::Hit class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::Hit self) -> Hit
        __init__(osgUtil::Hit self, Hit hit) -> Hit
        """
        this = _osgUtil.new_Hit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_Hit
    __del__ = lambda self : None;
    def __lt__(self, *args):
        """__lt__(Hit self, Hit hit) -> bool"""
        return _osgUtil.Hit___lt__(self, *args)

    def getLocalIntersectPoint(self):
        """getLocalIntersectPoint(Hit self) -> Vec3f"""
        return _osgUtil.Hit_getLocalIntersectPoint(self)

    def getLocalIntersectNormal(self):
        """getLocalIntersectNormal(Hit self) -> Vec3f"""
        return _osgUtil.Hit_getLocalIntersectNormal(self)

    def getWorldIntersectPoint(self):
        """getWorldIntersectPoint(Hit self) -> Vec3f"""
        return _osgUtil.Hit_getWorldIntersectPoint(self)

    def getWorldIntersectNormal(self):
        """getWorldIntersectNormal(Hit self) -> Vec3f"""
        return _osgUtil.Hit_getWorldIntersectNormal(self)

    def getRatio(self):
        """getRatio(Hit self) -> float"""
        return _osgUtil.Hit_getRatio(self)

    def getOriginalLineSegment(self):
        """getOriginalLineSegment(Hit self) -> osg::LineSegment const *"""
        return _osgUtil.Hit_getOriginalLineSegment(self)

    def getLocalLineSegment(self):
        """getLocalLineSegment(Hit self) -> osg::LineSegment const *"""
        return _osgUtil.Hit_getLocalLineSegment(self)

    def getNodePath(self, *args):
        """
        getNodePath(Hit self) -> vectorNode
        getNodePath(Hit self) -> vectorNode
        """
        return _osgUtil.Hit_getNodePath(self, *args)

    def getGeode(self, *args):
        """
        getGeode(Hit self) -> Geode
        getGeode(Hit self) -> Geode
        """
        return _osgUtil.Hit_getGeode(self, *args)

    def getDrawable(self, *args):
        """
        getDrawable(Hit self) -> Drawable
        getDrawable(Hit self) -> Drawable
        """
        return _osgUtil.Hit_getDrawable(self, *args)

    def getMatrix(self):
        """getMatrix(Hit self) -> RefMatrixd"""
        return _osgUtil.Hit_getMatrix(self)

    def getInverseMatrix(self):
        """getInverseMatrix(Hit self) -> RefMatrixd"""
        return _osgUtil.Hit_getInverseMatrix(self)

    def getVecIndexList(self):
        """getVecIndexList(Hit self) -> vectorGLint"""
        return _osgUtil.Hit_getVecIndexList(self)

    def getPrimitiveIndex(self):
        """getPrimitiveIndex(Hit self) -> int"""
        return _osgUtil.Hit_getPrimitiveIndex(self)

    __swig_setmethods__["_ratio"] = _osgUtil.Hit__ratio_set
    __swig_getmethods__["_ratio"] = _osgUtil.Hit__ratio_get
    if _newclass:_ratio = _swig_property(_osgUtil.Hit__ratio_get, _osgUtil.Hit__ratio_set)
    __swig_setmethods__["_originalLineSegment"] = _osgUtil.Hit__originalLineSegment_set
    __swig_getmethods__["_originalLineSegment"] = _osgUtil.Hit__originalLineSegment_get
    if _newclass:_originalLineSegment = _swig_property(_osgUtil.Hit__originalLineSegment_get, _osgUtil.Hit__originalLineSegment_set)
    __swig_setmethods__["_localLineSegment"] = _osgUtil.Hit__localLineSegment_set
    __swig_getmethods__["_localLineSegment"] = _osgUtil.Hit__localLineSegment_get
    if _newclass:_localLineSegment = _swig_property(_osgUtil.Hit__localLineSegment_get, _osgUtil.Hit__localLineSegment_set)
    __swig_setmethods__["_nodePath"] = _osgUtil.Hit__nodePath_set
    __swig_getmethods__["_nodePath"] = _osgUtil.Hit__nodePath_get
    if _newclass:_nodePath = _swig_property(_osgUtil.Hit__nodePath_get, _osgUtil.Hit__nodePath_set)
    __swig_setmethods__["_geode"] = _osgUtil.Hit__geode_set
    __swig_getmethods__["_geode"] = _osgUtil.Hit__geode_get
    if _newclass:_geode = _swig_property(_osgUtil.Hit__geode_get, _osgUtil.Hit__geode_set)
    __swig_setmethods__["_drawable"] = _osgUtil.Hit__drawable_set
    __swig_getmethods__["_drawable"] = _osgUtil.Hit__drawable_get
    if _newclass:_drawable = _swig_property(_osgUtil.Hit__drawable_get, _osgUtil.Hit__drawable_set)
    __swig_setmethods__["_matrix"] = _osgUtil.Hit__matrix_set
    __swig_getmethods__["_matrix"] = _osgUtil.Hit__matrix_get
    if _newclass:_matrix = _swig_property(_osgUtil.Hit__matrix_get, _osgUtil.Hit__matrix_set)
    __swig_setmethods__["_inverse"] = _osgUtil.Hit__inverse_set
    __swig_getmethods__["_inverse"] = _osgUtil.Hit__inverse_get
    if _newclass:_inverse = _swig_property(_osgUtil.Hit__inverse_get, _osgUtil.Hit__inverse_set)
    __swig_setmethods__["_vecIndexList"] = _osgUtil.Hit__vecIndexList_set
    __swig_getmethods__["_vecIndexList"] = _osgUtil.Hit__vecIndexList_get
    if _newclass:_vecIndexList = _swig_property(_osgUtil.Hit__vecIndexList_get, _osgUtil.Hit__vecIndexList_set)
    __swig_setmethods__["_primitiveIndex"] = _osgUtil.Hit__primitiveIndex_set
    __swig_getmethods__["_primitiveIndex"] = _osgUtil.Hit__primitiveIndex_get
    if _newclass:_primitiveIndex = _swig_property(_osgUtil.Hit__primitiveIndex_get, _osgUtil.Hit__primitiveIndex_set)
    __swig_setmethods__["_intersectPoint"] = _osgUtil.Hit__intersectPoint_set
    __swig_getmethods__["_intersectPoint"] = _osgUtil.Hit__intersectPoint_get
    if _newclass:_intersectPoint = _swig_property(_osgUtil.Hit__intersectPoint_get, _osgUtil.Hit__intersectPoint_set)
    __swig_setmethods__["_intersectNormal"] = _osgUtil.Hit__intersectNormal_set
    __swig_getmethods__["_intersectNormal"] = _osgUtil.Hit__intersectNormal_get
    if _newclass:_intersectNormal = _swig_property(_osgUtil.Hit__intersectNormal_get, _osgUtil.Hit__intersectNormal_set)
Hit_swigregister = _osgUtil.Hit_swigregister
Hit_swigregister(Hit)

class IntersectVisitor(osg.NodeVisitor):
    """Proxy of C++ osgUtil::IntersectVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::IntersectVisitor self) -> IntersectVisitor"""
        this = _osgUtil.new_IntersectVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_IntersectVisitor
    __del__ = lambda self : None;
    def libraryName(self):
        """libraryName(IntersectVisitor self) -> char const *"""
        return _osgUtil.IntersectVisitor_libraryName(self)

    def className(self):
        """className(IntersectVisitor self) -> char const *"""
        return _osgUtil.IntersectVisitor_className(self)

    def reset(self):
        """reset(IntersectVisitor self)"""
        return _osgUtil.IntersectVisitor_reset(self)

    def addLineSegment(self, *args):
        """addLineSegment(IntersectVisitor self, osg::LineSegment * seg)"""
        return _osgUtil.IntersectVisitor_addLineSegment(self, *args)

    def getHitList(self, *args):
        """getHitList(IntersectVisitor self, osg::LineSegment const * seg) -> osgUtil::IntersectVisitor::HitList &"""
        return _osgUtil.IntersectVisitor_getHitList(self, *args)

    def getNumHits(self, *args):
        """getNumHits(IntersectVisitor self, osg::LineSegment const * seg) -> int"""
        return _osgUtil.IntersectVisitor_getNumHits(self, *args)

    def getSegHitList(self):
        """getSegHitList(IntersectVisitor self) -> osgUtil::IntersectVisitor::LineSegmentHitListMap &"""
        return _osgUtil.IntersectVisitor_getSegHitList(self)

    def hits(self):
        """hits(IntersectVisitor self) -> bool"""
        return _osgUtil.IntersectVisitor_hits(self)

    USE_HIGHEST_LEVEL_OF_DETAIL = _osgUtil.IntersectVisitor_USE_HIGHEST_LEVEL_OF_DETAIL
    USE_SEGMENT_START_POINT_AS_EYE_POINT_FOR_LOD_LEVEL_SELECTION = _osgUtil.IntersectVisitor_USE_SEGMENT_START_POINT_AS_EYE_POINT_FOR_LOD_LEVEL_SELECTION
    def setLODSelectionMode(self, *args):
        """setLODSelectionMode(IntersectVisitor self, osgUtil::IntersectVisitor::LODSelectionMode mode)"""
        return _osgUtil.IntersectVisitor_setLODSelectionMode(self, *args)

    def getLODSelectionMode(self):
        """getLODSelectionMode(IntersectVisitor self) -> osgUtil::IntersectVisitor::LODSelectionMode"""
        return _osgUtil.IntersectVisitor_getLODSelectionMode(self)

    def setEyePoint(self, *args):
        """setEyePoint(IntersectVisitor self, Vec3f eye)"""
        return _osgUtil.IntersectVisitor_setEyePoint(self, *args)

    def getEyePoint(self):
        """getEyePoint(IntersectVisitor self) -> Vec3f"""
        return _osgUtil.IntersectVisitor_getEyePoint(self)

    def getDistanceToEyePoint(self, *args):
        """getDistanceToEyePoint(IntersectVisitor self, Vec3f pos, bool withLODScale) -> float"""
        return _osgUtil.IntersectVisitor_getDistanceToEyePoint(self, *args)

    def apply(self, *args):
        """
        apply(IntersectVisitor self, Node arg2)
        apply(IntersectVisitor self, Geode node)
        apply(IntersectVisitor self, Billboard node)
        apply(IntersectVisitor self, Group node)
        apply(IntersectVisitor self, Transform node)
        apply(IntersectVisitor self, Switch node)
        apply(IntersectVisitor self, LOD node)
        """
        return _osgUtil.IntersectVisitor_apply(self, *args)

IntersectVisitor_swigregister = _osgUtil.IntersectVisitor_swigregister
IntersectVisitor_swigregister(IntersectVisitor)

class PickVisitor(IntersectVisitor):
    """Proxy of C++ osgUtil::PickVisitor class"""
    __swig_setmethods__ = {}
    for _s in [IntersectVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PickVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntersectVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osgUtil::PickVisitor self, Viewport viewport, Matrixd proj, Matrixd view, float mx, float my) -> PickVisitor"""
        this = _osgUtil.new_PickVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def runNestedPickVisitor(self, *args):
        """runNestedPickVisitor(PickVisitor self, Node node, Viewport viewport, Matrixd proj, Matrixd view, float mx, float my)"""
        return _osgUtil.PickVisitor_runNestedPickVisitor(self, *args)

    def apply(self, *args):
        """
        apply(PickVisitor self, Projection projection)
        apply(PickVisitor self, Camera camera)
        """
        return _osgUtil.PickVisitor_apply(self, *args)

    __swig_destroy__ = _osgUtil.delete_PickVisitor
    __del__ = lambda self : None;
PickVisitor_swigregister = _osgUtil.PickVisitor_swigregister
PickVisitor_swigregister(PickVisitor)

class BaseOptimizerVisitor(osg.NodeVisitor):
    """Proxy of C++ osgUtil::BaseOptimizerVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseOptimizerVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseOptimizerVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osgUtil::BaseOptimizerVisitor self, Optimizer optimizer, unsigned int operation) -> BaseOptimizerVisitor"""
        this = _osgUtil.new_BaseOptimizerVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def isOperationPermissibleForObject(self, *args):
        """
        isOperationPermissibleForObject(BaseOptimizerVisitor self, StateSet object) -> bool
        isOperationPermissibleForObject(BaseOptimizerVisitor self, StateAttribute object) -> bool
        isOperationPermissibleForObject(BaseOptimizerVisitor self, Drawable object) -> bool
        isOperationPermissibleForObject(BaseOptimizerVisitor self, Node object) -> bool
        """
        return _osgUtil.BaseOptimizerVisitor_isOperationPermissibleForObject(self, *args)

    __swig_destroy__ = _osgUtil.delete_BaseOptimizerVisitor
    __del__ = lambda self : None;
BaseOptimizerVisitor_swigregister = _osgUtil.BaseOptimizerVisitor_swigregister
BaseOptimizerVisitor_swigregister(BaseOptimizerVisitor)

class Optimizer(_object):
    """Proxy of C++ osgUtil::Optimizer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optimizer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::Optimizer self) -> Optimizer"""
        this = _osgUtil.new_Optimizer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_Optimizer
    __del__ = lambda self : None;
    FLATTEN_STATIC_TRANSFORMS = _osgUtil.Optimizer_FLATTEN_STATIC_TRANSFORMS
    REMOVE_REDUNDANT_NODES = _osgUtil.Optimizer_REMOVE_REDUNDANT_NODES
    REMOVE_LOADED_PROXY_NODES = _osgUtil.Optimizer_REMOVE_LOADED_PROXY_NODES
    COMBINE_ADJACENT_LODS = _osgUtil.Optimizer_COMBINE_ADJACENT_LODS
    SHARE_DUPLICATE_STATE = _osgUtil.Optimizer_SHARE_DUPLICATE_STATE
    MERGE_GEOMETRY = _osgUtil.Optimizer_MERGE_GEOMETRY
    CHECK_GEOMETRY = _osgUtil.Optimizer_CHECK_GEOMETRY
    MAKE_FAST_GEOMETRY = _osgUtil.Optimizer_MAKE_FAST_GEOMETRY
    SPATIALIZE_GROUPS = _osgUtil.Optimizer_SPATIALIZE_GROUPS
    COPY_SHARED_NODES = _osgUtil.Optimizer_COPY_SHARED_NODES
    TRISTRIP_GEOMETRY = _osgUtil.Optimizer_TRISTRIP_GEOMETRY
    TESSELLATE_GEOMETRY = _osgUtil.Optimizer_TESSELLATE_GEOMETRY
    OPTIMIZE_TEXTURE_SETTINGS = _osgUtil.Optimizer_OPTIMIZE_TEXTURE_SETTINGS
    MERGE_GEODES = _osgUtil.Optimizer_MERGE_GEODES
    FLATTEN_BILLBOARDS = _osgUtil.Optimizer_FLATTEN_BILLBOARDS
    TEXTURE_ATLAS_BUILDER = _osgUtil.Optimizer_TEXTURE_ATLAS_BUILDER
    STATIC_OBJECT_DETECTION = _osgUtil.Optimizer_STATIC_OBJECT_DETECTION
    FLATTEN_STATIC_TRANSFORMS_DUPLICATING_SHARED_SUBGRAPHS = _osgUtil.Optimizer_FLATTEN_STATIC_TRANSFORMS_DUPLICATING_SHARED_SUBGRAPHS
    INDEX_MESH = _osgUtil.Optimizer_INDEX_MESH
    VERTEX_POSTTRANSFORM = _osgUtil.Optimizer_VERTEX_POSTTRANSFORM
    VERTEX_PRETRANSFORM = _osgUtil.Optimizer_VERTEX_PRETRANSFORM
    DEFAULT_OPTIMIZATIONS = _osgUtil.Optimizer_DEFAULT_OPTIMIZATIONS
    ALL_OPTIMIZATIONS = _osgUtil.Optimizer_ALL_OPTIMIZATIONS
    def reset(self):
        """reset(Optimizer self)"""
        return _osgUtil.Optimizer_reset(self)

    def optimize(self, *args):
        """
        optimize(Optimizer self, Node node)
        optimize(Optimizer self, Node node, unsigned int options)
        """
        return _osgUtil.Optimizer_optimize(self, *args)

    def setPermissibleOptimizationsForObject(self, *args):
        """setPermissibleOptimizationsForObject(Optimizer self, Object object, unsigned int options)"""
        return _osgUtil.Optimizer_setPermissibleOptimizationsForObject(self, *args)

    def getPermissibleOptimizationsForObject(self, *args):
        """getPermissibleOptimizationsForObject(Optimizer self, Object object) -> unsigned int"""
        return _osgUtil.Optimizer_getPermissibleOptimizationsForObject(self, *args)

    def isOperationPermissibleForObject(self, *args):
        """
        isOperationPermissibleForObject(Optimizer self, StateSet object, unsigned int option) -> bool
        isOperationPermissibleForObject(Optimizer self, StateAttribute object, unsigned int option) -> bool
        isOperationPermissibleForObject(Optimizer self, Drawable object, unsigned int option) -> bool
        isOperationPermissibleForObject(Optimizer self, Node object, unsigned int option) -> bool
        """
        return _osgUtil.Optimizer_isOperationPermissibleForObject(self, *args)

    def isOperationPermissibleForObjectImplementation(self, *args):
        """
        isOperationPermissibleForObjectImplementation(Optimizer self, StateSet stateset, unsigned int option) -> bool
        isOperationPermissibleForObjectImplementation(Optimizer self, StateAttribute attribute, unsigned int option) -> bool
        isOperationPermissibleForObjectImplementation(Optimizer self, Drawable drawable, unsigned int option) -> bool
        isOperationPermissibleForObjectImplementation(Optimizer self, Node node, unsigned int option) -> bool
        """
        return _osgUtil.Optimizer_isOperationPermissibleForObjectImplementation(self, *args)

Optimizer_swigregister = _osgUtil.Optimizer_swigregister
Optimizer_swigregister(Optimizer)

class ReflectionMapGenerator(CubeMapGenerator):
    """Proxy of C++ osgUtil::ReflectionMapGenerator class"""
    __swig_setmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReflectionMapGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReflectionMapGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::ReflectionMapGenerator self, int texture_size=64) -> ReflectionMapGenerator
        __init__(osgUtil::ReflectionMapGenerator self) -> ReflectionMapGenerator
        __init__(osgUtil::ReflectionMapGenerator self, ReflectionMapGenerator copy, CopyOp copyop=SHALLOW_COPY) -> ReflectionMapGenerator
        __init__(osgUtil::ReflectionMapGenerator self, ReflectionMapGenerator copy) -> ReflectionMapGenerator
        """
        this = _osgUtil.new_ReflectionMapGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
ReflectionMapGenerator_swigregister = _osgUtil.ReflectionMapGenerator_swigregister
ReflectionMapGenerator_swigregister(ReflectionMapGenerator)

OSGUTIL_SCENEVIEW = _osgUtil.OSGUTIL_SCENEVIEW
class SceneView(osg.Object,osg.CullSettings):
    """Proxy of C++ osgUtil::SceneView class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object,osg.CullSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneView, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object,osg.CullSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SceneView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::SceneView self, DisplaySettings ds=None) -> SceneView
        __init__(osgUtil::SceneView self) -> SceneView
        __init__(osgUtil::SceneView self, SceneView sceneview, CopyOp copyop=osg::CopyOp()) -> SceneView
        __init__(osgUtil::SceneView self, SceneView sceneview) -> SceneView
        """
        this = _osgUtil.new_SceneView(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(SceneView self) -> Object"""
        return _osgUtil.SceneView_cloneType(self)

    def clone(self, *args):
        """clone(SceneView self, CopyOp copyop) -> Object"""
        return _osgUtil.SceneView_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(SceneView self, Object obj) -> bool"""
        return _osgUtil.SceneView_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(SceneView self) -> char const *"""
        return _osgUtil.SceneView_libraryName(self)

    def className(self):
        """className(SceneView self) -> char const *"""
        return _osgUtil.SceneView_className(self)

    NO_SCENEVIEW_LIGHT = _osgUtil.SceneView_NO_SCENEVIEW_LIGHT
    HEADLIGHT = _osgUtil.SceneView_HEADLIGHT
    SKY_LIGHT = _osgUtil.SceneView_SKY_LIGHT
    COMPILE_GLOBJECTS_AT_INIT = _osgUtil.SceneView_COMPILE_GLOBJECTS_AT_INIT
    APPLY_GLOBAL_DEFAULTS = _osgUtil.SceneView_APPLY_GLOBAL_DEFAULTS
    CLEAR_GLOBAL_STATESET = _osgUtil.SceneView_CLEAR_GLOBAL_STATESET
    STANDARD_SETTINGS = _osgUtil.SceneView_STANDARD_SETTINGS
    def setDefaults(self, *args):
        """
        setDefaults(SceneView self)
        setDefaults(SceneView self, unsigned int options)
        """
        return _osgUtil.SceneView_setDefaults(self, *args)

    def setCamera(self, *args):
        """
        setCamera(SceneView self, Camera camera, bool assumeOwnershipOfCamera=True)
        setCamera(SceneView self, Camera camera)
        """
        return _osgUtil.SceneView_setCamera(self, *args)

    def getCamera(self, *args):
        """
        getCamera(SceneView self) -> Camera
        getCamera(SceneView self) -> Camera
        """
        return _osgUtil.SceneView_getCamera(self, *args)

    def setSceneData(self, *args):
        """setSceneData(SceneView self, Node node)"""
        return _osgUtil.SceneView_setSceneData(self, *args)

    def getSceneData(self, *args):
        """
        getSceneData(SceneView self, unsigned int childNo=0) -> Node
        getSceneData(SceneView self) -> Node
        getSceneData(SceneView self, unsigned int childNo=0) -> Node
        getSceneData(SceneView self) -> Node
        """
        return _osgUtil.SceneView_getSceneData(self, *args)

    def getNumSceneData(self):
        """getNumSceneData(SceneView self) -> unsigned int"""
        return _osgUtil.SceneView_getNumSceneData(self)

    def setViewport(self, *args):
        """
        setViewport(SceneView self, Viewport viewport)
        setViewport(SceneView self, int x, int y, int width, int height)
        """
        return _osgUtil.SceneView_setViewport(self, *args)

    def getViewport(self, *args):
        """
        getViewport(SceneView self) -> Viewport
        getViewport(SceneView self) -> Viewport
        """
        return _osgUtil.SceneView_getViewport(self, *args)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(SceneView self, DisplaySettings vs)"""
        return _osgUtil.SceneView_setDisplaySettings(self, *args)

    def getDisplaySettings(self, *args):
        """
        getDisplaySettings(SceneView self) -> DisplaySettings
        getDisplaySettings(SceneView self) -> DisplaySettings
        """
        return _osgUtil.SceneView_getDisplaySettings(self, *args)

    def setClearColor(self, *args):
        """setClearColor(SceneView self, Vec4f color)"""
        return _osgUtil.SceneView_setClearColor(self, *args)

    def getClearColor(self):
        """getClearColor(SceneView self) -> Vec4f"""
        return _osgUtil.SceneView_getClearColor(self)

    def setRedrawInterlacedStereoStencilMask(self, *args):
        """setRedrawInterlacedStereoStencilMask(SceneView self, bool flag)"""
        return _osgUtil.SceneView_setRedrawInterlacedStereoStencilMask(self, *args)

    def getRedrawInterlacedStereoStencilMask(self):
        """getRedrawInterlacedStereoStencilMask(SceneView self) -> bool"""
        return _osgUtil.SceneView_getRedrawInterlacedStereoStencilMask(self)

    def setGlobalStateSet(self, *args):
        """setGlobalStateSet(SceneView self, StateSet state)"""
        return _osgUtil.SceneView_setGlobalStateSet(self, *args)

    def getGlobalStateSet(self, *args):
        """
        getGlobalStateSet(SceneView self) -> StateSet
        getGlobalStateSet(SceneView self) -> StateSet
        """
        return _osgUtil.SceneView_getGlobalStateSet(self, *args)

    def setSecondaryStateSet(self, *args):
        """setSecondaryStateSet(SceneView self, StateSet state)"""
        return _osgUtil.SceneView_setSecondaryStateSet(self, *args)

    def getSecondaryStateSet(self, *args):
        """
        getSecondaryStateSet(SceneView self) -> StateSet
        getSecondaryStateSet(SceneView self) -> StateSet
        """
        return _osgUtil.SceneView_getSecondaryStateSet(self, *args)

    def setLocalStateSet(self, *args):
        """setLocalStateSet(SceneView self, StateSet state)"""
        return _osgUtil.SceneView_setLocalStateSet(self, *args)

    def getLocalStateSet(self, *args):
        """
        getLocalStateSet(SceneView self) -> StateSet
        getLocalStateSet(SceneView self) -> StateSet
        """
        return _osgUtil.SceneView_getLocalStateSet(self, *args)

    FRAME_NUMBER_UNIFORM = _osgUtil.SceneView_FRAME_NUMBER_UNIFORM
    FRAME_TIME_UNIFORM = _osgUtil.SceneView_FRAME_TIME_UNIFORM
    DELTA_FRAME_TIME_UNIFORM = _osgUtil.SceneView_DELTA_FRAME_TIME_UNIFORM
    SIMULATION_TIME_UNIFORM = _osgUtil.SceneView_SIMULATION_TIME_UNIFORM
    DELTA_SIMULATION_TIME_UNIFORM = _osgUtil.SceneView_DELTA_SIMULATION_TIME_UNIFORM
    VIEW_MATRIX_UNIFORM = _osgUtil.SceneView_VIEW_MATRIX_UNIFORM
    VIEW_MATRIX_INVERSE_UNIFORM = _osgUtil.SceneView_VIEW_MATRIX_INVERSE_UNIFORM
    DEFAULT_UNIFORMS = _osgUtil.SceneView_DEFAULT_UNIFORMS
    ALL_UNIFORMS = _osgUtil.SceneView_ALL_UNIFORMS
    def setActiveUniforms(self, *args):
        """setActiveUniforms(SceneView self, int activeUniforms)"""
        return _osgUtil.SceneView_setActiveUniforms(self, *args)

    def getActiveUniforms(self):
        """getActiveUniforms(SceneView self) -> int"""
        return _osgUtil.SceneView_getActiveUniforms(self)

    def updateUniforms(self):
        """updateUniforms(SceneView self)"""
        return _osgUtil.SceneView_updateUniforms(self)

    def setLightingMode(self, *args):
        """setLightingMode(SceneView self, osgUtil::SceneView::LightingMode mode)"""
        return _osgUtil.SceneView_setLightingMode(self, *args)

    def getLightingMode(self):
        """getLightingMode(SceneView self) -> osgUtil::SceneView::LightingMode"""
        return _osgUtil.SceneView_getLightingMode(self)

    def setLight(self, *args):
        """setLight(SceneView self, Light light)"""
        return _osgUtil.SceneView_setLight(self, *args)

    def getLight(self, *args):
        """
        getLight(SceneView self) -> Light
        getLight(SceneView self) -> Light
        """
        return _osgUtil.SceneView_getLight(self, *args)

    def setState(self, *args):
        """setState(SceneView self, State state)"""
        return _osgUtil.SceneView_setState(self, *args)

    def getState(self, *args):
        """
        getState(SceneView self) -> State
        getState(SceneView self) -> State
        """
        return _osgUtil.SceneView_getState(self, *args)

    def setView(self, *args):
        """setView(SceneView self, View view)"""
        return _osgUtil.SceneView_setView(self, *args)

    def getView(self, *args):
        """
        getView(SceneView self) -> View
        getView(SceneView self) -> View
        """
        return _osgUtil.SceneView_getView(self, *args)

    def setRenderInfo(self, *args):
        """setRenderInfo(SceneView self, RenderInfo renderInfo)"""
        return _osgUtil.SceneView_setRenderInfo(self, *args)

    def getRenderInfo(self, *args):
        """
        getRenderInfo(SceneView self) -> RenderInfo
        getRenderInfo(SceneView self) -> RenderInfo
        """
        return _osgUtil.SceneView_getRenderInfo(self, *args)

    def setProjectionMatrix(self, *args):
        """
        setProjectionMatrix(SceneView self, Matrixf matrix)
        setProjectionMatrix(SceneView self, Matrixd matrix)
        """
        return _osgUtil.SceneView_setProjectionMatrix(self, *args)

    def setProjectionMatrixAsOrtho(self, *args):
        """setProjectionMatrixAsOrtho(SceneView self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osgUtil.SceneView_setProjectionMatrixAsOrtho(self, *args)

    def setProjectionMatrixAsOrtho2D(self, *args):
        """setProjectionMatrixAsOrtho2D(SceneView self, double left, double right, double bottom, double top)"""
        return _osgUtil.SceneView_setProjectionMatrixAsOrtho2D(self, *args)

    def setProjectionMatrixAsFrustum(self, *args):
        """setProjectionMatrixAsFrustum(SceneView self, double left, double right, double bottom, double top, double zNear, double zFar)"""
        return _osgUtil.SceneView_setProjectionMatrixAsFrustum(self, *args)

    def setProjectionMatrixAsPerspective(self, *args):
        """setProjectionMatrixAsPerspective(SceneView self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osgUtil.SceneView_setProjectionMatrixAsPerspective(self, *args)

    def getProjectionMatrix(self, *args):
        """
        getProjectionMatrix(SceneView self) -> Matrixd
        getProjectionMatrix(SceneView self) -> Matrixd
        """
        return _osgUtil.SceneView_getProjectionMatrix(self, *args)

    def getProjectionMatrixAsOrtho(self, *args):
        """getProjectionMatrixAsOrtho(SceneView self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool"""
        return _osgUtil.SceneView_getProjectionMatrixAsOrtho(self, *args)

    def getProjectionMatrixAsFrustum(self, *args):
        """getProjectionMatrixAsFrustum(SceneView self, double & left, double & right, double & bottom, double & top, double & zNear, double & zFar) -> bool"""
        return _osgUtil.SceneView_getProjectionMatrixAsFrustum(self, *args)

    def getProjectionMatrixAsPerspective(self, *args):
        """getProjectionMatrixAsPerspective(SceneView self, double & fovy, double & aspectRatio, double & zNear, double & zFar) -> bool"""
        return _osgUtil.SceneView_getProjectionMatrixAsPerspective(self, *args)

    def setViewMatrix(self, *args):
        """
        setViewMatrix(SceneView self, Matrixf matrix)
        setViewMatrix(SceneView self, Matrixd matrix)
        """
        return _osgUtil.SceneView_setViewMatrix(self, *args)

    def setViewMatrixAsLookAt(self, *args):
        """setViewMatrixAsLookAt(SceneView self, Vec3f eye, Vec3f center, Vec3f up)"""
        return _osgUtil.SceneView_setViewMatrixAsLookAt(self, *args)

    def getViewMatrix(self, *args):
        """
        getViewMatrix(SceneView self) -> Matrixd
        getViewMatrix(SceneView self) -> Matrixd
        """
        return _osgUtil.SceneView_getViewMatrix(self, *args)

    def getViewMatrixAsLookAt(self, *args):
        """
        getViewMatrixAsLookAt(SceneView self, Vec3f eye, Vec3f center, Vec3f up, float lookDistance=1.0)
        getViewMatrixAsLookAt(SceneView self, Vec3f eye, Vec3f center, Vec3f up)
        """
        return _osgUtil.SceneView_getViewMatrixAsLookAt(self, *args)

    def setInitVisitor(self, *args):
        """setInitVisitor(SceneView self, NodeVisitor av)"""
        return _osgUtil.SceneView_setInitVisitor(self, *args)

    def getInitVisitor(self, *args):
        """
        getInitVisitor(SceneView self) -> NodeVisitor
        getInitVisitor(SceneView self) -> NodeVisitor
        """
        return _osgUtil.SceneView_getInitVisitor(self, *args)

    def setUpdateVisitor(self, *args):
        """setUpdateVisitor(SceneView self, NodeVisitor av)"""
        return _osgUtil.SceneView_setUpdateVisitor(self, *args)

    def getUpdateVisitor(self, *args):
        """
        getUpdateVisitor(SceneView self) -> NodeVisitor
        getUpdateVisitor(SceneView self) -> NodeVisitor
        """
        return _osgUtil.SceneView_getUpdateVisitor(self, *args)

    def setCullVisitor(self, *args):
        """setCullVisitor(SceneView self, CullVisitor cv)"""
        return _osgUtil.SceneView_setCullVisitor(self, *args)

    def getCullVisitor(self, *args):
        """
        getCullVisitor(SceneView self) -> CullVisitor
        getCullVisitor(SceneView self) -> CullVisitor
        """
        return _osgUtil.SceneView_getCullVisitor(self, *args)

    def setCullVisitorLeft(self, *args):
        """setCullVisitorLeft(SceneView self, CullVisitor cv)"""
        return _osgUtil.SceneView_setCullVisitorLeft(self, *args)

    def getCullVisitorLeft(self, *args):
        """
        getCullVisitorLeft(SceneView self) -> CullVisitor
        getCullVisitorLeft(SceneView self) -> CullVisitor
        """
        return _osgUtil.SceneView_getCullVisitorLeft(self, *args)

    def setCullVisitorRight(self, *args):
        """setCullVisitorRight(SceneView self, CullVisitor cv)"""
        return _osgUtil.SceneView_setCullVisitorRight(self, *args)

    def getCullVisitorRight(self, *args):
        """
        getCullVisitorRight(SceneView self) -> CullVisitor
        getCullVisitorRight(SceneView self) -> CullVisitor
        """
        return _osgUtil.SceneView_getCullVisitorRight(self, *args)

    def setCollectOccludersVisitor(self, *args):
        """setCollectOccludersVisitor(SceneView self, osg::CollectOccludersVisitor * cov)"""
        return _osgUtil.SceneView_setCollectOccludersVisitor(self, *args)

    def getCollectOccludersVisitor(self, *args):
        """
        getCollectOccludersVisitor(SceneView self) -> osg::CollectOccludersVisitor
        getCollectOccludersVisitor(SceneView self) -> osg::CollectOccludersVisitor const *
        """
        return _osgUtil.SceneView_getCollectOccludersVisitor(self, *args)

    def setStateGraph(self, *args):
        """setStateGraph(SceneView self, StateGraph rg)"""
        return _osgUtil.SceneView_setStateGraph(self, *args)

    def getStateGraph(self, *args):
        """
        getStateGraph(SceneView self) -> StateGraph
        getStateGraph(SceneView self) -> StateGraph
        """
        return _osgUtil.SceneView_getStateGraph(self, *args)

    def setStateGraphLeft(self, *args):
        """setStateGraphLeft(SceneView self, StateGraph rg)"""
        return _osgUtil.SceneView_setStateGraphLeft(self, *args)

    def getStateGraphLeft(self, *args):
        """
        getStateGraphLeft(SceneView self) -> StateGraph
        getStateGraphLeft(SceneView self) -> StateGraph
        """
        return _osgUtil.SceneView_getStateGraphLeft(self, *args)

    def setStateGraphRight(self, *args):
        """setStateGraphRight(SceneView self, StateGraph rg)"""
        return _osgUtil.SceneView_setStateGraphRight(self, *args)

    def getStateGraphRight(self, *args):
        """
        getStateGraphRight(SceneView self) -> StateGraph
        getStateGraphRight(SceneView self) -> StateGraph
        """
        return _osgUtil.SceneView_getStateGraphRight(self, *args)

    def setRenderStage(self, *args):
        """setRenderStage(SceneView self, RenderStage rs)"""
        return _osgUtil.SceneView_setRenderStage(self, *args)

    def getRenderStage(self, *args):
        """
        getRenderStage(SceneView self) -> RenderStage
        getRenderStage(SceneView self) -> RenderStage
        """
        return _osgUtil.SceneView_getRenderStage(self, *args)

    def setRenderStageLeft(self, *args):
        """setRenderStageLeft(SceneView self, RenderStage rs)"""
        return _osgUtil.SceneView_setRenderStageLeft(self, *args)

    def getRenderStageLeft(self, *args):
        """
        getRenderStageLeft(SceneView self) -> RenderStage
        getRenderStageLeft(SceneView self) -> RenderStage
        """
        return _osgUtil.SceneView_getRenderStageLeft(self, *args)

    def setRenderStageRight(self, *args):
        """setRenderStageRight(SceneView self, RenderStage rs)"""
        return _osgUtil.SceneView_setRenderStageRight(self, *args)

    def getRenderStageRight(self, *args):
        """
        getRenderStageRight(SceneView self) -> RenderStage
        getRenderStageRight(SceneView self) -> RenderStage
        """
        return _osgUtil.SceneView_getRenderStageRight(self, *args)

    def collateReferencesToDependentCameras(self):
        """collateReferencesToDependentCameras(SceneView self)"""
        return _osgUtil.SceneView_collateReferencesToDependentCameras(self)

    def clearReferencesToDependentCameras(self):
        """clearReferencesToDependentCameras(SceneView self)"""
        return _osgUtil.SceneView_clearReferencesToDependentCameras(self)

    def setDrawBufferValue(self, *args):
        """setDrawBufferValue(SceneView self, GLenum drawBufferValue)"""
        return _osgUtil.SceneView_setDrawBufferValue(self, *args)

    def getDrawBufferValue(self):
        """getDrawBufferValue(SceneView self) -> GLenum"""
        return _osgUtil.SceneView_getDrawBufferValue(self)

    USE_FUSION_DISTANCE_VALUE = _osgUtil.SceneView_USE_FUSION_DISTANCE_VALUE
    PROPORTIONAL_TO_SCREEN_DISTANCE = _osgUtil.SceneView_PROPORTIONAL_TO_SCREEN_DISTANCE
    def setFusionDistance(self, *args):
        """
        setFusionDistance(SceneView self, osgUtil::SceneView::FusionDistanceMode mode, float value=1.0)
        setFusionDistance(SceneView self, osgUtil::SceneView::FusionDistanceMode mode)
        """
        return _osgUtil.SceneView_setFusionDistance(self, *args)

    def getFusionDistanceMode(self):
        """getFusionDistanceMode(SceneView self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgUtil.SceneView_getFusionDistanceMode(self)

    def getFusionDistanceValue(self):
        """getFusionDistanceValue(SceneView self) -> float"""
        return _osgUtil.SceneView_getFusionDistanceValue(self)

    def setPrioritizeTextures(self, *args):
        """setPrioritizeTextures(SceneView self, bool pt)"""
        return _osgUtil.SceneView_setPrioritizeTextures(self, *args)

    def getPrioritizeTextures(self):
        """getPrioritizeTextures(SceneView self) -> bool"""
        return _osgUtil.SceneView_getPrioritizeTextures(self)

    def projectWindowIntoObject(self, *args):
        """projectWindowIntoObject(SceneView self, Vec3f window, Vec3f object) -> bool"""
        return _osgUtil.SceneView_projectWindowIntoObject(self, *args)

    def projectWindowXYIntoObject(self, *args):
        """projectWindowXYIntoObject(SceneView self, int x, int y, Vec3f near_point, Vec3f far_point) -> bool"""
        return _osgUtil.SceneView_projectWindowXYIntoObject(self, *args)

    def projectObjectIntoWindow(self, *args):
        """projectObjectIntoWindow(SceneView self, Vec3f object, Vec3f window) -> bool"""
        return _osgUtil.SceneView_projectObjectIntoWindow(self, *args)

    def setFrameStamp(self, *args):
        """setFrameStamp(SceneView self, FrameStamp fs)"""
        return _osgUtil.SceneView_setFrameStamp(self, *args)

    def getFrameStamp(self):
        """getFrameStamp(SceneView self) -> FrameStamp"""
        return _osgUtil.SceneView_getFrameStamp(self)

    def computeLeftEyeProjection(self, *args):
        """computeLeftEyeProjection(SceneView self, Matrixd projection) -> Matrixd"""
        return _osgUtil.SceneView_computeLeftEyeProjection(self, *args)

    def computeLeftEyeView(self, *args):
        """computeLeftEyeView(SceneView self, Matrixd view) -> Matrixd"""
        return _osgUtil.SceneView_computeLeftEyeView(self, *args)

    def computeRightEyeProjection(self, *args):
        """computeRightEyeProjection(SceneView self, Matrixd projection) -> Matrixd"""
        return _osgUtil.SceneView_computeRightEyeProjection(self, *args)

    def computeRightEyeView(self, *args):
        """computeRightEyeView(SceneView self, Matrixd view) -> Matrixd"""
        return _osgUtil.SceneView_computeRightEyeView(self, *args)

    def computeLeftEyeProjectionImplementation(self, *args):
        """computeLeftEyeProjectionImplementation(SceneView self, Matrixd projection) -> Matrixd"""
        return _osgUtil.SceneView_computeLeftEyeProjectionImplementation(self, *args)

    def computeLeftEyeViewImplementation(self, *args):
        """computeLeftEyeViewImplementation(SceneView self, Matrixd view) -> Matrixd"""
        return _osgUtil.SceneView_computeLeftEyeViewImplementation(self, *args)

    def computeRightEyeProjectionImplementation(self, *args):
        """computeRightEyeProjectionImplementation(SceneView self, Matrixd projection) -> Matrixd"""
        return _osgUtil.SceneView_computeRightEyeProjectionImplementation(self, *args)

    def computeRightEyeViewImplementation(self, *args):
        """computeRightEyeViewImplementation(SceneView self, Matrixd view) -> Matrixd"""
        return _osgUtil.SceneView_computeRightEyeViewImplementation(self, *args)

    def inheritCullSettings(self, *args):
        """
        inheritCullSettings(SceneView self, CullSettings settings)
        inheritCullSettings(SceneView self, CullSettings settings, unsigned int inheritanceMask)
        """
        return _osgUtil.SceneView_inheritCullSettings(self, *args)

    def init(self):
        """init(SceneView self)"""
        return _osgUtil.SceneView_init(self)

    def update(self):
        """update(SceneView self)"""
        return _osgUtil.SceneView_update(self)

    def cull(self):
        """cull(SceneView self)"""
        return _osgUtil.SceneView_cull(self)

    def draw(self):
        """draw(SceneView self)"""
        return _osgUtil.SceneView_draw(self)

    def getDynamicObjectCount(self):
        """getDynamicObjectCount(SceneView self) -> unsigned int"""
        return _osgUtil.SceneView_getDynamicObjectCount(self)

    def releaseAllGLObjects(self):
        """releaseAllGLObjects(SceneView self)"""
        return _osgUtil.SceneView_releaseAllGLObjects(self)

    def flushAllDeletedGLObjects(self):
        """flushAllDeletedGLObjects(SceneView self)"""
        return _osgUtil.SceneView_flushAllDeletedGLObjects(self)

    def flushDeletedGLObjects(self, *args):
        """flushDeletedGLObjects(SceneView self, double & availableTime)"""
        return _osgUtil.SceneView_flushDeletedGLObjects(self, *args)

    def getStats(self, *args):
        """getStats(SceneView self, Statistics primStats) -> bool"""
        return _osgUtil.SceneView_getStats(self, *args)

    def setAutomaticFlush(self, *args):
        """setAutomaticFlush(SceneView self, bool automaticFlush)"""
        return _osgUtil.SceneView_setAutomaticFlush(self, *args)

    def getAutomaticFlush(self):
        """getAutomaticFlush(SceneView self) -> bool"""
        return _osgUtil.SceneView_getAutomaticFlush(self)

    def setResetColorMaskToAllOn(self, *args):
        """setResetColorMaskToAllOn(SceneView self, bool enable)"""
        return _osgUtil.SceneView_setResetColorMaskToAllOn(self, *args)

    def getResetColorMaskToAllOn(self):
        """getResetColorMaskToAllOn(SceneView self) -> bool"""
        return _osgUtil.SceneView_getResetColorMaskToAllOn(self)

SceneView_swigregister = _osgUtil.SceneView_swigregister
SceneView_swigregister(SceneView)

OSGUTIL_SIMPLIFIER = _osgUtil.OSGUTIL_SIMPLIFIER
class Simplifier(osg.NodeVisitor):
    """Proxy of C++ osgUtil::Simplifier class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simplifier, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Simplifier, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::Simplifier self, double sampleRatio=1.0, double maximumError=FLT_MAX, double maximumLength=0.0) -> Simplifier
        __init__(osgUtil::Simplifier self, double sampleRatio=1.0, double maximumError=FLT_MAX) -> Simplifier
        __init__(osgUtil::Simplifier self, double sampleRatio=1.0) -> Simplifier
        __init__(osgUtil::Simplifier self) -> Simplifier
        """
        this = _osgUtil.new_Simplifier(*args)
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(Simplifier self) -> char const *"""
        return _osgUtil.Simplifier_libraryName(self)

    def className(self):
        """className(Simplifier self) -> char const *"""
        return _osgUtil.Simplifier_className(self)

    def setSampleRatio(self, *args):
        """setSampleRatio(Simplifier self, float sampleRatio)"""
        return _osgUtil.Simplifier_setSampleRatio(self, *args)

    def getSampleRatio(self):
        """getSampleRatio(Simplifier self) -> float"""
        return _osgUtil.Simplifier_getSampleRatio(self)

    def setMaximumError(self, *args):
        """setMaximumError(Simplifier self, float error)"""
        return _osgUtil.Simplifier_setMaximumError(self, *args)

    def getMaximumError(self):
        """getMaximumError(Simplifier self) -> float"""
        return _osgUtil.Simplifier_getMaximumError(self)

    def setMaximumLength(self, *args):
        """setMaximumLength(Simplifier self, float length)"""
        return _osgUtil.Simplifier_setMaximumLength(self, *args)

    def getMaximumLength(self):
        """getMaximumLength(Simplifier self) -> float"""
        return _osgUtil.Simplifier_getMaximumLength(self)

    def setDoTriStrip(self, *args):
        """setDoTriStrip(Simplifier self, bool on)"""
        return _osgUtil.Simplifier_setDoTriStrip(self, *args)

    def getDoTriStrip(self):
        """getDoTriStrip(Simplifier self) -> bool"""
        return _osgUtil.Simplifier_getDoTriStrip(self)

    def setSmoothing(self, *args):
        """setSmoothing(Simplifier self, bool on)"""
        return _osgUtil.Simplifier_setSmoothing(self, *args)

    def getSmoothing(self):
        """getSmoothing(Simplifier self) -> bool"""
        return _osgUtil.Simplifier_getSmoothing(self)

    def continueSimplification(self, *args):
        """continueSimplification(Simplifier self, float nextError, unsigned int numOriginalPrimitives, unsigned int numRemainingPrimitives) -> bool"""
        return _osgUtil.Simplifier_continueSimplification(self, *args)

    def continueSimplificationImplementation(self, *args):
        """continueSimplificationImplementation(Simplifier self, float nextError, unsigned int numOriginalPrimitives, unsigned int numRemainingPrimitives) -> bool"""
        return _osgUtil.Simplifier_continueSimplificationImplementation(self, *args)

    def apply(self, *args):
        """apply(Simplifier self, Geode geode)"""
        return _osgUtil.Simplifier_apply(self, *args)

    def simplify(self, *args):
        """
        simplify(Simplifier self, Geometry geometry)
        simplify(Simplifier self, Geometry geometry, vectorGLuint protectedPoints)
        """
        return _osgUtil.Simplifier_simplify(self, *args)

    __swig_destroy__ = _osgUtil.delete_Simplifier
    __del__ = lambda self : None;
Simplifier_swigregister = _osgUtil.Simplifier_swigregister
Simplifier_swigregister(Simplifier)

OSGUTIL_SMOOTHINGVISITOR = _osgUtil.OSGUTIL_SMOOTHINGVISITOR
class SmoothingVisitor(osg.NodeVisitor):
    """Proxy of C++ osgUtil::SmoothingVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothingVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothingVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::SmoothingVisitor self) -> SmoothingVisitor"""
        this = _osgUtil.new_SmoothingVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_SmoothingVisitor
    __del__ = lambda self : None;
    def smooth(*args):
        """
        smooth(Geometry geoset, double creaseAngle=PI)
        smooth(Geometry geoset)
        """
        return _osgUtil.SmoothingVisitor_smooth(*args)

    if _newclass:smooth = staticmethod(smooth)
    __swig_getmethods__["smooth"] = lambda x: smooth
    def apply(self, *args):
        """apply(SmoothingVisitor self, Geode geode)"""
        return _osgUtil.SmoothingVisitor_apply(self, *args)

    def setCreaseAngle(self, *args):
        """setCreaseAngle(SmoothingVisitor self, double angle)"""
        return _osgUtil.SmoothingVisitor_setCreaseAngle(self, *args)

    def getCreaseAngle(self):
        """getCreaseAngle(SmoothingVisitor self) -> double"""
        return _osgUtil.SmoothingVisitor_getCreaseAngle(self)

SmoothingVisitor_swigregister = _osgUtil.SmoothingVisitor_swigregister
SmoothingVisitor_swigregister(SmoothingVisitor)

def SmoothingVisitor_smooth(*args):
  """
    smooth(Geometry geoset, double creaseAngle=PI)
    SmoothingVisitor_smooth(Geometry geoset)
    """
  return _osgUtil.SmoothingVisitor_smooth(*args)

OSGUTIL_STATISTICS = _osgUtil.OSGUTIL_STATISTICS
class Statistics(osg.PrimitiveFunctor):
    """Proxy of C++ osgUtil::Statistics class"""
    __swig_setmethods__ = {}
    for _s in [osg.PrimitiveFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Statistics, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.PrimitiveFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Statistics, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::Statistics self) -> Statistics"""
        this = _osgUtil.new_Statistics()
        try: self.this.append(this)
        except: self.this = this
    STAT_NONE = _osgUtil.Statistics_STAT_NONE
    STAT_FRAMERATE = _osgUtil.Statistics_STAT_FRAMERATE
    STAT_GRAPHS = _osgUtil.Statistics_STAT_GRAPHS
    STAT_PRIMS = _osgUtil.Statistics_STAT_PRIMS
    STAT_PRIMSPERVIEW = _osgUtil.Statistics_STAT_PRIMSPERVIEW
    STAT_PRIMSPERBIN = _osgUtil.Statistics_STAT_PRIMSPERBIN
    STAT_DC = _osgUtil.Statistics_STAT_DC
    STAT_RESTART = _osgUtil.Statistics_STAT_RESTART
    def reset(self):
        """reset(Statistics self)"""
        return _osgUtil.Statistics_reset(self)

    def setType(self, *args):
        """setType(Statistics self, osgUtil::Statistics::StatsType t)"""
        return _osgUtil.Statistics_setType(self, *args)

    def setVertexArray(self, *args):
        """
        setVertexArray(Statistics self, unsigned int count, Vec3f arg3)
        setVertexArray(Statistics self, unsigned int count, Vec2f arg3)
        setVertexArray(Statistics self, unsigned int count, Vec4f arg3)
        setVertexArray(Statistics self, unsigned int count, Vec3d arg3)
        setVertexArray(Statistics self, unsigned int count, Vec2d arg3)
        setVertexArray(Statistics self, unsigned int count, Vec4d arg3)
        """
        return _osgUtil.Statistics_setVertexArray(self, *args)

    def drawArrays(self, *args):
        """drawArrays(Statistics self, GLenum mode, GLint arg3, GLsizei count)"""
        return _osgUtil.Statistics_drawArrays(self, *args)

    def drawElements(self, *args):
        """
        drawElements(Statistics self, GLenum mode, GLsizei count, GLubyte const * arg4)
        drawElements(Statistics self, GLenum mode, GLsizei count, GLushort const * arg4)
        drawElements(Statistics self, GLenum mode, GLsizei count, GLuint const * arg4)
        """
        return _osgUtil.Statistics_drawElements(self, *args)

    def begin(self, *args):
        """begin(Statistics self, GLenum mode)"""
        return _osgUtil.Statistics_begin(self, *args)

    def vertex(self, *args):
        """
        vertex(Statistics self)
        vertex(Statistics self, float arg2, float arg3, float arg4)
        vertex(Statistics self, Vec3f arg2)
        vertex(Statistics self, Vec2f arg2)
        vertex(Statistics self, Vec4f arg2)
        vertex(Statistics self, float arg2, float arg3)
        vertex(Statistics self, float arg2, float arg3, float arg4, float arg5)
        """
        return _osgUtil.Statistics_vertex(self, *args)

    def end(self):
        """end(Statistics self)"""
        return _osgUtil.Statistics_end(self)

    def addDrawable(self):
        """addDrawable(Statistics self)"""
        return _osgUtil.Statistics_addDrawable(self)

    def addFastDrawable(self):
        """addFastDrawable(Statistics self)"""
        return _osgUtil.Statistics_addFastDrawable(self)

    def addMatrix(self):
        """addMatrix(Statistics self)"""
        return _osgUtil.Statistics_addMatrix(self)

    def addLight(self, *args):
        """addLight(Statistics self, int np)"""
        return _osgUtil.Statistics_addLight(self, *args)

    def addImpostor(self, *args):
        """addImpostor(Statistics self, int np)"""
        return _osgUtil.Statistics_addImpostor(self, *args)

    def getBins(self):
        """getBins(Statistics self) -> int"""
        return _osgUtil.Statistics_getBins(self)

    def setDepth(self, *args):
        """setDepth(Statistics self, int d)"""
        return _osgUtil.Statistics_setDepth(self, *args)

    def addBins(self, *args):
        """addBins(Statistics self, int np)"""
        return _osgUtil.Statistics_addBins(self, *args)

    def setBinNo(self, *args):
        """setBinNo(Statistics self, int n)"""
        return _osgUtil.Statistics_setBinNo(self, *args)

    def addStateGraphs(self, *args):
        """addStateGraphs(Statistics self, int n)"""
        return _osgUtil.Statistics_addStateGraphs(self, *args)

    def addOrderedLeaves(self, *args):
        """addOrderedLeaves(Statistics self, int n)"""
        return _osgUtil.Statistics_addOrderedLeaves(self, *args)

    def add(self, *args):
        """add(Statistics self, Statistics stats)"""
        return _osgUtil.Statistics_add(self, *args)

    def getPrimitiveCountMap(self, *args):
        """
        getPrimitiveCountMap(Statistics self) -> osgUtil::Statistics::PrimitiveCountMap
        getPrimitiveCountMap(Statistics self) -> osgUtil::Statistics::PrimitiveCountMap const &
        """
        return _osgUtil.Statistics_getPrimitiveCountMap(self, *args)

    def getPrimitiveValueMap(self, *args):
        """
        getPrimitiveValueMap(Statistics self) -> osgUtil::Statistics::PrimitiveValueMap
        getPrimitiveValueMap(Statistics self) -> osgUtil::Statistics::PrimitiveValueMap const &
        """
        return _osgUtil.Statistics_getPrimitiveValueMap(self, *args)

    def GetPrimitivesBegin(self):
        """GetPrimitivesBegin(Statistics self) -> osgUtil::Statistics::PrimitiveCountMap::iterator"""
        return _osgUtil.Statistics_GetPrimitivesBegin(self)

    def GetPrimitivesEnd(self):
        """GetPrimitivesEnd(Statistics self) -> osgUtil::Statistics::PrimitiveCountMap::iterator"""
        return _osgUtil.Statistics_GetPrimitivesEnd(self)

    __swig_setmethods__["numDrawables"] = _osgUtil.Statistics_numDrawables_set
    __swig_getmethods__["numDrawables"] = _osgUtil.Statistics_numDrawables_get
    if _newclass:numDrawables = _swig_property(_osgUtil.Statistics_numDrawables_get, _osgUtil.Statistics_numDrawables_set)
    __swig_setmethods__["nummat"] = _osgUtil.Statistics_nummat_set
    __swig_getmethods__["nummat"] = _osgUtil.Statistics_nummat_get
    if _newclass:nummat = _swig_property(_osgUtil.Statistics_nummat_get, _osgUtil.Statistics_nummat_set)
    __swig_setmethods__["nbins"] = _osgUtil.Statistics_nbins_set
    __swig_getmethods__["nbins"] = _osgUtil.Statistics_nbins_get
    if _newclass:nbins = _swig_property(_osgUtil.Statistics_nbins_get, _osgUtil.Statistics_nbins_set)
    __swig_setmethods__["numStateGraphs"] = _osgUtil.Statistics_numStateGraphs_set
    __swig_getmethods__["numStateGraphs"] = _osgUtil.Statistics_numStateGraphs_get
    if _newclass:numStateGraphs = _swig_property(_osgUtil.Statistics_numStateGraphs_get, _osgUtil.Statistics_numStateGraphs_set)
    __swig_setmethods__["numFastDrawables"] = _osgUtil.Statistics_numFastDrawables_set
    __swig_getmethods__["numFastDrawables"] = _osgUtil.Statistics_numFastDrawables_get
    if _newclass:numFastDrawables = _swig_property(_osgUtil.Statistics_numFastDrawables_get, _osgUtil.Statistics_numFastDrawables_set)
    __swig_setmethods__["nlights"] = _osgUtil.Statistics_nlights_set
    __swig_getmethods__["nlights"] = _osgUtil.Statistics_nlights_get
    if _newclass:nlights = _swig_property(_osgUtil.Statistics_nlights_get, _osgUtil.Statistics_nlights_set)
    __swig_setmethods__["depth"] = _osgUtil.Statistics_depth_set
    __swig_getmethods__["depth"] = _osgUtil.Statistics_depth_get
    if _newclass:depth = _swig_property(_osgUtil.Statistics_depth_get, _osgUtil.Statistics_depth_set)
    __swig_setmethods__["_binNo"] = _osgUtil.Statistics__binNo_set
    __swig_getmethods__["_binNo"] = _osgUtil.Statistics__binNo_get
    if _newclass:_binNo = _swig_property(_osgUtil.Statistics__binNo_get, _osgUtil.Statistics__binNo_set)
    __swig_setmethods__["stattype"] = _osgUtil.Statistics_stattype_set
    __swig_getmethods__["stattype"] = _osgUtil.Statistics_stattype_get
    if _newclass:stattype = _swig_property(_osgUtil.Statistics_stattype_get, _osgUtil.Statistics_stattype_set)
    __swig_setmethods__["nimpostor"] = _osgUtil.Statistics_nimpostor_set
    __swig_getmethods__["nimpostor"] = _osgUtil.Statistics_nimpostor_get
    if _newclass:nimpostor = _swig_property(_osgUtil.Statistics_nimpostor_get, _osgUtil.Statistics_nimpostor_set)
    __swig_setmethods__["numOrderedLeaves"] = _osgUtil.Statistics_numOrderedLeaves_set
    __swig_getmethods__["numOrderedLeaves"] = _osgUtil.Statistics_numOrderedLeaves_get
    if _newclass:numOrderedLeaves = _swig_property(_osgUtil.Statistics_numOrderedLeaves_get, _osgUtil.Statistics_numOrderedLeaves_set)
    __swig_setmethods__["_vertexCount"] = _osgUtil.Statistics__vertexCount_set
    __swig_getmethods__["_vertexCount"] = _osgUtil.Statistics__vertexCount_get
    if _newclass:_vertexCount = _swig_property(_osgUtil.Statistics__vertexCount_get, _osgUtil.Statistics__vertexCount_set)
    __swig_setmethods__["_primitiveCount"] = _osgUtil.Statistics__primitiveCount_set
    __swig_getmethods__["_primitiveCount"] = _osgUtil.Statistics__primitiveCount_get
    if _newclass:_primitiveCount = _swig_property(_osgUtil.Statistics__primitiveCount_get, _osgUtil.Statistics__primitiveCount_set)
    __swig_setmethods__["_currentPrimitiveFunctorMode"] = _osgUtil.Statistics__currentPrimitiveFunctorMode_set
    __swig_getmethods__["_currentPrimitiveFunctorMode"] = _osgUtil.Statistics__currentPrimitiveFunctorMode_get
    if _newclass:_currentPrimitiveFunctorMode = _swig_property(_osgUtil.Statistics__currentPrimitiveFunctorMode_get, _osgUtil.Statistics__currentPrimitiveFunctorMode_set)
    __swig_destroy__ = _osgUtil.delete_Statistics
    __del__ = lambda self : None;
Statistics_swigregister = _osgUtil.Statistics_swigregister
Statistics_swigregister(Statistics)

class StatsVisitor(osg.NodeVisitor):
    """Proxy of C++ osgUtil::StatsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatsVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::StatsVisitor self) -> StatsVisitor"""
        this = _osgUtil.new_StatsVisitor()
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(StatsVisitor self) -> char const *"""
        return _osgUtil.StatsVisitor_libraryName(self)

    def className(self):
        """className(StatsVisitor self) -> char const *"""
        return _osgUtil.StatsVisitor_className(self)

    def reset(self):
        """reset(StatsVisitor self)"""
        return _osgUtil.StatsVisitor_reset(self)

    def apply(self, *args):
        """
        apply(StatsVisitor self, Node node)
        apply(StatsVisitor self, Group node)
        apply(StatsVisitor self, Transform node)
        apply(StatsVisitor self, LOD node)
        apply(StatsVisitor self, Switch node)
        apply(StatsVisitor self, Geode node)
        apply(StatsVisitor self, Drawable drawable)
        apply(StatsVisitor self, StateSet ss)
        """
        return _osgUtil.StatsVisitor_apply(self, *args)

    def totalUpStats(self):
        """totalUpStats(StatsVisitor self)"""
        return _osgUtil.StatsVisitor_totalUpStats(self)

    def _print(self, *args):
        """_print(StatsVisitor self, std::ostream & out)"""
        return _osgUtil.StatsVisitor__print(self, *args)

    __swig_setmethods__["_numInstancedGroup"] = _osgUtil.StatsVisitor__numInstancedGroup_set
    __swig_getmethods__["_numInstancedGroup"] = _osgUtil.StatsVisitor__numInstancedGroup_get
    if _newclass:_numInstancedGroup = _swig_property(_osgUtil.StatsVisitor__numInstancedGroup_get, _osgUtil.StatsVisitor__numInstancedGroup_set)
    __swig_setmethods__["_numInstancedSwitch"] = _osgUtil.StatsVisitor__numInstancedSwitch_set
    __swig_getmethods__["_numInstancedSwitch"] = _osgUtil.StatsVisitor__numInstancedSwitch_get
    if _newclass:_numInstancedSwitch = _swig_property(_osgUtil.StatsVisitor__numInstancedSwitch_get, _osgUtil.StatsVisitor__numInstancedSwitch_set)
    __swig_setmethods__["_numInstancedLOD"] = _osgUtil.StatsVisitor__numInstancedLOD_set
    __swig_getmethods__["_numInstancedLOD"] = _osgUtil.StatsVisitor__numInstancedLOD_get
    if _newclass:_numInstancedLOD = _swig_property(_osgUtil.StatsVisitor__numInstancedLOD_get, _osgUtil.StatsVisitor__numInstancedLOD_set)
    __swig_setmethods__["_numInstancedTransform"] = _osgUtil.StatsVisitor__numInstancedTransform_set
    __swig_getmethods__["_numInstancedTransform"] = _osgUtil.StatsVisitor__numInstancedTransform_get
    if _newclass:_numInstancedTransform = _swig_property(_osgUtil.StatsVisitor__numInstancedTransform_get, _osgUtil.StatsVisitor__numInstancedTransform_set)
    __swig_setmethods__["_numInstancedGeode"] = _osgUtil.StatsVisitor__numInstancedGeode_set
    __swig_getmethods__["_numInstancedGeode"] = _osgUtil.StatsVisitor__numInstancedGeode_get
    if _newclass:_numInstancedGeode = _swig_property(_osgUtil.StatsVisitor__numInstancedGeode_get, _osgUtil.StatsVisitor__numInstancedGeode_set)
    __swig_setmethods__["_numInstancedDrawable"] = _osgUtil.StatsVisitor__numInstancedDrawable_set
    __swig_getmethods__["_numInstancedDrawable"] = _osgUtil.StatsVisitor__numInstancedDrawable_get
    if _newclass:_numInstancedDrawable = _swig_property(_osgUtil.StatsVisitor__numInstancedDrawable_get, _osgUtil.StatsVisitor__numInstancedDrawable_set)
    __swig_setmethods__["_numInstancedGeometry"] = _osgUtil.StatsVisitor__numInstancedGeometry_set
    __swig_getmethods__["_numInstancedGeometry"] = _osgUtil.StatsVisitor__numInstancedGeometry_get
    if _newclass:_numInstancedGeometry = _swig_property(_osgUtil.StatsVisitor__numInstancedGeometry_get, _osgUtil.StatsVisitor__numInstancedGeometry_set)
    __swig_setmethods__["_numInstancedFastGeometry"] = _osgUtil.StatsVisitor__numInstancedFastGeometry_set
    __swig_getmethods__["_numInstancedFastGeometry"] = _osgUtil.StatsVisitor__numInstancedFastGeometry_get
    if _newclass:_numInstancedFastGeometry = _swig_property(_osgUtil.StatsVisitor__numInstancedFastGeometry_get, _osgUtil.StatsVisitor__numInstancedFastGeometry_set)
    __swig_setmethods__["_numInstancedStateSet"] = _osgUtil.StatsVisitor__numInstancedStateSet_set
    __swig_getmethods__["_numInstancedStateSet"] = _osgUtil.StatsVisitor__numInstancedStateSet_get
    if _newclass:_numInstancedStateSet = _swig_property(_osgUtil.StatsVisitor__numInstancedStateSet_get, _osgUtil.StatsVisitor__numInstancedStateSet_set)
    __swig_setmethods__["_groupSet"] = _osgUtil.StatsVisitor__groupSet_set
    __swig_getmethods__["_groupSet"] = _osgUtil.StatsVisitor__groupSet_get
    if _newclass:_groupSet = _swig_property(_osgUtil.StatsVisitor__groupSet_get, _osgUtil.StatsVisitor__groupSet_set)
    __swig_setmethods__["_transformSet"] = _osgUtil.StatsVisitor__transformSet_set
    __swig_getmethods__["_transformSet"] = _osgUtil.StatsVisitor__transformSet_get
    if _newclass:_transformSet = _swig_property(_osgUtil.StatsVisitor__transformSet_get, _osgUtil.StatsVisitor__transformSet_set)
    __swig_setmethods__["_lodSet"] = _osgUtil.StatsVisitor__lodSet_set
    __swig_getmethods__["_lodSet"] = _osgUtil.StatsVisitor__lodSet_get
    if _newclass:_lodSet = _swig_property(_osgUtil.StatsVisitor__lodSet_get, _osgUtil.StatsVisitor__lodSet_set)
    __swig_setmethods__["_switchSet"] = _osgUtil.StatsVisitor__switchSet_set
    __swig_getmethods__["_switchSet"] = _osgUtil.StatsVisitor__switchSet_get
    if _newclass:_switchSet = _swig_property(_osgUtil.StatsVisitor__switchSet_get, _osgUtil.StatsVisitor__switchSet_set)
    __swig_setmethods__["_geodeSet"] = _osgUtil.StatsVisitor__geodeSet_set
    __swig_getmethods__["_geodeSet"] = _osgUtil.StatsVisitor__geodeSet_get
    if _newclass:_geodeSet = _swig_property(_osgUtil.StatsVisitor__geodeSet_get, _osgUtil.StatsVisitor__geodeSet_set)
    __swig_setmethods__["_drawableSet"] = _osgUtil.StatsVisitor__drawableSet_set
    __swig_getmethods__["_drawableSet"] = _osgUtil.StatsVisitor__drawableSet_get
    if _newclass:_drawableSet = _swig_property(_osgUtil.StatsVisitor__drawableSet_get, _osgUtil.StatsVisitor__drawableSet_set)
    __swig_setmethods__["_geometrySet"] = _osgUtil.StatsVisitor__geometrySet_set
    __swig_getmethods__["_geometrySet"] = _osgUtil.StatsVisitor__geometrySet_get
    if _newclass:_geometrySet = _swig_property(_osgUtil.StatsVisitor__geometrySet_get, _osgUtil.StatsVisitor__geometrySet_set)
    __swig_setmethods__["_fastGeometrySet"] = _osgUtil.StatsVisitor__fastGeometrySet_set
    __swig_getmethods__["_fastGeometrySet"] = _osgUtil.StatsVisitor__fastGeometrySet_get
    if _newclass:_fastGeometrySet = _swig_property(_osgUtil.StatsVisitor__fastGeometrySet_get, _osgUtil.StatsVisitor__fastGeometrySet_set)
    __swig_setmethods__["_statesetSet"] = _osgUtil.StatsVisitor__statesetSet_set
    __swig_getmethods__["_statesetSet"] = _osgUtil.StatsVisitor__statesetSet_get
    if _newclass:_statesetSet = _swig_property(_osgUtil.StatsVisitor__statesetSet_get, _osgUtil.StatsVisitor__statesetSet_set)
    __swig_setmethods__["_uniqueStats"] = _osgUtil.StatsVisitor__uniqueStats_set
    __swig_getmethods__["_uniqueStats"] = _osgUtil.StatsVisitor__uniqueStats_get
    if _newclass:_uniqueStats = _swig_property(_osgUtil.StatsVisitor__uniqueStats_get, _osgUtil.StatsVisitor__uniqueStats_set)
    __swig_setmethods__["_instancedStats"] = _osgUtil.StatsVisitor__instancedStats_set
    __swig_getmethods__["_instancedStats"] = _osgUtil.StatsVisitor__instancedStats_get
    if _newclass:_instancedStats = _swig_property(_osgUtil.StatsVisitor__instancedStats_get, _osgUtil.StatsVisitor__instancedStats_set)
    __swig_destroy__ = _osgUtil.delete_StatsVisitor
    __del__ = lambda self : None;
StatsVisitor_swigregister = _osgUtil.StatsVisitor_swigregister
StatsVisitor_swigregister(StatsVisitor)

class TangentSpaceGenerator(osg.Referenced):
    """Proxy of C++ osgUtil::TangentSpaceGenerator class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TangentSpaceGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TangentSpaceGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::TangentSpaceGenerator self) -> TangentSpaceGenerator
        __init__(osgUtil::TangentSpaceGenerator self, TangentSpaceGenerator copy, CopyOp copyop=SHALLOW_COPY) -> TangentSpaceGenerator
        __init__(osgUtil::TangentSpaceGenerator self, TangentSpaceGenerator copy) -> TangentSpaceGenerator
        """
        this = _osgUtil.new_TangentSpaceGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def generate(self, *args):
        """
        generate(TangentSpaceGenerator self, Geometry geo, int normal_map_tex_unit=0)
        generate(TangentSpaceGenerator self, Geometry geo)
        """
        return _osgUtil.TangentSpaceGenerator_generate(self, *args)

    def getTangentArray(self, *args):
        """
        getTangentArray(TangentSpaceGenerator self) -> Vec4Array
        getTangentArray(TangentSpaceGenerator self) -> Vec4Array
        """
        return _osgUtil.TangentSpaceGenerator_getTangentArray(self, *args)

    def setTangentArray(self, *args):
        """setTangentArray(TangentSpaceGenerator self, Vec4Array array)"""
        return _osgUtil.TangentSpaceGenerator_setTangentArray(self, *args)

    def getNormalArray(self, *args):
        """
        getNormalArray(TangentSpaceGenerator self) -> Vec4Array
        getNormalArray(TangentSpaceGenerator self) -> Vec4Array
        """
        return _osgUtil.TangentSpaceGenerator_getNormalArray(self, *args)

    def setNormalArray(self, *args):
        """setNormalArray(TangentSpaceGenerator self, Vec4Array array)"""
        return _osgUtil.TangentSpaceGenerator_setNormalArray(self, *args)

    def getBinormalArray(self, *args):
        """
        getBinormalArray(TangentSpaceGenerator self) -> Vec4Array
        getBinormalArray(TangentSpaceGenerator self) -> Vec4Array
        """
        return _osgUtil.TangentSpaceGenerator_getBinormalArray(self, *args)

    def setBinormalArray(self, *args):
        """setBinormalArray(TangentSpaceGenerator self, Vec4Array array)"""
        return _osgUtil.TangentSpaceGenerator_setBinormalArray(self, *args)

    def getIndices(self):
        """getIndices(TangentSpaceGenerator self) -> IndexArray"""
        return _osgUtil.TangentSpaceGenerator_getIndices(self)

TangentSpaceGenerator_swigregister = _osgUtil.TangentSpaceGenerator_swigregister
TangentSpaceGenerator_swigregister(TangentSpaceGenerator)

OSGUTIL_TRANSFORMATTRIBUTEFUNCTOR = _osgUtil.OSGUTIL_TRANSFORMATTRIBUTEFUNCTOR
class TransformAttributeFunctor(_object):
    """Proxy of C++ osgUtil::TransformAttributeFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformAttributeFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransformAttributeFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osgUtil::TransformAttributeFunctor self, Matrixd m) -> TransformAttributeFunctor"""
        this = _osgUtil.new_TransformAttributeFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_TransformAttributeFunctor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(TransformAttributeFunctor self, osg::Drawable::AttributeType type, unsigned int count, Vec3f begin)
        apply(TransformAttributeFunctor self, osg::Drawable::AttributeType type, unsigned int count, Vec3d begin)
        """
        return _osgUtil.TransformAttributeFunctor_apply(self, *args)

    __swig_setmethods__["_m"] = _osgUtil.TransformAttributeFunctor__m_set
    __swig_getmethods__["_m"] = _osgUtil.TransformAttributeFunctor__m_get
    if _newclass:_m = _swig_property(_osgUtil.TransformAttributeFunctor__m_get, _osgUtil.TransformAttributeFunctor__m_set)
    __swig_setmethods__["_im"] = _osgUtil.TransformAttributeFunctor__im_set
    __swig_getmethods__["_im"] = _osgUtil.TransformAttributeFunctor__im_get
    if _newclass:_im = _swig_property(_osgUtil.TransformAttributeFunctor__im_get, _osgUtil.TransformAttributeFunctor__im_set)
TransformAttributeFunctor_swigregister = _osgUtil.TransformAttributeFunctor_swigregister
TransformAttributeFunctor_swigregister(TransformAttributeFunctor)

OSGUTIL_TRANSFORMCALLBACK = _osgUtil.OSGUTIL_TRANSFORMCALLBACK
class TransformCallback(osg.NodeCallback):
    """Proxy of C++ osgUtil::TransformCallback class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransformCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osgUtil::TransformCallback self, Vec3f pivot, Vec3f axis, float angularVelocity) -> TransformCallback"""
        this = _osgUtil.new_TransformCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPause(self, *args):
        """setPause(TransformCallback self, bool pause)"""
        return _osgUtil.TransformCallback_setPause(self, *args)

    def __call__(self, *args):
        """__call__(TransformCallback self, Node node, NodeVisitor nv)"""
        return _osgUtil.TransformCallback___call__(self, *args)

    __swig_destroy__ = _osgUtil.delete_TransformCallback
    __del__ = lambda self : None;
TransformCallback_swigregister = _osgUtil.TransformCallback_swigregister
TransformCallback_swigregister(TransformCallback)

OSGUTIL_TRISTRIPVISITOR = _osgUtil.OSGUTIL_TRISTRIPVISITOR
class TriStripVisitor(BaseOptimizerVisitor):
    """Proxy of C++ osgUtil::TriStripVisitor class"""
    __swig_setmethods__ = {}
    for _s in [BaseOptimizerVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriStripVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseOptimizerVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriStripVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, optimizer=None): 
        """
        __init__(osgUtil::TriStripVisitor self, Optimizer optimizer=None) -> TriStripVisitor
        __init__(osgUtil::TriStripVisitor self) -> TriStripVisitor
        """
        this = _osgUtil.new_TriStripVisitor(optimizer)
        try: self.this.append(this)
        except: self.this = this
    def stripify(self, *args):
        """
        stripify(TriStripVisitor self, Geometry drawable)
        stripify(TriStripVisitor self)
        """
        return _osgUtil.TriStripVisitor_stripify(self, *args)

    def apply(self, *args):
        """apply(TriStripVisitor self, Geode geode)"""
        return _osgUtil.TriStripVisitor_apply(self, *args)

    def setCacheSize(self, *args):
        """setCacheSize(TriStripVisitor self, unsigned int size)"""
        return _osgUtil.TriStripVisitor_setCacheSize(self, *args)

    def getCacheSize(self):
        """getCacheSize(TriStripVisitor self) -> unsigned int"""
        return _osgUtil.TriStripVisitor_getCacheSize(self)

    def setMinStripSize(self, *args):
        """setMinStripSize(TriStripVisitor self, unsigned int size)"""
        return _osgUtil.TriStripVisitor_setMinStripSize(self, *args)

    def getMinStripSize(self):
        """getMinStripSize(TriStripVisitor self) -> unsigned int"""
        return _osgUtil.TriStripVisitor_getMinStripSize(self)

    def setGenerateFourPointPrimitivesQuads(self, *args):
        """setGenerateFourPointPrimitivesQuads(TriStripVisitor self, bool flag)"""
        return _osgUtil.TriStripVisitor_setGenerateFourPointPrimitivesQuads(self, *args)

    def getGenerateFourPointPrimitivesQuads(self):
        """getGenerateFourPointPrimitivesQuads(TriStripVisitor self) -> bool"""
        return _osgUtil.TriStripVisitor_getGenerateFourPointPrimitivesQuads(self)

    __swig_destroy__ = _osgUtil.delete_TriStripVisitor
    __del__ = lambda self : None;
TriStripVisitor_swigregister = _osgUtil.TriStripVisitor_swigregister
TriStripVisitor_swigregister(TriStripVisitor)

OSGUTIL_UPDATEVISITOR = _osgUtil.OSGUTIL_UPDATEVISITOR
class UpdateVisitor(osg.NodeVisitor):
    """Proxy of C++ osgUtil::UpdateVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdateVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpdateVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgUtil::UpdateVisitor self) -> UpdateVisitor"""
        this = _osgUtil.new_UpdateVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_UpdateVisitor
    __del__ = lambda self : None;
    def libraryName(self):
        """libraryName(UpdateVisitor self) -> char const *"""
        return _osgUtil.UpdateVisitor_libraryName(self)

    def className(self):
        """className(UpdateVisitor self) -> char const *"""
        return _osgUtil.UpdateVisitor_className(self)

    def reset(self):
        """reset(UpdateVisitor self)"""
        return _osgUtil.UpdateVisitor_reset(self)

    def apply(self, *args):
        """
        apply(UpdateVisitor self, Node node)
        apply(UpdateVisitor self, Geode node)
        apply(UpdateVisitor self, Billboard node)
        apply(UpdateVisitor self, LightSource node)
        apply(UpdateVisitor self, Group node)
        apply(UpdateVisitor self, Transform node)
        apply(UpdateVisitor self, Projection node)
        apply(UpdateVisitor self, Switch node)
        apply(UpdateVisitor self, LOD node)
        apply(UpdateVisitor self, osg::OccluderNode & node)
        """
        return _osgUtil.UpdateVisitor_apply(self, *args)

UpdateVisitor_swigregister = _osgUtil.UpdateVisitor_swigregister
UpdateVisitor_swigregister(UpdateVisitor)

OSGUTIL_VERSION = _osgUtil.OSGUTIL_VERSION

def osgUtilGetVersion():
  """osgUtilGetVersion() -> char const *"""
  return _osgUtil.osgUtilGetVersion()

def osgUtilGetLibraryName():
  """osgUtilGetLibraryName() -> char const *"""
  return _osgUtil.osgUtilGetLibraryName()
class Intersection(_object):
    """Proxy of C++ Intersection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Intersection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Intersection, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Intersection self) -> Intersection"""
        this = _osgUtil.new_Intersection()
        try: self.this.append(this)
        except: self.this = this
    def __lt__(self, *args):
        """__lt__(Intersection self, Intersection rhs) -> bool"""
        return _osgUtil.Intersection___lt__(self, *args)

    __swig_setmethods__["ratio"] = _osgUtil.Intersection_ratio_set
    __swig_getmethods__["ratio"] = _osgUtil.Intersection_ratio_get
    if _newclass:ratio = _swig_property(_osgUtil.Intersection_ratio_get, _osgUtil.Intersection_ratio_set)
    __swig_setmethods__["nodePath"] = _osgUtil.Intersection_nodePath_set
    __swig_getmethods__["nodePath"] = _osgUtil.Intersection_nodePath_get
    if _newclass:nodePath = _swig_property(_osgUtil.Intersection_nodePath_get, _osgUtil.Intersection_nodePath_set)
    __swig_setmethods__["drawable"] = _osgUtil.Intersection_drawable_set
    __swig_getmethods__["drawable"] = _osgUtil.Intersection_drawable_get
    if _newclass:drawable = _swig_property(_osgUtil.Intersection_drawable_get, _osgUtil.Intersection_drawable_set)
    __swig_setmethods__["matrix"] = _osgUtil.Intersection_matrix_set
    __swig_getmethods__["matrix"] = _osgUtil.Intersection_matrix_get
    if _newclass:matrix = _swig_property(_osgUtil.Intersection_matrix_get, _osgUtil.Intersection_matrix_set)
    __swig_setmethods__["localIntersectionPoint"] = _osgUtil.Intersection_localIntersectionPoint_set
    __swig_getmethods__["localIntersectionPoint"] = _osgUtil.Intersection_localIntersectionPoint_get
    if _newclass:localIntersectionPoint = _swig_property(_osgUtil.Intersection_localIntersectionPoint_get, _osgUtil.Intersection_localIntersectionPoint_set)
    __swig_setmethods__["localIntersectionNormal"] = _osgUtil.Intersection_localIntersectionNormal_set
    __swig_getmethods__["localIntersectionNormal"] = _osgUtil.Intersection_localIntersectionNormal_get
    if _newclass:localIntersectionNormal = _swig_property(_osgUtil.Intersection_localIntersectionNormal_get, _osgUtil.Intersection_localIntersectionNormal_set)
    __swig_setmethods__["indexList"] = _osgUtil.Intersection_indexList_set
    __swig_getmethods__["indexList"] = _osgUtil.Intersection_indexList_get
    if _newclass:indexList = _swig_property(_osgUtil.Intersection_indexList_get, _osgUtil.Intersection_indexList_set)
    __swig_setmethods__["ratioList"] = _osgUtil.Intersection_ratioList_set
    __swig_getmethods__["ratioList"] = _osgUtil.Intersection_ratioList_get
    if _newclass:ratioList = _swig_property(_osgUtil.Intersection_ratioList_get, _osgUtil.Intersection_ratioList_set)
    __swig_setmethods__["primitiveIndex"] = _osgUtil.Intersection_primitiveIndex_set
    __swig_getmethods__["primitiveIndex"] = _osgUtil.Intersection_primitiveIndex_get
    if _newclass:primitiveIndex = _swig_property(_osgUtil.Intersection_primitiveIndex_get, _osgUtil.Intersection_primitiveIndex_set)
    def getLocalIntersectPoint(self):
        """getLocalIntersectPoint(Intersection self) -> Vec3d"""
        return _osgUtil.Intersection_getLocalIntersectPoint(self)

    def getWorldIntersectPoint(self):
        """getWorldIntersectPoint(Intersection self) -> Vec3d"""
        return _osgUtil.Intersection_getWorldIntersectPoint(self)

    def getLocalIntersectNormal(self):
        """getLocalIntersectNormal(Intersection self) -> Vec3f"""
        return _osgUtil.Intersection_getLocalIntersectNormal(self)

    def getWorldIntersectNormal(self):
        """getWorldIntersectNormal(Intersection self) -> Vec3f"""
        return _osgUtil.Intersection_getWorldIntersectNormal(self)

    __swig_destroy__ = _osgUtil.delete_Intersection
    __del__ = lambda self : None;
Intersection_swigregister = _osgUtil.Intersection_swigregister
Intersection_swigregister(Intersection)

OSGUTIL_LINESEGMENTINTERSECTOR = _osgUtil.OSGUTIL_LINESEGMENTINTERSECTOR
class LineSegmentIntersector(Intersector):
    """Proxy of C++ osgUtil::LineSegmentIntersector class"""
    __swig_setmethods__ = {}
    for _s in [Intersector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineSegmentIntersector, name, value)
    __swig_getmethods__ = {}
    for _s in [Intersector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineSegmentIntersector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgUtil::LineSegmentIntersector self, Vec3d start, Vec3d end) -> LineSegmentIntersector
        __init__(osgUtil::LineSegmentIntersector self, osgUtil::Intersector::CoordinateFrame cf, Vec3d start, Vec3d end) -> LineSegmentIntersector
        __init__(osgUtil::LineSegmentIntersector self, osgUtil::Intersector::CoordinateFrame cf, double x, double y) -> LineSegmentIntersector
        """
        this = _osgUtil.new_LineSegmentIntersector(*args)
        try: self.this.append(this)
        except: self.this = this
    def insertIntersection(self, *args):
        """insertIntersection(LineSegmentIntersector self, osgUtil::LineSegmentIntersector::Intersection const & intersection)"""
        return _osgUtil.LineSegmentIntersector_insertIntersection(self, *args)

    def getIntersections(self):
        """getIntersections(LineSegmentIntersector self) -> osgUtil::LineSegmentIntersector::Intersections &"""
        return _osgUtil.LineSegmentIntersector_getIntersections(self)

    def getFirstIntersection(self):
        """getFirstIntersection(LineSegmentIntersector self) -> osgUtil::LineSegmentIntersector::Intersection"""
        return _osgUtil.LineSegmentIntersector_getFirstIntersection(self)

    def setStart(self, *args):
        """setStart(LineSegmentIntersector self, Vec3d start)"""
        return _osgUtil.LineSegmentIntersector_setStart(self, *args)

    def getStart(self):
        """getStart(LineSegmentIntersector self) -> Vec3d"""
        return _osgUtil.LineSegmentIntersector_getStart(self)

    def setEnd(self, *args):
        """setEnd(LineSegmentIntersector self, Vec3d end)"""
        return _osgUtil.LineSegmentIntersector_setEnd(self, *args)

    def getEnd(self):
        """getEnd(LineSegmentIntersector self) -> Vec3d"""
        return _osgUtil.LineSegmentIntersector_getEnd(self)

    def clone(self, *args):
        """clone(LineSegmentIntersector self, IntersectionVisitor iv) -> Intersector"""
        return _osgUtil.LineSegmentIntersector_clone(self, *args)

    def enter(self, *args):
        """enter(LineSegmentIntersector self, Node node) -> bool"""
        return _osgUtil.LineSegmentIntersector_enter(self, *args)

    def leave(self):
        """leave(LineSegmentIntersector self)"""
        return _osgUtil.LineSegmentIntersector_leave(self)

    def intersect(self, *args):
        """intersect(LineSegmentIntersector self, IntersectionVisitor iv, Drawable drawable)"""
        return _osgUtil.LineSegmentIntersector_intersect(self, *args)

    def reset(self):
        """reset(LineSegmentIntersector self)"""
        return _osgUtil.LineSegmentIntersector_reset(self)

    def containsIntersections(self):
        """containsIntersections(LineSegmentIntersector self) -> bool"""
        return _osgUtil.LineSegmentIntersector_containsIntersections(self)

    __swig_destroy__ = _osgUtil.delete_LineSegmentIntersector
    __del__ = lambda self : None;
LineSegmentIntersector_swigregister = _osgUtil.LineSegmentIntersector_swigregister
LineSegmentIntersector_swigregister(LineSegmentIntersector)

# This file is compatible with both classic and new-style classes.


