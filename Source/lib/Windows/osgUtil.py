# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _osgUtil
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgUtil.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _osgUtil.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _osgUtil.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _osgUtil.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _osgUtil.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _osgUtil.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _osgUtil.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _osgUtil.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _osgUtil.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgUtil.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _osgUtil.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _osgUtil.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgUtil.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgUtil.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgUtil.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _osgUtil.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _osgUtil.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import osg
OSGUTIL_RENDERLEAF = _osgUtil.OSGUTIL_RENDERLEAF
class RenderLeaf(osg.Referenced):
    """Proxy of C++ RenderLeaf class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderLeaf, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderLeaf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Drawable drawable, RefMatrix projection, RefMatrix modelview, 
            float depth=0.0) -> RenderLeaf
        __init__(self, Drawable drawable, RefMatrix projection, RefMatrix modelview) -> RenderLeaf
        """
        this = _osgUtil.new_RenderLeaf(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(*args):
        """
        set(self, Drawable drawable, RefMatrix projection, RefMatrix modelview, 
            float depth=0.0)
        set(self, Drawable drawable, RefMatrix projection, RefMatrix modelview)
        """
        return _osgUtil.RenderLeaf_set(*args)

    def reset(*args):
        """reset(self)"""
        return _osgUtil.RenderLeaf_reset(*args)

    def render(*args):
        """render(self, RenderInfo renderInfo, RenderLeaf previous)"""
        return _osgUtil.RenderLeaf_render(*args)

    __swig_setmethods__["_parent"] = _osgUtil.RenderLeaf__parent_set
    __swig_getmethods__["_parent"] = _osgUtil.RenderLeaf__parent_get
    if _newclass:_parent = _swig_property(_osgUtil.RenderLeaf__parent_get, _osgUtil.RenderLeaf__parent_set)
    __swig_setmethods__["_drawable"] = _osgUtil.RenderLeaf__drawable_set
    __swig_getmethods__["_drawable"] = _osgUtil.RenderLeaf__drawable_get
    if _newclass:_drawable = _swig_property(_osgUtil.RenderLeaf__drawable_get, _osgUtil.RenderLeaf__drawable_set)
    def getDrawable(*args):
        """getDrawable(self) -> Drawable"""
        return _osgUtil.RenderLeaf_getDrawable(*args)

    __swig_setmethods__["_projection"] = _osgUtil.RenderLeaf__projection_set
    __swig_getmethods__["_projection"] = _osgUtil.RenderLeaf__projection_get
    if _newclass:_projection = _swig_property(_osgUtil.RenderLeaf__projection_get, _osgUtil.RenderLeaf__projection_set)
    __swig_setmethods__["_modelview"] = _osgUtil.RenderLeaf__modelview_set
    __swig_getmethods__["_modelview"] = _osgUtil.RenderLeaf__modelview_get
    if _newclass:_modelview = _swig_property(_osgUtil.RenderLeaf__modelview_get, _osgUtil.RenderLeaf__modelview_set)
    __swig_setmethods__["_depth"] = _osgUtil.RenderLeaf__depth_set
    __swig_getmethods__["_depth"] = _osgUtil.RenderLeaf__depth_get
    if _newclass:_depth = _swig_property(_osgUtil.RenderLeaf__depth_get, _osgUtil.RenderLeaf__depth_set)
    __swig_setmethods__["_dynamic"] = _osgUtil.RenderLeaf__dynamic_set
    __swig_getmethods__["_dynamic"] = _osgUtil.RenderLeaf__dynamic_get
    if _newclass:_dynamic = _swig_property(_osgUtil.RenderLeaf__dynamic_get, _osgUtil.RenderLeaf__dynamic_set)
    __swig_destroy__ = _osgUtil.delete_RenderLeaf
    __del__ = lambda self : None;
RenderLeaf_swigregister = _osgUtil.RenderLeaf_swigregister
RenderLeaf_swigregister(RenderLeaf)

OSGUTIL_STATEGRAPH = _osgUtil.OSGUTIL_STATEGRAPH
class LessDepthSortFunctor(_object):
    """Proxy of C++ LessDepthSortFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LessDepthSortFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LessDepthSortFunctor, name)
    __repr__ = _swig_repr
    def __call__(*args):
        """__call__(self, osg::ref_ptr<(osgUtil::RenderLeaf)> lhs, osg::ref_ptr<(osgUtil::RenderLeaf)> rhs) -> bool"""
        return _osgUtil.LessDepthSortFunctor___call__(*args)

    def __init__(self, *args): 
        """__init__(self) -> LessDepthSortFunctor"""
        this = _osgUtil.new_LessDepthSortFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_LessDepthSortFunctor
    __del__ = lambda self : None;
LessDepthSortFunctor_swigregister = _osgUtil.LessDepthSortFunctor_swigregister
LessDepthSortFunctor_swigregister(LessDepthSortFunctor)

class StateGraph(osg.Referenced):
    """Proxy of C++ StateGraph class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateGraph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_parent"] = _osgUtil.StateGraph__parent_set
    __swig_getmethods__["_parent"] = _osgUtil.StateGraph__parent_get
    if _newclass:_parent = _swig_property(_osgUtil.StateGraph__parent_get, _osgUtil.StateGraph__parent_set)
    __swig_setmethods__["_stateset"] = _osgUtil.StateGraph__stateset_set
    __swig_getmethods__["_stateset"] = _osgUtil.StateGraph__stateset_get
    if _newclass:_stateset = _swig_property(_osgUtil.StateGraph__stateset_get, _osgUtil.StateGraph__stateset_set)
    __swig_setmethods__["_depth"] = _osgUtil.StateGraph__depth_set
    __swig_getmethods__["_depth"] = _osgUtil.StateGraph__depth_get
    if _newclass:_depth = _swig_property(_osgUtil.StateGraph__depth_get, _osgUtil.StateGraph__depth_set)
    __swig_setmethods__["_children"] = _osgUtil.StateGraph__children_set
    __swig_getmethods__["_children"] = _osgUtil.StateGraph__children_get
    if _newclass:_children = _swig_property(_osgUtil.StateGraph__children_get, _osgUtil.StateGraph__children_set)
    __swig_setmethods__["_leaves"] = _osgUtil.StateGraph__leaves_set
    __swig_getmethods__["_leaves"] = _osgUtil.StateGraph__leaves_get
    if _newclass:_leaves = _swig_property(_osgUtil.StateGraph__leaves_get, _osgUtil.StateGraph__leaves_set)
    __swig_setmethods__["_averageDistance"] = _osgUtil.StateGraph__averageDistance_set
    __swig_getmethods__["_averageDistance"] = _osgUtil.StateGraph__averageDistance_get
    if _newclass:_averageDistance = _swig_property(_osgUtil.StateGraph__averageDistance_get, _osgUtil.StateGraph__averageDistance_set)
    __swig_setmethods__["_minimumDistance"] = _osgUtil.StateGraph__minimumDistance_set
    __swig_getmethods__["_minimumDistance"] = _osgUtil.StateGraph__minimumDistance_get
    if _newclass:_minimumDistance = _swig_property(_osgUtil.StateGraph__minimumDistance_get, _osgUtil.StateGraph__minimumDistance_set)
    __swig_setmethods__["_userData"] = _osgUtil.StateGraph__userData_set
    __swig_getmethods__["_userData"] = _osgUtil.StateGraph__userData_get
    if _newclass:_userData = _swig_property(_osgUtil.StateGraph__userData_get, _osgUtil.StateGraph__userData_set)
    __swig_setmethods__["_dynamic"] = _osgUtil.StateGraph__dynamic_set
    __swig_getmethods__["_dynamic"] = _osgUtil.StateGraph__dynamic_get
    if _newclass:_dynamic = _swig_property(_osgUtil.StateGraph__dynamic_get, _osgUtil.StateGraph__dynamic_set)
    def __init__(self, *args): 
        """
        __init__(self) -> StateGraph
        __init__(self, StateGraph parent, StateSet stateset) -> StateGraph
        """
        this = _osgUtil.new_StateGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_StateGraph
    __del__ = lambda self : None;
    def cloneType(*args):
        """cloneType(self) -> StateGraph"""
        return _osgUtil.StateGraph_cloneType(*args)

    def setUserData(*args):
        """setUserData(self, Referenced obj)"""
        return _osgUtil.StateGraph_setUserData(*args)

    def getUserData(*args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osgUtil.StateGraph_getUserData(*args)

    def getStateSet(*args):
        """getStateSet(self) -> StateSet"""
        return _osgUtil.StateGraph_getStateSet(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _osgUtil.StateGraph_empty(*args)

    def leaves_empty(*args):
        """leaves_empty(self) -> bool"""
        return _osgUtil.StateGraph_leaves_empty(*args)

    def getAverageDistance(*args):
        """getAverageDistance(self) -> float"""
        return _osgUtil.StateGraph_getAverageDistance(*args)

    def getMinimumDistance(*args):
        """getMinimumDistance(self) -> float"""
        return _osgUtil.StateGraph_getMinimumDistance(*args)

    def sortFrontToBack(*args):
        """sortFrontToBack(self)"""
        return _osgUtil.StateGraph_sortFrontToBack(*args)

    def reset(*args):
        """reset(self)"""
        return _osgUtil.StateGraph_reset(*args)

    def clean(*args):
        """clean(self)"""
        return _osgUtil.StateGraph_clean(*args)

    def prune(*args):
        """prune(self)"""
        return _osgUtil.StateGraph_prune(*args)

    def find_or_insert(*args):
        """find_or_insert(self, StateSet stateset) -> StateGraph"""
        return _osgUtil.StateGraph_find_or_insert(*args)

    def addLeaf(*args):
        """addLeaf(self, RenderLeaf leaf)"""
        return _osgUtil.StateGraph_addLeaf(*args)

    def moveStateGraph(*args):
        """moveStateGraph(State state, StateGraph sg_curr, StateGraph sg_new)"""
        return _osgUtil.StateGraph_moveStateGraph(*args)

    if _newclass:moveStateGraph = staticmethod(moveStateGraph)
    __swig_getmethods__["moveStateGraph"] = lambda x: moveStateGraph
    def moveToRootStateGraph(*args):
        """moveToRootStateGraph(State state, StateGraph sg_curr)"""
        return _osgUtil.StateGraph_moveToRootStateGraph(*args)

    if _newclass:moveToRootStateGraph = staticmethod(moveToRootStateGraph)
    __swig_getmethods__["moveToRootStateGraph"] = lambda x: moveToRootStateGraph
    def numToPop(*args):
        """numToPop(StateGraph sg_curr) -> int"""
        return _osgUtil.StateGraph_numToPop(*args)

    if _newclass:numToPop = staticmethod(numToPop)
    __swig_getmethods__["numToPop"] = lambda x: numToPop
StateGraph_swigregister = _osgUtil.StateGraph_swigregister
StateGraph_swigregister(StateGraph)

def StateGraph_moveStateGraph(*args):
  """StateGraph_moveStateGraph(State state, StateGraph sg_curr, StateGraph sg_new)"""
  return _osgUtil.StateGraph_moveStateGraph(*args)

def StateGraph_moveToRootStateGraph(*args):
  """StateGraph_moveToRootStateGraph(State state, StateGraph sg_curr)"""
  return _osgUtil.StateGraph_moveToRootStateGraph(*args)

def StateGraph_numToPop(*args):
  """StateGraph_numToPop(StateGraph sg_curr) -> int"""
  return _osgUtil.StateGraph_numToPop(*args)

OSGUTIL_RENDERBIN = _osgUtil.OSGUTIL_RENDERBIN
class RenderBin(osg.Object):
    """Proxy of C++ RenderBin class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderBin, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderBin, name)
    __repr__ = _swig_repr
    SORT_BY_STATE = _osgUtil.RenderBin_SORT_BY_STATE
    SORT_BY_STATE_THEN_FRONT_TO_BACK = _osgUtil.RenderBin_SORT_BY_STATE_THEN_FRONT_TO_BACK
    SORT_FRONT_TO_BACK = _osgUtil.RenderBin_SORT_FRONT_TO_BACK
    SORT_BACK_TO_FRONT = _osgUtil.RenderBin_SORT_BACK_TO_FRONT
    def createRenderBin(*args):
        """createRenderBin(string binName) -> RenderBin"""
        return _osgUtil.RenderBin_createRenderBin(*args)

    if _newclass:createRenderBin = staticmethod(createRenderBin)
    __swig_getmethods__["createRenderBin"] = lambda x: createRenderBin
    def getRenderBinPrototype(*args):
        """getRenderBinPrototype(string binName) -> RenderBin"""
        return _osgUtil.RenderBin_getRenderBinPrototype(*args)

    if _newclass:getRenderBinPrototype = staticmethod(getRenderBinPrototype)
    __swig_getmethods__["getRenderBinPrototype"] = lambda x: getRenderBinPrototype
    def addRenderBinPrototype(*args):
        """addRenderBinPrototype(string binName, RenderBin proto)"""
        return _osgUtil.RenderBin_addRenderBinPrototype(*args)

    if _newclass:addRenderBinPrototype = staticmethod(addRenderBinPrototype)
    __swig_getmethods__["addRenderBinPrototype"] = lambda x: addRenderBinPrototype
    def removeRenderBinPrototype(*args):
        """removeRenderBinPrototype(RenderBin proto)"""
        return _osgUtil.RenderBin_removeRenderBinPrototype(*args)

    if _newclass:removeRenderBinPrototype = staticmethod(removeRenderBinPrototype)
    __swig_getmethods__["removeRenderBinPrototype"] = lambda x: removeRenderBinPrototype
    def setDefaultRenderBinSortMode(*args):
        """setDefaultRenderBinSortMode(SortMode mode)"""
        return _osgUtil.RenderBin_setDefaultRenderBinSortMode(*args)

    if _newclass:setDefaultRenderBinSortMode = staticmethod(setDefaultRenderBinSortMode)
    __swig_getmethods__["setDefaultRenderBinSortMode"] = lambda x: setDefaultRenderBinSortMode
    def getDefaultRenderBinSortMode(*args):
        """getDefaultRenderBinSortMode() -> SortMode"""
        return _osgUtil.RenderBin_getDefaultRenderBinSortMode(*args)

    if _newclass:getDefaultRenderBinSortMode = staticmethod(getDefaultRenderBinSortMode)
    __swig_getmethods__["getDefaultRenderBinSortMode"] = lambda x: getDefaultRenderBinSortMode
    def __init__(self, *args): 
        """
        __init__(self) -> RenderBin
        __init__(self, SortMode mode) -> RenderBin
        __init__(self, RenderBin rhs, CopyOp copyop=SHALLOW_COPY) -> RenderBin
        __init__(self, RenderBin rhs) -> RenderBin
        """
        this = _osgUtil.new_RenderBin(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgUtil.RenderBin_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgUtil.RenderBin_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgUtil.RenderBin_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgUtil.RenderBin_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgUtil.RenderBin_className(*args)

    def reset(*args):
        """reset(self)"""
        return _osgUtil.RenderBin_reset(*args)

    def setStateSet(*args):
        """setStateSet(self, StateSet stateset)"""
        return _osgUtil.RenderBin_setStateSet(*args)

    def getStateSet(*args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osgUtil.RenderBin_getStateSet(*args)

    def getParent(*args):
        """
        getParent(self) -> RenderBin
        getParent(self) -> RenderBin
        """
        return _osgUtil.RenderBin_getParent(*args)

    def getStage(*args):
        """
        getStage(self) -> RenderStage
        getStage(self) -> RenderStage
        """
        return _osgUtil.RenderBin_getStage(*args)

    def getBinNum(*args):
        """getBinNum(self) -> int"""
        return _osgUtil.RenderBin_getBinNum(*args)

    def getStateGraphList(*args):
        """
        getStateGraphList(self) -> StateGraphList
        getStateGraphList(self) -> StateGraphList
        """
        return _osgUtil.RenderBin_getStateGraphList(*args)

    def getRenderBinList(*args):
        """
        getRenderBinList(self) -> RenderBinList
        getRenderBinList(self) -> RenderBinList
        """
        return _osgUtil.RenderBin_getRenderBinList(*args)

    def getRenderLeafList(*args):
        """
        getRenderLeafList(self) -> RenderLeafList
        getRenderLeafList(self) -> RenderLeafList
        """
        return _osgUtil.RenderBin_getRenderLeafList(*args)

    def find_or_insert(*args):
        """find_or_insert(self, int binNum, string binName) -> RenderBin"""
        return _osgUtil.RenderBin_find_or_insert(*args)

    def addStateGraph(*args):
        """addStateGraph(self, StateGraph rg)"""
        return _osgUtil.RenderBin_addStateGraph(*args)

    def sort(*args):
        """sort(self)"""
        return _osgUtil.RenderBin_sort(*args)

    def sortImplementation(*args):
        """sortImplementation(self)"""
        return _osgUtil.RenderBin_sortImplementation(*args)

    def setSortMode(*args):
        """setSortMode(self, SortMode mode)"""
        return _osgUtil.RenderBin_setSortMode(*args)

    def getSortMode(*args):
        """getSortMode(self) -> SortMode"""
        return _osgUtil.RenderBin_getSortMode(*args)

    def sortByState(*args):
        """sortByState(self)"""
        return _osgUtil.RenderBin_sortByState(*args)

    def sortByStateThenFrontToBack(*args):
        """sortByStateThenFrontToBack(self)"""
        return _osgUtil.RenderBin_sortByStateThenFrontToBack(*args)

    def sortFrontToBack(*args):
        """sortFrontToBack(self)"""
        return _osgUtil.RenderBin_sortFrontToBack(*args)

    def sortBackToFront(*args):
        """sortBackToFront(self)"""
        return _osgUtil.RenderBin_sortBackToFront(*args)

    def draw(*args):
        """draw(self, RenderInfo renderInfo, RenderLeaf previous)"""
        return _osgUtil.RenderBin_draw(*args)

    def drawImplementation(*args):
        """drawImplementation(self, RenderInfo renderInfo, RenderLeaf previous)"""
        return _osgUtil.RenderBin_drawImplementation(*args)

    def getStats(*args):
        """getStats(self, Statistics primStats) -> bool"""
        return _osgUtil.RenderBin_getStats(*args)

    def computeNumberOfDynamicRenderLeaves(*args):
        """computeNumberOfDynamicRenderLeaves(self) -> unsigned int"""
        return _osgUtil.RenderBin_computeNumberOfDynamicRenderLeaves(*args)

    def copyLeavesFromStateGraphListToRenderLeafList(*args):
        """copyLeavesFromStateGraphListToRenderLeafList(self)"""
        return _osgUtil.RenderBin_copyLeavesFromStateGraphListToRenderLeafList(*args)

RenderBin_swigregister = _osgUtil.RenderBin_swigregister
RenderBin_swigregister(RenderBin)

def RenderBin_createRenderBin(*args):
  """RenderBin_createRenderBin(string binName) -> RenderBin"""
  return _osgUtil.RenderBin_createRenderBin(*args)

def RenderBin_getRenderBinPrototype(*args):
  """RenderBin_getRenderBinPrototype(string binName) -> RenderBin"""
  return _osgUtil.RenderBin_getRenderBinPrototype(*args)

def RenderBin_addRenderBinPrototype(*args):
  """RenderBin_addRenderBinPrototype(string binName, RenderBin proto)"""
  return _osgUtil.RenderBin_addRenderBinPrototype(*args)

def RenderBin_removeRenderBinPrototype(*args):
  """RenderBin_removeRenderBinPrototype(RenderBin proto)"""
  return _osgUtil.RenderBin_removeRenderBinPrototype(*args)

def RenderBin_setDefaultRenderBinSortMode(*args):
  """RenderBin_setDefaultRenderBinSortMode(SortMode mode)"""
  return _osgUtil.RenderBin_setDefaultRenderBinSortMode(*args)

def RenderBin_getDefaultRenderBinSortMode(*args):
  """RenderBin_getDefaultRenderBinSortMode() -> SortMode"""
  return _osgUtil.RenderBin_getDefaultRenderBinSortMode(*args)

class RegisterRenderBinProxy(_object):
    """Proxy of C++ RegisterRenderBinProxy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisterRenderBinProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisterRenderBinProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, string binName, RenderBin proto) -> RegisterRenderBinProxy"""
        this = _osgUtil.new_RegisterRenderBinProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_RegisterRenderBinProxy
    __del__ = lambda self : None;
RegisterRenderBinProxy_swigregister = _osgUtil.RegisterRenderBinProxy_swigregister
RegisterRenderBinProxy_swigregister(RegisterRenderBinProxy)

OSGUTIL_POSTIONALSTATECONTIANER = _osgUtil.OSGUTIL_POSTIONALSTATECONTIANER
class PositionalStateContainer(osg.Object):
    """Proxy of C++ PositionalStateContainer class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionalStateContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionalStateContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> PositionalStateContainer"""
        this = _osgUtil.new_PositionalStateContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgUtil.PositionalStateContainer_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp ?) -> Object"""
        return _osgUtil.PositionalStateContainer_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgUtil.PositionalStateContainer_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgUtil.PositionalStateContainer_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgUtil.PositionalStateContainer_className(*args)

    def reset(*args):
        """reset(self)"""
        return _osgUtil.PositionalStateContainer_reset(*args)

    def getAttrMatrixList(*args):
        """getAttrMatrixList(self) -> AttrMatrixList"""
        return _osgUtil.PositionalStateContainer_getAttrMatrixList(*args)

    def addPositionedAttribute(*args):
        """addPositionedAttribute(self, RefMatrix matrix, StateAttribute attr)"""
        return _osgUtil.PositionalStateContainer_addPositionedAttribute(*args)

    def getTexUnitAttrMatrixListMap(*args):
        """getTexUnitAttrMatrixListMap(self) -> TexUnitAttrMatrixListMap"""
        return _osgUtil.PositionalStateContainer_getTexUnitAttrMatrixListMap(*args)

    def addPositionedTextureAttribute(*args):
        """addPositionedTextureAttribute(self, unsigned int textureUnit, RefMatrix matrix, StateAttribute attr)"""
        return _osgUtil.PositionalStateContainer_addPositionedTextureAttribute(*args)

    def draw(*args):
        """
        draw(self, State state, RenderLeaf previous, Matrix postMultMatrix=0)
        draw(self, State state, RenderLeaf previous)
        """
        return _osgUtil.PositionalStateContainer_draw(*args)

    __swig_setmethods__["_attrList"] = _osgUtil.PositionalStateContainer__attrList_set
    __swig_getmethods__["_attrList"] = _osgUtil.PositionalStateContainer__attrList_get
    if _newclass:_attrList = _swig_property(_osgUtil.PositionalStateContainer__attrList_get, _osgUtil.PositionalStateContainer__attrList_set)
    __swig_setmethods__["_texAttrListMap"] = _osgUtil.PositionalStateContainer__texAttrListMap_set
    __swig_getmethods__["_texAttrListMap"] = _osgUtil.PositionalStateContainer__texAttrListMap_get
    if _newclass:_texAttrListMap = _swig_property(_osgUtil.PositionalStateContainer__texAttrListMap_get, _osgUtil.PositionalStateContainer__texAttrListMap_set)
PositionalStateContainer_swigregister = _osgUtil.PositionalStateContainer_swigregister
PositionalStateContainer_swigregister(PositionalStateContainer)

OSGUTIL_RENDERSTAGE = _osgUtil.OSGUTIL_RENDERSTAGE
class RenderStage(RenderBin):
    """Proxy of C++ RenderStage class"""
    __swig_setmethods__ = {}
    for _s in [RenderBin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderStage, name, value)
    __swig_getmethods__ = {}
    for _s in [RenderBin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderStage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RenderStage
        __init__(self, SortMode mode) -> RenderStage
        __init__(self, RenderStage rhs, CopyOp copyop=SHALLOW_COPY) -> RenderStage
        __init__(self, RenderStage rhs) -> RenderStage
        """
        this = _osgUtil.new_RenderStage(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgUtil.RenderStage_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgUtil.RenderStage_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgUtil.RenderStage_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgUtil.RenderStage_className(*args)

    def reset(*args):
        """reset(self)"""
        return _osgUtil.RenderStage_reset(*args)

    def setDrawBuffer(*args):
        """setDrawBuffer(self, GLenum buffer)"""
        return _osgUtil.RenderStage_setDrawBuffer(*args)

    def getDrawBuffer(*args):
        """getDrawBuffer(self) -> GLenum"""
        return _osgUtil.RenderStage_getDrawBuffer(*args)

    def setReadBuffer(*args):
        """setReadBuffer(self, GLenum buffer)"""
        return _osgUtil.RenderStage_setReadBuffer(*args)

    def getReadBuffer(*args):
        """getReadBuffer(self) -> GLenum"""
        return _osgUtil.RenderStage_getReadBuffer(*args)

    def setViewport(*args):
        """setViewport(self, Viewport viewport)"""
        return _osgUtil.RenderStage_setViewport(*args)

    def getViewport(*args):
        """
        getViewport(self) -> Viewport
        getViewport(self) -> Viewport
        """
        return _osgUtil.RenderStage_getViewport(*args)

    def setClearMask(*args):
        """setClearMask(self, GLbitfield mask)"""
        return _osgUtil.RenderStage_setClearMask(*args)

    def getClearMask(*args):
        """getClearMask(self) -> GLbitfield"""
        return _osgUtil.RenderStage_getClearMask(*args)

    def setColorMask(*args):
        """setColorMask(self, ColorMask cm)"""
        return _osgUtil.RenderStage_setColorMask(*args)

    def getColorMask(*args):
        """
        getColorMask(self) -> ColorMask
        getColorMask(self) -> ColorMask
        """
        return _osgUtil.RenderStage_getColorMask(*args)

    def setClearColor(*args):
        """setClearColor(self, Vec4 color)"""
        return _osgUtil.RenderStage_setClearColor(*args)

    def getClearColor(*args):
        """getClearColor(self) -> Vec4"""
        return _osgUtil.RenderStage_getClearColor(*args)

    def setClearAccum(*args):
        """setClearAccum(self, Vec4 color)"""
        return _osgUtil.RenderStage_setClearAccum(*args)

    def getClearAccum(*args):
        """getClearAccum(self) -> Vec4"""
        return _osgUtil.RenderStage_getClearAccum(*args)

    def setClearDepth(*args):
        """setClearDepth(self, double depth)"""
        return _osgUtil.RenderStage_setClearDepth(*args)

    def getClearDepth(*args):
        """getClearDepth(self) -> double"""
        return _osgUtil.RenderStage_getClearDepth(*args)

    def setClearStencil(*args):
        """setClearStencil(self, int stencil)"""
        return _osgUtil.RenderStage_setClearStencil(*args)

    def getClearStencil(*args):
        """getClearStencil(self) -> int"""
        return _osgUtil.RenderStage_getClearStencil(*args)

    def setCamera(*args):
        """setCamera(self, Camera camera)"""
        return _osgUtil.RenderStage_setCamera(*args)

    def getCamera(*args):
        """
        getCamera(self) -> Camera
        getCamera(self) -> Camera
        """
        return _osgUtil.RenderStage_getCamera(*args)

    def setCameraRequiresSetUp(*args):
        """setCameraRequiresSetUp(self, bool flag)"""
        return _osgUtil.RenderStage_setCameraRequiresSetUp(*args)

    def getCameraRequiresSetUp(*args):
        """getCameraRequiresSetUp(self) -> bool"""
        return _osgUtil.RenderStage_getCameraRequiresSetUp(*args)

    def runCameraSetUp(*args):
        """runCameraSetUp(self, RenderInfo renderInfo)"""
        return _osgUtil.RenderStage_runCameraSetUp(*args)

    def setTexture(*args):
        """
        setTexture(self, Texture texture, unsigned int level=0, unsigned int face=0)
        setTexture(self, Texture texture, unsigned int level=0)
        setTexture(self, Texture texture)
        """
        return _osgUtil.RenderStage_setTexture(*args)

    def getTexture(*args):
        """getTexture(self) -> Texture"""
        return _osgUtil.RenderStage_getTexture(*args)

    def setImage(*args):
        """setImage(self, Image image)"""
        return _osgUtil.RenderStage_setImage(*args)

    def getImage(*args):
        """getImage(self) -> Image"""
        return _osgUtil.RenderStage_getImage(*args)

    def setImageReadPixelFormat(*args):
        """setImageReadPixelFormat(self, GLenum format)"""
        return _osgUtil.RenderStage_setImageReadPixelFormat(*args)

    def getImageReadPixelFormat(*args):
        """getImageReadPixelFormat(self) -> GLenum"""
        return _osgUtil.RenderStage_getImageReadPixelFormat(*args)

    def setImageReadPixelDataType(*args):
        """setImageReadPixelDataType(self, GLenum type)"""
        return _osgUtil.RenderStage_setImageReadPixelDataType(*args)

    def getImageReadPixelDataType(*args):
        """getImageReadPixelDataType(self) -> GLenum"""
        return _osgUtil.RenderStage_getImageReadPixelDataType(*args)

    def setFrameBufferObject(*args):
        """setFrameBufferObject(self, osg::FrameBufferObject fbo)"""
        return _osgUtil.RenderStage_setFrameBufferObject(*args)

    def getFrameBufferObject(*args):
        """
        getFrameBufferObject(self) -> osg::FrameBufferObject
        getFrameBufferObject(self) -> osg::FrameBufferObject
        """
        return _osgUtil.RenderStage_getFrameBufferObject(*args)

    def setMultisampleResolveFramebufferObject(*args):
        """setMultisampleResolveFramebufferObject(self, osg::FrameBufferObject fbo)"""
        return _osgUtil.RenderStage_setMultisampleResolveFramebufferObject(*args)

    def getMultisampleResolveFramebufferObject(*args):
        """
        getMultisampleResolveFramebufferObject(self) -> osg::FrameBufferObject
        getMultisampleResolveFramebufferObject(self) -> osg::FrameBufferObject
        """
        return _osgUtil.RenderStage_getMultisampleResolveFramebufferObject(*args)

    def setDisableFboAfterRender(*args):
        """setDisableFboAfterRender(self, bool disable)"""
        return _osgUtil.RenderStage_setDisableFboAfterRender(*args)

    def getDisableFboAfterRender(*args):
        """getDisableFboAfterRender(self) -> bool"""
        return _osgUtil.RenderStage_getDisableFboAfterRender(*args)

    def setGraphicsContext(*args):
        """setGraphicsContext(self, GraphicsContext context)"""
        return _osgUtil.RenderStage_setGraphicsContext(*args)

    def getGraphicsContext(*args):
        """
        getGraphicsContext(self) -> GraphicsContext
        getGraphicsContext(self) -> GraphicsContext
        """
        return _osgUtil.RenderStage_getGraphicsContext(*args)

    def setInheritedPositionalStateContainerMatrix(*args):
        """setInheritedPositionalStateContainerMatrix(self, Matrix matrix)"""
        return _osgUtil.RenderStage_setInheritedPositionalStateContainerMatrix(*args)

    def getInheritedPositionalStateContainerMatrix(*args):
        """getInheritedPositionalStateContainerMatrix(self) -> Matrix"""
        return _osgUtil.RenderStage_getInheritedPositionalStateContainerMatrix(*args)

    def setInheritedPositionalStateContainer(*args):
        """setInheritedPositionalStateContainer(self, PositionalStateContainer rsl)"""
        return _osgUtil.RenderStage_setInheritedPositionalStateContainer(*args)

    def getInheritedPositionalStateContainer(*args):
        """getInheritedPositionalStateContainer(self) -> PositionalStateContainer"""
        return _osgUtil.RenderStage_getInheritedPositionalStateContainer(*args)

    def setPositionalStateContainer(*args):
        """setPositionalStateContainer(self, PositionalStateContainer rsl)"""
        return _osgUtil.RenderStage_setPositionalStateContainer(*args)

    def getPositionalStateContainer(*args):
        """getPositionalStateContainer(self) -> PositionalStateContainer"""
        return _osgUtil.RenderStage_getPositionalStateContainer(*args)

    def addPositionedAttribute(*args):
        """addPositionedAttribute(self, RefMatrix matrix, StateAttribute attr)"""
        return _osgUtil.RenderStage_addPositionedAttribute(*args)

    def addPositionedTextureAttribute(*args):
        """addPositionedTextureAttribute(self, unsigned int textureUnit, RefMatrix matrix, StateAttribute attr)"""
        return _osgUtil.RenderStage_addPositionedTextureAttribute(*args)

    def copyTexture(*args):
        """copyTexture(self, RenderInfo renderInfo)"""
        return _osgUtil.RenderStage_copyTexture(*args)

    def sort(*args):
        """sort(self)"""
        return _osgUtil.RenderStage_sort(*args)

    def drawPreRenderStages(*args):
        """drawPreRenderStages(self, RenderInfo renderInfo, RenderLeaf previous)"""
        return _osgUtil.RenderStage_drawPreRenderStages(*args)

    def draw(*args):
        """draw(self, RenderInfo renderInfo, RenderLeaf previous)"""
        return _osgUtil.RenderStage_draw(*args)

    def drawInner(*args):
        """drawInner(self, RenderInfo renderInfo, RenderLeaf previous, bool doCopyTexture)"""
        return _osgUtil.RenderStage_drawInner(*args)

    def drawPostRenderStages(*args):
        """drawPostRenderStages(self, RenderInfo renderInfo, RenderLeaf previous)"""
        return _osgUtil.RenderStage_drawPostRenderStages(*args)

    def drawImplementation(*args):
        """drawImplementation(self, RenderInfo renderInfo, RenderLeaf previous)"""
        return _osgUtil.RenderStage_drawImplementation(*args)

    def addToDependencyList(*args):
        """addToDependencyList(self, RenderStage rs)"""
        return _osgUtil.RenderStage_addToDependencyList(*args)

    def addPreRenderStage(*args):
        """
        addPreRenderStage(self, RenderStage rs, int order=0)
        addPreRenderStage(self, RenderStage rs)
        """
        return _osgUtil.RenderStage_addPreRenderStage(*args)

    def addPostRenderStage(*args):
        """
        addPostRenderStage(self, RenderStage rs, int order=0)
        addPostRenderStage(self, RenderStage rs)
        """
        return _osgUtil.RenderStage_addPostRenderStage(*args)

    def getStats(*args):
        """getStats(self, Statistics stats) -> bool"""
        return _osgUtil.RenderStage_getStats(*args)

    def computeNumberOfDynamicRenderLeaves(*args):
        """computeNumberOfDynamicRenderLeaves(self) -> unsigned int"""
        return _osgUtil.RenderStage_computeNumberOfDynamicRenderLeaves(*args)

    def attach(*args):
        """attach(self, BufferComponent buffer, Image image)"""
        return _osgUtil.RenderStage_attach(*args)

RenderStage_swigregister = _osgUtil.RenderStage_swigregister
RenderStage_swigregister(RenderStage)

class CubeMapGenerator(osg.Referenced):
    """Proxy of C++ CubeMapGenerator class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubeMapGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubeMapGenerator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getImage(*args):
        """
        getImage(self, Face face) -> Image
        getImage(self, Face face) -> Image
        """
        return _osgUtil.CubeMapGenerator_getImage(*args)

    def generateMap(*args):
        """
        generateMap(self, bool use_osg_system=True)
        generateMap(self)
        """
        return _osgUtil.CubeMapGenerator_generateMap(*args)

CubeMapGenerator_swigregister = _osgUtil.CubeMapGenerator_swigregister
CubeMapGenerator_swigregister(CubeMapGenerator)

OSGUTIL_CULLVISITOR = _osgUtil.OSGUTIL_CULLVISITOR
class CullVisitor(osg.NodeVisitor):
    """Proxy of C++ CullVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CullVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CullVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CullVisitor
        __init__(self, CullVisitor ?) -> CullVisitor
        """
        this = _osgUtil.new_CullVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> CullVisitor"""
        return _osgUtil.CullVisitor_clone(*args)

    def prototype(*args):
        """prototype() -> osg::ref_ptr<(osgUtil::CullVisitor)>"""
        return _osgUtil.CullVisitor_prototype(*args)

    if _newclass:prototype = staticmethod(prototype)
    __swig_getmethods__["prototype"] = lambda x: prototype
    def create(*args):
        """create() -> CullVisitor"""
        return _osgUtil.CullVisitor_create(*args)

    if _newclass:create = staticmethod(create)
    __swig_getmethods__["create"] = lambda x: create
    def reset(*args):
        """reset(self)"""
        return _osgUtil.CullVisitor_reset(*args)

    def getEyePoint(*args):
        """getEyePoint(self) -> Vec3"""
        return _osgUtil.CullVisitor_getEyePoint(*args)

    def getViewPoint(*args):
        """getViewPoint(self) -> Vec3"""
        return _osgUtil.CullVisitor_getViewPoint(*args)

    def getDistanceToEyePoint(*args):
        """getDistanceToEyePoint(self, Vec3 pos, bool withLODScale) -> float"""
        return _osgUtil.CullVisitor_getDistanceToEyePoint(*args)

    def getDistanceFromEyePoint(*args):
        """getDistanceFromEyePoint(self, Vec3 pos, bool withLODScale) -> float"""
        return _osgUtil.CullVisitor_getDistanceFromEyePoint(*args)

    def getDistanceToViewPoint(*args):
        """getDistanceToViewPoint(self, Vec3 pos, bool withLODScale) -> float"""
        return _osgUtil.CullVisitor_getDistanceToViewPoint(*args)

    def apply(*args):
        """
        apply(self, Node ?)
        apply(self, Geode node)
        apply(self, Billboard node)
        apply(self, LightSource node)
        apply(self, ClipNode node)
        apply(self, TexGenNode node)
        apply(self, Group node)
        apply(self, Transform node)
        apply(self, Projection node)
        apply(self, Switch node)
        apply(self, LOD node)
        apply(self, ClearNode node)
        apply(self, Camera node)
        apply(self, OccluderNode node)
        apply(self, OcclusionQueryNode node)
        """
        return _osgUtil.CullVisitor_apply(*args)

    def pushStateSet(*args):
        """pushStateSet(self, StateSet ss)"""
        return _osgUtil.CullVisitor_pushStateSet(*args)

    def popStateSet(*args):
        """popStateSet(self)"""
        return _osgUtil.CullVisitor_popStateSet(*args)

    def setStateGraph(*args):
        """setStateGraph(self, StateGraph rg)"""
        return _osgUtil.CullVisitor_setStateGraph(*args)

    def getRootStateGraph(*args):
        """getRootStateGraph(self) -> StateGraph"""
        return _osgUtil.CullVisitor_getRootStateGraph(*args)

    def getCurrentStateGraph(*args):
        """getCurrentStateGraph(self) -> StateGraph"""
        return _osgUtil.CullVisitor_getCurrentStateGraph(*args)

    def setRenderStage(*args):
        """setRenderStage(self, RenderStage rg)"""
        return _osgUtil.CullVisitor_setRenderStage(*args)

    def getRenderStage(*args):
        """getRenderStage(self) -> RenderStage"""
        return _osgUtil.CullVisitor_getRenderStage(*args)

    def getCurrentRenderStage(*args):
        """getCurrentRenderStage(self) -> RenderStage"""
        return _osgUtil.CullVisitor_getCurrentRenderStage(*args)

    def getCurrentCamera(*args):
        """getCurrentCamera(self) -> Camera"""
        return _osgUtil.CullVisitor_getCurrentCamera(*args)

    def getCurrentRenderBin(*args):
        """getCurrentRenderBin(self) -> RenderBin"""
        return _osgUtil.CullVisitor_getCurrentRenderBin(*args)

    def setCurrentRenderBin(*args):
        """setCurrentRenderBin(self, RenderBin rb)"""
        return _osgUtil.CullVisitor_setCurrentRenderBin(*args)

    def getCalculatedNearPlane(*args):
        """getCalculatedNearPlane(self) -> value_type"""
        return _osgUtil.CullVisitor_getCalculatedNearPlane(*args)

    def getCalculatedFarPlane(*args):
        """getCalculatedFarPlane(self) -> value_type"""
        return _osgUtil.CullVisitor_getCalculatedFarPlane(*args)

    def computeNearestPointInFrustum(*args):
        """computeNearestPointInFrustum(self, Matrix matrix, PlaneList planes, Drawable drawable) -> value_type"""
        return _osgUtil.CullVisitor_computeNearestPointInFrustum(*args)

    def updateCalculatedNearFar(*args):
        """
        updateCalculatedNearFar(self, Matrix matrix, BoundingBox bb) -> bool
        updateCalculatedNearFar(self, Matrix matrix, Drawable drawable, bool isBillboard=False) -> bool
        updateCalculatedNearFar(self, Matrix matrix, Drawable drawable) -> bool
        updateCalculatedNearFar(self, Vec3 pos)
        """
        return _osgUtil.CullVisitor_updateCalculatedNearFar(*args)

    def addDrawable(*args):
        """addDrawable(self, Drawable drawable, RefMatrix matrix)"""
        return _osgUtil.CullVisitor_addDrawable(*args)

    def addDrawableAndDepth(*args):
        """addDrawableAndDepth(self, Drawable drawable, RefMatrix matrix, float depth)"""
        return _osgUtil.CullVisitor_addDrawableAndDepth(*args)

    def addPositionedAttribute(*args):
        """addPositionedAttribute(self, RefMatrix matrix, StateAttribute attr)"""
        return _osgUtil.CullVisitor_addPositionedAttribute(*args)

    def addPositionedTextureAttribute(*args):
        """addPositionedTextureAttribute(self, unsigned int textureUnit, RefMatrix matrix, StateAttribute attr)"""
        return _osgUtil.CullVisitor_addPositionedTextureAttribute(*args)

    def computeNearPlane(*args):
        """computeNearPlane(self)"""
        return _osgUtil.CullVisitor_computeNearPlane(*args)

    def popProjectionMatrix(*args):
        """popProjectionMatrix(self)"""
        return _osgUtil.CullVisitor_popProjectionMatrix(*args)

    def clampProjectionMatrixImplementation(*args):
        """
        clampProjectionMatrixImplementation(self, Matrixf projection, double znear, double zfar) -> bool
        clampProjectionMatrixImplementation(self, Matrixd projection, double znear, double zfar) -> bool
        """
        return _osgUtil.CullVisitor_clampProjectionMatrixImplementation(*args)

    def clampProjectionMatrix(*args):
        """
        clampProjectionMatrix(self, Matrixf projection, value_type znear, value_type zfar) -> bool
        clampProjectionMatrix(self, Matrixd projection, value_type znear, value_type zfar) -> bool
        """
        return _osgUtil.CullVisitor_clampProjectionMatrix(*args)

    def setState(*args):
        """setState(self, State state)"""
        return _osgUtil.CullVisitor_setState(*args)

    def getState(*args):
        """
        getState(self) -> State
        getState(self) -> State
        """
        return _osgUtil.CullVisitor_getState(*args)

    def setRenderInfo(*args):
        """setRenderInfo(self, RenderInfo renderInfo)"""
        return _osgUtil.CullVisitor_setRenderInfo(*args)

    def getRenderInfo(*args):
        """
        getRenderInfo(self) -> RenderInfo
        getRenderInfo(self) -> RenderInfo
        """
        return _osgUtil.CullVisitor_getRenderInfo(*args)

CullVisitor_swigregister = _osgUtil.CullVisitor_swigregister
CullVisitor_swigregister(CullVisitor)

def CullVisitor_prototype(*args):
  """CullVisitor_prototype() -> osg::ref_ptr<(osgUtil::CullVisitor)>"""
  return _osgUtil.CullVisitor_prototype(*args)

def CullVisitor_create(*args):
  """CullVisitor_create() -> CullVisitor"""
  return _osgUtil.CullVisitor_create(*args)

class DelaunayConstraint(osg.Geometry):
    """Proxy of C++ DelaunayConstraint class"""
    __swig_setmethods__ = {}
    for _s in [osg.Geometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DelaunayConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Geometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DelaunayConstraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> DelaunayConstraint"""
        this = _osgUtil.new_DelaunayConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def addtriangle(*args):
        """addtriangle(self, int i1, int i2, int i3)"""
        return _osgUtil.DelaunayConstraint_addtriangle(*args)

    def getTriangles(*args):
        """
        getTriangles(self) -> DrawElementsUInt
        getTriangles(self) -> DrawElementsUInt
        """
        return _osgUtil.DelaunayConstraint_getTriangles(*args)

    def getPoints(*args):
        """getPoints(self, Vec3Array points) -> Vec3Array"""
        return _osgUtil.DelaunayConstraint_getPoints(*args)

    def makeDrawable(*args):
        """makeDrawable(self) -> DrawElementsUInt"""
        return _osgUtil.DelaunayConstraint_makeDrawable(*args)

    def merge(*args):
        """merge(self, DelaunayConstraint dco)"""
        return _osgUtil.DelaunayConstraint_merge(*args)

    def removeVerticesInside(*args):
        """removeVerticesInside(self, DelaunayConstraint dco)"""
        return _osgUtil.DelaunayConstraint_removeVerticesInside(*args)

    def windingNumber(*args):
        """windingNumber(self, Vec3 testpoint) -> float"""
        return _osgUtil.DelaunayConstraint_windingNumber(*args)

    def contains(*args):
        """contains(self, Vec3 testpoint) -> bool"""
        return _osgUtil.DelaunayConstraint_contains(*args)

    def outside(*args):
        """outside(self, Vec3 testpoint) -> bool"""
        return _osgUtil.DelaunayConstraint_outside(*args)

    def handleOverlaps(*args):
        """handleOverlaps(self)"""
        return _osgUtil.DelaunayConstraint_handleOverlaps(*args)

DelaunayConstraint_swigregister = _osgUtil.DelaunayConstraint_swigregister
DelaunayConstraint_swigregister(DelaunayConstraint)

class DelaunayTriangulator(osg.Referenced):
    """Proxy of C++ DelaunayTriangulator class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DelaunayTriangulator, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DelaunayTriangulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DelaunayTriangulator
        __init__(self, Vec3Array points, Vec3Array normals=0) -> DelaunayTriangulator
        __init__(self, Vec3Array points) -> DelaunayTriangulator
        __init__(self, DelaunayTriangulator copy, CopyOp copyop=SHALLOW_COPY) -> DelaunayTriangulator
        __init__(self, DelaunayTriangulator copy) -> DelaunayTriangulator
        """
        this = _osgUtil.new_DelaunayTriangulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInputPointArray(*args):
        """
        getInputPointArray(self) -> Vec3Array
        getInputPointArray(self) -> Vec3Array
        """
        return _osgUtil.DelaunayTriangulator_getInputPointArray(*args)

    def setInputPointArray(*args):
        """setInputPointArray(self, Vec3Array points)"""
        return _osgUtil.DelaunayTriangulator_setInputPointArray(*args)

    def addInputConstraint(*args):
        """addInputConstraint(self, DelaunayConstraint dc)"""
        return _osgUtil.DelaunayTriangulator_addInputConstraint(*args)

    def getOutputNormalArray(*args):
        """
        getOutputNormalArray(self) -> Vec3Array
        getOutputNormalArray(self) -> Vec3Array
        """
        return _osgUtil.DelaunayTriangulator_getOutputNormalArray(*args)

    def setOutputNormalArray(*args):
        """setOutputNormalArray(self, Vec3Array normals)"""
        return _osgUtil.DelaunayTriangulator_setOutputNormalArray(*args)

    def triangulate(*args):
        """triangulate(self) -> bool"""
        return _osgUtil.DelaunayTriangulator_triangulate(*args)

    def getTriangles(*args):
        """
        getTriangles(self) -> DrawElementsUInt
        getTriangles(self) -> DrawElementsUInt
        """
        return _osgUtil.DelaunayTriangulator_getTriangles(*args)

    def removeInternalTriangles(*args):
        """removeInternalTriangles(self, DelaunayConstraint constraint)"""
        return _osgUtil.DelaunayTriangulator_removeInternalTriangles(*args)

DelaunayTriangulator_swigregister = _osgUtil.DelaunayTriangulator_swigregister
DelaunayTriangulator_swigregister(DelaunayTriangulator)

OSGUTIL_DISPLAYREQUIREMENTSVISITOR = _osgUtil.OSGUTIL_DISPLAYREQUIREMENTSVISITOR
class DisplayRequirementsVisitor(osg.NodeVisitor):
    """Proxy of C++ DisplayRequirementsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayRequirementsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayRequirementsVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> DisplayRequirementsVisitor"""
        this = _osgUtil.new_DisplayRequirementsVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def setDisplaySettings(*args):
        """setDisplaySettings(self, DisplaySettings ds)"""
        return _osgUtil.DisplayRequirementsVisitor_setDisplaySettings(*args)

    def getDisplaySettings(*args):
        """getDisplaySettings(self) -> DisplaySettings"""
        return _osgUtil.DisplayRequirementsVisitor_getDisplaySettings(*args)

    def applyStateSet(*args):
        """applyStateSet(self, StateSet stateset)"""
        return _osgUtil.DisplayRequirementsVisitor_applyStateSet(*args)

    def apply(*args):
        """
        apply(self, Node node)
        apply(self, Geode geode)
        """
        return _osgUtil.DisplayRequirementsVisitor_apply(*args)

    __swig_destroy__ = _osgUtil.delete_DisplayRequirementsVisitor
    __del__ = lambda self : None;
DisplayRequirementsVisitor_swigregister = _osgUtil.DisplayRequirementsVisitor_swigregister
DisplayRequirementsVisitor_swigregister(DisplayRequirementsVisitor)

OSGUTIL_GLOBJECTSVISITOR = _osgUtil.OSGUTIL_GLOBJECTSVISITOR
class GLObjectsVisitor(osg.NodeVisitor):
    """Proxy of C++ GLObjectsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLObjectsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLObjectsVisitor, name)
    __repr__ = _swig_repr
    SWITCH_ON_DISPLAY_LISTS = _osgUtil.GLObjectsVisitor_SWITCH_ON_DISPLAY_LISTS
    SWITCH_OFF_DISPLAY_LISTS = _osgUtil.GLObjectsVisitor_SWITCH_OFF_DISPLAY_LISTS
    COMPILE_DISPLAY_LISTS = _osgUtil.GLObjectsVisitor_COMPILE_DISPLAY_LISTS
    COMPILE_STATE_ATTRIBUTES = _osgUtil.GLObjectsVisitor_COMPILE_STATE_ATTRIBUTES
    RELEASE_DISPLAY_LISTS = _osgUtil.GLObjectsVisitor_RELEASE_DISPLAY_LISTS
    RELEASE_STATE_ATTRIBUTES = _osgUtil.GLObjectsVisitor_RELEASE_STATE_ATTRIBUTES
    SWITCH_ON_VERTEX_BUFFER_OBJECTS = _osgUtil.GLObjectsVisitor_SWITCH_ON_VERTEX_BUFFER_OBJECTS
    SWITCH_OFF_VERTEX_BUFFER_OBJECTS = _osgUtil.GLObjectsVisitor_SWITCH_OFF_VERTEX_BUFFER_OBJECTS
    CHECK_BLACK_LISTED_MODES = _osgUtil.GLObjectsVisitor_CHECK_BLACK_LISTED_MODES
    def __init__(self, *args): 
        """
        __init__(self, Mode mode=osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES|osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES) -> GLObjectsVisitor
        __init__(self) -> GLObjectsVisitor
        """
        this = _osgUtil.new_GLObjectsVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args):
        """reset(self)"""
        return _osgUtil.GLObjectsVisitor_reset(*args)

    def setMode(*args):
        """setMode(self, Mode mode)"""
        return _osgUtil.GLObjectsVisitor_setMode(*args)

    def getMode(*args):
        """getMode(self) -> Mode"""
        return _osgUtil.GLObjectsVisitor_getMode(*args)

    def setState(*args):
        """setState(self, State state)"""
        return _osgUtil.GLObjectsVisitor_setState(*args)

    def getState(*args):
        """getState(self) -> State"""
        return _osgUtil.GLObjectsVisitor_getState(*args)

    def setRenderInfo(*args):
        """setRenderInfo(self, RenderInfo renderInfo)"""
        return _osgUtil.GLObjectsVisitor_setRenderInfo(*args)

    def getRenderInfo(*args):
        """getRenderInfo(self) -> RenderInfo"""
        return _osgUtil.GLObjectsVisitor_getRenderInfo(*args)

    def apply(*args):
        """
        apply(self, Node node)
        apply(self, Geode node)
        apply(self, Drawable drawable)
        apply(self, StateSet stateset)
        """
        return _osgUtil.GLObjectsVisitor_apply(*args)

    __swig_destroy__ = _osgUtil.delete_GLObjectsVisitor
    __del__ = lambda self : None;
GLObjectsVisitor_swigregister = _osgUtil.GLObjectsVisitor_swigregister
GLObjectsVisitor_swigregister(GLObjectsVisitor)

class GLObjectsOperation(osg.GraphicsOperation):
    """Proxy of C++ GLObjectsOperation class"""
    __swig_setmethods__ = {}
    for _s in [osg.GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLObjectsOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLObjectsOperation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Mode mode=osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES|osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES) -> GLObjectsOperation
        __init__(self) -> GLObjectsOperation
        __init__(self, Node subgraph, Mode mode=osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS|osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES|osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES) -> GLObjectsOperation
        __init__(self, Node subgraph) -> GLObjectsOperation
        """
        this = _osgUtil.new_GLObjectsOperation(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args):
        """__call__(self, GraphicsContext context)"""
        return _osgUtil.GLObjectsOperation___call__(*args)

    __swig_destroy__ = _osgUtil.delete_GLObjectsOperation
    __del__ = lambda self : None;
GLObjectsOperation_swigregister = _osgUtil.GLObjectsOperation_swigregister
GLObjectsOperation_swigregister(GLObjectsOperation)

class HalfWayMapGenerator(CubeMapGenerator):
    """Proxy of C++ HalfWayMapGenerator class"""
    __swig_setmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HalfWayMapGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HalfWayMapGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Vec3 light_direction, int texture_size=64) -> HalfWayMapGenerator
        __init__(self, Vec3 light_direction) -> HalfWayMapGenerator
        __init__(self, HalfWayMapGenerator copy, CopyOp copyop) -> HalfWayMapGenerator
        """
        this = _osgUtil.new_HalfWayMapGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
HalfWayMapGenerator_swigregister = _osgUtil.HalfWayMapGenerator_swigregister
HalfWayMapGenerator_swigregister(HalfWayMapGenerator)

class HighlightMapGenerator(CubeMapGenerator):
    """Proxy of C++ HighlightMapGenerator class"""
    __swig_setmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighlightMapGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HighlightMapGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Vec3 light_direction, Vec4 light_color, float specular_exponent, 
            int texture_size=64) -> HighlightMapGenerator
        __init__(self, Vec3 light_direction, Vec4 light_color, float specular_exponent) -> HighlightMapGenerator
        __init__(self, HighlightMapGenerator copy, CopyOp copyop=SHALLOW_COPY) -> HighlightMapGenerator
        __init__(self, HighlightMapGenerator copy) -> HighlightMapGenerator
        """
        this = _osgUtil.new_HighlightMapGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
HighlightMapGenerator_swigregister = _osgUtil.HighlightMapGenerator_swigregister
HighlightMapGenerator_swigregister(HighlightMapGenerator)

class ReadCallback(osg.Referenced):
    """Proxy of C++ ReadCallback class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def readNodeFile(*args):
        """readNodeFile(self, string filename) -> Node"""
        return _osgUtil.ReadCallback_readNodeFile(*args)

    __swig_destroy__ = _osgUtil.delete_ReadCallback
    __del__ = lambda self : None;
ReadCallback_swigregister = _osgUtil.ReadCallback_swigregister
ReadCallback_swigregister(ReadCallback)

OSGUTIL_INTERSECTIONVISITOR = _osgUtil.OSGUTIL_INTERSECTIONVISITOR
class Intersector(osg.Referenced):
    """Proxy of C++ Intersector class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Intersector, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Intersector, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    WINDOW = _osgUtil.Intersector_WINDOW
    PROJECTION = _osgUtil.Intersector_PROJECTION
    VIEW = _osgUtil.Intersector_VIEW
    MODEL = _osgUtil.Intersector_MODEL
    def setCoordinateFrame(*args):
        """setCoordinateFrame(self, CoordinateFrame cf)"""
        return _osgUtil.Intersector_setCoordinateFrame(*args)

    def getCoordinateFrame(*args):
        """getCoordinateFrame(self) -> CoordinateFrame"""
        return _osgUtil.Intersector_getCoordinateFrame(*args)

    def clone(*args):
        """clone(self, IntersectionVisitor iv) -> Intersector"""
        return _osgUtil.Intersector_clone(*args)

    def enter(*args):
        """enter(self, Node node) -> bool"""
        return _osgUtil.Intersector_enter(*args)

    def leave(*args):
        """leave(self)"""
        return _osgUtil.Intersector_leave(*args)

    def intersect(*args):
        """intersect(self, IntersectionVisitor iv, Drawable drawable)"""
        return _osgUtil.Intersector_intersect(*args)

    def reset(*args):
        """reset(self)"""
        return _osgUtil.Intersector_reset(*args)

    def containsIntersections(*args):
        """containsIntersections(self) -> bool"""
        return _osgUtil.Intersector_containsIntersections(*args)

    def disabled(*args):
        """disabled(self) -> bool"""
        return _osgUtil.Intersector_disabled(*args)

    def incrementDisabledCount(*args):
        """incrementDisabledCount(self)"""
        return _osgUtil.Intersector_incrementDisabledCount(*args)

    def decrementDisabledCount(*args):
        """decrementDisabledCount(self)"""
        return _osgUtil.Intersector_decrementDisabledCount(*args)

    __swig_destroy__ = _osgUtil.delete_Intersector
    __del__ = lambda self : None;
Intersector_swigregister = _osgUtil.Intersector_swigregister
Intersector_swigregister(Intersector)

class IntersectorGroup(Intersector):
    """Proxy of C++ IntersectorGroup class"""
    __swig_setmethods__ = {}
    for _s in [Intersector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectorGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [Intersector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectorGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> IntersectorGroup"""
        this = _osgUtil.new_IntersectorGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def addIntersector(*args):
        """addIntersector(self, Intersector intersector)"""
        return _osgUtil.IntersectorGroup_addIntersector(*args)

    def getIntersectors(*args):
        """getIntersectors(self) -> Intersectors"""
        return _osgUtil.IntersectorGroup_getIntersectors(*args)

    def clear(*args):
        """clear(self)"""
        return _osgUtil.IntersectorGroup_clear(*args)

    def clone(*args):
        """clone(self, IntersectionVisitor iv) -> Intersector"""
        return _osgUtil.IntersectorGroup_clone(*args)

    def enter(*args):
        """enter(self, Node node) -> bool"""
        return _osgUtil.IntersectorGroup_enter(*args)

    def leave(*args):
        """leave(self)"""
        return _osgUtil.IntersectorGroup_leave(*args)

    def intersect(*args):
        """intersect(self, IntersectionVisitor iv, Drawable drawable)"""
        return _osgUtil.IntersectorGroup_intersect(*args)

    def reset(*args):
        """reset(self)"""
        return _osgUtil.IntersectorGroup_reset(*args)

    def containsIntersections(*args):
        """containsIntersections(self) -> bool"""
        return _osgUtil.IntersectorGroup_containsIntersections(*args)

    __swig_destroy__ = _osgUtil.delete_IntersectorGroup
    __del__ = lambda self : None;
IntersectorGroup_swigregister = _osgUtil.IntersectorGroup_swigregister
IntersectorGroup_swigregister(IntersectorGroup)

class IntersectionVisitor(osg.NodeVisitor):
    """Proxy of C++ IntersectionVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectionVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectionVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Intersector intersector=0, ReadCallback readCallback=0) -> IntersectionVisitor
        __init__(self, Intersector intersector=0) -> IntersectionVisitor
        __init__(self) -> IntersectionVisitor
        """
        this = _osgUtil.new_IntersectionVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args):
        """reset(self)"""
        return _osgUtil.IntersectionVisitor_reset(*args)

    def setIntersector(*args):
        """setIntersector(self, Intersector intersector)"""
        return _osgUtil.IntersectionVisitor_setIntersector(*args)

    def getIntersector(*args):
        """
        getIntersector(self) -> Intersector
        getIntersector(self) -> Intersector
        """
        return _osgUtil.IntersectionVisitor_getIntersector(*args)

    def setUseKdTreeWhenAvailable(*args):
        """setUseKdTreeWhenAvailable(self, bool useKdTrees)"""
        return _osgUtil.IntersectionVisitor_setUseKdTreeWhenAvailable(*args)

    def getUseKdTreeWhenAvailable(*args):
        """getUseKdTreeWhenAvailable(self) -> bool"""
        return _osgUtil.IntersectionVisitor_getUseKdTreeWhenAvailable(*args)

    def setDoDummyTraversal(*args):
        """setDoDummyTraversal(self, bool dummy)"""
        return _osgUtil.IntersectionVisitor_setDoDummyTraversal(*args)

    def getDoDummyTraversal(*args):
        """getDoDummyTraversal(self) -> bool"""
        return _osgUtil.IntersectionVisitor_getDoDummyTraversal(*args)

    def setReadCallback(*args):
        """setReadCallback(self, ReadCallback rc)"""
        return _osgUtil.IntersectionVisitor_setReadCallback(*args)

    def getReadCallback(*args):
        """
        getReadCallback(self) -> ReadCallback
        getReadCallback(self) -> ReadCallback
        """
        return _osgUtil.IntersectionVisitor_getReadCallback(*args)

    def pushWindowMatrix(*args):
        """
        pushWindowMatrix(self, RefMatrix matrix)
        pushWindowMatrix(self, Viewport viewport)
        """
        return _osgUtil.IntersectionVisitor_pushWindowMatrix(*args)

    def popWindowMatrix(*args):
        """popWindowMatrix(self)"""
        return _osgUtil.IntersectionVisitor_popWindowMatrix(*args)

    def getWindowMatrix(*args):
        """
        getWindowMatrix(self) -> RefMatrix
        getWindowMatrix(self) -> RefMatrix
        """
        return _osgUtil.IntersectionVisitor_getWindowMatrix(*args)

    def pushProjectionMatrix(*args):
        """pushProjectionMatrix(self, RefMatrix matrix)"""
        return _osgUtil.IntersectionVisitor_pushProjectionMatrix(*args)

    def popProjectionMatrix(*args):
        """popProjectionMatrix(self)"""
        return _osgUtil.IntersectionVisitor_popProjectionMatrix(*args)

    def getProjectionMatrix(*args):
        """
        getProjectionMatrix(self) -> RefMatrix
        getProjectionMatrix(self) -> RefMatrix
        """
        return _osgUtil.IntersectionVisitor_getProjectionMatrix(*args)

    def pushViewMatrix(*args):
        """pushViewMatrix(self, RefMatrix matrix)"""
        return _osgUtil.IntersectionVisitor_pushViewMatrix(*args)

    def popViewMatrix(*args):
        """popViewMatrix(self)"""
        return _osgUtil.IntersectionVisitor_popViewMatrix(*args)

    def getViewMatrix(*args):
        """
        getViewMatrix(self) -> RefMatrix
        getViewMatrix(self) -> RefMatrix
        """
        return _osgUtil.IntersectionVisitor_getViewMatrix(*args)

    def pushModelMatrix(*args):
        """pushModelMatrix(self, RefMatrix matrix)"""
        return _osgUtil.IntersectionVisitor_pushModelMatrix(*args)

    def popModelMatrix(*args):
        """popModelMatrix(self)"""
        return _osgUtil.IntersectionVisitor_popModelMatrix(*args)

    def getModelMatrix(*args):
        """
        getModelMatrix(self) -> RefMatrix
        getModelMatrix(self) -> RefMatrix
        """
        return _osgUtil.IntersectionVisitor_getModelMatrix(*args)

    def apply(*args):
        """
        apply(self, Node node)
        apply(self, Geode geode)
        apply(self, Billboard geode)
        apply(self, Group group)
        apply(self, LOD lod)
        apply(self, PagedLOD lod)
        apply(self, Transform transform)
        apply(self, Projection projection)
        apply(self, Camera camera)
        """
        return _osgUtil.IntersectionVisitor_apply(*args)

    __swig_destroy__ = _osgUtil.delete_IntersectionVisitor
    __del__ = lambda self : None;
IntersectionVisitor_swigregister = _osgUtil.IntersectionVisitor_swigregister
IntersectionVisitor_swigregister(IntersectionVisitor)

OSGUTIL_INTERSECTVISITOR = _osgUtil.OSGUTIL_INTERSECTVISITOR
class Hit(_object):
    """Proxy of C++ Hit class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Hit
        __init__(self, Hit hit) -> Hit
        """
        this = _osgUtil.new_Hit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_Hit
    __del__ = lambda self : None;
    def __lt__(*args):
        """__lt__(self, Hit hit) -> bool"""
        return _osgUtil.Hit___lt__(*args)

    def getLocalIntersectPoint(*args):
        """getLocalIntersectPoint(self) -> Vec3"""
        return _osgUtil.Hit_getLocalIntersectPoint(*args)

    def getLocalIntersectNormal(*args):
        """getLocalIntersectNormal(self) -> Vec3"""
        return _osgUtil.Hit_getLocalIntersectNormal(*args)

    def getWorldIntersectPoint(*args):
        """getWorldIntersectPoint(self) -> Vec3"""
        return _osgUtil.Hit_getWorldIntersectPoint(*args)

    def getWorldIntersectNormal(*args):
        """getWorldIntersectNormal(self) -> Vec3"""
        return _osgUtil.Hit_getWorldIntersectNormal(*args)

    def getRatio(*args):
        """getRatio(self) -> float"""
        return _osgUtil.Hit_getRatio(*args)

    def getOriginalLineSegment(*args):
        """getOriginalLineSegment(self) -> osg::LineSegment"""
        return _osgUtil.Hit_getOriginalLineSegment(*args)

    def getLocalLineSegment(*args):
        """getLocalLineSegment(self) -> osg::LineSegment"""
        return _osgUtil.Hit_getLocalLineSegment(*args)

    def getNodePath(*args):
        """
        getNodePath(self) -> NodePath
        getNodePath(self) -> NodePath
        """
        return _osgUtil.Hit_getNodePath(*args)

    def getGeode(*args):
        """
        getGeode(self) -> Geode
        getGeode(self) -> Geode
        """
        return _osgUtil.Hit_getGeode(*args)

    def getDrawable(*args):
        """
        getDrawable(self) -> Drawable
        getDrawable(self) -> Drawable
        """
        return _osgUtil.Hit_getDrawable(*args)

    def getMatrix(*args):
        """getMatrix(self) -> RefMatrix"""
        return _osgUtil.Hit_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> RefMatrix"""
        return _osgUtil.Hit_getInverseMatrix(*args)

    def getVecIndexList(*args):
        """getVecIndexList(self) -> VecIndexList"""
        return _osgUtil.Hit_getVecIndexList(*args)

    def getPrimitiveIndex(*args):
        """getPrimitiveIndex(self) -> int"""
        return _osgUtil.Hit_getPrimitiveIndex(*args)

    __swig_setmethods__["_ratio"] = _osgUtil.Hit__ratio_set
    __swig_getmethods__["_ratio"] = _osgUtil.Hit__ratio_get
    if _newclass:_ratio = _swig_property(_osgUtil.Hit__ratio_get, _osgUtil.Hit__ratio_set)
    __swig_setmethods__["_originalLineSegment"] = _osgUtil.Hit__originalLineSegment_set
    __swig_getmethods__["_originalLineSegment"] = _osgUtil.Hit__originalLineSegment_get
    if _newclass:_originalLineSegment = _swig_property(_osgUtil.Hit__originalLineSegment_get, _osgUtil.Hit__originalLineSegment_set)
    __swig_setmethods__["_localLineSegment"] = _osgUtil.Hit__localLineSegment_set
    __swig_getmethods__["_localLineSegment"] = _osgUtil.Hit__localLineSegment_get
    if _newclass:_localLineSegment = _swig_property(_osgUtil.Hit__localLineSegment_get, _osgUtil.Hit__localLineSegment_set)
    __swig_setmethods__["_nodePath"] = _osgUtil.Hit__nodePath_set
    __swig_getmethods__["_nodePath"] = _osgUtil.Hit__nodePath_get
    if _newclass:_nodePath = _swig_property(_osgUtil.Hit__nodePath_get, _osgUtil.Hit__nodePath_set)
    __swig_setmethods__["_geode"] = _osgUtil.Hit__geode_set
    __swig_getmethods__["_geode"] = _osgUtil.Hit__geode_get
    if _newclass:_geode = _swig_property(_osgUtil.Hit__geode_get, _osgUtil.Hit__geode_set)
    __swig_setmethods__["_drawable"] = _osgUtil.Hit__drawable_set
    __swig_getmethods__["_drawable"] = _osgUtil.Hit__drawable_get
    if _newclass:_drawable = _swig_property(_osgUtil.Hit__drawable_get, _osgUtil.Hit__drawable_set)
    __swig_setmethods__["_matrix"] = _osgUtil.Hit__matrix_set
    __swig_getmethods__["_matrix"] = _osgUtil.Hit__matrix_get
    if _newclass:_matrix = _swig_property(_osgUtil.Hit__matrix_get, _osgUtil.Hit__matrix_set)
    __swig_setmethods__["_inverse"] = _osgUtil.Hit__inverse_set
    __swig_getmethods__["_inverse"] = _osgUtil.Hit__inverse_get
    if _newclass:_inverse = _swig_property(_osgUtil.Hit__inverse_get, _osgUtil.Hit__inverse_set)
    __swig_setmethods__["_vecIndexList"] = _osgUtil.Hit__vecIndexList_set
    __swig_getmethods__["_vecIndexList"] = _osgUtil.Hit__vecIndexList_get
    if _newclass:_vecIndexList = _swig_property(_osgUtil.Hit__vecIndexList_get, _osgUtil.Hit__vecIndexList_set)
    __swig_setmethods__["_primitiveIndex"] = _osgUtil.Hit__primitiveIndex_set
    __swig_getmethods__["_primitiveIndex"] = _osgUtil.Hit__primitiveIndex_get
    if _newclass:_primitiveIndex = _swig_property(_osgUtil.Hit__primitiveIndex_get, _osgUtil.Hit__primitiveIndex_set)
    __swig_setmethods__["_intersectPoint"] = _osgUtil.Hit__intersectPoint_set
    __swig_getmethods__["_intersectPoint"] = _osgUtil.Hit__intersectPoint_get
    if _newclass:_intersectPoint = _swig_property(_osgUtil.Hit__intersectPoint_get, _osgUtil.Hit__intersectPoint_set)
    __swig_setmethods__["_intersectNormal"] = _osgUtil.Hit__intersectNormal_set
    __swig_getmethods__["_intersectNormal"] = _osgUtil.Hit__intersectNormal_get
    if _newclass:_intersectNormal = _swig_property(_osgUtil.Hit__intersectNormal_get, _osgUtil.Hit__intersectNormal_set)
Hit_swigregister = _osgUtil.Hit_swigregister
Hit_swigregister(Hit)

class IntersectVisitor(osg.NodeVisitor):
    """Proxy of C++ IntersectVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> IntersectVisitor"""
        this = _osgUtil.new_IntersectVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_IntersectVisitor
    __del__ = lambda self : None;
    def reset(*args):
        """reset(self)"""
        return _osgUtil.IntersectVisitor_reset(*args)

    def addLineSegment(*args):
        """addLineSegment(self, osg::LineSegment seg)"""
        return _osgUtil.IntersectVisitor_addLineSegment(*args)

    def getHitList(*args):
        """getHitList(self, osg::LineSegment seg) -> HitList"""
        return _osgUtil.IntersectVisitor_getHitList(*args)

    def getNumHits(*args):
        """getNumHits(self, osg::LineSegment seg) -> int"""
        return _osgUtil.IntersectVisitor_getNumHits(*args)

    def getSegHitList(*args):
        """getSegHitList(self) -> LineSegmentHitListMap"""
        return _osgUtil.IntersectVisitor_getSegHitList(*args)

    def hits(*args):
        """hits(self) -> bool"""
        return _osgUtil.IntersectVisitor_hits(*args)

    USE_HIGHEST_LEVEL_OF_DETAIL = _osgUtil.IntersectVisitor_USE_HIGHEST_LEVEL_OF_DETAIL
    USE_SEGMENT_START_POINT_AS_EYE_POINT_FOR_LOD_LEVEL_SELECTION = _osgUtil.IntersectVisitor_USE_SEGMENT_START_POINT_AS_EYE_POINT_FOR_LOD_LEVEL_SELECTION
    def setLODSelectionMode(*args):
        """setLODSelectionMode(self, LODSelectionMode mode)"""
        return _osgUtil.IntersectVisitor_setLODSelectionMode(*args)

    def getLODSelectionMode(*args):
        """getLODSelectionMode(self) -> LODSelectionMode"""
        return _osgUtil.IntersectVisitor_getLODSelectionMode(*args)

    def setEyePoint(*args):
        """setEyePoint(self, Vec3 eye)"""
        return _osgUtil.IntersectVisitor_setEyePoint(*args)

    def getEyePoint(*args):
        """getEyePoint(self) -> Vec3"""
        return _osgUtil.IntersectVisitor_getEyePoint(*args)

    def getDistanceToEyePoint(*args):
        """getDistanceToEyePoint(self, Vec3 pos, bool withLODScale) -> float"""
        return _osgUtil.IntersectVisitor_getDistanceToEyePoint(*args)

    def apply(*args):
        """
        apply(self, Node ?)
        apply(self, Geode node)
        apply(self, Billboard node)
        apply(self, Group node)
        apply(self, Transform node)
        apply(self, Switch node)
        apply(self, LOD node)
        """
        return _osgUtil.IntersectVisitor_apply(*args)

IntersectVisitor_swigregister = _osgUtil.IntersectVisitor_swigregister
IntersectVisitor_swigregister(IntersectVisitor)

class PickVisitor(IntersectVisitor):
    """Proxy of C++ PickVisitor class"""
    __swig_setmethods__ = {}
    for _s in [IntersectVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PickVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntersectVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Viewport viewport, Matrixd proj, Matrixd view, float mx, 
            float my) -> PickVisitor
        """
        this = _osgUtil.new_PickVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def runNestedPickVisitor(*args):
        """
        runNestedPickVisitor(self, Node node, Viewport viewport, Matrix proj, Matrix view, 
            float mx, float my)
        """
        return _osgUtil.PickVisitor_runNestedPickVisitor(*args)

    def apply(*args):
        """
        apply(self, Projection projection)
        apply(self, Camera camera)
        """
        return _osgUtil.PickVisitor_apply(*args)

    __swig_destroy__ = _osgUtil.delete_PickVisitor
    __del__ = lambda self : None;
PickVisitor_swigregister = _osgUtil.PickVisitor_swigregister
PickVisitor_swigregister(PickVisitor)

class BaseOptimizerVisitor(osg.NodeVisitor):
    """Proxy of C++ BaseOptimizerVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseOptimizerVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseOptimizerVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Optimizer optimizer, unsigned int operation) -> BaseOptimizerVisitor"""
        this = _osgUtil.new_BaseOptimizerVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def isOperationPermissibleForObject(*args):
        """
        isOperationPermissibleForObject(self, StateSet object) -> bool
        isOperationPermissibleForObject(self, StateAttribute object) -> bool
        isOperationPermissibleForObject(self, Drawable object) -> bool
        isOperationPermissibleForObject(self, Node object) -> bool
        """
        return _osgUtil.BaseOptimizerVisitor_isOperationPermissibleForObject(*args)

    __swig_destroy__ = _osgUtil.delete_BaseOptimizerVisitor
    __del__ = lambda self : None;
BaseOptimizerVisitor_swigregister = _osgUtil.BaseOptimizerVisitor_swigregister
BaseOptimizerVisitor_swigregister(BaseOptimizerVisitor)

class Optimizer(_object):
    """Proxy of C++ Optimizer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optimizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Optimizer"""
        this = _osgUtil.new_Optimizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_Optimizer
    __del__ = lambda self : None;
    FLATTEN_STATIC_TRANSFORMS = _osgUtil.Optimizer_FLATTEN_STATIC_TRANSFORMS
    REMOVE_REDUNDANT_NODES = _osgUtil.Optimizer_REMOVE_REDUNDANT_NODES
    REMOVE_LOADED_PROXY_NODES = _osgUtil.Optimizer_REMOVE_LOADED_PROXY_NODES
    COMBINE_ADJACENT_LODS = _osgUtil.Optimizer_COMBINE_ADJACENT_LODS
    SHARE_DUPLICATE_STATE = _osgUtil.Optimizer_SHARE_DUPLICATE_STATE
    MERGE_GEOMETRY = _osgUtil.Optimizer_MERGE_GEOMETRY
    CHECK_GEOMETRY = _osgUtil.Optimizer_CHECK_GEOMETRY
    SPATIALIZE_GROUPS = _osgUtil.Optimizer_SPATIALIZE_GROUPS
    COPY_SHARED_NODES = _osgUtil.Optimizer_COPY_SHARED_NODES
    TRISTRIP_GEOMETRY = _osgUtil.Optimizer_TRISTRIP_GEOMETRY
    TESSELLATE_GEOMETRY = _osgUtil.Optimizer_TESSELLATE_GEOMETRY
    OPTIMIZE_TEXTURE_SETTINGS = _osgUtil.Optimizer_OPTIMIZE_TEXTURE_SETTINGS
    MERGE_GEODES = _osgUtil.Optimizer_MERGE_GEODES
    FLATTEN_BILLBOARDS = _osgUtil.Optimizer_FLATTEN_BILLBOARDS
    TEXTURE_ATLAS_BUILDER = _osgUtil.Optimizer_TEXTURE_ATLAS_BUILDER
    STATIC_OBJECT_DETECTION = _osgUtil.Optimizer_STATIC_OBJECT_DETECTION
    FLATTEN_STATIC_TRANSFORMS_DUPLICATING_SHARED_SUBGRAPHS = _osgUtil.Optimizer_FLATTEN_STATIC_TRANSFORMS_DUPLICATING_SHARED_SUBGRAPHS
    DEFAULT_OPTIMIZATIONS = _osgUtil.Optimizer_DEFAULT_OPTIMIZATIONS
    ALL_OPTIMIZATIONS = _osgUtil.Optimizer_ALL_OPTIMIZATIONS
    def reset(*args):
        """reset(self)"""
        return _osgUtil.Optimizer_reset(*args)

    def optimize(*args):
        """
        optimize(self, Node node)
        optimize(self, Node node, unsigned int options)
        """
        return _osgUtil.Optimizer_optimize(*args)

    def setPermissibleOptimizationsForObject(*args):
        """setPermissibleOptimizationsForObject(self, Object object, unsigned int options)"""
        return _osgUtil.Optimizer_setPermissibleOptimizationsForObject(*args)

    def getPermissibleOptimizationsForObject(*args):
        """getPermissibleOptimizationsForObject(self, Object object) -> unsigned int"""
        return _osgUtil.Optimizer_getPermissibleOptimizationsForObject(*args)

    def isOperationPermissibleForObject(*args):
        """
        isOperationPermissibleForObject(self, StateSet object, unsigned int option) -> bool
        isOperationPermissibleForObject(self, StateAttribute object, unsigned int option) -> bool
        isOperationPermissibleForObject(self, Drawable object, unsigned int option) -> bool
        isOperationPermissibleForObject(self, Node object, unsigned int option) -> bool
        """
        return _osgUtil.Optimizer_isOperationPermissibleForObject(*args)

    def isOperationPermissibleForObjectImplementation(*args):
        """
        isOperationPermissibleForObjectImplementation(self, StateSet stateset, unsigned int option) -> bool
        isOperationPermissibleForObjectImplementation(self, StateAttribute attribute, unsigned int option) -> bool
        isOperationPermissibleForObjectImplementation(self, Drawable drawable, unsigned int option) -> bool
        isOperationPermissibleForObjectImplementation(self, Node node, unsigned int option) -> bool
        """
        return _osgUtil.Optimizer_isOperationPermissibleForObjectImplementation(*args)

Optimizer_swigregister = _osgUtil.Optimizer_swigregister
Optimizer_swigregister(Optimizer)

class ReflectionMapGenerator(CubeMapGenerator):
    """Proxy of C++ ReflectionMapGenerator class"""
    __swig_setmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReflectionMapGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [CubeMapGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReflectionMapGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int texture_size=64) -> ReflectionMapGenerator
        __init__(self) -> ReflectionMapGenerator
        __init__(self, ReflectionMapGenerator copy, CopyOp copyop=SHALLOW_COPY) -> ReflectionMapGenerator
        __init__(self, ReflectionMapGenerator copy) -> ReflectionMapGenerator
        """
        this = _osgUtil.new_ReflectionMapGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
ReflectionMapGenerator_swigregister = _osgUtil.ReflectionMapGenerator_swigregister
ReflectionMapGenerator_swigregister(ReflectionMapGenerator)

OSGUTIL_SCENEVIEW = _osgUtil.OSGUTIL_SCENEVIEW
class SceneView(osg.Object,osg.CullSettings):
    """Proxy of C++ SceneView class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object,osg.CullSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneView, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object,osg.CullSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SceneView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, DisplaySettings ds=None) -> SceneView
        __init__(self) -> SceneView
        __init__(self, SceneView sceneview, CopyOp copyop=osg::CopyOp()) -> SceneView
        __init__(self, SceneView sceneview) -> SceneView
        """
        this = _osgUtil.new_SceneView(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgUtil.SceneView_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgUtil.SceneView_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgUtil.SceneView_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgUtil.SceneView_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgUtil.SceneView_className(*args)

    NO_SCENEVIEW_LIGHT = _osgUtil.SceneView_NO_SCENEVIEW_LIGHT
    HEADLIGHT = _osgUtil.SceneView_HEADLIGHT
    SKY_LIGHT = _osgUtil.SceneView_SKY_LIGHT
    COMPILE_GLOBJECTS_AT_INIT = _osgUtil.SceneView_COMPILE_GLOBJECTS_AT_INIT
    STANDARD_SETTINGS = _osgUtil.SceneView_STANDARD_SETTINGS
    def setDefaults(*args):
        """
        setDefaults(self)
        setDefaults(self, unsigned int options)
        """
        return _osgUtil.SceneView_setDefaults(*args)

    def setCamera(*args):
        """
        setCamera(self, Camera camera, bool assumeOwnershipOfCamera=True)
        setCamera(self, Camera camera)
        """
        return _osgUtil.SceneView_setCamera(*args)

    def getCamera(*args):
        """
        getCamera(self) -> Camera
        getCamera(self) -> Camera
        """
        return _osgUtil.SceneView_getCamera(*args)

    def setSceneData(*args):
        """setSceneData(self, Node node)"""
        return _osgUtil.SceneView_setSceneData(*args)

    def getSceneData(*args):
        """
        getSceneData(self, unsigned int childNo=0) -> Node
        getSceneData(self) -> Node
        getSceneData(self, unsigned int childNo=0) -> Node
        getSceneData(self) -> Node
        """
        return _osgUtil.SceneView_getSceneData(*args)

    def getNumSceneData(*args):
        """getNumSceneData(self) -> unsigned int"""
        return _osgUtil.SceneView_getNumSceneData(*args)

    def setViewport(*args):
        """
        setViewport(self, Viewport viewport)
        setViewport(self, int x, int y, int width, int height)
        """
        return _osgUtil.SceneView_setViewport(*args)

    def getViewport(*args):
        """
        getViewport(self) -> Viewport
        getViewport(self) -> Viewport
        """
        return _osgUtil.SceneView_getViewport(*args)

    def setDisplaySettings(*args):
        """setDisplaySettings(self, DisplaySettings vs)"""
        return _osgUtil.SceneView_setDisplaySettings(*args)

    def getDisplaySettings(*args):
        """
        getDisplaySettings(self) -> DisplaySettings
        getDisplaySettings(self) -> DisplaySettings
        """
        return _osgUtil.SceneView_getDisplaySettings(*args)

    def setClearColor(*args):
        """setClearColor(self, Vec4 color)"""
        return _osgUtil.SceneView_setClearColor(*args)

    def getClearColor(*args):
        """getClearColor(self) -> Vec4"""
        return _osgUtil.SceneView_getClearColor(*args)

    def setRedrawInterlacedStereoStencilMask(*args):
        """setRedrawInterlacedStereoStencilMask(self, bool flag)"""
        return _osgUtil.SceneView_setRedrawInterlacedStereoStencilMask(*args)

    def getRedrawInterlacedStereoStencilMask(*args):
        """getRedrawInterlacedStereoStencilMask(self) -> bool"""
        return _osgUtil.SceneView_getRedrawInterlacedStereoStencilMask(*args)

    def setGlobalStateSet(*args):
        """setGlobalStateSet(self, StateSet state)"""
        return _osgUtil.SceneView_setGlobalStateSet(*args)

    def getGlobalStateSet(*args):
        """
        getGlobalStateSet(self) -> StateSet
        getGlobalStateSet(self) -> StateSet
        """
        return _osgUtil.SceneView_getGlobalStateSet(*args)

    def setLocalStateSet(*args):
        """setLocalStateSet(self, StateSet state)"""
        return _osgUtil.SceneView_setLocalStateSet(*args)

    def getLocalStateSet(*args):
        """
        getLocalStateSet(self) -> StateSet
        getLocalStateSet(self) -> StateSet
        """
        return _osgUtil.SceneView_getLocalStateSet(*args)

    FRAME_NUMBER_UNIFORM = _osgUtil.SceneView_FRAME_NUMBER_UNIFORM
    FRAME_TIME_UNIFORM = _osgUtil.SceneView_FRAME_TIME_UNIFORM
    DELTA_FRAME_TIME_UNIFORM = _osgUtil.SceneView_DELTA_FRAME_TIME_UNIFORM
    SIMULATION_TIME_UNIFORM = _osgUtil.SceneView_SIMULATION_TIME_UNIFORM
    DELTA_SIMULATION_TIME_UNIFORM = _osgUtil.SceneView_DELTA_SIMULATION_TIME_UNIFORM
    VIEW_MATRIX_UNIFORM = _osgUtil.SceneView_VIEW_MATRIX_UNIFORM
    VIEW_MATRIX_INVERSE_UNIFORM = _osgUtil.SceneView_VIEW_MATRIX_INVERSE_UNIFORM
    DEFAULT_UNIFORMS = _osgUtil.SceneView_DEFAULT_UNIFORMS
    ALL_UNIFORMS = _osgUtil.SceneView_ALL_UNIFORMS
    def setActiveUniforms(*args):
        """setActiveUniforms(self, int activeUniforms)"""
        return _osgUtil.SceneView_setActiveUniforms(*args)

    def getActiveUniforms(*args):
        """getActiveUniforms(self) -> int"""
        return _osgUtil.SceneView_getActiveUniforms(*args)

    def updateUniforms(*args):
        """updateUniforms(self)"""
        return _osgUtil.SceneView_updateUniforms(*args)

    def setLightingMode(*args):
        """setLightingMode(self, LightingMode mode)"""
        return _osgUtil.SceneView_setLightingMode(*args)

    def getLightingMode(*args):
        """getLightingMode(self) -> LightingMode"""
        return _osgUtil.SceneView_getLightingMode(*args)

    def setLight(*args):
        """setLight(self, Light light)"""
        return _osgUtil.SceneView_setLight(*args)

    def getLight(*args):
        """
        getLight(self) -> Light
        getLight(self) -> Light
        """
        return _osgUtil.SceneView_getLight(*args)

    def setState(*args):
        """setState(self, State state)"""
        return _osgUtil.SceneView_setState(*args)

    def getState(*args):
        """
        getState(self) -> State
        getState(self) -> State
        """
        return _osgUtil.SceneView_getState(*args)

    def setView(*args):
        """setView(self, View view)"""
        return _osgUtil.SceneView_setView(*args)

    def getView(*args):
        """
        getView(self) -> View
        getView(self) -> View
        """
        return _osgUtil.SceneView_getView(*args)

    def setRenderInfo(*args):
        """setRenderInfo(self, RenderInfo renderInfo)"""
        return _osgUtil.SceneView_setRenderInfo(*args)

    def getRenderInfo(*args):
        """
        getRenderInfo(self) -> RenderInfo
        getRenderInfo(self) -> RenderInfo
        """
        return _osgUtil.SceneView_getRenderInfo(*args)

    def setProjectionMatrix(*args):
        """
        setProjectionMatrix(self, Matrixf matrix)
        setProjectionMatrix(self, Matrixd matrix)
        """
        return _osgUtil.SceneView_setProjectionMatrix(*args)

    def setProjectionMatrixAsOrtho(*args):
        """
        setProjectionMatrixAsOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osgUtil.SceneView_setProjectionMatrixAsOrtho(*args)

    def setProjectionMatrixAsOrtho2D(*args):
        """setProjectionMatrixAsOrtho2D(self, double left, double right, double bottom, double top)"""
        return _osgUtil.SceneView_setProjectionMatrixAsOrtho2D(*args)

    def setProjectionMatrixAsFrustum(*args):
        """
        setProjectionMatrixAsFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osgUtil.SceneView_setProjectionMatrixAsFrustum(*args)

    def setProjectionMatrixAsPerspective(*args):
        """setProjectionMatrixAsPerspective(self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osgUtil.SceneView_setProjectionMatrixAsPerspective(*args)

    def getProjectionMatrix(*args):
        """
        getProjectionMatrix(self) -> Matrixd
        getProjectionMatrix(self) -> Matrixd
        """
        return _osgUtil.SceneView_getProjectionMatrix(*args)

    def getProjectionMatrixAsOrtho(*args):
        """
        getProjectionMatrixAsOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osgUtil.SceneView_getProjectionMatrixAsOrtho(*args)

    def getProjectionMatrixAsFrustum(*args):
        """
        getProjectionMatrixAsFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osgUtil.SceneView_getProjectionMatrixAsFrustum(*args)

    def getProjectionMatrixAsPerspective(*args):
        """getProjectionMatrixAsPerspective(self, double fovy, double aspectRatio, double zNear, double zFar) -> bool"""
        return _osgUtil.SceneView_getProjectionMatrixAsPerspective(*args)

    def setViewMatrix(*args):
        """
        setViewMatrix(self, Matrixf matrix)
        setViewMatrix(self, Matrixd matrix)
        """
        return _osgUtil.SceneView_setViewMatrix(*args)

    def setViewMatrixAsLookAt(*args):
        """setViewMatrixAsLookAt(self, Vec3 eye, Vec3 center, Vec3 up)"""
        return _osgUtil.SceneView_setViewMatrixAsLookAt(*args)

    def getViewMatrix(*args):
        """
        getViewMatrix(self) -> Matrixd
        getViewMatrix(self) -> Matrixd
        """
        return _osgUtil.SceneView_getViewMatrix(*args)

    def getViewMatrixAsLookAt(*args):
        """
        getViewMatrixAsLookAt(self, Vec3 eye, Vec3 center, Vec3 up, float lookDistance=1.0)
        getViewMatrixAsLookAt(self, Vec3 eye, Vec3 center, Vec3 up)
        """
        return _osgUtil.SceneView_getViewMatrixAsLookAt(*args)

    def setInitVisitor(*args):
        """setInitVisitor(self, NodeVisitor av)"""
        return _osgUtil.SceneView_setInitVisitor(*args)

    def getInitVisitor(*args):
        """
        getInitVisitor(self) -> NodeVisitor
        getInitVisitor(self) -> NodeVisitor
        """
        return _osgUtil.SceneView_getInitVisitor(*args)

    def setUpdateVisitor(*args):
        """setUpdateVisitor(self, NodeVisitor av)"""
        return _osgUtil.SceneView_setUpdateVisitor(*args)

    def getUpdateVisitor(*args):
        """
        getUpdateVisitor(self) -> NodeVisitor
        getUpdateVisitor(self) -> NodeVisitor
        """
        return _osgUtil.SceneView_getUpdateVisitor(*args)

    def setCullVisitor(*args):
        """setCullVisitor(self, CullVisitor cv)"""
        return _osgUtil.SceneView_setCullVisitor(*args)

    def getCullVisitor(*args):
        """
        getCullVisitor(self) -> CullVisitor
        getCullVisitor(self) -> CullVisitor
        """
        return _osgUtil.SceneView_getCullVisitor(*args)

    def setCullVisitorLeft(*args):
        """setCullVisitorLeft(self, CullVisitor cv)"""
        return _osgUtil.SceneView_setCullVisitorLeft(*args)

    def getCullVisitorLeft(*args):
        """
        getCullVisitorLeft(self) -> CullVisitor
        getCullVisitorLeft(self) -> CullVisitor
        """
        return _osgUtil.SceneView_getCullVisitorLeft(*args)

    def setCullVisitorRight(*args):
        """setCullVisitorRight(self, CullVisitor cv)"""
        return _osgUtil.SceneView_setCullVisitorRight(*args)

    def getCullVisitorRight(*args):
        """
        getCullVisitorRight(self) -> CullVisitor
        getCullVisitorRight(self) -> CullVisitor
        """
        return _osgUtil.SceneView_getCullVisitorRight(*args)

    def setCollectOccludersVisitor(*args):
        """setCollectOccludersVisitor(self, osg::CollectOccludersVisitor cov)"""
        return _osgUtil.SceneView_setCollectOccludersVisitor(*args)

    def getCollectOccludersVisitor(*args):
        """
        getCollectOccludersVisitor(self) -> osg::CollectOccludersVisitor
        getCollectOccludersVisitor(self) -> osg::CollectOccludersVisitor
        """
        return _osgUtil.SceneView_getCollectOccludersVisitor(*args)

    def setStateGraph(*args):
        """setStateGraph(self, StateGraph rg)"""
        return _osgUtil.SceneView_setStateGraph(*args)

    def getStateGraph(*args):
        """
        getStateGraph(self) -> StateGraph
        getStateGraph(self) -> StateGraph
        """
        return _osgUtil.SceneView_getStateGraph(*args)

    def setStateGraphLeft(*args):
        """setStateGraphLeft(self, StateGraph rg)"""
        return _osgUtil.SceneView_setStateGraphLeft(*args)

    def getStateGraphLeft(*args):
        """
        getStateGraphLeft(self) -> StateGraph
        getStateGraphLeft(self) -> StateGraph
        """
        return _osgUtil.SceneView_getStateGraphLeft(*args)

    def setStateGraphRight(*args):
        """setStateGraphRight(self, StateGraph rg)"""
        return _osgUtil.SceneView_setStateGraphRight(*args)

    def getStateGraphRight(*args):
        """
        getStateGraphRight(self) -> StateGraph
        getStateGraphRight(self) -> StateGraph
        """
        return _osgUtil.SceneView_getStateGraphRight(*args)

    def setRenderStage(*args):
        """setRenderStage(self, RenderStage rs)"""
        return _osgUtil.SceneView_setRenderStage(*args)

    def getRenderStage(*args):
        """
        getRenderStage(self) -> RenderStage
        getRenderStage(self) -> RenderStage
        """
        return _osgUtil.SceneView_getRenderStage(*args)

    def setRenderStageLeft(*args):
        """setRenderStageLeft(self, RenderStage rs)"""
        return _osgUtil.SceneView_setRenderStageLeft(*args)

    def getRenderStageLeft(*args):
        """
        getRenderStageLeft(self) -> RenderStage
        getRenderStageLeft(self) -> RenderStage
        """
        return _osgUtil.SceneView_getRenderStageLeft(*args)

    def setRenderStageRight(*args):
        """setRenderStageRight(self, RenderStage rs)"""
        return _osgUtil.SceneView_setRenderStageRight(*args)

    def getRenderStageRight(*args):
        """
        getRenderStageRight(self) -> RenderStage
        getRenderStageRight(self) -> RenderStage
        """
        return _osgUtil.SceneView_getRenderStageRight(*args)

    def setDrawBufferValue(*args):
        """setDrawBufferValue(self, GLenum drawBufferValue)"""
        return _osgUtil.SceneView_setDrawBufferValue(*args)

    def getDrawBufferValue(*args):
        """getDrawBufferValue(self) -> GLenum"""
        return _osgUtil.SceneView_getDrawBufferValue(*args)

    USE_FUSION_DISTANCE_VALUE = _osgUtil.SceneView_USE_FUSION_DISTANCE_VALUE
    PROPORTIONAL_TO_SCREEN_DISTANCE = _osgUtil.SceneView_PROPORTIONAL_TO_SCREEN_DISTANCE
    def setFusionDistance(*args):
        """
        setFusionDistance(self, FusionDistanceMode mode, float value=1.0)
        setFusionDistance(self, FusionDistanceMode mode)
        """
        return _osgUtil.SceneView_setFusionDistance(*args)

    def getFusionDistanceMode(*args):
        """getFusionDistanceMode(self) -> FusionDistanceMode"""
        return _osgUtil.SceneView_getFusionDistanceMode(*args)

    def getFusionDistanceValue(*args):
        """getFusionDistanceValue(self) -> float"""
        return _osgUtil.SceneView_getFusionDistanceValue(*args)

    def setPrioritizeTextures(*args):
        """setPrioritizeTextures(self, bool pt)"""
        return _osgUtil.SceneView_setPrioritizeTextures(*args)

    def getPrioritizeTextures(*args):
        """getPrioritizeTextures(self) -> bool"""
        return _osgUtil.SceneView_getPrioritizeTextures(*args)

    def projectWindowIntoObject(*args):
        """projectWindowIntoObject(self, Vec3 window, Vec3 object) -> bool"""
        return _osgUtil.SceneView_projectWindowIntoObject(*args)

    def projectWindowXYIntoObject(*args):
        """projectWindowXYIntoObject(self, int x, int y, Vec3 near_point, Vec3 far_point) -> bool"""
        return _osgUtil.SceneView_projectWindowXYIntoObject(*args)

    def projectObjectIntoWindow(*args):
        """projectObjectIntoWindow(self, Vec3 object, Vec3 window) -> bool"""
        return _osgUtil.SceneView_projectObjectIntoWindow(*args)

    def setFrameStamp(*args):
        """setFrameStamp(self, FrameStamp fs)"""
        return _osgUtil.SceneView_setFrameStamp(*args)

    def getFrameStamp(*args):
        """getFrameStamp(self) -> FrameStamp"""
        return _osgUtil.SceneView_getFrameStamp(*args)

    def computeLeftEyeProjection(*args):
        """computeLeftEyeProjection(self, Matrixd projection) -> Matrixd"""
        return _osgUtil.SceneView_computeLeftEyeProjection(*args)

    def computeLeftEyeView(*args):
        """computeLeftEyeView(self, Matrixd view) -> Matrixd"""
        return _osgUtil.SceneView_computeLeftEyeView(*args)

    def computeRightEyeProjection(*args):
        """computeRightEyeProjection(self, Matrixd projection) -> Matrixd"""
        return _osgUtil.SceneView_computeRightEyeProjection(*args)

    def computeRightEyeView(*args):
        """computeRightEyeView(self, Matrixd view) -> Matrixd"""
        return _osgUtil.SceneView_computeRightEyeView(*args)

    def computeLeftEyeProjectionImplementation(*args):
        """computeLeftEyeProjectionImplementation(self, Matrixd projection) -> Matrixd"""
        return _osgUtil.SceneView_computeLeftEyeProjectionImplementation(*args)

    def computeLeftEyeViewImplementation(*args):
        """computeLeftEyeViewImplementation(self, Matrixd view) -> Matrixd"""
        return _osgUtil.SceneView_computeLeftEyeViewImplementation(*args)

    def computeRightEyeProjectionImplementation(*args):
        """computeRightEyeProjectionImplementation(self, Matrixd projection) -> Matrixd"""
        return _osgUtil.SceneView_computeRightEyeProjectionImplementation(*args)

    def computeRightEyeViewImplementation(*args):
        """computeRightEyeViewImplementation(self, Matrixd view) -> Matrixd"""
        return _osgUtil.SceneView_computeRightEyeViewImplementation(*args)

    def inheritCullSettings(*args):
        """
        inheritCullSettings(self, CullSettings settings)
        inheritCullSettings(self, CullSettings settings, unsigned int inheritanceMask)
        """
        return _osgUtil.SceneView_inheritCullSettings(*args)

    def init(*args):
        """init(self)"""
        return _osgUtil.SceneView_init(*args)

    def update(*args):
        """update(self)"""
        return _osgUtil.SceneView_update(*args)

    def cull(*args):
        """cull(self)"""
        return _osgUtil.SceneView_cull(*args)

    def draw(*args):
        """draw(self)"""
        return _osgUtil.SceneView_draw(*args)

    def getDynamicObjectCount(*args):
        """getDynamicObjectCount(self) -> unsigned int"""
        return _osgUtil.SceneView_getDynamicObjectCount(*args)

    def releaseAllGLObjects(*args):
        """releaseAllGLObjects(self)"""
        return _osgUtil.SceneView_releaseAllGLObjects(*args)

    def flushAllDeletedGLObjects(*args):
        """flushAllDeletedGLObjects(self)"""
        return _osgUtil.SceneView_flushAllDeletedGLObjects(*args)

    def flushDeletedGLObjects(*args):
        """flushDeletedGLObjects(self, double availableTime)"""
        return _osgUtil.SceneView_flushDeletedGLObjects(*args)

    def getStats(*args):
        """getStats(self, Statistics primStats) -> bool"""
        return _osgUtil.SceneView_getStats(*args)

SceneView_swigregister = _osgUtil.SceneView_swigregister
SceneView_swigregister(SceneView)

OSGUTIL_SIMPLIFIER = _osgUtil.OSGUTIL_SIMPLIFIER
class Simplifier(osg.NodeVisitor):
    """Proxy of C++ Simplifier class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simplifier, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Simplifier, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double sampleRatio=1.0, double maximumError=FLT_MAX, 
            double maximumLength=0.0) -> Simplifier
        __init__(self, double sampleRatio=1.0, double maximumError=FLT_MAX) -> Simplifier
        __init__(self, double sampleRatio=1.0) -> Simplifier
        __init__(self) -> Simplifier
        """
        this = _osgUtil.new_Simplifier(*args)
        try: self.this.append(this)
        except: self.this = this
    def setSampleRatio(*args):
        """setSampleRatio(self, float sampleRatio)"""
        return _osgUtil.Simplifier_setSampleRatio(*args)

    def getSampleRatio(*args):
        """getSampleRatio(self) -> float"""
        return _osgUtil.Simplifier_getSampleRatio(*args)

    def setMaximumError(*args):
        """setMaximumError(self, float error)"""
        return _osgUtil.Simplifier_setMaximumError(*args)

    def getMaximumError(*args):
        """getMaximumError(self) -> float"""
        return _osgUtil.Simplifier_getMaximumError(*args)

    def setMaximumLength(*args):
        """setMaximumLength(self, float length)"""
        return _osgUtil.Simplifier_setMaximumLength(*args)

    def getMaximumLength(*args):
        """getMaximumLength(self) -> float"""
        return _osgUtil.Simplifier_getMaximumLength(*args)

    def setDoTriStrip(*args):
        """setDoTriStrip(self, bool on)"""
        return _osgUtil.Simplifier_setDoTriStrip(*args)

    def getDoTriStrip(*args):
        """getDoTriStrip(self) -> bool"""
        return _osgUtil.Simplifier_getDoTriStrip(*args)

    def setSmoothing(*args):
        """setSmoothing(self, bool on)"""
        return _osgUtil.Simplifier_setSmoothing(*args)

    def getSmoothing(*args):
        """getSmoothing(self) -> bool"""
        return _osgUtil.Simplifier_getSmoothing(*args)

    def continueSimplification(*args):
        """
        continueSimplification(self, float nextError, unsigned int numOriginalPrimitives, 
            unsigned int numRemainingPrimitives) -> bool
        """
        return _osgUtil.Simplifier_continueSimplification(*args)

    def continueSimplificationImplementation(*args):
        """
        continueSimplificationImplementation(self, float nextError, unsigned int numOriginalPrimitives, 
            unsigned int numRemainingPrimitives) -> bool
        """
        return _osgUtil.Simplifier_continueSimplificationImplementation(*args)

    def apply(*args):
        """apply(self, Geode geode)"""
        return _osgUtil.Simplifier_apply(*args)

    def simplify(*args):
        """
        simplify(self, Geometry geometry)
        simplify(self, Geometry geometry, IndexList protectedPoints)
        """
        return _osgUtil.Simplifier_simplify(*args)

    __swig_destroy__ = _osgUtil.delete_Simplifier
    __del__ = lambda self : None;
Simplifier_swigregister = _osgUtil.Simplifier_swigregister
Simplifier_swigregister(Simplifier)

OSGUTIL_SMOOTHINGVISITOR = _osgUtil.OSGUTIL_SMOOTHINGVISITOR
class SmoothingVisitor(osg.NodeVisitor):
    """Proxy of C++ SmoothingVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothingVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothingVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> SmoothingVisitor"""
        this = _osgUtil.new_SmoothingVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_SmoothingVisitor
    __del__ = lambda self : None;
    def smooth(*args):
        """smooth(Geometry geoset)"""
        return _osgUtil.SmoothingVisitor_smooth(*args)

    if _newclass:smooth = staticmethod(smooth)
    __swig_getmethods__["smooth"] = lambda x: smooth
    def apply(*args):
        """apply(self, Geode geode)"""
        return _osgUtil.SmoothingVisitor_apply(*args)

SmoothingVisitor_swigregister = _osgUtil.SmoothingVisitor_swigregister
SmoothingVisitor_swigregister(SmoothingVisitor)

def SmoothingVisitor_smooth(*args):
  """SmoothingVisitor_smooth(Geometry geoset)"""
  return _osgUtil.SmoothingVisitor_smooth(*args)

OSGUTIL_STATISTICS = _osgUtil.OSGUTIL_STATISTICS
class Statistics(osg.PrimitiveFunctor):
    """Proxy of C++ Statistics class"""
    __swig_setmethods__ = {}
    for _s in [osg.PrimitiveFunctor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Statistics, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.PrimitiveFunctor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Statistics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Statistics"""
        this = _osgUtil.new_Statistics(*args)
        try: self.this.append(this)
        except: self.this = this
    STAT_NONE = _osgUtil.Statistics_STAT_NONE
    STAT_FRAMERATE = _osgUtil.Statistics_STAT_FRAMERATE
    STAT_GRAPHS = _osgUtil.Statistics_STAT_GRAPHS
    STAT_PRIMS = _osgUtil.Statistics_STAT_PRIMS
    STAT_PRIMSPERVIEW = _osgUtil.Statistics_STAT_PRIMSPERVIEW
    STAT_PRIMSPERBIN = _osgUtil.Statistics_STAT_PRIMSPERBIN
    STAT_DC = _osgUtil.Statistics_STAT_DC
    STAT_RESTART = _osgUtil.Statistics_STAT_RESTART
    def reset(*args):
        """reset(self)"""
        return _osgUtil.Statistics_reset(*args)

    def setType(*args):
        """setType(self, StatsType t)"""
        return _osgUtil.Statistics_setType(*args)

    def setVertexArray(*args):
        """
        setVertexArray(self, unsigned int count, Vec3 ?)
        setVertexArray(self, unsigned int count, Vec2 ?)
        setVertexArray(self, unsigned int count, Vec4 ?)
        setVertexArray(self, unsigned int count, Vec3d ?)
        setVertexArray(self, unsigned int count, Vec2d ?)
        setVertexArray(self, unsigned int count, Vec4d ?)
        """
        return _osgUtil.Statistics_setVertexArray(*args)

    def drawArrays(*args):
        """drawArrays(self, GLenum mode, GLint ?, GLsizei count)"""
        return _osgUtil.Statistics_drawArrays(*args)

    def drawElements(*args):
        """
        drawElements(self, GLenum mode, GLsizei count, GLubyte ?)
        drawElements(self, GLenum mode, GLsizei count, GLushort ?)
        drawElements(self, GLenum mode, GLsizei count, GLuint ?)
        """
        return _osgUtil.Statistics_drawElements(*args)

    def begin(*args):
        """begin(self, GLenum mode)"""
        return _osgUtil.Statistics_begin(*args)

    def vertex(*args):
        """
        vertex(self)
        vertex(self, float ?, float ?, float ?)
        vertex(self, Vec3 ?)
        vertex(self, Vec2 ?)
        vertex(self, Vec4 ?)
        vertex(self, float ?, float ?)
        vertex(self, float ?, float ?, float ?, float ?)
        """
        return _osgUtil.Statistics_vertex(*args)

    def end(*args):
        """end(self)"""
        return _osgUtil.Statistics_end(*args)

    def addDrawable(*args):
        """addDrawable(self)"""
        return _osgUtil.Statistics_addDrawable(*args)

    def addMatrix(*args):
        """addMatrix(self)"""
        return _osgUtil.Statistics_addMatrix(*args)

    def addLight(*args):
        """addLight(self, int np)"""
        return _osgUtil.Statistics_addLight(*args)

    def addImpostor(*args):
        """addImpostor(self, int np)"""
        return _osgUtil.Statistics_addImpostor(*args)

    def getBins(*args):
        """getBins(self) -> int"""
        return _osgUtil.Statistics_getBins(*args)

    def setDepth(*args):
        """setDepth(self, int d)"""
        return _osgUtil.Statistics_setDepth(*args)

    def addBins(*args):
        """addBins(self, int np)"""
        return _osgUtil.Statistics_addBins(*args)

    def setBinNo(*args):
        """setBinNo(self, int n)"""
        return _osgUtil.Statistics_setBinNo(*args)

    def add(*args):
        """add(self, Statistics stats)"""
        return _osgUtil.Statistics_add(*args)

    def GetPrimitivesBegin(*args):
        """GetPrimitivesBegin(self) -> osgUtil::Statistics::PrimitiveCountMap::iterator"""
        return _osgUtil.Statistics_GetPrimitivesBegin(*args)

    def GetPrimitivesEnd(*args):
        """GetPrimitivesEnd(self) -> osgUtil::Statistics::PrimitiveCountMap::iterator"""
        return _osgUtil.Statistics_GetPrimitivesEnd(*args)

    __swig_setmethods__["numDrawables"] = _osgUtil.Statistics_numDrawables_set
    __swig_getmethods__["numDrawables"] = _osgUtil.Statistics_numDrawables_get
    if _newclass:numDrawables = _swig_property(_osgUtil.Statistics_numDrawables_get, _osgUtil.Statistics_numDrawables_set)
    __swig_setmethods__["nummat"] = _osgUtil.Statistics_nummat_set
    __swig_getmethods__["nummat"] = _osgUtil.Statistics_nummat_get
    if _newclass:nummat = _swig_property(_osgUtil.Statistics_nummat_get, _osgUtil.Statistics_nummat_set)
    __swig_setmethods__["nbins"] = _osgUtil.Statistics_nbins_set
    __swig_getmethods__["nbins"] = _osgUtil.Statistics_nbins_get
    if _newclass:nbins = _swig_property(_osgUtil.Statistics_nbins_get, _osgUtil.Statistics_nbins_set)
    __swig_setmethods__["nlights"] = _osgUtil.Statistics_nlights_set
    __swig_getmethods__["nlights"] = _osgUtil.Statistics_nlights_get
    if _newclass:nlights = _swig_property(_osgUtil.Statistics_nlights_get, _osgUtil.Statistics_nlights_set)
    __swig_setmethods__["depth"] = _osgUtil.Statistics_depth_set
    __swig_getmethods__["depth"] = _osgUtil.Statistics_depth_get
    if _newclass:depth = _swig_property(_osgUtil.Statistics_depth_get, _osgUtil.Statistics_depth_set)
    __swig_setmethods__["_binNo"] = _osgUtil.Statistics__binNo_set
    __swig_getmethods__["_binNo"] = _osgUtil.Statistics__binNo_get
    if _newclass:_binNo = _swig_property(_osgUtil.Statistics__binNo_get, _osgUtil.Statistics__binNo_set)
    __swig_setmethods__["stattype"] = _osgUtil.Statistics_stattype_set
    __swig_getmethods__["stattype"] = _osgUtil.Statistics_stattype_get
    if _newclass:stattype = _swig_property(_osgUtil.Statistics_stattype_get, _osgUtil.Statistics_stattype_set)
    __swig_setmethods__["nimpostor"] = _osgUtil.Statistics_nimpostor_set
    __swig_getmethods__["nimpostor"] = _osgUtil.Statistics_nimpostor_get
    if _newclass:nimpostor = _swig_property(_osgUtil.Statistics_nimpostor_get, _osgUtil.Statistics_nimpostor_set)
    __swig_setmethods__["_vertexCount"] = _osgUtil.Statistics__vertexCount_set
    __swig_getmethods__["_vertexCount"] = _osgUtil.Statistics__vertexCount_get
    if _newclass:_vertexCount = _swig_property(_osgUtil.Statistics__vertexCount_get, _osgUtil.Statistics__vertexCount_set)
    __swig_setmethods__["_primitiveCount"] = _osgUtil.Statistics__primitiveCount_set
    __swig_getmethods__["_primitiveCount"] = _osgUtil.Statistics__primitiveCount_get
    if _newclass:_primitiveCount = _swig_property(_osgUtil.Statistics__primitiveCount_get, _osgUtil.Statistics__primitiveCount_set)
    __swig_setmethods__["_currentPrimitiveFunctorMode"] = _osgUtil.Statistics__currentPrimitiveFunctorMode_set
    __swig_getmethods__["_currentPrimitiveFunctorMode"] = _osgUtil.Statistics__currentPrimitiveFunctorMode_get
    if _newclass:_currentPrimitiveFunctorMode = _swig_property(_osgUtil.Statistics__currentPrimitiveFunctorMode_get, _osgUtil.Statistics__currentPrimitiveFunctorMode_set)
    __swig_destroy__ = _osgUtil.delete_Statistics
    __del__ = lambda self : None;
Statistics_swigregister = _osgUtil.Statistics_swigregister
Statistics_swigregister(Statistics)

class StatsVisitor(osg.NodeVisitor):
    """Proxy of C++ StatsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatsVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> StatsVisitor"""
        this = _osgUtil.new_StatsVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args):
        """reset(self)"""
        return _osgUtil.StatsVisitor_reset(*args)

    def apply(*args):
        """
        apply(self, Node node)
        apply(self, Group node)
        apply(self, Transform node)
        apply(self, LOD node)
        apply(self, Switch node)
        apply(self, Geode node)
        apply(self, Drawable drawable)
        """
        return _osgUtil.StatsVisitor_apply(*args)

    def totalUpStats(*args):
        """totalUpStats(self)"""
        return _osgUtil.StatsVisitor_totalUpStats(*args)

    def _print(*args):
        """_print(self, std::ostream out)"""
        return _osgUtil.StatsVisitor__print(*args)

    __swig_setmethods__["_numInstancedGroup"] = _osgUtil.StatsVisitor__numInstancedGroup_set
    __swig_getmethods__["_numInstancedGroup"] = _osgUtil.StatsVisitor__numInstancedGroup_get
    if _newclass:_numInstancedGroup = _swig_property(_osgUtil.StatsVisitor__numInstancedGroup_get, _osgUtil.StatsVisitor__numInstancedGroup_set)
    __swig_setmethods__["_numInstancedSwitch"] = _osgUtil.StatsVisitor__numInstancedSwitch_set
    __swig_getmethods__["_numInstancedSwitch"] = _osgUtil.StatsVisitor__numInstancedSwitch_get
    if _newclass:_numInstancedSwitch = _swig_property(_osgUtil.StatsVisitor__numInstancedSwitch_get, _osgUtil.StatsVisitor__numInstancedSwitch_set)
    __swig_setmethods__["_numInstancedLOD"] = _osgUtil.StatsVisitor__numInstancedLOD_set
    __swig_getmethods__["_numInstancedLOD"] = _osgUtil.StatsVisitor__numInstancedLOD_get
    if _newclass:_numInstancedLOD = _swig_property(_osgUtil.StatsVisitor__numInstancedLOD_get, _osgUtil.StatsVisitor__numInstancedLOD_set)
    __swig_setmethods__["_numInstancedTransform"] = _osgUtil.StatsVisitor__numInstancedTransform_set
    __swig_getmethods__["_numInstancedTransform"] = _osgUtil.StatsVisitor__numInstancedTransform_get
    if _newclass:_numInstancedTransform = _swig_property(_osgUtil.StatsVisitor__numInstancedTransform_get, _osgUtil.StatsVisitor__numInstancedTransform_set)
    __swig_setmethods__["_numInstancedGeode"] = _osgUtil.StatsVisitor__numInstancedGeode_set
    __swig_getmethods__["_numInstancedGeode"] = _osgUtil.StatsVisitor__numInstancedGeode_get
    if _newclass:_numInstancedGeode = _swig_property(_osgUtil.StatsVisitor__numInstancedGeode_get, _osgUtil.StatsVisitor__numInstancedGeode_set)
    __swig_setmethods__["_numInstancedDrawable"] = _osgUtil.StatsVisitor__numInstancedDrawable_set
    __swig_getmethods__["_numInstancedDrawable"] = _osgUtil.StatsVisitor__numInstancedDrawable_get
    if _newclass:_numInstancedDrawable = _swig_property(_osgUtil.StatsVisitor__numInstancedDrawable_get, _osgUtil.StatsVisitor__numInstancedDrawable_set)
    __swig_setmethods__["_numInstancedGeometry"] = _osgUtil.StatsVisitor__numInstancedGeometry_set
    __swig_getmethods__["_numInstancedGeometry"] = _osgUtil.StatsVisitor__numInstancedGeometry_get
    if _newclass:_numInstancedGeometry = _swig_property(_osgUtil.StatsVisitor__numInstancedGeometry_get, _osgUtil.StatsVisitor__numInstancedGeometry_set)
    __swig_setmethods__["_numInstancedStateSet"] = _osgUtil.StatsVisitor__numInstancedStateSet_set
    __swig_getmethods__["_numInstancedStateSet"] = _osgUtil.StatsVisitor__numInstancedStateSet_get
    if _newclass:_numInstancedStateSet = _swig_property(_osgUtil.StatsVisitor__numInstancedStateSet_get, _osgUtil.StatsVisitor__numInstancedStateSet_set)
    __swig_setmethods__["_groupSet"] = _osgUtil.StatsVisitor__groupSet_set
    __swig_getmethods__["_groupSet"] = _osgUtil.StatsVisitor__groupSet_get
    if _newclass:_groupSet = _swig_property(_osgUtil.StatsVisitor__groupSet_get, _osgUtil.StatsVisitor__groupSet_set)
    __swig_setmethods__["_transformSet"] = _osgUtil.StatsVisitor__transformSet_set
    __swig_getmethods__["_transformSet"] = _osgUtil.StatsVisitor__transformSet_get
    if _newclass:_transformSet = _swig_property(_osgUtil.StatsVisitor__transformSet_get, _osgUtil.StatsVisitor__transformSet_set)
    __swig_setmethods__["_lodSet"] = _osgUtil.StatsVisitor__lodSet_set
    __swig_getmethods__["_lodSet"] = _osgUtil.StatsVisitor__lodSet_get
    if _newclass:_lodSet = _swig_property(_osgUtil.StatsVisitor__lodSet_get, _osgUtil.StatsVisitor__lodSet_set)
    __swig_setmethods__["_switchSet"] = _osgUtil.StatsVisitor__switchSet_set
    __swig_getmethods__["_switchSet"] = _osgUtil.StatsVisitor__switchSet_get
    if _newclass:_switchSet = _swig_property(_osgUtil.StatsVisitor__switchSet_get, _osgUtil.StatsVisitor__switchSet_set)
    __swig_setmethods__["_geodeSet"] = _osgUtil.StatsVisitor__geodeSet_set
    __swig_getmethods__["_geodeSet"] = _osgUtil.StatsVisitor__geodeSet_get
    if _newclass:_geodeSet = _swig_property(_osgUtil.StatsVisitor__geodeSet_get, _osgUtil.StatsVisitor__geodeSet_set)
    __swig_setmethods__["_drawableSet"] = _osgUtil.StatsVisitor__drawableSet_set
    __swig_getmethods__["_drawableSet"] = _osgUtil.StatsVisitor__drawableSet_get
    if _newclass:_drawableSet = _swig_property(_osgUtil.StatsVisitor__drawableSet_get, _osgUtil.StatsVisitor__drawableSet_set)
    __swig_setmethods__["_geometrySet"] = _osgUtil.StatsVisitor__geometrySet_set
    __swig_getmethods__["_geometrySet"] = _osgUtil.StatsVisitor__geometrySet_get
    if _newclass:_geometrySet = _swig_property(_osgUtil.StatsVisitor__geometrySet_get, _osgUtil.StatsVisitor__geometrySet_set)
    __swig_setmethods__["_statesetSet"] = _osgUtil.StatsVisitor__statesetSet_set
    __swig_getmethods__["_statesetSet"] = _osgUtil.StatsVisitor__statesetSet_get
    if _newclass:_statesetSet = _swig_property(_osgUtil.StatsVisitor__statesetSet_get, _osgUtil.StatsVisitor__statesetSet_set)
    __swig_setmethods__["_uniqueStats"] = _osgUtil.StatsVisitor__uniqueStats_set
    __swig_getmethods__["_uniqueStats"] = _osgUtil.StatsVisitor__uniqueStats_get
    if _newclass:_uniqueStats = _swig_property(_osgUtil.StatsVisitor__uniqueStats_get, _osgUtil.StatsVisitor__uniqueStats_set)
    __swig_setmethods__["_instancedStats"] = _osgUtil.StatsVisitor__instancedStats_set
    __swig_getmethods__["_instancedStats"] = _osgUtil.StatsVisitor__instancedStats_get
    if _newclass:_instancedStats = _swig_property(_osgUtil.StatsVisitor__instancedStats_get, _osgUtil.StatsVisitor__instancedStats_set)
    __swig_destroy__ = _osgUtil.delete_StatsVisitor
    __del__ = lambda self : None;
StatsVisitor_swigregister = _osgUtil.StatsVisitor_swigregister
StatsVisitor_swigregister(StatsVisitor)

class TangentSpaceGenerator(osg.Referenced):
    """Proxy of C++ TangentSpaceGenerator class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TangentSpaceGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TangentSpaceGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TangentSpaceGenerator
        __init__(self, TangentSpaceGenerator copy, CopyOp copyop=SHALLOW_COPY) -> TangentSpaceGenerator
        __init__(self, TangentSpaceGenerator copy) -> TangentSpaceGenerator
        """
        this = _osgUtil.new_TangentSpaceGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def generate(*args):
        """
        generate(self, Geometry geo, int normal_map_tex_unit=0)
        generate(self, Geometry geo)
        """
        return _osgUtil.TangentSpaceGenerator_generate(*args)

    def getTangentArray(*args):
        """
        getTangentArray(self) -> Vec4Array
        getTangentArray(self) -> Vec4Array
        """
        return _osgUtil.TangentSpaceGenerator_getTangentArray(*args)

    def setTangentArray(*args):
        """setTangentArray(self, Vec4Array array)"""
        return _osgUtil.TangentSpaceGenerator_setTangentArray(*args)

    def getNormalArray(*args):
        """
        getNormalArray(self) -> Vec4Array
        getNormalArray(self) -> Vec4Array
        """
        return _osgUtil.TangentSpaceGenerator_getNormalArray(*args)

    def setNormalArray(*args):
        """setNormalArray(self, Vec4Array array)"""
        return _osgUtil.TangentSpaceGenerator_setNormalArray(*args)

    def getBinormalArray(*args):
        """
        getBinormalArray(self) -> Vec4Array
        getBinormalArray(self) -> Vec4Array
        """
        return _osgUtil.TangentSpaceGenerator_getBinormalArray(*args)

    def setBinormalArray(*args):
        """setBinormalArray(self, Vec4Array array)"""
        return _osgUtil.TangentSpaceGenerator_setBinormalArray(*args)

    def getIndices(*args):
        """getIndices(self) -> IndexArray"""
        return _osgUtil.TangentSpaceGenerator_getIndices(*args)

TangentSpaceGenerator_swigregister = _osgUtil.TangentSpaceGenerator_swigregister
TangentSpaceGenerator_swigregister(TangentSpaceGenerator)

OSGUTIL_TRANSFORMATTRIBUTEFUNCTOR = _osgUtil.OSGUTIL_TRANSFORMATTRIBUTEFUNCTOR
class TransformAttributeFunctor(_object):
    """Proxy of C++ TransformAttributeFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformAttributeFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransformAttributeFunctor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Matrix m) -> TransformAttributeFunctor"""
        this = _osgUtil.new_TransformAttributeFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_TransformAttributeFunctor
    __del__ = lambda self : None;
    def apply(*args):
        """apply(self, AttributeType type, unsigned int count, Vec3 begin)"""
        return _osgUtil.TransformAttributeFunctor_apply(*args)

    __swig_setmethods__["_m"] = _osgUtil.TransformAttributeFunctor__m_set
    __swig_getmethods__["_m"] = _osgUtil.TransformAttributeFunctor__m_get
    if _newclass:_m = _swig_property(_osgUtil.TransformAttributeFunctor__m_get, _osgUtil.TransformAttributeFunctor__m_set)
    __swig_setmethods__["_im"] = _osgUtil.TransformAttributeFunctor__im_set
    __swig_getmethods__["_im"] = _osgUtil.TransformAttributeFunctor__im_get
    if _newclass:_im = _swig_property(_osgUtil.TransformAttributeFunctor__im_get, _osgUtil.TransformAttributeFunctor__im_set)
TransformAttributeFunctor_swigregister = _osgUtil.TransformAttributeFunctor_swigregister
TransformAttributeFunctor_swigregister(TransformAttributeFunctor)

OSGUTIL_TRANSFORMCALLBACK = _osgUtil.OSGUTIL_TRANSFORMCALLBACK
class TransformCallback(osg.NodeCallback):
    """Proxy of C++ TransformCallback class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransformCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Vec3 pivot, Vec3 axis, float angularVelocity) -> TransformCallback"""
        this = _osgUtil.new_TransformCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPause(*args):
        """setPause(self, bool pause)"""
        return _osgUtil.TransformCallback_setPause(*args)

    def __call__(*args):
        """__call__(self, Node node, NodeVisitor nv)"""
        return _osgUtil.TransformCallback___call__(*args)

    __swig_destroy__ = _osgUtil.delete_TransformCallback
    __del__ = lambda self : None;
TransformCallback_swigregister = _osgUtil.TransformCallback_swigregister
TransformCallback_swigregister(TransformCallback)

OSGUTIL_TRISTRIPVISITOR = _osgUtil.OSGUTIL_TRISTRIPVISITOR
class TriStripVisitor(BaseOptimizerVisitor):
    """Proxy of C++ TriStripVisitor class"""
    __swig_setmethods__ = {}
    for _s in [BaseOptimizerVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriStripVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseOptimizerVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriStripVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Optimizer optimizer=0) -> TriStripVisitor
        __init__(self) -> TriStripVisitor
        """
        this = _osgUtil.new_TriStripVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def stripify(*args):
        """
        stripify(self, Geometry drawable)
        stripify(self)
        """
        return _osgUtil.TriStripVisitor_stripify(*args)

    def apply(*args):
        """apply(self, Geode geode)"""
        return _osgUtil.TriStripVisitor_apply(*args)

    def setCacheSize(*args):
        """setCacheSize(self, unsigned int size)"""
        return _osgUtil.TriStripVisitor_setCacheSize(*args)

    def getCacheSize(*args):
        """getCacheSize(self) -> unsigned int"""
        return _osgUtil.TriStripVisitor_getCacheSize(*args)

    def setMinStripSize(*args):
        """setMinStripSize(self, unsigned int size)"""
        return _osgUtil.TriStripVisitor_setMinStripSize(*args)

    def getMinStripSize(*args):
        """getMinStripSize(self) -> unsigned int"""
        return _osgUtil.TriStripVisitor_getMinStripSize(*args)

    def setGenerateFourPointPrimitivesQuads(*args):
        """setGenerateFourPointPrimitivesQuads(self, bool flag)"""
        return _osgUtil.TriStripVisitor_setGenerateFourPointPrimitivesQuads(*args)

    def getGenerateFourPointPrimitivesQuads(*args):
        """getGenerateFourPointPrimitivesQuads(self) -> bool"""
        return _osgUtil.TriStripVisitor_getGenerateFourPointPrimitivesQuads(*args)

    __swig_destroy__ = _osgUtil.delete_TriStripVisitor
    __del__ = lambda self : None;
TriStripVisitor_swigregister = _osgUtil.TriStripVisitor_swigregister
TriStripVisitor_swigregister(TriStripVisitor)

OSGUTIL_UPDATEVISITOR = _osgUtil.OSGUTIL_UPDATEVISITOR
class UpdateVisitor(osg.NodeVisitor):
    """Proxy of C++ UpdateVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdateVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpdateVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> UpdateVisitor"""
        this = _osgUtil.new_UpdateVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgUtil.delete_UpdateVisitor
    __del__ = lambda self : None;
    def reset(*args):
        """reset(self)"""
        return _osgUtil.UpdateVisitor_reset(*args)

    def apply(*args):
        """
        apply(self, Node node)
        apply(self, Geode node)
        apply(self, Billboard node)
        apply(self, LightSource node)
        apply(self, Group node)
        apply(self, Transform node)
        apply(self, Projection node)
        apply(self, Switch node)
        apply(self, LOD node)
        apply(self, OccluderNode node)
        """
        return _osgUtil.UpdateVisitor_apply(*args)

UpdateVisitor_swigregister = _osgUtil.UpdateVisitor_swigregister
UpdateVisitor_swigregister(UpdateVisitor)

OSGUTIL_VERSION = _osgUtil.OSGUTIL_VERSION

def osgUtilGetVersion(*args):
  """osgUtilGetVersion() -> char"""
  return _osgUtil.osgUtilGetVersion(*args)

def osgUtilGetLibraryName(*args):
  """osgUtilGetLibraryName() -> char"""
  return _osgUtil.osgUtilGetLibraryName(*args)
class Intersection(_object):
    """Proxy of C++ Intersection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Intersection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Intersection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Intersection"""
        this = _osgUtil.new_Intersection(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(*args):
        """__lt__(self, Intersection rhs) -> bool"""
        return _osgUtil.Intersection___lt__(*args)

    MaxNumIntesectionPoints = _osgUtil.Intersection_MaxNumIntesectionPoints
    __swig_setmethods__["distance"] = _osgUtil.Intersection_distance_set
    __swig_getmethods__["distance"] = _osgUtil.Intersection_distance_get
    if _newclass:distance = _swig_property(_osgUtil.Intersection_distance_get, _osgUtil.Intersection_distance_set)
    __swig_setmethods__["maxDistance"] = _osgUtil.Intersection_maxDistance_set
    __swig_getmethods__["maxDistance"] = _osgUtil.Intersection_maxDistance_get
    if _newclass:maxDistance = _swig_property(_osgUtil.Intersection_maxDistance_get, _osgUtil.Intersection_maxDistance_set)
    __swig_setmethods__["nodePath"] = _osgUtil.Intersection_nodePath_set
    __swig_getmethods__["nodePath"] = _osgUtil.Intersection_nodePath_get
    if _newclass:nodePath = _swig_property(_osgUtil.Intersection_nodePath_get, _osgUtil.Intersection_nodePath_set)
    __swig_setmethods__["drawable"] = _osgUtil.Intersection_drawable_set
    __swig_getmethods__["drawable"] = _osgUtil.Intersection_drawable_get
    if _newclass:drawable = _swig_property(_osgUtil.Intersection_drawable_get, _osgUtil.Intersection_drawable_set)
    __swig_setmethods__["matrix"] = _osgUtil.Intersection_matrix_set
    __swig_getmethods__["matrix"] = _osgUtil.Intersection_matrix_get
    if _newclass:matrix = _swig_property(_osgUtil.Intersection_matrix_get, _osgUtil.Intersection_matrix_set)
    __swig_setmethods__["localIntersectionPoint"] = _osgUtil.Intersection_localIntersectionPoint_set
    __swig_getmethods__["localIntersectionPoint"] = _osgUtil.Intersection_localIntersectionPoint_get
    if _newclass:localIntersectionPoint = _swig_property(_osgUtil.Intersection_localIntersectionPoint_get, _osgUtil.Intersection_localIntersectionPoint_set)
    __swig_setmethods__["numIntersectionPoints"] = _osgUtil.Intersection_numIntersectionPoints_set
    __swig_getmethods__["numIntersectionPoints"] = _osgUtil.Intersection_numIntersectionPoints_get
    if _newclass:numIntersectionPoints = _swig_property(_osgUtil.Intersection_numIntersectionPoints_get, _osgUtil.Intersection_numIntersectionPoints_set)
    __swig_setmethods__["intersectionPoints"] = _osgUtil.Intersection_intersectionPoints_set
    __swig_getmethods__["intersectionPoints"] = _osgUtil.Intersection_intersectionPoints_get
    if _newclass:intersectionPoints = _swig_property(_osgUtil.Intersection_intersectionPoints_get, _osgUtil.Intersection_intersectionPoints_set)
    __swig_setmethods__["primitiveIndex"] = _osgUtil.Intersection_primitiveIndex_set
    __swig_getmethods__["primitiveIndex"] = _osgUtil.Intersection_primitiveIndex_get
    if _newclass:primitiveIndex = _swig_property(_osgUtil.Intersection_primitiveIndex_get, _osgUtil.Intersection_primitiveIndex_set)
    __swig_destroy__ = _osgUtil.delete_Intersection
    __del__ = lambda self : None;
Intersection_swigregister = _osgUtil.Intersection_swigregister
Intersection_swigregister(Intersection)

OSGUTIL_POLYTOPEINTERSECTOR = _osgUtil.OSGUTIL_POLYTOPEINTERSECTOR
class PolytopeIntersector(Intersector):
    """Proxy of C++ PolytopeIntersector class"""
    __swig_setmethods__ = {}
    for _s in [Intersector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolytopeIntersector, name, value)
    __swig_getmethods__ = {}
    for _s in [Intersector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolytopeIntersector, name)
    __repr__ = _swig_repr
    DimZero = _osgUtil.PolytopeIntersector_DimZero
    DimOne = _osgUtil.PolytopeIntersector_DimOne
    DimTwo = _osgUtil.PolytopeIntersector_DimTwo
    AllDims = _osgUtil.PolytopeIntersector_AllDims
    def __init__(self, *args): 
        """
        __init__(self, Polytope polytope) -> PolytopeIntersector
        __init__(self, CoordinateFrame cf, Polytope polytope) -> PolytopeIntersector
        __init__(self, CoordinateFrame cf, double xMin, double yMin, double xMax, 
            double yMax) -> PolytopeIntersector
        """
        this = _osgUtil.new_PolytopeIntersector(*args)
        try: self.this.append(this)
        except: self.this = this
    def insertIntersection(*args):
        """insertIntersection(self, Intersection intersection)"""
        return _osgUtil.PolytopeIntersector_insertIntersection(*args)

    def getIntersections(*args):
        """getIntersections(self) -> Intersections"""
        return _osgUtil.PolytopeIntersector_getIntersections(*args)

    def getFirstIntersection(*args):
        """getFirstIntersection(self) -> Intersection"""
        return _osgUtil.PolytopeIntersector_getFirstIntersection(*args)

    def getDimensionMask(*args):
        """getDimensionMask(self) -> unsigned int"""
        return _osgUtil.PolytopeIntersector_getDimensionMask(*args)

    def setDimensionMask(*args):
        """setDimensionMask(self, unsigned int dimensionMask)"""
        return _osgUtil.PolytopeIntersector_setDimensionMask(*args)

    def getReferencePlane(*args):
        """getReferencePlane(self) -> Plane"""
        return _osgUtil.PolytopeIntersector_getReferencePlane(*args)

    def setReferencePlane(*args):
        """setReferencePlane(self, Plane plane)"""
        return _osgUtil.PolytopeIntersector_setReferencePlane(*args)

    def clone(*args):
        """clone(self, IntersectionVisitor iv) -> Intersector"""
        return _osgUtil.PolytopeIntersector_clone(*args)

    def enter(*args):
        """enter(self, Node node) -> bool"""
        return _osgUtil.PolytopeIntersector_enter(*args)

    def leave(*args):
        """leave(self)"""
        return _osgUtil.PolytopeIntersector_leave(*args)

    def intersect(*args):
        """intersect(self, IntersectionVisitor iv, Drawable drawable)"""
        return _osgUtil.PolytopeIntersector_intersect(*args)

    def reset(*args):
        """reset(self)"""
        return _osgUtil.PolytopeIntersector_reset(*args)

    def containsIntersections(*args):
        """containsIntersections(self) -> bool"""
        return _osgUtil.PolytopeIntersector_containsIntersections(*args)

    __swig_destroy__ = _osgUtil.delete_PolytopeIntersector
    __del__ = lambda self : None;
PolytopeIntersector_swigregister = _osgUtil.PolytopeIntersector_swigregister
PolytopeIntersector_swigregister(PolytopeIntersector)



