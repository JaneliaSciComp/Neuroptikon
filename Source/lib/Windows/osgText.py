# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osgText', [dirname(__file__)])
        except ImportError:
            import _osgText
            return _osgText
        if fp is not None:
            try:
                _mod = imp.load_module('_osgText', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osgText = swig_import_helper()
    del swig_import_helper
else:
    import _osgText
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgText.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _osgText.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgText.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgText.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _osgText.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgText.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _osgText.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _osgText.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _osgText.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _osgText.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgText.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgText.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgText.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgText.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgText.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgText.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osgText.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osgText.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import osg
OSGTEXT_EXPORT_ = _osgText.OSGTEXT_EXPORT_
KERNING_DEFAULT = _osgText.KERNING_DEFAULT
KERNING_UNFITTED = _osgText.KERNING_UNFITTED
KERNING_NONE = _osgText.KERNING_NONE
OSGTEXT_STRING = _osgText.OSGTEXT_STRING
class VectorUInt(osg.vectorGLuint):
    """Proxy of C++ osgText::VectorUInt class"""
    __swig_setmethods__ = {}
    for _s in [osg.vectorGLuint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUInt, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.vectorGLuint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgText::VectorUInt self) -> VectorUInt
        __init__(osgText::VectorUInt self, VectorUInt copy) -> VectorUInt
        __init__(osgText::VectorUInt self, unsigned int * beg, unsigned int * end) -> VectorUInt
        __init__(osgText::VectorUInt self, unsigned int n) -> VectorUInt
        """
        this = _osgText.new_VectorUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgText.delete_VectorUInt
    __del__ = lambda self : None;
VectorUInt_swigregister = _osgText.VectorUInt_swigregister
VectorUInt_swigregister(VectorUInt)

class String(VectorUInt):
    """Proxy of C++ osgText::String class"""
    __swig_setmethods__ = {}
    for _s in [VectorUInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, String, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorUInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, String, name)
    __repr__ = _swig_repr
    ENCODING_UNDEFINED = _osgText.String_ENCODING_UNDEFINED
    ENCODING_ASCII = _osgText.String_ENCODING_ASCII
    ENCODING_UTF8 = _osgText.String_ENCODING_UTF8
    ENCODING_UTF16 = _osgText.String_ENCODING_UTF16
    ENCODING_UTF16_BE = _osgText.String_ENCODING_UTF16_BE
    ENCODING_UTF16_LE = _osgText.String_ENCODING_UTF16_LE
    ENCODING_UTF32 = _osgText.String_ENCODING_UTF32
    ENCODING_UTF32_BE = _osgText.String_ENCODING_UTF32_BE
    ENCODING_UTF32_LE = _osgText.String_ENCODING_UTF32_LE
    ENCODING_SIGNATURE = _osgText.String_ENCODING_SIGNATURE
    def __init__(self, *args): 
        """
        __init__(osgText::String self) -> String
        __init__(osgText::String self, String str) -> String
        __init__(osgText::String self, std::string const & str) -> String
        __init__(osgText::String self, wchar_t const * text) -> String
        __init__(osgText::String self, std::string const & text, osgText::String::Encoding encoding) -> String
        """
        this = _osgText.new_String(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """
        set(String self, std::string const & str)
        set(String self, wchar_t const * text)
        set(String self, std::string const & text, osgText::String::Encoding encoding)
        """
        return _osgText.String_set(self, *args)

    def createUTF8EncodedString(self):
        """createUTF8EncodedString(String self) -> std::string"""
        return _osgText.String_createUTF8EncodedString(self)

    __swig_destroy__ = _osgText.delete_String
    __del__ = lambda self : None;
String_swigregister = _osgText.String_swigregister
String_swigregister(String)

OSGTEXT_STYLE = _osgText.OSGTEXT_STYLE
class Bevel(osg.Object):
    """Proxy of C++ osgText::Bevel class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bevel, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bevel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgText::Bevel self) -> Bevel
        __init__(osgText::Bevel self, Bevel bevel, CopyOp copyop=SHALLOW_COPY) -> Bevel
        __init__(osgText::Bevel self, Bevel bevel) -> Bevel
        """
        this = _osgText.new_Bevel(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Bevel self) -> Object"""
        return _osgText.Bevel_cloneType(self)

    def clone(self, *args):
        """clone(Bevel self, CopyOp copyop) -> Object"""
        return _osgText.Bevel_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Bevel self, Object obj) -> bool"""
        return _osgText.Bevel_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Bevel self) -> char const *"""
        return _osgText.Bevel_libraryName(self)

    def className(self):
        """className(Bevel self) -> char const *"""
        return _osgText.Bevel_className(self)

    def __eq__(self, *args):
        """__eq__(Bevel self, Bevel rhs) -> bool"""
        return _osgText.Bevel___eq__(self, *args)

    def setBevelThickness(self, *args):
        """setBevelThickness(Bevel self, float thickness)"""
        return _osgText.Bevel_setBevelThickness(self, *args)

    def getBevelThickness(self):
        """getBevelThickness(Bevel self) -> float"""
        return _osgText.Bevel_getBevelThickness(self)

    def flatBevel(self, width=0.25):
        """
        flatBevel(Bevel self, float width=0.25)
        flatBevel(Bevel self)
        """
        return _osgText.Bevel_flatBevel(self, width)

    def roundedBevel(self, width=0.5, numSteps=10):
        """
        roundedBevel(Bevel self, float width=0.5, unsigned int numSteps=10)
        roundedBevel(Bevel self, float width=0.5)
        roundedBevel(Bevel self)
        """
        return _osgText.Bevel_roundedBevel(self, width, numSteps)

    def roundedBevel2(self, width=0.5, numSteps=10):
        """
        roundedBevel2(Bevel self, float width=0.5, unsigned int numSteps=10)
        roundedBevel2(Bevel self, float width=0.5)
        roundedBevel2(Bevel self)
        """
        return _osgText.Bevel_roundedBevel2(self, width, numSteps)

    def setVertices(self, *args):
        """setVertices(Bevel self, vectorVec2 vertices)"""
        return _osgText.Bevel_setVertices(self, *args)

    def getVertices(self, *args):
        """
        getVertices(Bevel self) -> vectorVec2
        getVertices(Bevel self) -> vectorVec2
        """
        return _osgText.Bevel_getVertices(self, *args)

    def _print(self, *args):
        """_print(Bevel self, std::ostream & fout)"""
        return _osgText.Bevel__print(self, *args)

    __swig_destroy__ = _osgText.delete_Bevel
    __del__ = lambda self : None;
Bevel_swigregister = _osgText.Bevel_swigregister
Bevel_swigregister(Bevel)

class Style(osg.Object):
    """Proxy of C++ osgText::Style class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Style, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Style, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgText::Style self) -> Style
        __init__(osgText::Style self, Style style, CopyOp copyop=SHALLOW_COPY) -> Style
        __init__(osgText::Style self, Style style) -> Style
        """
        this = _osgText.new_Style(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Style self) -> Object"""
        return _osgText.Style_cloneType(self)

    def clone(self, *args):
        """clone(Style self, CopyOp copyop) -> Object"""
        return _osgText.Style_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Style self, Object obj) -> bool"""
        return _osgText.Style_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Style self) -> char const *"""
        return _osgText.Style_libraryName(self)

    def className(self):
        """className(Style self) -> char const *"""
        return _osgText.Style_className(self)

    def getDefaultStyle():
        """getDefaultStyle() -> osg::ref_ptr< osgText::Style > &"""
        return _osgText.Style_getDefaultStyle()

    if _newclass:getDefaultStyle = staticmethod(getDefaultStyle)
    __swig_getmethods__["getDefaultStyle"] = lambda x: getDefaultStyle
    def __eq__(self, *args):
        """__eq__(Style self, Style style) -> bool"""
        return _osgText.Style___eq__(self, *args)

    def setBevel(self, *args):
        """setBevel(Style self, Bevel bevel)"""
        return _osgText.Style_setBevel(self, *args)

    def getBevel(self):
        """getBevel(Style self) -> Bevel"""
        return _osgText.Style_getBevel(self)

    def setWidthRatio(self, *args):
        """setWidthRatio(Style self, float widthRatio)"""
        return _osgText.Style_setWidthRatio(self, *args)

    def getWidthRatio(self):
        """getWidthRatio(Style self) -> float"""
        return _osgText.Style_getWidthRatio(self)

    def setThicknessRatio(self, *args):
        """setThicknessRatio(Style self, float thicknessRatio)"""
        return _osgText.Style_setThicknessRatio(self, *args)

    def getThicknessRatio(self):
        """getThicknessRatio(Style self) -> float"""
        return _osgText.Style_getThicknessRatio(self)

    def setOutlineRatio(self, *args):
        """setOutlineRatio(Style self, float outlineRatio)"""
        return _osgText.Style_setOutlineRatio(self, *args)

    def getOutlineRatio(self):
        """getOutlineRatio(Style self) -> float"""
        return _osgText.Style_getOutlineRatio(self)

    def setSampleDensity(self, *args):
        """setSampleDensity(Style self, float sd)"""
        return _osgText.Style_setSampleDensity(self, *args)

    def getSampleDensity(self):
        """getSampleDensity(Style self) -> float"""
        return _osgText.Style_getSampleDensity(self)

    __swig_destroy__ = _osgText.delete_Style
    __del__ = lambda self : None;
Style_swigregister = _osgText.Style_swigregister
Style_swigregister(Style)

def Style_getDefaultStyle():
  """Style_getDefaultStyle() -> osg::ref_ptr< osgText::Style > &"""
  return _osgText.Style_getDefaultStyle()

OSGTEXT_GLYPH = _osgText.OSGTEXT_GLYPH
class Glyph(osg.Image):
    """Proxy of C++ osgText::Glyph class"""
    __swig_setmethods__ = {}
    for _s in [osg.Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Glyph, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Glyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osgText::Glyph self, Font font, unsigned int glyphCode) -> Glyph"""
        this = _osgText.new_Glyph(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFont(self, *args):
        """
        getFont(Glyph self) -> Font
        getFont(Glyph self) -> Font
        """
        return _osgText.Glyph_getFont(self, *args)

    def getGlyphCode(self):
        """getGlyphCode(Glyph self) -> unsigned int"""
        return _osgText.Glyph_getGlyphCode(self)

    def setWidth(self, *args):
        """setWidth(Glyph self, float width)"""
        return _osgText.Glyph_setWidth(self, *args)

    def getWidth(self):
        """getWidth(Glyph self) -> float"""
        return _osgText.Glyph_getWidth(self)

    def setHeight(self, *args):
        """setHeight(Glyph self, float height)"""
        return _osgText.Glyph_setHeight(self, *args)

    def getHeight(self):
        """getHeight(Glyph self) -> float"""
        return _osgText.Glyph_getHeight(self)

    def setHorizontalBearing(self, *args):
        """setHorizontalBearing(Glyph self, Vec2f bearing)"""
        return _osgText.Glyph_setHorizontalBearing(self, *args)

    def getHorizontalBearing(self):
        """getHorizontalBearing(Glyph self) -> Vec2f"""
        return _osgText.Glyph_getHorizontalBearing(self)

    def setHorizontalAdvance(self, *args):
        """setHorizontalAdvance(Glyph self, float advance)"""
        return _osgText.Glyph_setHorizontalAdvance(self, *args)

    def getHorizontalAdvance(self):
        """getHorizontalAdvance(Glyph self) -> float"""
        return _osgText.Glyph_getHorizontalAdvance(self)

    def setVerticalBearing(self, *args):
        """setVerticalBearing(Glyph self, Vec2f bearing)"""
        return _osgText.Glyph_setVerticalBearing(self, *args)

    def getVerticalBearing(self):
        """getVerticalBearing(Glyph self) -> Vec2f"""
        return _osgText.Glyph_getVerticalBearing(self)

    def setVerticalAdvance(self, *args):
        """setVerticalAdvance(Glyph self, float advance)"""
        return _osgText.Glyph_setVerticalAdvance(self, *args)

    def getVerticalAdvance(self):
        """getVerticalAdvance(Glyph self) -> float"""
        return _osgText.Glyph_getVerticalAdvance(self)

    def setTexture(self, *args):
        """setTexture(Glyph self, GlyphTexture texture)"""
        return _osgText.Glyph_setTexture(self, *args)

    def getTexture(self, *args):
        """
        getTexture(Glyph self) -> GlyphTexture
        getTexture(Glyph self) -> GlyphTexture
        """
        return _osgText.Glyph_getTexture(self, *args)

    def setTexturePosition(self, *args):
        """setTexturePosition(Glyph self, int posX, int posY)"""
        return _osgText.Glyph_setTexturePosition(self, *args)

    def getTexturePositionX(self):
        """getTexturePositionX(Glyph self) -> int"""
        return _osgText.Glyph_getTexturePositionX(self)

    def getTexturePositionY(self):
        """getTexturePositionY(Glyph self) -> int"""
        return _osgText.Glyph_getTexturePositionY(self)

    def setMinTexCoord(self, *args):
        """setMinTexCoord(Glyph self, Vec2f coord)"""
        return _osgText.Glyph_setMinTexCoord(self, *args)

    def getMinTexCoord(self):
        """getMinTexCoord(Glyph self) -> Vec2f"""
        return _osgText.Glyph_getMinTexCoord(self)

    def setMaxTexCoord(self, *args):
        """setMaxTexCoord(Glyph self, Vec2f coord)"""
        return _osgText.Glyph_setMaxTexCoord(self, *args)

    def getMaxTexCoord(self):
        """getMaxTexCoord(Glyph self) -> Vec2f"""
        return _osgText.Glyph_getMaxTexCoord(self)

    def subload(self):
        """subload(Glyph self)"""
        return _osgText.Glyph_subload(self)

Glyph_swigregister = _osgText.Glyph_swigregister
Glyph_swigregister(Glyph)

class GlyphGeometry(osg.Referenced):
    """Proxy of C++ osgText::GlyphGeometry class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlyphGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GlyphGeometry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgText::GlyphGeometry self) -> GlyphGeometry"""
        this = _osgText.new_GlyphGeometry()
        try: self.this.append(this)
        except: self.this = this
    def setup(self, *args):
        """setup(GlyphGeometry self, Glyph3D glyph, Style style)"""
        return _osgText.GlyphGeometry_setup(self, *args)

    def match(self, *args):
        """match(GlyphGeometry self, Style style) -> bool"""
        return _osgText.GlyphGeometry_match(self, *args)

    def getGeode(self):
        """getGeode(GlyphGeometry self) -> Geode"""
        return _osgText.GlyphGeometry_getGeode(self)

    def getGeometry(self):
        """getGeometry(GlyphGeometry self) -> Geometry"""
        return _osgText.GlyphGeometry_getGeometry(self)

    def setVertexArray(self, *args):
        """setVertexArray(GlyphGeometry self, Vec3Array va)"""
        return _osgText.GlyphGeometry_setVertexArray(self, *args)

    def getVertexArray(self):
        """getVertexArray(GlyphGeometry self) -> Vec3Array"""
        return _osgText.GlyphGeometry_getVertexArray(self)

    def setNormalArray(self, *args):
        """setNormalArray(GlyphGeometry self, Vec3Array na)"""
        return _osgText.GlyphGeometry_setNormalArray(self, *args)

    def getNormalArray(self):
        """getNormalArray(GlyphGeometry self) -> Vec3Array"""
        return _osgText.GlyphGeometry_getNormalArray(self)

    def getFrontPrimitiveSetList(self):
        """getFrontPrimitiveSetList(GlyphGeometry self) -> osg::Geometry::PrimitiveSetList &"""
        return _osgText.GlyphGeometry_getFrontPrimitiveSetList(self)

    def getWallPrimitiveSetList(self):
        """getWallPrimitiveSetList(GlyphGeometry self) -> osg::Geometry::PrimitiveSetList &"""
        return _osgText.GlyphGeometry_getWallPrimitiveSetList(self)

    def getBackPrimitiveSetList(self):
        """getBackPrimitiveSetList(GlyphGeometry self) -> osg::Geometry::PrimitiveSetList &"""
        return _osgText.GlyphGeometry_getBackPrimitiveSetList(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(GlyphGeometry self, bool threadSafe)"""
        return _osgText.GlyphGeometry_setThreadSafeRefUnref(self, *args)

    __swig_destroy__ = _osgText.delete_GlyphGeometry
    __del__ = lambda self : None;
GlyphGeometry_swigregister = _osgText.GlyphGeometry_swigregister
GlyphGeometry_swigregister(GlyphGeometry)

class Glyph3D(osg.Referenced):
    """Proxy of C++ osgText::Glyph3D class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Glyph3D, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Glyph3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osgText::Glyph3D self, Font font, unsigned int glyphCode) -> Glyph3D"""
        this = _osgText.new_Glyph3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFont(self, *args):
        """
        getFont(Glyph3D self) -> Font
        getFont(Glyph3D self) -> Font
        """
        return _osgText.Glyph3D_getFont(self, *args)

    def getGlyphCode(self):
        """getGlyphCode(Glyph3D self) -> unsigned int"""
        return _osgText.Glyph3D_getGlyphCode(self)

    def setWidth(self, *args):
        """setWidth(Glyph3D self, float width)"""
        return _osgText.Glyph3D_setWidth(self, *args)

    def getWidth(self):
        """getWidth(Glyph3D self) -> float"""
        return _osgText.Glyph3D_getWidth(self)

    def setHeight(self, *args):
        """setHeight(Glyph3D self, float height)"""
        return _osgText.Glyph3D_setHeight(self, *args)

    def getHeight(self):
        """getHeight(Glyph3D self) -> float"""
        return _osgText.Glyph3D_getHeight(self)

    def setHorizontalBearing(self, *args):
        """setHorizontalBearing(Glyph3D self, Vec2f bearing)"""
        return _osgText.Glyph3D_setHorizontalBearing(self, *args)

    def getHorizontalBearing(self):
        """getHorizontalBearing(Glyph3D self) -> Vec2f"""
        return _osgText.Glyph3D_getHorizontalBearing(self)

    def setHorizontalAdvance(self, *args):
        """setHorizontalAdvance(Glyph3D self, float advance)"""
        return _osgText.Glyph3D_setHorizontalAdvance(self, *args)

    def getHorizontalAdvance(self):
        """getHorizontalAdvance(Glyph3D self) -> float"""
        return _osgText.Glyph3D_getHorizontalAdvance(self)

    def setVerticalBearing(self, *args):
        """setVerticalBearing(Glyph3D self, Vec2f bearing)"""
        return _osgText.Glyph3D_setVerticalBearing(self, *args)

    def getVerticalBearing(self):
        """getVerticalBearing(Glyph3D self) -> Vec2f"""
        return _osgText.Glyph3D_getVerticalBearing(self)

    def setVerticalAdvance(self, *args):
        """setVerticalAdvance(Glyph3D self, float advance)"""
        return _osgText.Glyph3D_setVerticalAdvance(self, *args)

    def getVerticalAdvance(self):
        """getVerticalAdvance(Glyph3D self) -> float"""
        return _osgText.Glyph3D_getVerticalAdvance(self)

    def setBoundingBox(self, *args):
        """setBoundingBox(Glyph3D self, BoundingBoxf bb)"""
        return _osgText.Glyph3D_setBoundingBox(self, *args)

    def getBoundingBox(self):
        """getBoundingBox(Glyph3D self) -> BoundingBoxf"""
        return _osgText.Glyph3D_getBoundingBox(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Glyph3D self, bool threadSafe)"""
        return _osgText.Glyph3D_setThreadSafeRefUnref(self, *args)

    def setRawVertexArray(self, *args):
        """setRawVertexArray(Glyph3D self, Vec3Array vertices)"""
        return _osgText.Glyph3D_setRawVertexArray(self, *args)

    def getRawVertexArray(self, *args):
        """
        getRawVertexArray(Glyph3D self) -> Vec3Array
        getRawVertexArray(Glyph3D self) -> Vec3Array
        """
        return _osgText.Glyph3D_getRawVertexArray(self, *args)

    def getRawFacePrimitiveSetList(self, *args):
        """
        getRawFacePrimitiveSetList(Glyph3D self) -> osg::Geometry::PrimitiveSetList
        getRawFacePrimitiveSetList(Glyph3D self) -> osg::Geometry::PrimitiveSetList const &
        """
        return _osgText.Glyph3D_getRawFacePrimitiveSetList(self, *args)

    def getGlyphGeometry(self, *args):
        """getGlyphGeometry(Glyph3D self, Style style) -> GlyphGeometry"""
        return _osgText.Glyph3D_getGlyphGeometry(self, *args)

Glyph3D_swigregister = _osgText.Glyph3D_swigregister
Glyph3D_swigregister(Glyph3D)

class GlyphTexture(osg.Texture2D):
    """Proxy of C++ osgText::GlyphTexture class"""
    __swig_setmethods__ = {}
    for _s in [osg.Texture2D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlyphTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Texture2D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GlyphTexture, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgText::GlyphTexture self) -> GlyphTexture"""
        this = _osgText.new_GlyphTexture()
        try: self.this.append(this)
        except: self.this = this
    def className(self):
        """className(GlyphTexture self) -> char const *"""
        return _osgText.GlyphTexture_className(self)

    def compare(self, *args):
        """compare(GlyphTexture self, StateAttribute rhs) -> int"""
        return _osgText.GlyphTexture_compare(self, *args)

    def setGlyphImageMargin(self, *args):
        """setGlyphImageMargin(GlyphTexture self, unsigned int margin)"""
        return _osgText.GlyphTexture_setGlyphImageMargin(self, *args)

    def getGlyphImageMargin(self):
        """getGlyphImageMargin(GlyphTexture self) -> unsigned int"""
        return _osgText.GlyphTexture_getGlyphImageMargin(self)

    def setGlyphImageMarginRatio(self, *args):
        """setGlyphImageMarginRatio(GlyphTexture self, float margin)"""
        return _osgText.GlyphTexture_setGlyphImageMarginRatio(self, *args)

    def getGlyphImageMarginRatio(self):
        """getGlyphImageMarginRatio(GlyphTexture self) -> float"""
        return _osgText.GlyphTexture_getGlyphImageMarginRatio(self)

    def getSpaceForGlyph(self, *args):
        """getSpaceForGlyph(GlyphTexture self, Glyph glyph, int & posX, int & posY) -> bool"""
        return _osgText.GlyphTexture_getSpaceForGlyph(self, *args)

    def addGlyph(self, *args):
        """addGlyph(GlyphTexture self, Glyph glyph, int posX, int posY)"""
        return _osgText.GlyphTexture_addGlyph(self, *args)

    def apply(self, *args):
        """apply(GlyphTexture self, State state)"""
        return _osgText.GlyphTexture_apply(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(GlyphTexture self, bool threadSafe)"""
        return _osgText.GlyphTexture_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(GlyphTexture self, unsigned int maxSize)"""
        return _osgText.GlyphTexture_resizeGLObjectBuffers(self, *args)

    def createImage(self):
        """createImage(GlyphTexture self) -> Image"""
        return _osgText.GlyphTexture_createImage(self)

GlyphTexture_swigregister = _osgText.GlyphTexture_swigregister
GlyphTexture_swigregister(GlyphTexture)

OSGTEXT_FONT = _osgText.OSGTEXT_FONT

def readFontFile(*args):
  """
    readFontFile(std::string const & filename, osgDB::Options const * userOptions=None) -> Font
    readFontFile(std::string const & filename) -> Font
    """
  return _osgText.readFontFile(*args)

def readFontStream(*args):
  """
    readFontStream(std::istream & stream, osgDB::Options const * userOptions=None) -> Font
    readFontStream(std::istream & stream) -> Font
    """
  return _osgText.readFontStream(*args)

def readRefFontFile(*args):
  """
    readRefFontFile(std::string const & filename, osgDB::Options const * userOptions=None) -> osg::ref_ptr< osgText::Font >
    readRefFontFile(std::string const & filename) -> osg::ref_ptr< osgText::Font >
    """
  return _osgText.readRefFontFile(*args)

def readRefFontStream(*args):
  """
    readRefFontStream(std::istream & stream, osgDB::Options const * userOptions=None) -> osg::ref_ptr< osgText::Font >
    readRefFontStream(std::istream & stream) -> osg::ref_ptr< osgText::Font >
    """
  return _osgText.readRefFontStream(*args)

def findFontFile(*args):
  """findFontFile(std::string const & str) -> std::string"""
  return _osgText.findFontFile(*args)
class Font(osg.Object):
    """Proxy of C++ osgText::Font class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Font, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Font, name)
    __repr__ = _swig_repr
    def __init__(self, implementation=None): 
        """
        __init__(osgText::Font self, osgText::Font::FontImplementation * implementation=None) -> Font
        __init__(osgText::Font self) -> Font
        """
        this = _osgText.new_Font(implementation)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Font self) -> Object"""
        return _osgText.Font_cloneType(self)

    def clone(self, *args):
        """clone(Font self, CopyOp arg2) -> Object"""
        return _osgText.Font_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Font self, Object obj) -> bool"""
        return _osgText.Font_isSameKindAs(self, *args)

    def className(self):
        """className(Font self) -> char const *"""
        return _osgText.Font_className(self)

    def libraryName(self):
        """libraryName(Font self) -> char const *"""
        return _osgText.Font_libraryName(self)

    def getFileName(self):
        """getFileName(Font self) -> std::string"""
        return _osgText.Font_getFileName(self)

    def getDefaultFont():
        """getDefaultFont() -> osg::ref_ptr< osgText::Font > &"""
        return _osgText.Font_getDefaultFont()

    if _newclass:getDefaultFont = staticmethod(getDefaultFont)
    __swig_getmethods__["getDefaultFont"] = lambda x: getDefaultFont
    def setTexEnv(self, *args):
        """setTexEnv(Font self, TexEnv texenv)"""
        return _osgText.Font_setTexEnv(self, *args)

    def getTexEnv(self, *args):
        """
        getTexEnv(Font self) -> TexEnv
        getTexEnv(Font self) -> TexEnv
        """
        return _osgText.Font_getTexEnv(self, *args)

    def setStateSet(self, *args):
        """setStateSet(Font self, StateSet stateset)"""
        return _osgText.Font_setStateSet(self, *args)

    def getStateSet(self, *args):
        """
        getStateSet(Font self) -> StateSet
        getStateSet(Font self) -> StateSet
        """
        return _osgText.Font_getStateSet(self, *args)

    def getGlyph3D(self, *args):
        """getGlyph3D(Font self, unsigned int charcode) -> Glyph3D"""
        return _osgText.Font_getGlyph3D(self, *args)

    def hasVertical(self):
        """hasVertical(Font self) -> bool"""
        return _osgText.Font_hasVertical(self)

    def getVerticalSize(self, *args):
        """getVerticalSize(Font self, float & ascender, float & descender) -> bool"""
        return _osgText.Font_getVerticalSize(self, *args)

    def setGlyphImageMargin(self, *args):
        """setGlyphImageMargin(Font self, unsigned int margin)"""
        return _osgText.Font_setGlyphImageMargin(self, *args)

    def getGlyphImageMargin(self):
        """getGlyphImageMargin(Font self) -> unsigned int"""
        return _osgText.Font_getGlyphImageMargin(self)

    def setGlyphImageMarginRatio(self, *args):
        """setGlyphImageMarginRatio(Font self, float margin)"""
        return _osgText.Font_setGlyphImageMarginRatio(self, *args)

    def getGlyphImageMarginRatio(self):
        """getGlyphImageMarginRatio(Font self) -> float"""
        return _osgText.Font_getGlyphImageMarginRatio(self)

    def setTextureSizeHint(self, *args):
        """setTextureSizeHint(Font self, unsigned int width, unsigned int height)"""
        return _osgText.Font_setTextureSizeHint(self, *args)

    def getTextureWidthHint(self):
        """getTextureWidthHint(Font self) -> unsigned int"""
        return _osgText.Font_getTextureWidthHint(self)

    def getTextureHeightHint(self):
        """getTextureHeightHint(Font self) -> unsigned int"""
        return _osgText.Font_getTextureHeightHint(self)

    def setMinFilterHint(self, *args):
        """setMinFilterHint(Font self, osg::Texture::FilterMode mode)"""
        return _osgText.Font_setMinFilterHint(self, *args)

    def getMinFilterHint(self):
        """getMinFilterHint(Font self) -> osg::Texture::FilterMode"""
        return _osgText.Font_getMinFilterHint(self)

    def setMagFilterHint(self, *args):
        """setMagFilterHint(Font self, osg::Texture::FilterMode mode)"""
        return _osgText.Font_setMagFilterHint(self, *args)

    def getMagFilterHint(self):
        """getMagFilterHint(Font self) -> osg::Texture::FilterMode"""
        return _osgText.Font_getMagFilterHint(self)

    def getFontDepth(self):
        """getFontDepth(Font self) -> unsigned int"""
        return _osgText.Font_getFontDepth(self)

    def setNumberCurveSamples(self, *args):
        """setNumberCurveSamples(Font self, unsigned int numSamples)"""
        return _osgText.Font_setNumberCurveSamples(self, *args)

    def getNumberCurveSamples(self):
        """getNumberCurveSamples(Font self) -> unsigned int"""
        return _osgText.Font_getNumberCurveSamples(self)

    def setImplementation(self, *args):
        """setImplementation(Font self, osgText::Font::FontImplementation * implementation)"""
        return _osgText.Font_setImplementation(self, *args)

    def getImplementation(self, *args):
        """
        getImplementation(Font self) -> osgText::Font::FontImplementation
        getImplementation(Font self) -> osgText::Font::FontImplementation const *
        """
        return _osgText.Font_getImplementation(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Font self, bool threadSafe)"""
        return _osgText.Font_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Font self, unsigned int maxSize)"""
        return _osgText.Font_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(Font self, State state=None)
        releaseGLObjects(Font self)
        """
        return _osgText.Font_releaseGLObjects(self, state)

    def getGlyphTextureList(self):
        """getGlyphTextureList(Font self) -> osgText::Font::GlyphTextureList &"""
        return _osgText.Font_getGlyphTextureList(self)

Font_swigregister = _osgText.Font_swigregister
Font_swigregister(Font)

def Font_getDefaultFont():
  """Font_getDefaultFont() -> osg::ref_ptr< osgText::Font > &"""
  return _osgText.Font_getDefaultFont()

OSGTEXT_TEXTBASE = _osgText.OSGTEXT_TEXTBASE
class TextBase(osg.Drawable):
    """Proxy of C++ osgText::TextBase class"""
    __swig_setmethods__ = {}
    for _s in [osg.Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextBase, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isSameKindAs(self, *args):
        """isSameKindAs(TextBase self, Object obj) -> bool"""
        return _osgText.TextBase_isSameKindAs(self, *args)

    def className(self):
        """className(TextBase self) -> char const *"""
        return _osgText.TextBase_className(self)

    def libraryName(self):
        """libraryName(TextBase self) -> char const *"""
        return _osgText.TextBase_libraryName(self)

    def setColor(self, *args):
        """setColor(TextBase self, Vec4f color)"""
        return _osgText.TextBase_setColor(self, *args)

    def getColor(self):
        """getColor(TextBase self) -> Vec4f"""
        return _osgText.TextBase_getColor(self)

    def setFont(self, *args):
        """
        setFont(TextBase self, Font font=None)
        setFont(TextBase self)
        setFont(TextBase self, osg::ref_ptr< osgText::Font > font)
        setFont(TextBase self, std::string const & fontfile)
        """
        return _osgText.TextBase_setFont(self, *args)

    def getFont(self):
        """getFont(TextBase self) -> Font"""
        return _osgText.TextBase_getFont(self)

    def setStyle(self, *args):
        """setStyle(TextBase self, Style style)"""
        return _osgText.TextBase_setStyle(self, *args)

    def getStyle(self, *args):
        """
        getStyle(TextBase self) -> Style
        getStyle(TextBase self) -> Style
        """
        return _osgText.TextBase_getStyle(self, *args)

    def getOrCreateStyle(self):
        """getOrCreateStyle(TextBase self) -> Style"""
        return _osgText.TextBase_getOrCreateStyle(self)

    def setFontResolution(self, *args):
        """setFontResolution(TextBase self, unsigned int width, unsigned int height)"""
        return _osgText.TextBase_setFontResolution(self, *args)

    def getFontWidth(self):
        """getFontWidth(TextBase self) -> unsigned int"""
        return _osgText.TextBase_getFontWidth(self)

    def getFontHeight(self):
        """getFontHeight(TextBase self) -> unsigned int"""
        return _osgText.TextBase_getFontHeight(self)

    def setText(self, *args):
        """
        setText(TextBase self, String text)
        setText(TextBase self, std::string const & text)
        setText(TextBase self, std::string const & text, osgText::String::Encoding encoding)
        setText(TextBase self, wchar_t const * text)
        """
        return _osgText.TextBase_setText(self, *args)

    def getText(self, *args):
        """
        getText(TextBase self) -> String
        getText(TextBase self) -> String
        """
        return _osgText.TextBase_getText(self, *args)

    def update(self):
        """update(TextBase self)"""
        return _osgText.TextBase_update(self)

    def setCharacterSize(self, *args):
        """
        setCharacterSize(TextBase self, float height)
        setCharacterSize(TextBase self, float height, float aspectRatio)
        """
        return _osgText.TextBase_setCharacterSize(self, *args)

    def getCharacterHeight(self):
        """getCharacterHeight(TextBase self) -> float"""
        return _osgText.TextBase_getCharacterHeight(self)

    def getCharacterAspectRatio(self):
        """getCharacterAspectRatio(TextBase self) -> float"""
        return _osgText.TextBase_getCharacterAspectRatio(self)

    OBJECT_COORDS = _osgText.TextBase_OBJECT_COORDS
    SCREEN_COORDS = _osgText.TextBase_SCREEN_COORDS
    OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT = _osgText.TextBase_OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT
    def setCharacterSizeMode(self, *args):
        """setCharacterSizeMode(TextBase self, osgText::TextBase::CharacterSizeMode mode)"""
        return _osgText.TextBase_setCharacterSizeMode(self, *args)

    def getCharacterSizeMode(self):
        """getCharacterSizeMode(TextBase self) -> osgText::TextBase::CharacterSizeMode"""
        return _osgText.TextBase_getCharacterSizeMode(self)

    def setMaximumWidth(self, *args):
        """setMaximumWidth(TextBase self, float maximumWidth)"""
        return _osgText.TextBase_setMaximumWidth(self, *args)

    def getMaximumWidth(self):
        """getMaximumWidth(TextBase self) -> float"""
        return _osgText.TextBase_getMaximumWidth(self)

    def setMaximumHeight(self, *args):
        """setMaximumHeight(TextBase self, float maximumHeight)"""
        return _osgText.TextBase_setMaximumHeight(self, *args)

    def getMaximumHeight(self):
        """getMaximumHeight(TextBase self) -> float"""
        return _osgText.TextBase_getMaximumHeight(self)

    def setLineSpacing(self, *args):
        """setLineSpacing(TextBase self, float lineSpacing)"""
        return _osgText.TextBase_setLineSpacing(self, *args)

    def getLineSpacing(self):
        """getLineSpacing(TextBase self) -> float"""
        return _osgText.TextBase_getLineSpacing(self)

    def setPosition(self, *args):
        """setPosition(TextBase self, Vec3f pos)"""
        return _osgText.TextBase_setPosition(self, *args)

    def getPosition(self):
        """getPosition(TextBase self) -> Vec3f"""
        return _osgText.TextBase_getPosition(self)

    LEFT_TOP = _osgText.TextBase_LEFT_TOP
    LEFT_CENTER = _osgText.TextBase_LEFT_CENTER
    LEFT_BOTTOM = _osgText.TextBase_LEFT_BOTTOM
    CENTER_TOP = _osgText.TextBase_CENTER_TOP
    CENTER_CENTER = _osgText.TextBase_CENTER_CENTER
    CENTER_BOTTOM = _osgText.TextBase_CENTER_BOTTOM
    RIGHT_TOP = _osgText.TextBase_RIGHT_TOP
    RIGHT_CENTER = _osgText.TextBase_RIGHT_CENTER
    RIGHT_BOTTOM = _osgText.TextBase_RIGHT_BOTTOM
    LEFT_BASE_LINE = _osgText.TextBase_LEFT_BASE_LINE
    CENTER_BASE_LINE = _osgText.TextBase_CENTER_BASE_LINE
    RIGHT_BASE_LINE = _osgText.TextBase_RIGHT_BASE_LINE
    LEFT_BOTTOM_BASE_LINE = _osgText.TextBase_LEFT_BOTTOM_BASE_LINE
    CENTER_BOTTOM_BASE_LINE = _osgText.TextBase_CENTER_BOTTOM_BASE_LINE
    RIGHT_BOTTOM_BASE_LINE = _osgText.TextBase_RIGHT_BOTTOM_BASE_LINE
    BASE_LINE = _osgText.TextBase_BASE_LINE
    def setAlignment(self, *args):
        """setAlignment(TextBase self, osgText::TextBase::AlignmentType alignment)"""
        return _osgText.TextBase_setAlignment(self, *args)

    def getAlignment(self):
        """getAlignment(TextBase self) -> osgText::TextBase::AlignmentType"""
        return _osgText.TextBase_getAlignment(self)

    XY_PLANE = _osgText.TextBase_XY_PLANE
    REVERSED_XY_PLANE = _osgText.TextBase_REVERSED_XY_PLANE
    XZ_PLANE = _osgText.TextBase_XZ_PLANE
    REVERSED_XZ_PLANE = _osgText.TextBase_REVERSED_XZ_PLANE
    YZ_PLANE = _osgText.TextBase_YZ_PLANE
    REVERSED_YZ_PLANE = _osgText.TextBase_REVERSED_YZ_PLANE
    SCREEN = _osgText.TextBase_SCREEN
    USER_DEFINED_ROTATION = _osgText.TextBase_USER_DEFINED_ROTATION
    def setAxisAlignment(self, *args):
        """setAxisAlignment(TextBase self, osgText::TextBase::AxisAlignment axis)"""
        return _osgText.TextBase_setAxisAlignment(self, *args)

    def getAxisAlignment(self):
        """getAxisAlignment(TextBase self) -> osgText::TextBase::AxisAlignment"""
        return _osgText.TextBase_getAxisAlignment(self)

    def setRotation(self, *args):
        """setRotation(TextBase self, Quat quat)"""
        return _osgText.TextBase_setRotation(self, *args)

    def getRotation(self):
        """getRotation(TextBase self) -> Quat"""
        return _osgText.TextBase_getRotation(self)

    def setAutoRotateToScreen(self, *args):
        """setAutoRotateToScreen(TextBase self, bool autoRotateToScreen)"""
        return _osgText.TextBase_setAutoRotateToScreen(self, *args)

    def getAutoRotateToScreen(self):
        """getAutoRotateToScreen(TextBase self) -> bool"""
        return _osgText.TextBase_getAutoRotateToScreen(self)

    LEFT_TO_RIGHT = _osgText.TextBase_LEFT_TO_RIGHT
    RIGHT_TO_LEFT = _osgText.TextBase_RIGHT_TO_LEFT
    VERTICAL = _osgText.TextBase_VERTICAL
    def setLayout(self, *args):
        """setLayout(TextBase self, osgText::TextBase::Layout layout)"""
        return _osgText.TextBase_setLayout(self, *args)

    def getLayout(self):
        """getLayout(TextBase self) -> osgText::TextBase::Layout"""
        return _osgText.TextBase_getLayout(self)

    TEXT = _osgText.TextBase_TEXT
    BOUNDINGBOX = _osgText.TextBase_BOUNDINGBOX
    FILLEDBOUNDINGBOX = _osgText.TextBase_FILLEDBOUNDINGBOX
    ALIGNMENT = _osgText.TextBase_ALIGNMENT
    def setDrawMode(self, *args):
        """setDrawMode(TextBase self, unsigned int mode)"""
        return _osgText.TextBase_setDrawMode(self, *args)

    def getDrawMode(self):
        """getDrawMode(TextBase self) -> unsigned int"""
        return _osgText.TextBase_getDrawMode(self)

    def setBoundingBoxMargin(self, *args):
        """setBoundingBoxMargin(TextBase self, float margin)"""
        return _osgText.TextBase_setBoundingBoxMargin(self, *args)

    def getBoundingBoxMargin(self):
        """getBoundingBoxMargin(TextBase self) -> float"""
        return _osgText.TextBase_getBoundingBoxMargin(self)

    def setBoundingBoxColor(self, *args):
        """setBoundingBoxColor(TextBase self, Vec4f color)"""
        return _osgText.TextBase_setBoundingBoxColor(self, *args)

    def getBoundingBoxColor(self):
        """getBoundingBoxColor(TextBase self) -> Vec4f"""
        return _osgText.TextBase_getBoundingBoxColor(self)

    def setKerningType(self, *args):
        """setKerningType(TextBase self, osgText::KerningType kerningType)"""
        return _osgText.TextBase_setKerningType(self, *args)

    def getKerningType(self):
        """getKerningType(TextBase self) -> osgText::KerningType"""
        return _osgText.TextBase_getKerningType(self)

    def getLineCount(self):
        """getLineCount(TextBase self) -> unsigned int"""
        return _osgText.TextBase_getLineCount(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(TextBase self, bool threadSafe)"""
        return _osgText.TextBase_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(TextBase self, unsigned int maxSize)"""
        return _osgText.TextBase_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(TextBase self, State state=None)
        releaseGLObjects(TextBase self)
        """
        return _osgText.TextBase_releaseGLObjects(self, state)

    def computeBound(self):
        """computeBound(TextBase self) -> BoundingBoxf"""
        return _osgText.TextBase_computeBound(self)

TextBase_swigregister = _osgText.TextBase_swigregister
TextBase_swigregister(TextBase)

OSGTEXT_TEXT = _osgText.OSGTEXT_TEXT
class Text(TextBase):
    """Proxy of C++ osgText::Text class"""
    __swig_setmethods__ = {}
    for _s in [TextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    for _s in [TextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgText::Text self) -> Text
        __init__(osgText::Text self, Text text, CopyOp copyop=SHALLOW_COPY) -> Text
        __init__(osgText::Text self, Text text) -> Text
        """
        this = _osgText.new_Text(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Text self) -> Object"""
        return _osgText.Text_cloneType(self)

    def clone(self, *args):
        """clone(Text self, CopyOp copyop) -> Object"""
        return _osgText.Text_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Text self, Object obj) -> bool"""
        return _osgText.Text_isSameKindAs(self, *args)

    def className(self):
        """className(Text self) -> char const *"""
        return _osgText.Text_className(self)

    def libraryName(self):
        """libraryName(Text self) -> char const *"""
        return _osgText.Text_libraryName(self)

    def setFont(self, *args):
        """
        setFont(Text self, Font font=None)
        setFont(Text self)
        setFont(Text self, osg::ref_ptr< osgText::Font > font)
        setFont(Text self, std::string const & fontfile)
        """
        return _osgText.Text_setFont(self, *args)

    def setEnableDepthWrites(self, *args):
        """setEnableDepthWrites(Text self, bool enable)"""
        return _osgText.Text_setEnableDepthWrites(self, *args)

    def getEnableDepthWrites(self):
        """getEnableDepthWrites(Text self) -> bool"""
        return _osgText.Text_getEnableDepthWrites(self)

    DROP_SHADOW_BOTTOM_RIGHT = _osgText.Text_DROP_SHADOW_BOTTOM_RIGHT
    DROP_SHADOW_CENTER_RIGHT = _osgText.Text_DROP_SHADOW_CENTER_RIGHT
    DROP_SHADOW_TOP_RIGHT = _osgText.Text_DROP_SHADOW_TOP_RIGHT
    DROP_SHADOW_BOTTOM_CENTER = _osgText.Text_DROP_SHADOW_BOTTOM_CENTER
    DROP_SHADOW_TOP_CENTER = _osgText.Text_DROP_SHADOW_TOP_CENTER
    DROP_SHADOW_BOTTOM_LEFT = _osgText.Text_DROP_SHADOW_BOTTOM_LEFT
    DROP_SHADOW_CENTER_LEFT = _osgText.Text_DROP_SHADOW_CENTER_LEFT
    DROP_SHADOW_TOP_LEFT = _osgText.Text_DROP_SHADOW_TOP_LEFT
    OUTLINE = _osgText.Text_OUTLINE
    NONE = _osgText.Text_NONE
    POLYGON_OFFSET = _osgText.Text_POLYGON_OFFSET
    NO_DEPTH_BUFFER = _osgText.Text_NO_DEPTH_BUFFER
    DEPTH_RANGE = _osgText.Text_DEPTH_RANGE
    STENCIL_BUFFER = _osgText.Text_STENCIL_BUFFER
    DELAYED_DEPTH_WRITES = _osgText.Text_DELAYED_DEPTH_WRITES
    def setBackdropType(self, *args):
        """setBackdropType(Text self, osgText::Text::BackdropType type)"""
        return _osgText.Text_setBackdropType(self, *args)

    def getBackdropType(self):
        """getBackdropType(Text self) -> osgText::Text::BackdropType"""
        return _osgText.Text_getBackdropType(self)

    def setBackdropOffset(self, *args):
        """
        setBackdropOffset(Text self, float offset=0.07)
        setBackdropOffset(Text self)
        setBackdropOffset(Text self, float horizontal, float vertical)
        """
        return _osgText.Text_setBackdropOffset(self, *args)

    def getBackdropHorizontalOffset(self):
        """getBackdropHorizontalOffset(Text self) -> float"""
        return _osgText.Text_getBackdropHorizontalOffset(self)

    def getBackdropVerticalOffset(self):
        """getBackdropVerticalOffset(Text self) -> float"""
        return _osgText.Text_getBackdropVerticalOffset(self)

    def setBackdropColor(self, *args):
        """setBackdropColor(Text self, Vec4f color)"""
        return _osgText.Text_setBackdropColor(self, *args)

    def getBackdropColor(self):
        """getBackdropColor(Text self) -> Vec4f"""
        return _osgText.Text_getBackdropColor(self)

    def setBackdropImplementation(self, *args):
        """setBackdropImplementation(Text self, osgText::Text::BackdropImplementation implementation)"""
        return _osgText.Text_setBackdropImplementation(self, *args)

    def getBackdropImplementation(self):
        """getBackdropImplementation(Text self) -> osgText::Text::BackdropImplementation"""
        return _osgText.Text_getBackdropImplementation(self)

    SOLID = _osgText.Text_SOLID
    PER_CHARACTER = _osgText.Text_PER_CHARACTER
    OVERALL = _osgText.Text_OVERALL
    def setColorGradientMode(self, *args):
        """setColorGradientMode(Text self, osgText::Text::ColorGradientMode mode)"""
        return _osgText.Text_setColorGradientMode(self, *args)

    def getColorGradientMode(self):
        """getColorGradientMode(Text self) -> osgText::Text::ColorGradientMode"""
        return _osgText.Text_getColorGradientMode(self)

    def setColorGradientCorners(self, *args):
        """setColorGradientCorners(Text self, Vec4f topLeft, Vec4f bottomLeft, Vec4f bottomRight, Vec4f topRight)"""
        return _osgText.Text_setColorGradientCorners(self, *args)

    def getColorGradientTopLeft(self):
        """getColorGradientTopLeft(Text self) -> Vec4f"""
        return _osgText.Text_getColorGradientTopLeft(self)

    def getColorGradientBottomLeft(self):
        """getColorGradientBottomLeft(Text self) -> Vec4f"""
        return _osgText.Text_getColorGradientBottomLeft(self)

    def getColorGradientBottomRight(self):
        """getColorGradientBottomRight(Text self) -> Vec4f"""
        return _osgText.Text_getColorGradientBottomRight(self)

    def getColorGradientTopRight(self):
        """getColorGradientTopRight(Text self) -> Vec4f"""
        return _osgText.Text_getColorGradientTopRight(self)

    def drawImplementation(self, *args):
        """drawImplementation(Text self, RenderInfo renderInfo)"""
        return _osgText.Text_drawImplementation(self, *args)

    def accept(self, *args):
        """
        accept(Text self, osg::Drawable::ConstAttributeFunctor & af)
        accept(Text self, PrimitiveFunctor pf)
        """
        return _osgText.Text_accept(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Text self, bool threadSafe)"""
        return _osgText.Text_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Text self, unsigned int maxSize)"""
        return _osgText.Text_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(Text self, State state=None)
        releaseGLObjects(Text self)
        """
        return _osgText.Text_releaseGLObjects(self, state)

Text_swigregister = _osgText.Text_swigregister
Text_swigregister(Text)

OSGTEXT_TEXT3D = _osgText.OSGTEXT_TEXT3D
class Text3D(TextBase):
    """Proxy of C++ osgText::Text3D class"""
    __swig_setmethods__ = {}
    for _s in [TextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text3D, name, value)
    __swig_getmethods__ = {}
    for _s in [TextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text3D, name)
    __repr__ = _swig_repr
    PER_FACE = _osgText.Text3D_PER_FACE
    PER_GLYPH = _osgText.Text3D_PER_GLYPH
    def __init__(self, *args): 
        """
        __init__(osgText::Text3D self) -> Text3D
        __init__(osgText::Text3D self, Text3D text, CopyOp copyop=SHALLOW_COPY) -> Text3D
        __init__(osgText::Text3D self, Text3D text) -> Text3D
        """
        this = _osgText.new_Text3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Text3D self) -> Object"""
        return _osgText.Text3D_cloneType(self)

    def clone(self, *args):
        """clone(Text3D self, CopyOp copyop) -> Object"""
        return _osgText.Text3D_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Text3D self, Object obj) -> bool"""
        return _osgText.Text3D_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Text3D self) -> char const *"""
        return _osgText.Text3D_libraryName(self)

    def className(self):
        """className(Text3D self) -> char const *"""
        return _osgText.Text3D_className(self)

    def getCharacterDepth(self):
        """getCharacterDepth(Text3D self) -> float"""
        return _osgText.Text3D_getCharacterDepth(self)

    def setCharacterDepth(self, *args):
        """setCharacterDepth(Text3D self, float characterDepth)"""
        return _osgText.Text3D_setCharacterDepth(self, *args)

    def getRenderMode(self):
        """getRenderMode(Text3D self) -> osgText::Text3D::RenderMode"""
        return _osgText.Text3D_getRenderMode(self)

    def setRenderMode(self, *args):
        """setRenderMode(Text3D self, osgText::Text3D::RenderMode renderMode)"""
        return _osgText.Text3D_setRenderMode(self, *args)

    def getWallStateSet(self, *args):
        """
        getWallStateSet(Text3D self) -> StateSet
        getWallStateSet(Text3D self) -> StateSet
        """
        return _osgText.Text3D_getWallStateSet(self, *args)

    def getOrCreateWallStateSet(self):
        """getOrCreateWallStateSet(Text3D self) -> StateSet"""
        return _osgText.Text3D_getOrCreateWallStateSet(self)

    def setWallStateSet(self, *args):
        """setWallStateSet(Text3D self, StateSet wallStateSet)"""
        return _osgText.Text3D_setWallStateSet(self, *args)

    def getBackStateSet(self, *args):
        """
        getBackStateSet(Text3D self) -> StateSet
        getBackStateSet(Text3D self) -> StateSet
        """
        return _osgText.Text3D_getBackStateSet(self, *args)

    def getOrCreateBackStateSet(self):
        """getOrCreateBackStateSet(Text3D self) -> StateSet"""
        return _osgText.Text3D_getOrCreateBackStateSet(self)

    def setBackStateSet(self, *args):
        """setBackStateSet(Text3D self, StateSet backStateSet)"""
        return _osgText.Text3D_setBackStateSet(self, *args)

    def drawImplementation(self, *args):
        """drawImplementation(Text3D self, RenderInfo renderInfo)"""
        return _osgText.Text3D_drawImplementation(self, *args)

    def accept(self, *args):
        """
        accept(Text3D self, osg::Drawable::ConstAttributeFunctor & af)
        accept(Text3D self, PrimitiveFunctor pf)
        """
        return _osgText.Text3D_accept(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(Text3D self, bool threadSafe)"""
        return _osgText.Text3D_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(Text3D self, unsigned int maxSize)"""
        return _osgText.Text3D_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(Text3D self, State state=None)
        releaseGLObjects(Text3D self)
        """
        return _osgText.Text3D_releaseGLObjects(self, state)

    def computeBound(self):
        """computeBound(Text3D self) -> BoundingBoxf"""
        return _osgText.Text3D_computeBound(self)

Text3D_swigregister = _osgText.Text3D_swigregister
Text3D_swigregister(Text3D)

OSGTEXT_FADETEXT = _osgText.OSGTEXT_FADETEXT
class FadeText(Text):
    """Proxy of C++ osgText::FadeText class"""
    __swig_setmethods__ = {}
    for _s in [Text]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FadeText, name, value)
    __swig_getmethods__ = {}
    for _s in [Text]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FadeText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgText::FadeText self) -> FadeText
        __init__(osgText::FadeText self, Text text, CopyOp copyop=SHALLOW_COPY) -> FadeText
        __init__(osgText::FadeText self, Text text) -> FadeText
        """
        this = _osgText.new_FadeText(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(FadeText self) -> Object"""
        return _osgText.FadeText_cloneType(self)

    def clone(self, *args):
        """clone(FadeText self, CopyOp copyop) -> Object"""
        return _osgText.FadeText_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(FadeText self, Object obj) -> bool"""
        return _osgText.FadeText_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(FadeText self) -> char const *"""
        return _osgText.FadeText_libraryName(self)

    def className(self):
        """className(FadeText self) -> char const *"""
        return _osgText.FadeText_className(self)

    def setFadeSpeed(self, *args):
        """setFadeSpeed(FadeText self, float fadeSpeed)"""
        return _osgText.FadeText_setFadeSpeed(self, *args)

    def getFadeSpeed(self):
        """getFadeSpeed(FadeText self) -> float"""
        return _osgText.FadeText_getFadeSpeed(self)

    def drawImplementation(self, *args):
        """drawImplementation(FadeText self, RenderInfo renderInfo)"""
        return _osgText.FadeText_drawImplementation(self, *args)

FadeText_swigregister = _osgText.FadeText_swigregister
FadeText_swigregister(FadeText)

OSGTEXT_VERSION = _osgText.OSGTEXT_VERSION

def osgTextGetVersion():
  """osgTextGetVersion() -> char const *"""
  return _osgText.osgTextGetVersion()

def osgTextGetLibraryName():
  """osgTextGetLibraryName() -> char const *"""
  return _osgText.osgTextGetLibraryName()
# This file is compatible with both classic and new-style classes.


