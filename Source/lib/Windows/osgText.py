# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _osgText
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgText.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _osgText.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _osgText.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _osgText.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _osgText.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _osgText.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _osgText.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _osgText.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _osgText.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgText.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _osgText.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _osgText.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgText.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgText.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgText.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _osgText.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _osgText.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import osg
OSGTEXT_EXPORT_ = _osgText.OSGTEXT_EXPORT_
KERNING_DEFAULT = _osgText.KERNING_DEFAULT
KERNING_UNFITTED = _osgText.KERNING_UNFITTED
KERNING_NONE = _osgText.KERNING_NONE
OSGTEXT_STRING = _osgText.OSGTEXT_STRING
class VectorUInt(osg.vectorGLuint):
    """Proxy of C++ VectorUInt class"""
    __swig_setmethods__ = {}
    for _s in [osg.vectorGLuint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUInt, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.vectorGLuint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> VectorUInt
        __init__(self, VectorUInt copy) -> VectorUInt
        __init__(self, unsigned int beg, unsigned int end) -> VectorUInt
        __init__(self, unsigned int n) -> VectorUInt
        """
        this = _osgText.new_VectorUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgText.delete_VectorUInt
    __del__ = lambda self : None;
VectorUInt_swigregister = _osgText.VectorUInt_swigregister
VectorUInt_swigregister(VectorUInt)

class String(VectorUInt):
    """Proxy of C++ String class"""
    __swig_setmethods__ = {}
    for _s in [VectorUInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, String, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorUInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, String, name)
    __repr__ = _swig_repr
    ENCODING_UNDEFINED = _osgText.String_ENCODING_UNDEFINED
    ENCODING_ASCII = _osgText.String_ENCODING_ASCII
    ENCODING_UTF8 = _osgText.String_ENCODING_UTF8
    ENCODING_UTF16 = _osgText.String_ENCODING_UTF16
    ENCODING_UTF16_BE = _osgText.String_ENCODING_UTF16_BE
    ENCODING_UTF16_LE = _osgText.String_ENCODING_UTF16_LE
    ENCODING_UTF32 = _osgText.String_ENCODING_UTF32
    ENCODING_UTF32_BE = _osgText.String_ENCODING_UTF32_BE
    ENCODING_UTF32_LE = _osgText.String_ENCODING_UTF32_LE
    ENCODING_SIGNATURE = _osgText.String_ENCODING_SIGNATURE
    def __init__(self, *args): 
        """
        __init__(self) -> String
        __init__(self, String str) -> String
        __init__(self, string str) -> String
        __init__(self, wchar_t text) -> String
        __init__(self, string text, Encoding encoding) -> String
        """
        this = _osgText.new_String(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(*args):
        """
        set(self, string str)
        set(self, wchar_t text)
        set(self, string text, Encoding encoding)
        """
        return _osgText.String_set(*args)

    def createUTF8EncodedString(*args):
        """createUTF8EncodedString(self) -> string"""
        return _osgText.String_createUTF8EncodedString(*args)

    __swig_destroy__ = _osgText.delete_String
    __del__ = lambda self : None;
String_swigregister = _osgText.String_swigregister
String_swigregister(String)

OSGTEXT_FONT = _osgText.OSGTEXT_FONT

def findFontFile(*args):
  """findFontFile(string str) -> string"""
  return _osgText.findFontFile(*args)
class Font(osg.Object):
    """Proxy of C++ Font class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Font, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Font, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, FontImplementation implementation=0) -> Font
        __init__(self) -> Font
        """
        this = _osgText.new_Font(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgText.Font_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp ?) -> Object"""
        return _osgText.Font_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgText.Font_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgText.Font_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgText.Font_libraryName(*args)

    def getFileName(*args):
        """getFileName(self) -> string"""
        return _osgText.Font_getFileName(*args)

    def setTexEnv(*args):
        """setTexEnv(self, TexEnv texenv)"""
        return _osgText.Font_setTexEnv(*args)

    def getTexEnv(*args):
        """
        getTexEnv(self) -> TexEnv
        getTexEnv(self) -> TexEnv
        """
        return _osgText.Font_getTexEnv(*args)

    def setStateSet(*args):
        """setStateSet(self, StateSet stateset)"""
        return _osgText.Font_setStateSet(*args)

    def getStateSet(*args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osgText.Font_getStateSet(*args)

    def hasVertical(*args):
        """hasVertical(self) -> bool"""
        return _osgText.Font_hasVertical(*args)

    def setGlyphImageMargin(*args):
        """setGlyphImageMargin(self, unsigned int margin)"""
        return _osgText.Font_setGlyphImageMargin(*args)

    def getGlyphImageMargin(*args):
        """getGlyphImageMargin(self) -> unsigned int"""
        return _osgText.Font_getGlyphImageMargin(*args)

    def setGlyphImageMarginRatio(*args):
        """setGlyphImageMarginRatio(self, float margin)"""
        return _osgText.Font_setGlyphImageMarginRatio(*args)

    def getGlyphImageMarginRatio(*args):
        """getGlyphImageMarginRatio(self) -> float"""
        return _osgText.Font_getGlyphImageMarginRatio(*args)

    def setTextureSizeHint(*args):
        """setTextureSizeHint(self, unsigned int width, unsigned int height)"""
        return _osgText.Font_setTextureSizeHint(*args)

    def getTextureWidthHint(*args):
        """getTextureWidthHint(self) -> unsigned int"""
        return _osgText.Font_getTextureWidthHint(*args)

    def getTextureHeightHint(*args):
        """getTextureHeightHint(self) -> unsigned int"""
        return _osgText.Font_getTextureHeightHint(*args)

    def setMinFilterHint(*args):
        """setMinFilterHint(self, FilterMode mode)"""
        return _osgText.Font_setMinFilterHint(*args)

    def getMinFilterHint(*args):
        """getMinFilterHint(self) -> FilterMode"""
        return _osgText.Font_getMinFilterHint(*args)

    def setMagFilterHint(*args):
        """setMagFilterHint(self, FilterMode mode)"""
        return _osgText.Font_setMagFilterHint(*args)

    def getMagFilterHint(*args):
        """getMagFilterHint(self) -> FilterMode"""
        return _osgText.Font_getMagFilterHint(*args)

    def setImplementation(*args):
        """setImplementation(self, FontImplementation implementation)"""
        return _osgText.Font_setImplementation(*args)

    def getImplementation(*args):
        """
        getImplementation(self) -> FontImplementation
        getImplementation(self) -> FontImplementation
        """
        return _osgText.Font_getImplementation(*args)

    def setThreadSafeRefUnref(*args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osgText.Font_setThreadSafeRefUnref(*args)

    def resizeGLObjectBuffers(*args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osgText.Font_resizeGLObjectBuffers(*args)

    def releaseGLObjects(*args):
        """
        releaseGLObjects(self, State state=0)
        releaseGLObjects(self)
        """
        return _osgText.Font_releaseGLObjects(*args)

Font_swigregister = _osgText.Font_swigregister
Font_swigregister(Font)

def readFontFile(*args):
  """
    readFontFile(string filename, osgDB::ReaderWriter::Options userOptions=0) -> Font
    readFontFile(string filename) -> Font
    """
  return _osgText.readFontFile(*args)

def readFontStream(*args):
  """
    readFontStream(std::istream stream, osgDB::ReaderWriter::Options userOptions=0) -> Font
    readFontStream(std::istream stream) -> Font
    """
  return _osgText.readFontStream(*args)

def readRefFontFile(*args):
  """
    readRefFontFile(string filename, osgDB::ReaderWriter::Options userOptions=0) -> osg::ref_ptr<(osgText::Font)>
    readRefFontFile(string filename) -> osg::ref_ptr<(osgText::Font)>
    """
  return _osgText.readRefFontFile(*args)

def readRefFontStream(*args):
  """
    readRefFontStream(std::istream stream, osgDB::ReaderWriter::Options userOptions=0) -> osg::ref_ptr<(osgText::Font)>
    readRefFontStream(std::istream stream) -> osg::ref_ptr<(osgText::Font)>
    """
  return _osgText.readRefFontStream(*args)

OSGTEXT_TEXTBASE = _osgText.OSGTEXT_TEXTBASE
class TextBase(osg.Drawable):
    """Proxy of C++ TextBase class"""
    __swig_setmethods__ = {}
    for _s in [osg.Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextBase, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgText.TextBase_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgText.TextBase_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgText.TextBase_libraryName(*args)

    def setFontResolution(*args):
        """setFontResolution(self, unsigned int width, unsigned int height)"""
        return _osgText.TextBase_setFontResolution(*args)

    def getFontWidth(*args):
        """getFontWidth(self) -> unsigned int"""
        return _osgText.TextBase_getFontWidth(*args)

    def getFontHeight(*args):
        """getFontHeight(self) -> unsigned int"""
        return _osgText.TextBase_getFontHeight(*args)

    def setText(*args):
        """
        setText(self, String text)
        setText(self, string text)
        setText(self, string text, Encoding encoding)
        setText(self, wchar_t text)
        """
        return _osgText.TextBase_setText(*args)

    def getText(*args):
        """
        getText(self) -> String
        getText(self) -> String
        """
        return _osgText.TextBase_getText(*args)

    def update(*args):
        """update(self)"""
        return _osgText.TextBase_update(*args)

    def setCharacterSize(*args):
        """
        setCharacterSize(self, float height, float aspectRatio=1.0)
        setCharacterSize(self, float height)
        """
        return _osgText.TextBase_setCharacterSize(*args)

    def getCharacterHeight(*args):
        """getCharacterHeight(self) -> float"""
        return _osgText.TextBase_getCharacterHeight(*args)

    def getCharacterAspectRatio(*args):
        """getCharacterAspectRatio(self) -> float"""
        return _osgText.TextBase_getCharacterAspectRatio(*args)

    OBJECT_COORDS = _osgText.TextBase_OBJECT_COORDS
    SCREEN_COORDS = _osgText.TextBase_SCREEN_COORDS
    OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT = _osgText.TextBase_OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT
    def setCharacterSizeMode(*args):
        """setCharacterSizeMode(self, CharacterSizeMode mode)"""
        return _osgText.TextBase_setCharacterSizeMode(*args)

    def getCharacterSizeMode(*args):
        """getCharacterSizeMode(self) -> CharacterSizeMode"""
        return _osgText.TextBase_getCharacterSizeMode(*args)

    def setMaximumWidth(*args):
        """setMaximumWidth(self, float maximumWidth)"""
        return _osgText.TextBase_setMaximumWidth(*args)

    def getMaximumWidth(*args):
        """getMaximumWidth(self) -> float"""
        return _osgText.TextBase_getMaximumWidth(*args)

    def setMaximumHeight(*args):
        """setMaximumHeight(self, float maximumHeight)"""
        return _osgText.TextBase_setMaximumHeight(*args)

    def getMaximumHeight(*args):
        """getMaximumHeight(self) -> float"""
        return _osgText.TextBase_getMaximumHeight(*args)

    def setLineSpacing(*args):
        """setLineSpacing(self, float lineSpacing)"""
        return _osgText.TextBase_setLineSpacing(*args)

    def getLineSpacing(*args):
        """getLineSpacing(self) -> float"""
        return _osgText.TextBase_getLineSpacing(*args)

    def setPosition(*args):
        """setPosition(self, Vec3 pos)"""
        return _osgText.TextBase_setPosition(*args)

    def getPosition(*args):
        """getPosition(self) -> Vec3"""
        return _osgText.TextBase_getPosition(*args)

    LEFT_TOP = _osgText.TextBase_LEFT_TOP
    LEFT_CENTER = _osgText.TextBase_LEFT_CENTER
    LEFT_BOTTOM = _osgText.TextBase_LEFT_BOTTOM
    CENTER_TOP = _osgText.TextBase_CENTER_TOP
    CENTER_CENTER = _osgText.TextBase_CENTER_CENTER
    CENTER_BOTTOM = _osgText.TextBase_CENTER_BOTTOM
    RIGHT_TOP = _osgText.TextBase_RIGHT_TOP
    RIGHT_CENTER = _osgText.TextBase_RIGHT_CENTER
    RIGHT_BOTTOM = _osgText.TextBase_RIGHT_BOTTOM
    LEFT_BASE_LINE = _osgText.TextBase_LEFT_BASE_LINE
    CENTER_BASE_LINE = _osgText.TextBase_CENTER_BASE_LINE
    RIGHT_BASE_LINE = _osgText.TextBase_RIGHT_BASE_LINE
    LEFT_BOTTOM_BASE_LINE = _osgText.TextBase_LEFT_BOTTOM_BASE_LINE
    CENTER_BOTTOM_BASE_LINE = _osgText.TextBase_CENTER_BOTTOM_BASE_LINE
    RIGHT_BOTTOM_BASE_LINE = _osgText.TextBase_RIGHT_BOTTOM_BASE_LINE
    BASE_LINE = _osgText.TextBase_BASE_LINE
    def setAlignment(*args):
        """setAlignment(self, AlignmentType alignment)"""
        return _osgText.TextBase_setAlignment(*args)

    def getAlignment(*args):
        """getAlignment(self) -> AlignmentType"""
        return _osgText.TextBase_getAlignment(*args)

    XY_PLANE = _osgText.TextBase_XY_PLANE
    REVERSED_XY_PLANE = _osgText.TextBase_REVERSED_XY_PLANE
    XZ_PLANE = _osgText.TextBase_XZ_PLANE
    REVERSED_XZ_PLANE = _osgText.TextBase_REVERSED_XZ_PLANE
    YZ_PLANE = _osgText.TextBase_YZ_PLANE
    REVERSED_YZ_PLANE = _osgText.TextBase_REVERSED_YZ_PLANE
    SCREEN = _osgText.TextBase_SCREEN
    USER_DEFINED_ROTATION = _osgText.TextBase_USER_DEFINED_ROTATION
    def setAxisAlignment(*args):
        """setAxisAlignment(self, AxisAlignment axis)"""
        return _osgText.TextBase_setAxisAlignment(*args)

    def getAxisAlignment(*args):
        """getAxisAlignment(self) -> AxisAlignment"""
        return _osgText.TextBase_getAxisAlignment(*args)

    def setRotation(*args):
        """setRotation(self, Quat quat)"""
        return _osgText.TextBase_setRotation(*args)

    def getRotation(*args):
        """getRotation(self) -> Quat"""
        return _osgText.TextBase_getRotation(*args)

    def setAutoRotateToScreen(*args):
        """setAutoRotateToScreen(self, bool autoRotateToScreen)"""
        return _osgText.TextBase_setAutoRotateToScreen(*args)

    def getAutoRotateToScreen(*args):
        """getAutoRotateToScreen(self) -> bool"""
        return _osgText.TextBase_getAutoRotateToScreen(*args)

    LEFT_TO_RIGHT = _osgText.TextBase_LEFT_TO_RIGHT
    RIGHT_TO_LEFT = _osgText.TextBase_RIGHT_TO_LEFT
    VERTICAL = _osgText.TextBase_VERTICAL
    def setLayout(*args):
        """setLayout(self, Layout layout)"""
        return _osgText.TextBase_setLayout(*args)

    def getLayout(*args):
        """getLayout(self) -> Layout"""
        return _osgText.TextBase_getLayout(*args)

    TEXT = _osgText.TextBase_TEXT
    BOUNDINGBOX = _osgText.TextBase_BOUNDINGBOX
    ALIGNMENT = _osgText.TextBase_ALIGNMENT
    def setDrawMode(*args):
        """setDrawMode(self, unsigned int mode)"""
        return _osgText.TextBase_setDrawMode(*args)

    def getDrawMode(*args):
        """getDrawMode(self) -> unsigned int"""
        return _osgText.TextBase_getDrawMode(*args)

    def setKerningType(*args):
        """setKerningType(self, KerningType kerningType)"""
        return _osgText.TextBase_setKerningType(*args)

    def getKerningType(*args):
        """getKerningType(self) -> KerningType"""
        return _osgText.TextBase_getKerningType(*args)

    def getLineCount(*args):
        """getLineCount(self) -> unsigned int"""
        return _osgText.TextBase_getLineCount(*args)

    def setThreadSafeRefUnref(*args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osgText.TextBase_setThreadSafeRefUnref(*args)

    def resizeGLObjectBuffers(*args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osgText.TextBase_resizeGLObjectBuffers(*args)

    def releaseGLObjects(*args):
        """
        releaseGLObjects(self, State state=0)
        releaseGLObjects(self)
        """
        return _osgText.TextBase_releaseGLObjects(*args)

    def computeBound(*args):
        """computeBound(self) -> BoundingBox"""
        return _osgText.TextBase_computeBound(*args)

TextBase_swigregister = _osgText.TextBase_swigregister
TextBase_swigregister(TextBase)

OSGTEXT_TEXT = _osgText.OSGTEXT_TEXT
class Text(TextBase):
    """Proxy of C++ Text class"""
    __swig_setmethods__ = {}
    for _s in [TextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    for _s in [TextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Text
        __init__(self, Text text, CopyOp copyop=SHALLOW_COPY) -> Text
        __init__(self, Text text) -> Text
        """
        this = _osgText.new_Text(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgText.Text_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgText.Text_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgText.Text_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgText.Text_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgText.Text_libraryName(*args)

    def setFont(*args):
        """
        setFont(self, Font font=0)
        setFont(self)
        setFont(self, osg::ref_ptr<(osgText::Font)> font)
        setFont(self, string fontfile)
        """
        return _osgText.Text_setFont(*args)

    def getFont(*args):
        """getFont(self) -> Font"""
        return _osgText.Text_getFont(*args)

    def setColor(*args):
        """setColor(self, Vec4 color)"""
        return _osgText.Text_setColor(*args)

    def getColor(*args):
        """getColor(self) -> Vec4"""
        return _osgText.Text_getColor(*args)

    DROP_SHADOW_BOTTOM_RIGHT = _osgText.Text_DROP_SHADOW_BOTTOM_RIGHT
    DROP_SHADOW_CENTER_RIGHT = _osgText.Text_DROP_SHADOW_CENTER_RIGHT
    DROP_SHADOW_TOP_RIGHT = _osgText.Text_DROP_SHADOW_TOP_RIGHT
    DROP_SHADOW_BOTTOM_CENTER = _osgText.Text_DROP_SHADOW_BOTTOM_CENTER
    DROP_SHADOW_TOP_CENTER = _osgText.Text_DROP_SHADOW_TOP_CENTER
    DROP_SHADOW_BOTTOM_LEFT = _osgText.Text_DROP_SHADOW_BOTTOM_LEFT
    DROP_SHADOW_CENTER_LEFT = _osgText.Text_DROP_SHADOW_CENTER_LEFT
    DROP_SHADOW_TOP_LEFT = _osgText.Text_DROP_SHADOW_TOP_LEFT
    OUTLINE = _osgText.Text_OUTLINE
    NONE = _osgText.Text_NONE
    POLYGON_OFFSET = _osgText.Text_POLYGON_OFFSET
    NO_DEPTH_BUFFER = _osgText.Text_NO_DEPTH_BUFFER
    DEPTH_RANGE = _osgText.Text_DEPTH_RANGE
    STENCIL_BUFFER = _osgText.Text_STENCIL_BUFFER
    def setBackdropType(*args):
        """setBackdropType(self, BackdropType type)"""
        return _osgText.Text_setBackdropType(*args)

    def getBackdropType(*args):
        """getBackdropType(self) -> BackdropType"""
        return _osgText.Text_getBackdropType(*args)

    def setBackdropOffset(*args):
        """
        setBackdropOffset(self, float offset=0.07)
        setBackdropOffset(self)
        setBackdropOffset(self, float horizontal, float vertical)
        """
        return _osgText.Text_setBackdropOffset(*args)

    def getBackdropHorizontalOffset(*args):
        """getBackdropHorizontalOffset(self) -> float"""
        return _osgText.Text_getBackdropHorizontalOffset(*args)

    def getBackdropVerticalOffset(*args):
        """getBackdropVerticalOffset(self) -> float"""
        return _osgText.Text_getBackdropVerticalOffset(*args)

    def setBackdropColor(*args):
        """setBackdropColor(self, Vec4 color)"""
        return _osgText.Text_setBackdropColor(*args)

    def getBackdropColor(*args):
        """getBackdropColor(self) -> Vec4"""
        return _osgText.Text_getBackdropColor(*args)

    def setBackdropImplementation(*args):
        """setBackdropImplementation(self, BackdropImplementation implementation)"""
        return _osgText.Text_setBackdropImplementation(*args)

    def getBackdropImplementation(*args):
        """getBackdropImplementation(self) -> BackdropImplementation"""
        return _osgText.Text_getBackdropImplementation(*args)

    SOLID = _osgText.Text_SOLID
    PER_CHARACTER = _osgText.Text_PER_CHARACTER
    OVERALL = _osgText.Text_OVERALL
    def setColorGradientMode(*args):
        """setColorGradientMode(self, ColorGradientMode mode)"""
        return _osgText.Text_setColorGradientMode(*args)

    def getColorGradientMode(*args):
        """getColorGradientMode(self) -> ColorGradientMode"""
        return _osgText.Text_getColorGradientMode(*args)

    def setColorGradientCorners(*args):
        """setColorGradientCorners(self, Vec4 topLeft, Vec4 bottomLeft, Vec4 bottomRight, Vec4 topRight)"""
        return _osgText.Text_setColorGradientCorners(*args)

    def getColorGradientTopLeft(*args):
        """getColorGradientTopLeft(self) -> Vec4"""
        return _osgText.Text_getColorGradientTopLeft(*args)

    def getColorGradientBottomLeft(*args):
        """getColorGradientBottomLeft(self) -> Vec4"""
        return _osgText.Text_getColorGradientBottomLeft(*args)

    def getColorGradientBottomRight(*args):
        """getColorGradientBottomRight(self) -> Vec4"""
        return _osgText.Text_getColorGradientBottomRight(*args)

    def getColorGradientTopRight(*args):
        """getColorGradientTopRight(self) -> Vec4"""
        return _osgText.Text_getColorGradientTopRight(*args)

    def drawImplementation(*args):
        """drawImplementation(self, RenderInfo renderInfo)"""
        return _osgText.Text_drawImplementation(*args)

    def setThreadSafeRefUnref(*args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osgText.Text_setThreadSafeRefUnref(*args)

    def resizeGLObjectBuffers(*args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osgText.Text_resizeGLObjectBuffers(*args)

    def releaseGLObjects(*args):
        """
        releaseGLObjects(self, State state=0)
        releaseGLObjects(self)
        """
        return _osgText.Text_releaseGLObjects(*args)

Text_swigregister = _osgText.Text_swigregister
Text_swigregister(Text)

OSGTEXT_FADETEXT = _osgText.OSGTEXT_FADETEXT
class FadeText(Text):
    """Proxy of C++ FadeText class"""
    __swig_setmethods__ = {}
    for _s in [Text]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FadeText, name, value)
    __swig_getmethods__ = {}
    for _s in [Text]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FadeText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FadeText
        __init__(self, Text text, CopyOp copyop=SHALLOW_COPY) -> FadeText
        __init__(self, Text text) -> FadeText
        """
        this = _osgText.new_FadeText(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgText.FadeText_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgText.FadeText_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgText.FadeText_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgText.FadeText_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgText.FadeText_className(*args)

    def setFadeSpeed(*args):
        """setFadeSpeed(self, float fadeSpeed)"""
        return _osgText.FadeText_setFadeSpeed(*args)

    def getFadeSpeed(*args):
        """getFadeSpeed(self) -> float"""
        return _osgText.FadeText_getFadeSpeed(*args)

    def drawImplementation(*args):
        """drawImplementation(self, RenderInfo renderInfo)"""
        return _osgText.FadeText_drawImplementation(*args)

FadeText_swigregister = _osgText.FadeText_swigregister
FadeText_swigregister(FadeText)

OSGTEXT_VERSION = _osgText.OSGTEXT_VERSION

def osgTextGetVersion(*args):
  """osgTextGetVersion() -> char"""
  return _osgText.osgTextGetVersion(*args)

def osgTextGetLibraryName(*args):
  """osgTextGetLibraryName() -> char"""
  return _osgText.osgTextGetLibraryName(*args)


