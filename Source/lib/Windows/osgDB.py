# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osgDB', [dirname(__file__)])
        except ImportError:
            import _osgDB
            return _osgDB
        if fp is not None:
            try:
                _mod = imp.load_module('_osgDB', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osgDB = swig_import_helper()
    del swig_import_helper
else:
    import _osgDB
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgDB.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _osgDB.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgDB.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgDB.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _osgDB.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgDB.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _osgDB.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _osgDB.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _osgDB.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _osgDB.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgDB.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgDB.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgDB.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgDB.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgDB.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgDB.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osgDB.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osgDB.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import osg
class stdFilePathList(_object):
    """Proxy of C++ std::deque<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdFilePathList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdFilePathList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(stdFilePathList self) -> SwigPyIterator"""
        return _osgDB.stdFilePathList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(stdFilePathList self) -> bool"""
        return _osgDB.stdFilePathList___nonzero__(self)

    def __bool__(self):
        """__bool__(stdFilePathList self) -> bool"""
        return _osgDB.stdFilePathList___bool__(self)

    def __len__(self):
        """__len__(stdFilePathList self) -> std::deque< std::string >::size_type"""
        return _osgDB.stdFilePathList___len__(self)

    def pop(self):
        """pop(stdFilePathList self) -> std::deque< std::string >::value_type"""
        return _osgDB.stdFilePathList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(stdFilePathList self, std::deque< std::string >::difference_type i, std::deque< std::string >::difference_type j) -> stdFilePathList"""
        return _osgDB.stdFilePathList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(stdFilePathList self, std::deque< std::string >::difference_type i, std::deque< std::string >::difference_type j, 
            stdFilePathList v=std::deque< std::string,std::allocator< std::string > >())
        __setslice__(stdFilePathList self, std::deque< std::string >::difference_type i, std::deque< std::string >::difference_type j)
        """
        return _osgDB.stdFilePathList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(stdFilePathList self, std::deque< std::string >::difference_type i, std::deque< std::string >::difference_type j)"""
        return _osgDB.stdFilePathList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(stdFilePathList self, std::deque< std::string >::difference_type i)
        __delitem__(stdFilePathList self, PySliceObject * slice)
        """
        return _osgDB.stdFilePathList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(stdFilePathList self, PySliceObject * slice) -> stdFilePathList
        __getitem__(stdFilePathList self, std::deque< std::string >::difference_type i) -> std::deque< std::string >::value_type const &
        """
        return _osgDB.stdFilePathList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(stdFilePathList self, PySliceObject * slice, stdFilePathList v)
        __setitem__(stdFilePathList self, PySliceObject * slice)
        __setitem__(stdFilePathList self, std::deque< std::string >::difference_type i, std::deque< std::string >::value_type const & x)
        """
        return _osgDB.stdFilePathList___setitem__(self, *args)

    def append(self, *args):
        """append(stdFilePathList self, std::deque< std::string >::value_type const & x)"""
        return _osgDB.stdFilePathList_append(self, *args)

    def empty(self):
        """empty(stdFilePathList self) -> bool"""
        return _osgDB.stdFilePathList_empty(self)

    def size(self):
        """size(stdFilePathList self) -> std::deque< std::string >::size_type"""
        return _osgDB.stdFilePathList_size(self)

    def clear(self):
        """clear(stdFilePathList self)"""
        return _osgDB.stdFilePathList_clear(self)

    def swap(self, *args):
        """swap(stdFilePathList self, stdFilePathList v)"""
        return _osgDB.stdFilePathList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(stdFilePathList self) -> std::deque< std::string >::allocator_type"""
        return _osgDB.stdFilePathList_get_allocator(self)

    def begin(self):
        """begin(stdFilePathList self) -> std::deque< std::string >::iterator"""
        return _osgDB.stdFilePathList_begin(self)

    def end(self):
        """end(stdFilePathList self) -> std::deque< std::string >::iterator"""
        return _osgDB.stdFilePathList_end(self)

    def rbegin(self):
        """rbegin(stdFilePathList self) -> std::deque< std::string >::reverse_iterator"""
        return _osgDB.stdFilePathList_rbegin(self)

    def rend(self):
        """rend(stdFilePathList self) -> std::deque< std::string >::reverse_iterator"""
        return _osgDB.stdFilePathList_rend(self)

    def pop_back(self):
        """pop_back(stdFilePathList self)"""
        return _osgDB.stdFilePathList_pop_back(self)

    def erase(self, *args):
        """
        erase(stdFilePathList self, std::deque< std::string >::iterator pos) -> std::deque< std::string >::iterator
        erase(stdFilePathList self, std::deque< std::string >::iterator first, std::deque< std::string >::iterator last) -> std::deque< std::string >::iterator
        """
        return _osgDB.stdFilePathList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::deque<(std::string)> self) -> stdFilePathList
        __init__(std::deque<(std::string)> self, stdFilePathList arg2) -> stdFilePathList
        __init__(std::deque<(std::string)> self, std::deque< std::string >::size_type size) -> stdFilePathList
        __init__(std::deque<(std::string)> self, std::deque< std::string >::size_type size, std::deque< std::string >::value_type const & value) -> stdFilePathList
        """
        this = _osgDB.new_stdFilePathList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(stdFilePathList self, std::deque< std::string >::value_type const & x)"""
        return _osgDB.stdFilePathList_push_back(self, *args)

    def front(self):
        """front(stdFilePathList self) -> std::deque< std::string >::value_type const &"""
        return _osgDB.stdFilePathList_front(self)

    def back(self):
        """back(stdFilePathList self) -> std::deque< std::string >::value_type const &"""
        return _osgDB.stdFilePathList_back(self)

    def assign(self, *args):
        """assign(stdFilePathList self, std::deque< std::string >::size_type n, std::deque< std::string >::value_type const & x)"""
        return _osgDB.stdFilePathList_assign(self, *args)

    def resize(self, *args):
        """
        resize(stdFilePathList self, std::deque< std::string >::size_type new_size)
        resize(stdFilePathList self, std::deque< std::string >::size_type new_size, std::deque< std::string >::value_type const & x)
        """
        return _osgDB.stdFilePathList_resize(self, *args)

    def insert(self, *args):
        """
        insert(stdFilePathList self, std::deque< std::string >::iterator pos, std::deque< std::string >::value_type const & x) -> std::deque< std::string >::iterator
        insert(stdFilePathList self, std::deque< std::string >::iterator pos, std::deque< std::string >::size_type n, 
            std::deque< std::string >::value_type const & x)
        """
        return _osgDB.stdFilePathList_insert(self, *args)

    def pop_front(self):
        """pop_front(stdFilePathList self)"""
        return _osgDB.stdFilePathList_pop_front(self)

    def push_front(self, *args):
        """push_front(stdFilePathList self, std::deque< std::string >::value_type const & x)"""
        return _osgDB.stdFilePathList_push_front(self, *args)

    __swig_destroy__ = _osgDB.delete_stdFilePathList
    __del__ = lambda self : None;
stdFilePathList_swigregister = _osgDB.stdFilePathList_swigregister
stdFilePathList_swigregister(stdFilePathList)

OSGDB_VERSION = _osgDB.OSGDB_VERSION

def osgDBGetVersion():
  """osgDBGetVersion() -> char const *"""
  return _osgDB.osgDBGetVersion()

def osgDBGetLibraryName():
  """osgDBGetLibraryName() -> char const *"""
  return _osgDB.osgDBGetLibraryName()
OSGDB_EXPORT_ = _osgDB.OSGDB_EXPORT_
OSGDB_AUTHENTICATIONMAP = _osgDB.OSGDB_AUTHENTICATIONMAP
class AuthenticationDetails(osg.Referenced):
    """Proxy of C++ osgDB::AuthenticationDetails class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthenticationDetails, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthenticationDetails, name)
    __repr__ = _swig_repr
    BASIC = _osgDB.AuthenticationDetails_BASIC
    DIGEST = _osgDB.AuthenticationDetails_DIGEST
    NTLM = _osgDB.AuthenticationDetails_NTLM
    GSSNegotiate = _osgDB.AuthenticationDetails_GSSNegotiate
    ANY = _osgDB.AuthenticationDetails_ANY
    ANYSAFE = _osgDB.AuthenticationDetails_ANYSAFE
    def __init__(self, *args): 
        """
        __init__(osgDB::AuthenticationDetails self, std::string const & u, std::string const & p, osgDB::AuthenticationDetails::HttpAuthentication auth=BASIC) -> AuthenticationDetails
        __init__(osgDB::AuthenticationDetails self, std::string const & u, std::string const & p) -> AuthenticationDetails
        """
        this = _osgDB.new_AuthenticationDetails(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["username"] = _osgDB.AuthenticationDetails_username_set
    __swig_getmethods__["username"] = _osgDB.AuthenticationDetails_username_get
    if _newclass:username = _swig_property(_osgDB.AuthenticationDetails_username_get, _osgDB.AuthenticationDetails_username_set)
    __swig_setmethods__["password"] = _osgDB.AuthenticationDetails_password_set
    __swig_getmethods__["password"] = _osgDB.AuthenticationDetails_password_get
    if _newclass:password = _swig_property(_osgDB.AuthenticationDetails_password_get, _osgDB.AuthenticationDetails_password_set)
    __swig_setmethods__["httpAuthentication"] = _osgDB.AuthenticationDetails_httpAuthentication_set
    __swig_getmethods__["httpAuthentication"] = _osgDB.AuthenticationDetails_httpAuthentication_get
    if _newclass:httpAuthentication = _swig_property(_osgDB.AuthenticationDetails_httpAuthentication_get, _osgDB.AuthenticationDetails_httpAuthentication_set)
AuthenticationDetails_swigregister = _osgDB.AuthenticationDetails_swigregister
AuthenticationDetails_swigregister(AuthenticationDetails)

class AuthenticationMap(osg.Referenced):
    """Proxy of C++ osgDB::AuthenticationMap class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthenticationMap, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthenticationMap, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgDB::AuthenticationMap self) -> AuthenticationMap"""
        this = _osgDB.new_AuthenticationMap()
        try: self.this.append(this)
        except: self.this = this
    def addAuthenticationDetails(self, *args):
        """addAuthenticationDetails(AuthenticationMap self, std::string const & path, AuthenticationDetails details)"""
        return _osgDB.AuthenticationMap_addAuthenticationDetails(self, *args)

    def getAuthenticationDetails(self, *args):
        """getAuthenticationDetails(AuthenticationMap self, std::string const & path) -> AuthenticationDetails"""
        return _osgDB.AuthenticationMap_getAuthenticationDetails(self, *args)

AuthenticationMap_swigregister = _osgDB.AuthenticationMap_swigregister
AuthenticationMap_swigregister(AuthenticationMap)

OSGDB_FILECACHE = _osgDB.OSGDB_FILECACHE
class FileCache(osg.Referenced):
    """Proxy of C++ osgDB::FileCache class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileCache, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileCache, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osgDB::FileCache self, std::string const & path) -> FileCache"""
        this = _osgDB.new_FileCache(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFileCachePath(self):
        """getFileCachePath(FileCache self) -> std::string const &"""
        return _osgDB.FileCache_getFileCachePath(self)

    def isFileAppropriateForFileCache(self, *args):
        """isFileAppropriateForFileCache(FileCache self, std::string const & originalFileName) -> bool"""
        return _osgDB.FileCache_isFileAppropriateForFileCache(self, *args)

    def createCacheFileName(self, *args):
        """createCacheFileName(FileCache self, std::string const & originalFileName) -> std::string"""
        return _osgDB.FileCache_createCacheFileName(self, *args)

    def existsInCache(self, *args):
        """existsInCache(FileCache self, std::string const & originalFileName) -> bool"""
        return _osgDB.FileCache_existsInCache(self, *args)

    def readImage(self, *args):
        """readImage(FileCache self, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::ReadResult"""
        return _osgDB.FileCache_readImage(self, *args)

    def writeImage(self, *args):
        """writeImage(FileCache self, Image image, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::WriteResult"""
        return _osgDB.FileCache_writeImage(self, *args)

    def readObject(self, *args):
        """readObject(FileCache self, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::ReadResult"""
        return _osgDB.FileCache_readObject(self, *args)

    def writeObject(self, *args):
        """writeObject(FileCache self, Object object, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::WriteResult"""
        return _osgDB.FileCache_writeObject(self, *args)

    def readHeightField(self, *args):
        """readHeightField(FileCache self, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::ReadResult"""
        return _osgDB.FileCache_readHeightField(self, *args)

    def writeHeightField(self, *args):
        """writeHeightField(FileCache self, HeightField hf, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::WriteResult"""
        return _osgDB.FileCache_writeHeightField(self, *args)

    def readNode(self, *args):
        """
        readNode(FileCache self, std::string const & originalFileName, osgDB::Options const * options, bool buildKdTreeIfRequired=True) -> ReaderWriter::ReadResult
        readNode(FileCache self, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::ReadResult
        """
        return _osgDB.FileCache_readNode(self, *args)

    def writeNode(self, *args):
        """writeNode(FileCache self, Node node, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::WriteResult"""
        return _osgDB.FileCache_writeNode(self, *args)

    def readShader(self, *args):
        """readShader(FileCache self, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::ReadResult"""
        return _osgDB.FileCache_readShader(self, *args)

    def writeShader(self, *args):
        """writeShader(FileCache self, Shader shader, std::string const & originalFileName, osgDB::Options const * options) -> ReaderWriter::WriteResult"""
        return _osgDB.FileCache_writeShader(self, *args)

    def loadDatabaseRevisionsForFile(self, *args):
        """loadDatabaseRevisionsForFile(FileCache self, std::string const & originanlFileName) -> bool"""
        return _osgDB.FileCache_loadDatabaseRevisionsForFile(self, *args)

    def getDatabaseRevisionsList(self):
        """getDatabaseRevisionsList(FileCache self) -> osgDB::FileCache::DatabaseRevisionsList &"""
        return _osgDB.FileCache_getDatabaseRevisionsList(self)

    def isCachedFileBlackListed(self, *args):
        """isCachedFileBlackListed(FileCache self, std::string const & originalFileName) -> bool"""
        return _osgDB.FileCache_isCachedFileBlackListed(self, *args)

FileCache_swigregister = _osgDB.FileCache_swigregister
FileCache_swigregister(FileCache)

OSGDB_READERWRITER = _osgDB.OSGDB_READERWRITER
OSGDB_WRITEFILE = _osgDB.OSGDB_WRITEFILE

def writeObjectFile(*args):
  """
    writeObjectFile(Object object, std::string const & filename, osgDB::Options const * options) -> bool
    writeObjectFile(Object object, std::string const & filename) -> bool
    """
  return _osgDB.writeObjectFile(*args)

def writeImageFile(*args):
  """
    writeImageFile(Image image, std::string const & filename, osgDB::Options const * options) -> bool
    writeImageFile(Image image, std::string const & filename) -> bool
    """
  return _osgDB.writeImageFile(*args)

def writeHeightFieldFile(*args):
  """
    writeHeightFieldFile(HeightField hf, std::string const & filename, osgDB::Options const * options) -> bool
    writeHeightFieldFile(HeightField hf, std::string const & filename) -> bool
    """
  return _osgDB.writeHeightFieldFile(*args)

def writeNodeFile(*args):
  """
    writeNodeFile(Node node, std::string const & filename, osgDB::Options const * options) -> bool
    writeNodeFile(Node node, std::string const & filename) -> bool
    """
  return _osgDB.writeNodeFile(*args)

def writeShaderFile(*args):
  """
    writeShaderFile(Shader shader, std::string const & filename, osgDB::Options const * options) -> bool
    writeShaderFile(Shader shader, std::string const & filename) -> bool
    """
  return _osgDB.writeShaderFile(*args)
OSGDB_SHAREDSTATEMANAGER = _osgDB.OSGDB_SHAREDSTATEMANAGER
class SharedStateManager(osg.NodeVisitor):
    """Proxy of C++ osgDB::SharedStateManager class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedStateManager, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SharedStateManager, name)
    __repr__ = _swig_repr
    SHARE_NONE = _osgDB.SharedStateManager_SHARE_NONE
    SHARE_STATIC_TEXTURES = _osgDB.SharedStateManager_SHARE_STATIC_TEXTURES
    SHARE_UNSPECIFIED_TEXTURES = _osgDB.SharedStateManager_SHARE_UNSPECIFIED_TEXTURES
    SHARE_DYNAMIC_TEXTURES = _osgDB.SharedStateManager_SHARE_DYNAMIC_TEXTURES
    SHARE_STATIC_STATESETS = _osgDB.SharedStateManager_SHARE_STATIC_STATESETS
    SHARE_UNSPECIFIED_STATESETS = _osgDB.SharedStateManager_SHARE_UNSPECIFIED_STATESETS
    SHARE_DYNAMIC_STATESETS = _osgDB.SharedStateManager_SHARE_DYNAMIC_STATESETS
    SHARE_TEXTURES = _osgDB.SharedStateManager_SHARE_TEXTURES
    SHARE_STATESETS = _osgDB.SharedStateManager_SHARE_STATESETS
    SHARE_ALL = _osgDB.SharedStateManager_SHARE_ALL
    def __init__(self, *args): 
        """
        __init__(osgDB::SharedStateManager self, unsigned int mode=SHARE_ALL) -> SharedStateManager
        __init__(osgDB::SharedStateManager self) -> SharedStateManager
        """
        this = _osgDB.new_SharedStateManager(*args)
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(SharedStateManager self) -> char const *"""
        return _osgDB.SharedStateManager_libraryName(self)

    def className(self):
        """className(SharedStateManager self) -> char const *"""
        return _osgDB.SharedStateManager_className(self)

    def setShareMode(self, *args):
        """setShareMode(SharedStateManager self, unsigned int mode)"""
        return _osgDB.SharedStateManager_setShareMode(self, *args)

    def getShareMode(self):
        """getShareMode(SharedStateManager self) -> unsigned int"""
        return _osgDB.SharedStateManager_getShareMode(self)

    def prune(self):
        """prune(SharedStateManager self)"""
        return _osgDB.SharedStateManager_prune(self)

    def share(self, *args):
        """
        share(SharedStateManager self, Node node, OpenThreads::Mutex * mt=None)
        share(SharedStateManager self, Node node)
        """
        return _osgDB.SharedStateManager_share(self, *args)

    def apply(self, *args):
        """
        apply(SharedStateManager self, Node node)
        apply(SharedStateManager self, Geode geode)
        """
        return _osgDB.SharedStateManager_apply(self, *args)

    def isShared(self, *args):
        """
        isShared(SharedStateManager self, StateSet stateSet) -> bool
        isShared(SharedStateManager self, Texture texture) -> bool
        """
        return _osgDB.SharedStateManager_isShared(self, *args)

    def releaseGLObjects(self, *args):
        """releaseGLObjects(SharedStateManager self, State state)"""
        return _osgDB.SharedStateManager_releaseGLObjects(self, *args)

    __swig_destroy__ = _osgDB.delete_SharedStateManager
    __del__ = lambda self : None;
SharedStateManager_swigregister = _osgDB.SharedStateManager_swigregister
SharedStateManager_swigregister(SharedStateManager)

OSGDB_READFILE = _osgDB.OSGDB_READFILE

def readObjectFile(*args):
  """
    readObjectFile(std::string const & filename, osgDB::Options const * options) -> Object
    readObjectFile(std::string const & filename) -> Object
    """
  return _osgDB.readObjectFile(*args)

def readImageFile(*args):
  """
    readImageFile(std::string const & filename, osgDB::Options const * options) -> Image
    readImageFile(std::string const & filename) -> Image
    """
  return _osgDB.readImageFile(*args)

def readHeightFieldFile(*args):
  """
    readHeightFieldFile(std::string const & filename, osgDB::Options const * options) -> HeightField
    readHeightFieldFile(std::string const & filename) -> HeightField
    """
  return _osgDB.readHeightFieldFile(*args)

def readNodeFile(*args):
  """
    readNodeFile(std::string const & filename, osgDB::Options const * options) -> Node
    readNodeFile(std::string const & filename) -> Node
    """
  return _osgDB.readNodeFile(*args)

def readNodeFiles(*args):
  """
    readNodeFiles(std::vector< std::string,std::allocator< std::string > > & fileList, osgDB::Options const * options) -> Node
    readNodeFiles(std::vector< std::string,std::allocator< std::string > > & fileList) -> Node
    readNodeFiles(ArgumentParser parser, osgDB::Options const * options) -> Node
    readNodeFiles(ArgumentParser parser) -> Node
    """
  return _osgDB.readNodeFiles(*args)

def readShaderFile(*args):
  """
    readShaderFile(std::string const & filename, osgDB::Options const * options) -> Shader
    readShaderFile(std::string const & filename) -> Shader
    readShaderFile(osg::Shader::Type type, std::string const & filename, osgDB::Options const * options) -> Shader
    readShaderFile(osg::Shader::Type type, std::string const & filename) -> Shader
    """
  return _osgDB.readShaderFile(*args)

def readRefObjectFile(*args):
  """
    readRefObjectFile(std::string const & filename, osgDB::Options const * options) -> osg::ref_ptr< osg::Object >
    readRefObjectFile(std::string const & filename) -> osg::ref_ptr< osg::Object >
    """
  return _osgDB.readRefObjectFile(*args)

def readRefImageFile(*args):
  """
    readRefImageFile(std::string const & filename, osgDB::Options const * options) -> ImageRef
    readRefImageFile(std::string const & filename) -> ImageRef
    """
  return _osgDB.readRefImageFile(*args)

def readRefHeightFieldFile(*args):
  """
    readRefHeightFieldFile(std::string const & filename, osgDB::Options const * options) -> osg::ref_ptr< osg::HeightField >
    readRefHeightFieldFile(std::string const & filename) -> osg::ref_ptr< osg::HeightField >
    """
  return _osgDB.readRefHeightFieldFile(*args)

def readRefNodeFile(*args):
  """
    readRefNodeFile(std::string const & filename, osgDB::Options const * options) -> NodeRef
    readRefNodeFile(std::string const & filename) -> NodeRef
    """
  return _osgDB.readRefNodeFile(*args)

def readRefShaderFile(*args):
  """
    readRefShaderFile(std::string const & filename, osgDB::Options const * options) -> osg::ref_ptr< osg::Shader >
    readRefShaderFile(std::string const & filename) -> osg::ref_ptr< osg::Shader >
    """
  return _osgDB.readRefShaderFile(*args)
OSGDB_INPUT = _osgDB.OSGDB_INPUT
class basic_type_wrapper(_object):
    """Proxy of C++ osgDB::basic_type_wrapper class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_type_wrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_type_wrapper, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgDB.delete_basic_type_wrapper
    __del__ = lambda self : None;
    def matches(self, *args):
        """matches(basic_type_wrapper self, Object proto) -> bool"""
        return _osgDB.basic_type_wrapper_matches(self, *args)

basic_type_wrapper_swigregister = _osgDB.basic_type_wrapper_swigregister
basic_type_wrapper_swigregister(basic_type_wrapper)

class Field(_object):
    """Proxy of C++ osgDB::Field class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    MIN_CACHE_SIZE = _osgDB.Field_MIN_CACHE_SIZE
    def __init__(self, *args): 
        """
        __init__(osgDB::Field self) -> Field
        __init__(osgDB::Field self, Field field) -> Field
        """
        this = _osgDB.new_Field(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_Field
    __del__ = lambda self : None;
    def reset(self):
        """reset(Field self)"""
        return _osgDB.Field_reset(self)

    def addChar(self, *args):
        """addChar(Field self, char c)"""
        return _osgDB.Field_addChar(self, *args)

    def getNoCharacters(self):
        """getNoCharacters(Field self) -> int"""
        return _osgDB.Field_getNoCharacters(self)

    def setWithinQuotes(self, withinQuotes=True):
        """
        setWithinQuotes(Field self, bool withinQuotes=True)
        setWithinQuotes(Field self)
        """
        return _osgDB.Field_setWithinQuotes(self, withinQuotes)

    def getWithinQuotes(self):
        """getWithinQuotes(Field self) -> bool"""
        return _osgDB.Field_getWithinQuotes(self)

    def setNoNestedBrackets(self, *args):
        """setNoNestedBrackets(Field self, int no)"""
        return _osgDB.Field_setNoNestedBrackets(self, *args)

    def getNoNestedBrackets(self):
        """getNoNestedBrackets(Field self) -> int"""
        return _osgDB.Field_getNoNestedBrackets(self)

    OPEN_BRACKET = _osgDB.Field_OPEN_BRACKET
    CLOSE_BRACKET = _osgDB.Field_CLOSE_BRACKET
    STRING = _osgDB.Field_STRING
    WORD = _osgDB.Field_WORD
    REAL = _osgDB.Field_REAL
    INTEGER = _osgDB.Field_INTEGER
    BLANK = _osgDB.Field_BLANK
    UNINITIALISED = _osgDB.Field_UNINITIALISED
    def getFieldType(self):
        """getFieldType(Field self) -> osgDB::Field::FieldType"""
        return _osgDB.Field_getFieldType(self)

    def isValid(self):
        """isValid(Field self) -> bool"""
        return _osgDB.Field_isValid(self)

    def isOpenBracket(self):
        """isOpenBracket(Field self) -> bool"""
        return _osgDB.Field_isOpenBracket(self)

    def isCloseBracket(self):
        """isCloseBracket(Field self) -> bool"""
        return _osgDB.Field_isCloseBracket(self)

    def isWord(self):
        """isWord(Field self) -> bool"""
        return _osgDB.Field_isWord(self)

    def matchWord(self, *args):
        """
        matchWord(Field self, char const * str) -> bool
        matchWord(Field self, char const * str, int noCharacters) -> bool
        """
        return _osgDB.Field_matchWord(self, *args)

    def isString(self):
        """isString(Field self) -> bool"""
        return _osgDB.Field_isString(self)

    def matchString(self, *args):
        """
        matchString(Field self, char const * str) -> bool
        matchString(Field self, char const * str, int noCharacters) -> bool
        """
        return _osgDB.Field_matchString(self, *args)

    def isQuotedString(self):
        """isQuotedString(Field self) -> bool"""
        return _osgDB.Field_isQuotedString(self)

    def getStr(self):
        """getStr(Field self) -> char const *"""
        return _osgDB.Field_getStr(self)

    def takeStr(self):
        """takeStr(Field self) -> char *"""
        return _osgDB.Field_takeStr(self)

    def isInt(self):
        """isInt(Field self) -> bool"""
        return _osgDB.Field_isInt(self)

    def matchInt(self, *args):
        """matchInt(Field self, int i) -> bool"""
        return _osgDB.Field_matchInt(self, *args)

    def getInt(self):
        """getInt(Field self) -> bool"""
        return _osgDB.Field_getInt(self)

    def isUInt(self):
        """isUInt(Field self) -> bool"""
        return _osgDB.Field_isUInt(self)

    def matchUInt(self, *args):
        """matchUInt(Field self, unsigned int i) -> bool"""
        return _osgDB.Field_matchUInt(self, *args)

    def getUInt(self, *args):
        """getUInt(Field self, unsigned int & i) -> bool"""
        return _osgDB.Field_getUInt(self, *args)

    def isFloat(self):
        """isFloat(Field self) -> bool"""
        return _osgDB.Field_isFloat(self)

    def matchFloat(self, *args):
        """matchFloat(Field self, float f) -> bool"""
        return _osgDB.Field_matchFloat(self, *args)

    def getFloat(self, *args):
        """
        getFloat(Field self) -> bool
        getFloat(Field self, double & f) -> bool
        """
        return _osgDB.Field_getFloat(self, *args)

    def calculateFieldType(*args):
        """
        calculateFieldType(char const * str, bool withinQuotes=False) -> osgDB::Field::FieldType
        calculateFieldType(char const * str) -> osgDB::Field::FieldType
        """
        return _osgDB.Field_calculateFieldType(*args)

    if _newclass:calculateFieldType = staticmethod(calculateFieldType)
    __swig_getmethods__["calculateFieldType"] = lambda x: calculateFieldType
Field_swigregister = _osgDB.Field_swigregister
Field_swigregister(Field)

def Field_calculateFieldType(*args):
  """
    calculateFieldType(char const * str, bool withinQuotes=False) -> osgDB::Field::FieldType
    Field_calculateFieldType(char const * str) -> osgDB::Field::FieldType
    """
  return _osgDB.Field_calculateFieldType(*args)

class FieldReader(_object):
    """Proxy of C++ osgDB::FieldReader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgDB::FieldReader self) -> FieldReader
        __init__(osgDB::FieldReader self, FieldReader ic) -> FieldReader
        """
        this = _osgDB.new_FieldReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_FieldReader
    __del__ = lambda self : None;
    def attach(self, *args):
        """attach(FieldReader self, std::istream * input)"""
        return _osgDB.FieldReader_attach(self, *args)

    def detach(self):
        """detach(FieldReader self)"""
        return _osgDB.FieldReader_detach(self)

    def eof(self):
        """eof(FieldReader self) -> bool"""
        return _osgDB.FieldReader_eof(self)

    def readField(self, *args):
        """readField(FieldReader self, Field fieldPtr) -> bool"""
        return _osgDB.FieldReader_readField(self, *args)

    def ignoreField(self):
        """ignoreField(FieldReader self)"""
        return _osgDB.FieldReader_ignoreField(self)

    def getNoNestedBrackets(self):
        """getNoNestedBrackets(FieldReader self) -> int"""
        return _osgDB.FieldReader_getNoNestedBrackets(self)

FieldReader_swigregister = _osgDB.FieldReader_swigregister
FieldReader_swigregister(FieldReader)

class FieldReaderIterator(_object):
    """Proxy of C++ osgDB::FieldReaderIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldReaderIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldReaderIterator, name)
    __repr__ = _swig_repr
    MINIMUM_FIELD_READER_QUEUE_SIZE = _osgDB.FieldReaderIterator_MINIMUM_FIELD_READER_QUEUE_SIZE
    def __init__(self, *args): 
        """
        __init__(osgDB::FieldReaderIterator self) -> FieldReaderIterator
        __init__(osgDB::FieldReaderIterator self, FieldReaderIterator ic) -> FieldReaderIterator
        """
        this = _osgDB.new_FieldReaderIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_FieldReaderIterator
    __del__ = lambda self : None;
    def attach(self, *args):
        """attach(FieldReaderIterator self, std::istream * input)"""
        return _osgDB.FieldReaderIterator_attach(self, *args)

    def detach(self):
        """detach(FieldReaderIterator self)"""
        return _osgDB.FieldReaderIterator_detach(self)

    def eof(self):
        """eof(FieldReaderIterator self) -> bool"""
        return _osgDB.FieldReaderIterator_eof(self)

    def getFieldReader(self):
        """getFieldReader(FieldReaderIterator self) -> FieldReader"""
        return _osgDB.FieldReaderIterator_getFieldReader(self)

    def insert(self, *args):
        """
        insert(FieldReaderIterator self, int pos, Field field)
        insert(FieldReaderIterator self, int pos, char const * str)
        """
        return _osgDB.FieldReaderIterator_insert(self, *args)

    def field(self, *args):
        """field(FieldReaderIterator self, int pos) -> Field"""
        return _osgDB.FieldReaderIterator_field(self, *args)

    def __iadd__(self, *args):
        """__iadd__(FieldReaderIterator self, int no) -> FieldReaderIterator"""
        return _osgDB.FieldReaderIterator___iadd__(self, *args)

    def advanceOverCurrentFieldOrBlock(self):
        """advanceOverCurrentFieldOrBlock(FieldReaderIterator self)"""
        return _osgDB.FieldReaderIterator_advanceOverCurrentFieldOrBlock(self)

    def advanceToEndOfCurrentBlock(self):
        """advanceToEndOfCurrentBlock(FieldReaderIterator self)"""
        return _osgDB.FieldReaderIterator_advanceToEndOfCurrentBlock(self)

    def advanceToEndOfBlock(self, *args):
        """advanceToEndOfBlock(FieldReaderIterator self, int noNestBrackets)"""
        return _osgDB.FieldReaderIterator_advanceToEndOfBlock(self, *args)

    def matchSequence(self, *args):
        """matchSequence(FieldReaderIterator self, char const * str) -> bool"""
        return _osgDB.FieldReaderIterator_matchSequence(self, *args)

    def readSequence(self, *args):
        """
        readSequence(FieldReaderIterator self, char const * keyword, std::string & value) -> bool
        readSequence(FieldReaderIterator self, char const * keyword, unsigned int & value) -> bool
        readSequence(FieldReaderIterator self, char const * keyword, int & value) -> bool
        readSequence(FieldReaderIterator self, char const * keyword, float & value) -> bool
        readSequence(FieldReaderIterator self, char const * keyword, Vec2f value) -> bool
        readSequence(FieldReaderIterator self, char const * keyword, Vec3f value) -> bool
        readSequence(FieldReaderIterator self, char const * keyword, Vec4f value) -> bool
        readSequence(FieldReaderIterator self, char const * keyword, Vec2d value) -> bool
        readSequence(FieldReaderIterator self, char const * keyword, Vec3d value) -> bool
        readSequence(FieldReaderIterator self, char const * keyword, Vec4d value) -> bool
        readSequence(FieldReaderIterator self, std::string & value) -> bool
        readSequence(FieldReaderIterator self, unsigned int & value) -> bool
        readSequence(FieldReaderIterator self, int & value) -> bool
        readSequence(FieldReaderIterator self, float & value) -> bool
        readSequence(FieldReaderIterator self, Vec2f value) -> bool
        readSequence(FieldReaderIterator self, Vec3f value) -> bool
        readSequence(FieldReaderIterator self, Vec4f value) -> bool
        readSequence(FieldReaderIterator self, Vec2d value) -> bool
        readSequence(FieldReaderIterator self, Vec3d value) -> bool
        readSequence(FieldReaderIterator self, Vec4d value) -> bool
        """
        return _osgDB.FieldReaderIterator_readSequence(self, *args)

FieldReaderIterator_swigregister = _osgDB.FieldReaderIterator_swigregister
FieldReaderIterator_swigregister(FieldReaderIterator)

class Input(FieldReaderIterator):
    """Proxy of C++ osgDB::Input class"""
    __swig_setmethods__ = {}
    for _s in [FieldReaderIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Input, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldReaderIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Input, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgDB::Input self) -> Input"""
        this = _osgDB.new_Input()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_Input
    __del__ = lambda self : None;
    def setOptions(self, *args):
        """setOptions(Input self, osgDB::Options const * options)"""
        return _osgDB.Input_setOptions(self, *args)

    def getOptions(self):
        """getOptions(Input self) -> osgDB::Options const *"""
        return _osgDB.Input_getOptions(self)

    def readObjectOfType(self, *args):
        """
        readObjectOfType(Input self, Object compObj) -> Object
        readObjectOfType(Input self, basic_type_wrapper btw) -> Object
        """
        return _osgDB.Input_readObjectOfType(self, *args)

    def readDrawable(self):
        """readDrawable(Input self) -> Drawable"""
        return _osgDB.Input_readDrawable(self)

    def readStateAttribute(self):
        """readStateAttribute(Input self) -> StateAttribute"""
        return _osgDB.Input_readStateAttribute(self)

    def readUniform(self):
        """readUniform(Input self) -> Uniform"""
        return _osgDB.Input_readUniform(self)

    def readObject(self, *args):
        """
        readObject(Input self) -> Object
        readObject(Input self, std::string const & fileName) -> Object
        """
        return _osgDB.Input_readObject(self, *args)

    def readImage(self, *args):
        """
        readImage(Input self) -> Image
        readImage(Input self, std::string const & fileName) -> Image
        """
        return _osgDB.Input_readImage(self, *args)

    def readNode(self, *args):
        """
        readNode(Input self) -> Node
        readNode(Input self, std::string const & fileName) -> Node
        """
        return _osgDB.Input_readNode(self, *args)

    def readShader(self, *args):
        """
        readShader(Input self) -> Shader
        readShader(Input self, std::string const & fileName) -> Shader
        """
        return _osgDB.Input_readShader(self, *args)

    def getObjectForUniqueID(self, *args):
        """getObjectForUniqueID(Input self, std::string const & uniqueID) -> Object"""
        return _osgDB.Input_getObjectForUniqueID(self, *args)

    def registerUniqueIDForObject(self, *args):
        """registerUniqueIDForObject(Input self, std::string const & uniqueID, Object obj)"""
        return _osgDB.Input_registerUniqueIDForObject(self, *args)

Input_swigregister = _osgDB.Input_swigregister
Input_swigregister(Input)

OSGDB_OUTPUT = _osgDB.OSGDB_OUTPUT
class Output(_object):
    """Proxy of C++ osgDB::Output class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Output, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgDB::Output self) -> Output
        __init__(osgDB::Output self, char const * name) -> Output
        """
        this = _osgDB.new_Output(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_Output
    __del__ = lambda self : None;
    def setOptions(self, *args):
        """setOptions(Output self, osgDB::Options const * options)"""
        return _osgDB.Output_setOptions(self, *args)

    def getOptions(self):
        """getOptions(Output self) -> osgDB::Options const *"""
        return _osgDB.Output_getOptions(self)

    def setWriteOutDefaultValues(self, *args):
        """setWriteOutDefaultValues(Output self, bool flag)"""
        return _osgDB.Output_setWriteOutDefaultValues(self, *args)

    def getWriteOutDefaultValues(self):
        """getWriteOutDefaultValues(Output self) -> bool"""
        return _osgDB.Output_getWriteOutDefaultValues(self)

    def open(self, *args):
        """open(Output self, char const * name)"""
        return _osgDB.Output_open(self, *args)

    def indent(self):
        """indent(Output self) -> Output"""
        return _osgDB.Output_indent(self)

    def wrapString(self, *args):
        """
        wrapString(Output self, char const * str) -> std::string
        wrapString(Output self, std::string const & str) -> std::string
        """
        return _osgDB.Output_wrapString(self, *args)

    def setIndentStep(self, *args):
        """setIndentStep(Output self, int step)"""
        return _osgDB.Output_setIndentStep(self, *args)

    def getIndentStep(self):
        """getIndentStep(Output self) -> int"""
        return _osgDB.Output_getIndentStep(self)

    def setIndent(self, *args):
        """setIndent(Output self, int indent)"""
        return _osgDB.Output_setIndent(self, *args)

    def getIndent(self):
        """getIndent(Output self) -> int"""
        return _osgDB.Output_getIndent(self)

    def setNumIndicesPerLine(self, *args):
        """setNumIndicesPerLine(Output self, int num)"""
        return _osgDB.Output_setNumIndicesPerLine(self, *args)

    def getNumIndicesPerLine(self):
        """getNumIndicesPerLine(Output self) -> int"""
        return _osgDB.Output_getNumIndicesPerLine(self)

    def moveIn(self):
        """moveIn(Output self)"""
        return _osgDB.Output_moveIn(self)

    def moveOut(self):
        """moveOut(Output self)"""
        return _osgDB.Output_moveOut(self)

    def writeObject(self, *args):
        """writeObject(Output self, Object obj) -> bool"""
        return _osgDB.Output_writeObject(self, *args)

    def writeBeginObject(self, *args):
        """writeBeginObject(Output self, std::string const & name)"""
        return _osgDB.Output_writeBeginObject(self, *args)

    def writeEndObject(self):
        """writeEndObject(Output self)"""
        return _osgDB.Output_writeEndObject(self)

    def writeUseID(self, *args):
        """writeUseID(Output self, std::string const & id)"""
        return _osgDB.Output_writeUseID(self, *args)

    def writeUniqueID(self, *args):
        """writeUniqueID(Output self, std::string const & id)"""
        return _osgDB.Output_writeUniqueID(self, *args)

    def getUniqueIDForObject(self, *args):
        """getUniqueIDForObject(Output self, Object obj, std::string & uniqueID) -> bool"""
        return _osgDB.Output_getUniqueIDForObject(self, *args)

    def createUniqueIDForObject(self, *args):
        """createUniqueIDForObject(Output self, Object obj, std::string & uniqueID) -> bool"""
        return _osgDB.Output_createUniqueIDForObject(self, *args)

    def registerUniqueIDForObject(self, *args):
        """registerUniqueIDForObject(Output self, Object obj, std::string & uniqueID) -> bool"""
        return _osgDB.Output_registerUniqueIDForObject(self, *args)

    AS_IS = _osgDB.Output_AS_IS
    FULL_PATH = _osgDB.Output_FULL_PATH
    RELATIVE_PATH = _osgDB.Output_RELATIVE_PATH
    FILENAME_ONLY = _osgDB.Output_FILENAME_ONLY
    def setPathNameHint(self, *args):
        """setPathNameHint(Output self, osgDB::Output::PathNameHint const pnh)"""
        return _osgDB.Output_setPathNameHint(self, *args)

    def getPathNameHint(self):
        """getPathNameHint(Output self) -> osgDB::Output::PathNameHint"""
        return _osgDB.Output_getPathNameHint(self)

    def getFileNameForOutput(self, *args):
        """getFileNameForOutput(Output self, std::string const & filename) -> std::string"""
        return _osgDB.Output_getFileNameForOutput(self, *args)

    def getFileName(self):
        """getFileName(Output self) -> std::string const &"""
        return _osgDB.Output_getFileName(self)

    def setOutputTextureFiles(self, *args):
        """setOutputTextureFiles(Output self, bool flag)"""
        return _osgDB.Output_setOutputTextureFiles(self, *args)

    def getOutputTextureFiles(self):
        """getOutputTextureFiles(Output self) -> bool"""
        return _osgDB.Output_getOutputTextureFiles(self)

    def getTextureFileNameForOutput(self):
        """getTextureFileNameForOutput(Output self) -> std::string"""
        return _osgDB.Output_getTextureFileNameForOutput(self)

    def setOutputShaderFiles(self, *args):
        """setOutputShaderFiles(Output self, bool flag)"""
        return _osgDB.Output_setOutputShaderFiles(self, *args)

    def getOutputShaderFiles(self):
        """getOutputShaderFiles(Output self) -> bool"""
        return _osgDB.Output_getOutputShaderFiles(self)

    def getShaderFileNameForOutput(self):
        """getShaderFileNameForOutput(Output self) -> std::string"""
        return _osgDB.Output_getShaderFileNameForOutput(self)

    def setExternalFileWritten(self, *args):
        """
        setExternalFileWritten(Output self, std::string const & filename, bool hasBeenWritten=True)
        setExternalFileWritten(Output self, std::string const & filename)
        """
        return _osgDB.Output_setExternalFileWritten(self, *args)

    def getExternalFileWritten(self, *args):
        """getExternalFileWritten(Output self, std::string const & filename) -> bool"""
        return _osgDB.Output_getExternalFileWritten(self, *args)

Output_swigregister = _osgDB.Output_swigregister
Output_swigregister(Output)

OSGDB_PARAMETEROUTPUT = _osgDB.OSGDB_PARAMETEROUTPUT
class ParameterOutput(_object):
    """Proxy of C++ osgDB::ParameterOutput class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterOutput, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgDB::ParameterOutput self, Output fw) -> ParameterOutput
        __init__(osgDB::ParameterOutput self, Output fw, int numItemsPerLine) -> ParameterOutput
        """
        this = _osgDB.new_ParameterOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    def begin(self):
        """begin(ParameterOutput self)"""
        return _osgDB.ParameterOutput_begin(self)

    def newLine(self):
        """newLine(ParameterOutput self)"""
        return _osgDB.ParameterOutput_newLine(self)

    def end(self):
        """end(ParameterOutput self)"""
        return _osgDB.ParameterOutput_end(self)

    __swig_destroy__ = _osgDB.delete_ParameterOutput
    __del__ = lambda self : None;
ParameterOutput_swigregister = _osgDB.ParameterOutput_swigregister
ParameterOutput_swigregister(ParameterOutput)

OSGDB_IMAGEOPTIONS = _osgDB.OSGDB_IMAGEOPTIONS
class ImageOptions(_object):
    """Proxy of C++ osgDB::ImageOptions class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgDB::ImageOptions self) -> ImageOptions
        __init__(osgDB::ImageOptions self, std::string const & str) -> ImageOptions
        __init__(osgDB::ImageOptions self, ImageOptions options, CopyOp copyop=SHALLOW_COPY) -> ImageOptions
        __init__(osgDB::ImageOptions self, ImageOptions options) -> ImageOptions
        """
        this = _osgDB.new_ImageOptions(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ImageOptions self) -> Object"""
        return _osgDB.ImageOptions_cloneType(self)

    def clone(self, *args):
        """clone(ImageOptions self, CopyOp copyop) -> Object"""
        return _osgDB.ImageOptions_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ImageOptions self, Object obj) -> bool"""
        return _osgDB.ImageOptions_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ImageOptions self) -> char const *"""
        return _osgDB.ImageOptions_libraryName(self)

    def className(self):
        """className(ImageOptions self) -> char const *"""
        return _osgDB.ImageOptions_className(self)

    ALL_IMAGE = _osgDB.ImageOptions_ALL_IMAGE
    RATIO_WINDOW = _osgDB.ImageOptions_RATIO_WINDOW
    PIXEL_WINDOW = _osgDB.ImageOptions_PIXEL_WINDOW
    NEAREST = _osgDB.ImageOptions_NEAREST
    LINEAR = _osgDB.ImageOptions_LINEAR
    CUBIC = _osgDB.ImageOptions_CUBIC
    __swig_setmethods__["_destinationImage"] = _osgDB.ImageOptions__destinationImage_set
    __swig_getmethods__["_destinationImage"] = _osgDB.ImageOptions__destinationImage_get
    if _newclass:_destinationImage = _swig_property(_osgDB.ImageOptions__destinationImage_get, _osgDB.ImageOptions__destinationImage_set)
    __swig_setmethods__["_destinationDataType"] = _osgDB.ImageOptions__destinationDataType_set
    __swig_getmethods__["_destinationDataType"] = _osgDB.ImageOptions__destinationDataType_get
    if _newclass:_destinationDataType = _swig_property(_osgDB.ImageOptions__destinationDataType_get, _osgDB.ImageOptions__destinationDataType_set)
    __swig_setmethods__["_destinationPixelFormat"] = _osgDB.ImageOptions__destinationPixelFormat_set
    __swig_getmethods__["_destinationPixelFormat"] = _osgDB.ImageOptions__destinationPixelFormat_get
    if _newclass:_destinationPixelFormat = _swig_property(_osgDB.ImageOptions__destinationPixelFormat_get, _osgDB.ImageOptions__destinationPixelFormat_set)
    def init(self):
        """init(ImageOptions self)"""
        return _osgDB.ImageOptions_init(self)

    __swig_destroy__ = _osgDB.delete_ImageOptions
    __del__ = lambda self : None;
ImageOptions_swigregister = _osgDB.ImageOptions_swigregister
ImageOptions_swigregister(ImageOptions)

OSGDB_FILEUTILS = _osgDB.OSGDB_FILEUTILS

def fopen(*args):
  """fopen(char const * filename, char const * mode) -> FILE *"""
  return _osgDB.fopen(*args)

def makeDirectory(*args):
  """makeDirectory(std::string const & directoryPath) -> bool"""
  return _osgDB.makeDirectory(*args)

def makeDirectoryForFile(*args):
  """makeDirectoryForFile(std::string const & filePath) -> bool"""
  return _osgDB.makeDirectoryForFile(*args)

def getCurrentWorkingDirectory():
  """getCurrentWorkingDirectory() -> std::string"""
  return _osgDB.getCurrentWorkingDirectory()

def setCurrentWorkingDirectory(*args):
  """setCurrentWorkingDirectory(std::string const & newCurrentWorkingDirectory) -> bool"""
  return _osgDB.setCurrentWorkingDirectory(*args)

def fileExists(*args):
  """fileExists(std::string const & filename) -> bool"""
  return _osgDB.fileExists(*args)
FILE_NOT_FOUND = _osgDB.FILE_NOT_FOUND
REGULAR_FILE = _osgDB.REGULAR_FILE
DIRECTORY = _osgDB.DIRECTORY

def fileType(*args):
  """fileType(std::string const & filename) -> osgDB::FileType"""
  return _osgDB.fileType(*args)

def findFileInPath(*args):
  """
    findFileInPath(std::string const & filename, stdFilePathList filePath, CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> std::string
    findFileInPath(std::string const & filename, stdFilePathList filePath) -> std::string
    """
  return _osgDB.findFileInPath(*args)

def findFileInDirectory(*args):
  """
    findFileInDirectory(std::string const & fileName, std::string const & dirName, CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> std::string
    findFileInDirectory(std::string const & fileName, std::string const & dirName) -> std::string
    """
  return _osgDB.findFileInDirectory(*args)

def getDirectoryContents(*args):
  """getDirectoryContents(std::string const & dirName) -> osgDB::DirectoryContents"""
  return _osgDB.getDirectoryContents(*args)

def getSortedDirectoryContents(*args):
  """getSortedDirectoryContents(std::string const & dirName) -> osgDB::DirectoryContents"""
  return _osgDB.getSortedDirectoryContents(*args)

def expandWildcardsInFilename(*args):
  """expandWildcardsInFilename(std::string const & filename) -> osgDB::DirectoryContents"""
  return _osgDB.expandWildcardsInFilename(*args)
OK = _osgDB.OK
SOURCE_EQUALS_DESTINATION = _osgDB.SOURCE_EQUALS_DESTINATION
BAD_ARGUMENT = _osgDB.BAD_ARGUMENT
SOURCE_MISSING = _osgDB.SOURCE_MISSING
SOURCE_NOT_OPENED = _osgDB.SOURCE_NOT_OPENED
DESTINATION_NOT_OPENED = _osgDB.DESTINATION_NOT_OPENED
READ_ERROR = _osgDB.READ_ERROR
WRITE_ERROR = _osgDB.WRITE_ERROR

def copyFile(*args):
  """copyFile(std::string const & source, std::string const & destination) -> osgDB::FileOpResult::Value"""
  return _osgDB.copyFile(*args)

def setDataFilePathList(*args):
  """
    setDataFilePathList(stdFilePathList filepath)
    setDataFilePathList(std::string const & paths)
    """
  return _osgDB.setDataFilePathList(*args)

def getDataFilePathList():
  """getDataFilePathList() -> stdFilePathList"""
  return _osgDB.getDataFilePathList()

def findDataFile(*args):
  """
    findDataFile(std::string const & filename, CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> std::string
    findDataFile(std::string const & filename) -> std::string
    findDataFile(std::string const & filename, osgDB::Options const * options, CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> std::string
    findDataFile(std::string const & filename, osgDB::Options const * options) -> std::string
    """
  return _osgDB.findDataFile(*args)

def setLibraryFilePathList(*args):
  """
    setLibraryFilePathList(stdFilePathList filepaths)
    setLibraryFilePathList(std::string const & paths)
    """
  return _osgDB.setLibraryFilePathList(*args)

def getLibraryFilePathList():
  """getLibraryFilePathList() -> stdFilePathList"""
  return _osgDB.getLibraryFilePathList()

def findLibraryFile(*args):
  """
    findLibraryFile(std::string const & filename, CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> std::string
    findLibraryFile(std::string const & filename) -> std::string
    """
  return _osgDB.findLibraryFile(*args)

def convertStringPathIntoFilePathList(*args):
  """convertStringPathIntoFilePathList(std::string const & paths, stdFilePathList filepath)"""
  return _osgDB.convertStringPathIntoFilePathList(*args)

def containsCurrentWorkingDirectoryReference(*args):
  """containsCurrentWorkingDirectoryReference(stdFilePathList paths) -> bool"""
  return _osgDB.containsCurrentWorkingDirectoryReference(*args)

def appendPlatformSpecificLibraryFilePaths(*args):
  """appendPlatformSpecificLibraryFilePaths(stdFilePathList filepath)"""
  return _osgDB.appendPlatformSpecificLibraryFilePaths(*args)

def appendPlatformSpecificResourceFilePaths(*args):
  """appendPlatformSpecificResourceFilePaths(stdFilePathList filepath)"""
  return _osgDB.appendPlatformSpecificResourceFilePaths(*args)
OSGDB_FILENAMEUTILS = _osgDB.OSGDB_FILENAMEUTILS

def getFilePath(*args):
  """getFilePath(std::string const & filename) -> std::string"""
  return _osgDB.getFilePath(*args)

def getFileExtension(*args):
  """getFileExtension(std::string const & filename) -> std::string"""
  return _osgDB.getFileExtension(*args)

def getFileExtensionIncludingDot(*args):
  """getFileExtensionIncludingDot(std::string const & filename) -> std::string"""
  return _osgDB.getFileExtensionIncludingDot(*args)

def getLowerCaseFileExtension(*args):
  """getLowerCaseFileExtension(std::string const & filename) -> std::string"""
  return _osgDB.getLowerCaseFileExtension(*args)

def getSimpleFileName(*args):
  """getSimpleFileName(std::string const & fileName) -> std::string"""
  return _osgDB.getSimpleFileName(*args)

def getNameLessExtension(*args):
  """getNameLessExtension(std::string const & fileName) -> std::string"""
  return _osgDB.getNameLessExtension(*args)

def getNameLessAllExtensions(*args):
  """getNameLessAllExtensions(std::string const & fileName) -> std::string"""
  return _osgDB.getNameLessAllExtensions(*args)

def getStrippedName(*args):
  """getStrippedName(std::string const & fileName) -> std::string"""
  return _osgDB.getStrippedName(*args)

def getPathRelative(*args):
  """getPathRelative(std::string const & _from, std::string const & to) -> std::string"""
  return _osgDB.getPathRelative(*args)

def getPathRoot(*args):
  """getPathRoot(std::string const & path) -> std::string"""
  return _osgDB.getPathRoot(*args)

def isAbsolutePath(*args):
  """isAbsolutePath(std::string const & path) -> bool"""
  return _osgDB.isAbsolutePath(*args)

def convertFileNameToWindowsStyle(*args):
  """convertFileNameToWindowsStyle(std::string const & fileName) -> std::string"""
  return _osgDB.convertFileNameToWindowsStyle(*args)

def convertFileNameToUnixStyle(*args):
  """convertFileNameToUnixStyle(std::string const & fileName) -> std::string"""
  return _osgDB.convertFileNameToUnixStyle(*args)

def convertToLowerCase(*args):
  """convertToLowerCase(std::string const & fileName) -> std::string"""
  return _osgDB.convertToLowerCase(*args)

def getNativePathSeparator():
  """getNativePathSeparator() -> char"""
  return _osgDB.getNativePathSeparator()

def isFileNameNativeStyle(*args):
  """isFileNameNativeStyle(std::string const & fileName) -> bool"""
  return _osgDB.isFileNameNativeStyle(*args)

def convertFileNameToNativeStyle(*args):
  """convertFileNameToNativeStyle(std::string const & fileName) -> std::string"""
  return _osgDB.convertFileNameToNativeStyle(*args)

def equalCaseInsensitive(*args):
  """
    equalCaseInsensitive(std::string const & lhs, std::string const & rhs) -> bool
    equalCaseInsensitive(std::string const & lhs, char const * rhs) -> bool
    """
  return _osgDB.equalCaseInsensitive(*args)

def containsServerAddress(*args):
  """containsServerAddress(std::string const & filename) -> bool"""
  return _osgDB.containsServerAddress(*args)

def getServerProtocol(*args):
  """getServerProtocol(std::string const & filename) -> std::string"""
  return _osgDB.getServerProtocol(*args)

def getServerAddress(*args):
  """getServerAddress(std::string const & filename) -> std::string"""
  return _osgDB.getServerAddress(*args)

def getServerFileName(*args):
  """getServerFileName(std::string const & filename) -> std::string"""
  return _osgDB.getServerFileName(*args)

def concatPaths(*args):
  """concatPaths(std::string const & left, std::string const & right) -> std::string"""
  return _osgDB.concatPaths(*args)

def getRealPath(*args):
  """getRealPath(std::string const & path) -> std::string"""
  return _osgDB.getRealPath(*args)

def getPathElements(*args):
  """getPathElements(std::string const & path, std::vector< std::string,std::allocator< std::string > > & out_elements)"""
  return _osgDB.getPathElements(*args)
class FileNameComparator(_object):
    """Proxy of C++ osgDB::FileNameComparator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileNameComparator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileNameComparator, name)
    __repr__ = _swig_repr
    def __call__(self, *args):
        """__call__(FileNameComparator self, std::string const & lhs, std::string const & rhs) -> bool"""
        return _osgDB.FileNameComparator___call__(self, *args)

    def __init__(self): 
        """__init__(osgDB::FileNameComparator self) -> FileNameComparator"""
        this = _osgDB.new_FileNameComparator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_FileNameComparator
    __del__ = lambda self : None;
FileNameComparator_swigregister = _osgDB.FileNameComparator_swigregister
FileNameComparator_swigregister(FileNameComparator)
cvar = _osgDB.cvar
UNIX_PATH_SEPARATOR = cvar.UNIX_PATH_SEPARATOR
WINDOWS_PATH_SEPARATOR = cvar.WINDOWS_PATH_SEPARATOR

OSGDB_DYNAMICLIBRARY = _osgDB.OSGDB_DYNAMICLIBRARY
class DynamicLibrary(osg.Referenced):
    """Proxy of C++ osgDB::DynamicLibrary class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicLibrary, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicLibrary, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def loadLibrary(*args):
        """loadLibrary(std::string const & libraryName) -> DynamicLibrary"""
        return _osgDB.DynamicLibrary_loadLibrary(*args)

    if _newclass:loadLibrary = staticmethod(loadLibrary)
    __swig_getmethods__["loadLibrary"] = lambda x: loadLibrary
    def getName(self):
        """getName(DynamicLibrary self) -> std::string const &"""
        return _osgDB.DynamicLibrary_getName(self)

    def getFullName(self):
        """getFullName(DynamicLibrary self) -> std::string const &"""
        return _osgDB.DynamicLibrary_getFullName(self)

    def getHandle(self):
        """getHandle(DynamicLibrary self) -> osgDB::DynamicLibrary::HANDLE"""
        return _osgDB.DynamicLibrary_getHandle(self)

    def getProcAddress(self, *args):
        """getProcAddress(DynamicLibrary self, std::string const & procName) -> osgDB::DynamicLibrary::PROC_ADDRESS"""
        return _osgDB.DynamicLibrary_getProcAddress(self, *args)

DynamicLibrary_swigregister = _osgDB.DynamicLibrary_swigregister
DynamicLibrary_swigregister(DynamicLibrary)

def DynamicLibrary_loadLibrary(*args):
  """DynamicLibrary_loadLibrary(std::string const & libraryName) -> DynamicLibrary"""
  return _osgDB.DynamicLibrary_loadLibrary(*args)

OSGDB_DATABASEPAGER = _osgDB.OSGDB_DATABASEPAGER
class DatabasePager(_object):
    """Proxy of C++ osgDB::DatabasePager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabasePager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatabasePager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgDB::DatabasePager self) -> DatabasePager
        __init__(osgDB::DatabasePager self, DatabasePager rhs) -> DatabasePager
        """
        this = _osgDB.new_DatabasePager(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(self):
        """className(DatabasePager self) -> char const *"""
        return _osgDB.DatabasePager_className(self)

    def clone(self):
        """clone(DatabasePager self) -> DatabasePager"""
        return _osgDB.DatabasePager_clone(self)

    def prototype():
        """prototype() -> osg::ref_ptr< osgDB::DatabasePager > &"""
        return _osgDB.DatabasePager_prototype()

    if _newclass:prototype = staticmethod(prototype)
    __swig_getmethods__["prototype"] = lambda x: prototype
    def create():
        """create() -> DatabasePager"""
        return _osgDB.DatabasePager_create()

    if _newclass:create = staticmethod(create)
    __swig_getmethods__["create"] = lambda x: create
    def requestNodeFile(self, *args):
        """
        requestNodeFile(DatabasePager self, std::string const & fileName, vectorNode nodePath, float priority, FrameStamp framestamp, 
            osg::ref_ptr< osg::Referenced > & databaseRequest, Referenced options)
        """
        return _osgDB.DatabasePager_requestNodeFile(self, *args)

    def setSchedulePriority(self, *args):
        """setSchedulePriority(DatabasePager self, OpenThreads::Thread::ThreadPriority priority) -> int"""
        return _osgDB.DatabasePager_setSchedulePriority(self, *args)

    def cancel(self):
        """cancel(DatabasePager self) -> int"""
        return _osgDB.DatabasePager_cancel(self)

    def isRunning(self):
        """isRunning(DatabasePager self) -> bool"""
        return _osgDB.DatabasePager_isRunning(self)

    def clear(self):
        """clear(DatabasePager self)"""
        return _osgDB.DatabasePager_clear(self)

    def setUpThreads(self, totalNumThreads=2, numHttpThreads=1):
        """
        setUpThreads(DatabasePager self, unsigned int totalNumThreads=2, unsigned int numHttpThreads=1)
        setUpThreads(DatabasePager self, unsigned int totalNumThreads=2)
        setUpThreads(DatabasePager self)
        """
        return _osgDB.DatabasePager_setUpThreads(self, totalNumThreads, numHttpThreads)

    def setDatabasePagerThreadPause(self, *args):
        """setDatabasePagerThreadPause(DatabasePager self, bool pause)"""
        return _osgDB.DatabasePager_setDatabasePagerThreadPause(self, *args)

    def getDatabasePagerThreadPause(self):
        """getDatabasePagerThreadPause(DatabasePager self) -> bool"""
        return _osgDB.DatabasePager_getDatabasePagerThreadPause(self)

    def setAcceptNewDatabaseRequests(self, *args):
        """setAcceptNewDatabaseRequests(DatabasePager self, bool acceptNewRequests)"""
        return _osgDB.DatabasePager_setAcceptNewDatabaseRequests(self, *args)

    def getAcceptNewDatabaseRequests(self):
        """getAcceptNewDatabaseRequests(DatabasePager self) -> bool"""
        return _osgDB.DatabasePager_getAcceptNewDatabaseRequests(self)

    def getNumFramesActive(self):
        """getNumFramesActive(DatabasePager self) -> int"""
        return _osgDB.DatabasePager_getNumFramesActive(self)

    def signalBeginFrame(self, *args):
        """signalBeginFrame(DatabasePager self, FrameStamp framestamp)"""
        return _osgDB.DatabasePager_signalBeginFrame(self, *args)

    def signalEndFrame(self):
        """signalEndFrame(DatabasePager self)"""
        return _osgDB.DatabasePager_signalEndFrame(self)

    def registerPagedLODs(self, *args):
        """
        registerPagedLODs(DatabasePager self, Node subgraph, unsigned int frameNumber=0)
        registerPagedLODs(DatabasePager self, Node subgraph)
        """
        return _osgDB.DatabasePager_registerPagedLODs(self, *args)

    def setIncrementalCompileOperation(self, *args):
        """setIncrementalCompileOperation(DatabasePager self, osgUtil::IncrementalCompileOperation * ico)"""
        return _osgDB.DatabasePager_setIncrementalCompileOperation(self, *args)

    def getIncrementalCompileOperation(self):
        """getIncrementalCompileOperation(DatabasePager self) -> osgUtil::IncrementalCompileOperation *"""
        return _osgDB.DatabasePager_getIncrementalCompileOperation(self)

    def setDoPreCompile(self, *args):
        """setDoPreCompile(DatabasePager self, bool flag)"""
        return _osgDB.DatabasePager_setDoPreCompile(self, *args)

    def getDoPreCompile(self):
        """getDoPreCompile(DatabasePager self) -> bool"""
        return _osgDB.DatabasePager_getDoPreCompile(self)

    def setTargetMaximumNumberOfPageLOD(self, *args):
        """setTargetMaximumNumberOfPageLOD(DatabasePager self, unsigned int target)"""
        return _osgDB.DatabasePager_setTargetMaximumNumberOfPageLOD(self, *args)

    def getTargetMaximumNumberOfPageLOD(self):
        """getTargetMaximumNumberOfPageLOD(DatabasePager self) -> unsigned int"""
        return _osgDB.DatabasePager_getTargetMaximumNumberOfPageLOD(self)

    def setDeleteRemovedSubgraphsInDatabaseThread(self, *args):
        """setDeleteRemovedSubgraphsInDatabaseThread(DatabasePager self, bool flag)"""
        return _osgDB.DatabasePager_setDeleteRemovedSubgraphsInDatabaseThread(self, *args)

    def getDeleteRemovedSubgraphsInDatabaseThread(self):
        """getDeleteRemovedSubgraphsInDatabaseThread(DatabasePager self) -> bool"""
        return _osgDB.DatabasePager_getDeleteRemovedSubgraphsInDatabaseThread(self)

    DO_NOT_MODIFY_DRAWABLE_SETTINGS = _osgDB.DatabasePager_DO_NOT_MODIFY_DRAWABLE_SETTINGS
    USE_DISPLAY_LISTS = _osgDB.DatabasePager_USE_DISPLAY_LISTS
    USE_VERTEX_BUFFER_OBJECTS = _osgDB.DatabasePager_USE_VERTEX_BUFFER_OBJECTS
    USE_VERTEX_ARRAYS = _osgDB.DatabasePager_USE_VERTEX_ARRAYS
    def setDrawablePolicy(self, *args):
        """setDrawablePolicy(DatabasePager self, osgDB::DatabasePager::DrawablePolicy policy)"""
        return _osgDB.DatabasePager_setDrawablePolicy(self, *args)

    def getDrawablePolicy(self):
        """getDrawablePolicy(DatabasePager self) -> osgDB::DatabasePager::DrawablePolicy"""
        return _osgDB.DatabasePager_getDrawablePolicy(self)

    def setApplyPBOToImages(self, *args):
        """setApplyPBOToImages(DatabasePager self, bool assignPBOToImages)"""
        return _osgDB.DatabasePager_setApplyPBOToImages(self, *args)

    def getApplyPBOToImages(self):
        """getApplyPBOToImages(DatabasePager self) -> bool"""
        return _osgDB.DatabasePager_getApplyPBOToImages(self)

    def setUnrefImageDataAfterApplyPolicy(self, *args):
        """setUnrefImageDataAfterApplyPolicy(DatabasePager self, bool changeAutoUnRef, bool valueAutoUnRef)"""
        return _osgDB.DatabasePager_setUnrefImageDataAfterApplyPolicy(self, *args)

    def getUnrefImageDataAfterApplyPolicy(self, *args):
        """getUnrefImageDataAfterApplyPolicy(DatabasePager self, bool & changeAutoUnRef, bool & valueAutoUnRef)"""
        return _osgDB.DatabasePager_getUnrefImageDataAfterApplyPolicy(self, *args)

    def setMaxAnisotropyPolicy(self, *args):
        """setMaxAnisotropyPolicy(DatabasePager self, bool changeAnisotropy, float valueAnisotropy)"""
        return _osgDB.DatabasePager_setMaxAnisotropyPolicy(self, *args)

    def getMaxAnisotropyPolicy(self, *args):
        """getMaxAnisotropyPolicy(DatabasePager self, bool & changeAnisotropy, float & valueAnisotropy)"""
        return _osgDB.DatabasePager_getMaxAnisotropyPolicy(self, *args)

    def requiresUpdateSceneGraph(self):
        """requiresUpdateSceneGraph(DatabasePager self) -> bool"""
        return _osgDB.DatabasePager_requiresUpdateSceneGraph(self)

    def updateSceneGraph(self, *args):
        """updateSceneGraph(DatabasePager self, FrameStamp frameStamp)"""
        return _osgDB.DatabasePager_updateSceneGraph(self, *args)

    def getFileRequestListSize(self):
        """getFileRequestListSize(DatabasePager self) -> unsigned int"""
        return _osgDB.DatabasePager_getFileRequestListSize(self)

    def getDataToCompileListSize(self):
        """getDataToCompileListSize(DatabasePager self) -> unsigned int"""
        return _osgDB.DatabasePager_getDataToCompileListSize(self)

    def getDataToMergeListSize(self):
        """getDataToMergeListSize(DatabasePager self) -> unsigned int"""
        return _osgDB.DatabasePager_getDataToMergeListSize(self)

    def getRequestsInProgress(self):
        """getRequestsInProgress(DatabasePager self) -> bool"""
        return _osgDB.DatabasePager_getRequestsInProgress(self)

    def getMinimumTimeToMergeTile(self):
        """getMinimumTimeToMergeTile(DatabasePager self) -> double"""
        return _osgDB.DatabasePager_getMinimumTimeToMergeTile(self)

    def getMaximumTimeToMergeTile(self):
        """getMaximumTimeToMergeTile(DatabasePager self) -> double"""
        return _osgDB.DatabasePager_getMaximumTimeToMergeTile(self)

    def getAverageTimeToMergeTiles(self):
        """getAverageTimeToMergeTiles(DatabasePager self) -> double"""
        return _osgDB.DatabasePager_getAverageTimeToMergeTiles(self)

    def resetStats(self):
        """resetStats(DatabasePager self)"""
        return _osgDB.DatabasePager_resetStats(self)

DatabasePager_swigregister = _osgDB.DatabasePager_swigregister
DatabasePager_swigregister(DatabasePager)

def DatabasePager_prototype():
  """DatabasePager_prototype() -> osg::ref_ptr< osgDB::DatabasePager > &"""
  return _osgDB.DatabasePager_prototype()

def DatabasePager_create():
  """DatabasePager_create() -> DatabasePager"""
  return _osgDB.DatabasePager_create()

OSGDB_ARCHIVE = _osgDB.OSGDB_ARCHIVE
class Archive(_object):
    """Proxy of C++ osgDB::Archive class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Archive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Archive, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgDB.delete_Archive
    __del__ = lambda self : None;
    def libraryName(self):
        """libraryName(Archive self) -> char const *"""
        return _osgDB.Archive_libraryName(self)

    def className(self):
        """className(Archive self) -> char const *"""
        return _osgDB.Archive_className(self)

    def acceptsExtension(self, *args):
        """acceptsExtension(Archive self, std::string const & arg2) -> bool"""
        return _osgDB.Archive_acceptsExtension(self, *args)

    def close(self):
        """close(Archive self)"""
        return _osgDB.Archive_close(self)

    def getArchiveFileName(self):
        """getArchiveFileName(Archive self) -> std::string"""
        return _osgDB.Archive_getArchiveFileName(self)

    def getMasterFileName(self):
        """getMasterFileName(Archive self) -> std::string"""
        return _osgDB.Archive_getMasterFileName(self)

    def fileExists(self, *args):
        """fileExists(Archive self, std::string const & filename) -> bool"""
        return _osgDB.Archive_fileExists(self, *args)

    def getFileType(self, *args):
        """getFileType(Archive self, std::string const & filename) -> osgDB::FileType"""
        return _osgDB.Archive_getFileType(self, *args)

    def getFileNames(self, *args):
        """getFileNames(Archive self, osgDB::Archive::FileNameList & fileNames) -> bool"""
        return _osgDB.Archive_getFileNames(self, *args)

    def getDirectoryContents(self, *args):
        """getDirectoryContents(Archive self, std::string const & dirName) -> osgDB::DirectoryContents"""
        return _osgDB.Archive_getDirectoryContents(self, *args)

    def readShader(self, *args):
        """
        readShader(Archive self, std::string const & arg2, osgDB::ReaderWriter::Options const * arg3=None) -> osgDB::ReaderWriter::ReadResult
        readShader(Archive self, std::string const & arg2) -> osgDB::ReaderWriter::ReadResult
        """
        return _osgDB.Archive_readShader(self, *args)

    def writeShader(self, *args):
        """
        writeShader(Archive self, Shader arg2, std::string const & arg3, osgDB::ReaderWriter::Options const * arg4=None) -> osgDB::ReaderWriter::WriteResult
        writeShader(Archive self, Shader arg2, std::string const & arg3) -> osgDB::ReaderWriter::WriteResult
        """
        return _osgDB.Archive_writeShader(self, *args)

Archive_swigregister = _osgDB.Archive_swigregister
Archive_swigregister(Archive)


def openArchive(*args):
  """
    openArchive(std::string const & filename, osgDB::ReaderWriter::ArchiveStatus status, unsigned int indexBlockSizeHint=4096) -> Archive
    openArchive(std::string const & filename, osgDB::ReaderWriter::ArchiveStatus status) -> Archive
    openArchive(std::string const & filename, osgDB::ReaderWriter::ArchiveStatus status, unsigned int indexBlockSizeHint, 
        osgDB::Options * options) -> Archive
    """
  return _osgDB.openArchive(*args)
OSGDB_DOTOSGWRAPPER = _osgDB.OSGDB_DOTOSGWRAPPER
class DotOsgWrapper(osg.Referenced):
    """Proxy of C++ osgDB::DotOsgWrapper class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotOsgWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DotOsgWrapper, name)
    __repr__ = _swig_repr
    READ_AND_WRITE = _osgDB.DotOsgWrapper_READ_AND_WRITE
    READ_ONLY = _osgDB.DotOsgWrapper_READ_ONLY
    def __init__(self, *args): 
        """
        __init__(osgDB::DotOsgWrapper self, Object proto, std::string const & name, std::string const & associates, osgDB::DotOsgWrapper::ReadFunc readFunc, 
            osgDB::DotOsgWrapper::WriteFunc writeFunc, 
            osgDB::DotOsgWrapper::ReadWriteMode readWriteMode=READ_AND_WRITE) -> DotOsgWrapper
        __init__(osgDB::DotOsgWrapper self, Object proto, std::string const & name, std::string const & associates, osgDB::DotOsgWrapper::ReadFunc readFunc, 
            osgDB::DotOsgWrapper::WriteFunc writeFunc) -> DotOsgWrapper
        """
        this = _osgDB.new_DotOsgWrapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPrototype(self):
        """getPrototype(DotOsgWrapper self) -> Object"""
        return _osgDB.DotOsgWrapper_getPrototype(self)

    def getName(self):
        """getName(DotOsgWrapper self) -> std::string const &"""
        return _osgDB.DotOsgWrapper_getName(self)

    def getAssociates(self):
        """getAssociates(DotOsgWrapper self) -> osgDB::DotOsgWrapper::Associates const &"""
        return _osgDB.DotOsgWrapper_getAssociates(self)

    def getReadFunc(self):
        """getReadFunc(DotOsgWrapper self) -> osgDB::DotOsgWrapper::ReadFunc"""
        return _osgDB.DotOsgWrapper_getReadFunc(self)

    def getWriteFunc(self):
        """getWriteFunc(DotOsgWrapper self) -> osgDB::DotOsgWrapper::WriteFunc"""
        return _osgDB.DotOsgWrapper_getWriteFunc(self)

    def getReadWriteMode(self):
        """getReadWriteMode(DotOsgWrapper self) -> osgDB::DotOsgWrapper::ReadWriteMode"""
        return _osgDB.DotOsgWrapper_getReadWriteMode(self)

DotOsgWrapper_swigregister = _osgDB.DotOsgWrapper_swigregister
DotOsgWrapper_swigregister(DotOsgWrapper)

class DeprecatedDotOsgWrapperManager(osg.Referenced):
    """Proxy of C++ osgDB::DeprecatedDotOsgWrapperManager class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeprecatedDotOsgWrapperManager, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeprecatedDotOsgWrapperManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgDB::DeprecatedDotOsgWrapperManager self) -> DeprecatedDotOsgWrapperManager"""
        this = _osgDB.new_DeprecatedDotOsgWrapperManager()
        try: self.this.append(this)
        except: self.this = this
    def addDotOsgWrapper(self, *args):
        """addDotOsgWrapper(DeprecatedDotOsgWrapperManager self, DotOsgWrapper wrapper)"""
        return _osgDB.DeprecatedDotOsgWrapperManager_addDotOsgWrapper(self, *args)

    def removeDotOsgWrapper(self, *args):
        """removeDotOsgWrapper(DeprecatedDotOsgWrapperManager self, DotOsgWrapper wrapper)"""
        return _osgDB.DeprecatedDotOsgWrapperManager_removeDotOsgWrapper(self, *args)

    def readObjectOfType(self, *args):
        """
        readObjectOfType(DeprecatedDotOsgWrapperManager self, Object compObj, Input fr) -> Object
        readObjectOfType(DeprecatedDotOsgWrapperManager self, basic_type_wrapper btw, Input fr) -> Object
        """
        return _osgDB.DeprecatedDotOsgWrapperManager_readObjectOfType(self, *args)

    def readObject(self, *args):
        """readObject(DeprecatedDotOsgWrapperManager self, Input fr) -> Object"""
        return _osgDB.DeprecatedDotOsgWrapperManager_readObject(self, *args)

    def readImage(self, *args):
        """readImage(DeprecatedDotOsgWrapperManager self, Input fr) -> Image"""
        return _osgDB.DeprecatedDotOsgWrapperManager_readImage(self, *args)

    def readDrawable(self, *args):
        """readDrawable(DeprecatedDotOsgWrapperManager self, Input fr) -> Drawable"""
        return _osgDB.DeprecatedDotOsgWrapperManager_readDrawable(self, *args)

    def readUniform(self, *args):
        """readUniform(DeprecatedDotOsgWrapperManager self, Input fr) -> Uniform"""
        return _osgDB.DeprecatedDotOsgWrapperManager_readUniform(self, *args)

    def readStateAttribute(self, *args):
        """readStateAttribute(DeprecatedDotOsgWrapperManager self, Input fr) -> StateAttribute"""
        return _osgDB.DeprecatedDotOsgWrapperManager_readStateAttribute(self, *args)

    def readNode(self, *args):
        """readNode(DeprecatedDotOsgWrapperManager self, Input fr) -> Node"""
        return _osgDB.DeprecatedDotOsgWrapperManager_readNode(self, *args)

    def readShader(self, *args):
        """readShader(DeprecatedDotOsgWrapperManager self, Input fr) -> Shader"""
        return _osgDB.DeprecatedDotOsgWrapperManager_readShader(self, *args)

    def writeObject(self, *args):
        """writeObject(DeprecatedDotOsgWrapperManager self, Object obj, Output fw) -> bool"""
        return _osgDB.DeprecatedDotOsgWrapperManager_writeObject(self, *args)

    def getLibraryFileNamesToTry(self, *args):
        """getLibraryFileNamesToTry(DeprecatedDotOsgWrapperManager self, std::string const & name, osgDB::DeprecatedDotOsgWrapperManager::FileNames & fileNames) -> bool"""
        return _osgDB.DeprecatedDotOsgWrapperManager_getLibraryFileNamesToTry(self, *args)

DeprecatedDotOsgWrapperManager_swigregister = _osgDB.DeprecatedDotOsgWrapperManager_swigregister
DeprecatedDotOsgWrapperManager_swigregister(DeprecatedDotOsgWrapperManager)

class RegisterDotOsgWrapperProxy(_object):
    """Proxy of C++ osgDB::RegisterDotOsgWrapperProxy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisterDotOsgWrapperProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisterDotOsgWrapperProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgDB::RegisterDotOsgWrapperProxy self, Object proto, std::string const & name, std::string const & associates, osgDB::DotOsgWrapper::ReadFunc readFunc, 
            osgDB::DotOsgWrapper::WriteFunc writeFunc, 
            osgDB::DotOsgWrapper::ReadWriteMode readWriteMode=READ_AND_WRITE) -> RegisterDotOsgWrapperProxy
        __init__(osgDB::RegisterDotOsgWrapperProxy self, Object proto, std::string const & name, std::string const & associates, osgDB::DotOsgWrapper::ReadFunc readFunc, 
            osgDB::DotOsgWrapper::WriteFunc writeFunc) -> RegisterDotOsgWrapperProxy
        """
        this = _osgDB.new_RegisterDotOsgWrapperProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_RegisterDotOsgWrapperProxy
    __del__ = lambda self : None;
RegisterDotOsgWrapperProxy_swigregister = _osgDB.RegisterDotOsgWrapperProxy_swigregister
RegisterDotOsgWrapperProxy_swigregister(RegisterDotOsgWrapperProxy)

OSGDB_REGISTRY = _osgDB.OSGDB_REGISTRY
class Registry(osg.Referenced):
    """Proxy of C++ osgDB::Registry class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Registry, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Registry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def instance(erase=False):
        """
        instance(bool erase=False) -> Registry
        instance() -> Registry
        """
        return _osgDB.Registry_instance(erase)

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def readCommandLine(self, *args):
        """readCommandLine(Registry self, ArgumentParser commandLine)"""
        return _osgDB.Registry_readCommandLine(self, *args)

    def addFileExtensionAlias(self, *args):
        """addFileExtensionAlias(Registry self, std::string const mapExt, std::string const toExt)"""
        return _osgDB.Registry_addFileExtensionAlias(self, *args)

    def readPluginAliasConfigurationFile(self, *args):
        """readPluginAliasConfigurationFile(Registry self, std::string const & file) -> bool"""
        return _osgDB.Registry_readPluginAliasConfigurationFile(self, *args)

    def addMimeTypeExtensionMapping(self, *args):
        """addMimeTypeExtensionMapping(Registry self, std::string const fromMimeType, std::string const toExt)"""
        return _osgDB.Registry_addMimeTypeExtensionMapping(self, *args)

    def getMimeTypeExtensionMap(self, *args):
        """
        getMimeTypeExtensionMap(Registry self) -> osgDB::Registry::MimeTypeExtensionMap
        getMimeTypeExtensionMap(Registry self) -> osgDB::Registry::MimeTypeExtensionMap const &
        """
        return _osgDB.Registry_getMimeTypeExtensionMap(self, *args)

    def addReaderWriter(self, *args):
        """addReaderWriter(Registry self, osgDB::ReaderWriter * rw)"""
        return _osgDB.Registry_addReaderWriter(self, *args)

    def removeReaderWriter(self, *args):
        """removeReaderWriter(Registry self, osgDB::ReaderWriter * rw)"""
        return _osgDB.Registry_removeReaderWriter(self, *args)

    def addImageProcessor(self, *args):
        """addImageProcessor(Registry self, ImageProcessor * ip)"""
        return _osgDB.Registry_addImageProcessor(self, *args)

    def removeImageProcessor(self, *args):
        """removeImageProcessor(Registry self, ImageProcessor * ip)"""
        return _osgDB.Registry_removeImageProcessor(self, *args)

    def createLibraryNameForFile(self, *args):
        """createLibraryNameForFile(Registry self, std::string const & fileName) -> std::string"""
        return _osgDB.Registry_createLibraryNameForFile(self, *args)

    def createLibraryNameForExtension(self, *args):
        """createLibraryNameForExtension(Registry self, std::string const & ext) -> std::string"""
        return _osgDB.Registry_createLibraryNameForExtension(self, *args)

    def createLibraryNameForNodeKit(self, *args):
        """createLibraryNameForNodeKit(Registry self, std::string const & name) -> std::string"""
        return _osgDB.Registry_createLibraryNameForNodeKit(self, *args)

    NOT_LOADED = _osgDB.Registry_NOT_LOADED
    PREVIOUSLY_LOADED = _osgDB.Registry_PREVIOUSLY_LOADED
    LOADED = _osgDB.Registry_LOADED
    def loadLibrary(self, *args):
        """loadLibrary(Registry self, std::string const & fileName) -> osgDB::Registry::LoadStatus"""
        return _osgDB.Registry_loadLibrary(self, *args)

    def closeLibrary(self, *args):
        """closeLibrary(Registry self, std::string const & fileName) -> bool"""
        return _osgDB.Registry_closeLibrary(self, *args)

    def closeAllLibraries(self):
        """closeAllLibraries(Registry self)"""
        return _osgDB.Registry_closeAllLibraries(self)

    def getReaderWriterForExtension(self, *args):
        """getReaderWriterForExtension(Registry self, std::string const & ext) -> osgDB::ReaderWriter *"""
        return _osgDB.Registry_getReaderWriterForExtension(self, *args)

    def getReaderWriterForMimeType(self, *args):
        """getReaderWriterForMimeType(Registry self, std::string const & mimeType) -> osgDB::ReaderWriter *"""
        return _osgDB.Registry_getReaderWriterForMimeType(self, *args)

    def getReaderWriterList(self, *args):
        """
        getReaderWriterList(Registry self) -> osgDB::Registry::ReaderWriterList
        getReaderWriterList(Registry self) -> osgDB::Registry::ReaderWriterList const &
        """
        return _osgDB.Registry_getReaderWriterList(self, *args)

    def getReaderWriterListForProtocol(self, *args):
        """getReaderWriterListForProtocol(Registry self, std::string const & protocol, osgDB::Registry::ReaderWriterList & results)"""
        return _osgDB.Registry_getReaderWriterListForProtocol(self, *args)

    def getReaderWriterForProtocolAndExtension(self, *args):
        """getReaderWriterForProtocolAndExtension(Registry self, std::string const & protocol, std::string const & extension) -> osgDB::ReaderWriter *"""
        return _osgDB.Registry_getReaderWriterForProtocolAndExtension(self, *args)

    def getImageProcessor(self):
        """getImageProcessor(Registry self) -> ImageProcessor *"""
        return _osgDB.Registry_getImageProcessor(self)

    def getImageProcessorForExtension(self, *args):
        """getImageProcessorForExtension(Registry self, std::string const & ext) -> ImageProcessor *"""
        return _osgDB.Registry_getImageProcessorForExtension(self, *args)

    def getImageProcessorList(self, *args):
        """
        getImageProcessorList(Registry self) -> osgDB::Registry::ImageProcessorList
        getImageProcessorList(Registry self) -> osgDB::Registry::ImageProcessorList const &
        """
        return _osgDB.Registry_getImageProcessorList(self, *args)

    def setFindFileCallback(self, *args):
        """setFindFileCallback(Registry self, osgDB::Registry::FindFileCallback * cb)"""
        return _osgDB.Registry_setFindFileCallback(self, *args)

    def getFindFileCallback(self, *args):
        """
        getFindFileCallback(Registry self) -> osgDB::Registry::FindFileCallback
        getFindFileCallback(Registry self) -> osgDB::Registry::FindFileCallback const *
        """
        return _osgDB.Registry_getFindFileCallback(self, *args)

    def findDataFile(self, *args):
        """findDataFile(Registry self, std::string const & fileName, osgDB::Options const * options, CaseSensitivity caseSensitivity) -> std::string"""
        return _osgDB.Registry_findDataFile(self, *args)

    def findDataFileImplementation(self, *args):
        """findDataFileImplementation(Registry self, std::string const & fileName, osgDB::Options const * options, CaseSensitivity caseSensitivity) -> std::string"""
        return _osgDB.Registry_findDataFileImplementation(self, *args)

    def findLibraryFile(self, *args):
        """findLibraryFile(Registry self, std::string const & fileName, osgDB::Options const * options, CaseSensitivity caseSensitivity) -> std::string"""
        return _osgDB.Registry_findLibraryFile(self, *args)

    def findLibraryFileImplementation(self, *args):
        """findLibraryFileImplementation(Registry self, std::string const & fileName, osgDB::Options const * options, CaseSensitivity caseSensitivity) -> std::string"""
        return _osgDB.Registry_findLibraryFileImplementation(self, *args)

    def openArchive(self, *args):
        """
        openArchive(Registry self, std::string const & fileName, osgDB::ReaderWriter::ArchiveStatus status, unsigned int indexBlockSizeHint, 
            osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult
        """
        return _osgDB.Registry_openArchive(self, *args)

    def openArchiveImplementation(self, *args):
        """
        openArchiveImplementation(Registry self, std::string const & fileName, osgDB::ReaderWriter::ArchiveStatus status, unsigned int indexBlockSizeHint, 
            osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult
        """
        return _osgDB.Registry_openArchiveImplementation(self, *args)

    def readObject(self, *args):
        """
        readObject(Registry self, std::string const & fileName, osgDB::Options const * options, bool buildKdTreeIfRequired=True) -> osgDB::ReaderWriter::ReadResult
        readObject(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult
        """
        return _osgDB.Registry_readObject(self, *args)

    def readObjectImplementation(self, *args):
        """readObjectImplementation(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult"""
        return _osgDB.Registry_readObjectImplementation(self, *args)

    def readImage(self, *args):
        """readImage(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult"""
        return _osgDB.Registry_readImage(self, *args)

    def readImageImplementation(self, *args):
        """readImageImplementation(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult"""
        return _osgDB.Registry_readImageImplementation(self, *args)

    def readHeightField(self, *args):
        """readHeightField(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult"""
        return _osgDB.Registry_readHeightField(self, *args)

    def readHeightFieldImplementation(self, *args):
        """readHeightFieldImplementation(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult"""
        return _osgDB.Registry_readHeightFieldImplementation(self, *args)

    def readNode(self, *args):
        """
        readNode(Registry self, std::string const & fileName, osgDB::Options const * options, bool buildKdTreeIfRequired=True) -> osgDB::ReaderWriter::ReadResult
        readNode(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult
        """
        return _osgDB.Registry_readNode(self, *args)

    def readNodeImplementation(self, *args):
        """readNodeImplementation(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult"""
        return _osgDB.Registry_readNodeImplementation(self, *args)

    def readShader(self, *args):
        """readShader(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult"""
        return _osgDB.Registry_readShader(self, *args)

    def readShaderImplementation(self, *args):
        """readShaderImplementation(Registry self, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::ReadResult"""
        return _osgDB.Registry_readShaderImplementation(self, *args)

    def writeObject(self, *args):
        """writeObject(Registry self, Object obj, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeObject(self, *args)

    def writeObjectImplementation(self, *args):
        """writeObjectImplementation(Registry self, Object obj, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeObjectImplementation(self, *args)

    def writeImage(self, *args):
        """writeImage(Registry self, Image obj, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeImage(self, *args)

    def writeImageImplementation(self, *args):
        """writeImageImplementation(Registry self, Image obj, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeImageImplementation(self, *args)

    def writeHeightField(self, *args):
        """writeHeightField(Registry self, HeightField obj, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeHeightField(self, *args)

    def writeHeightFieldImplementation(self, *args):
        """writeHeightFieldImplementation(Registry self, HeightField obj, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeHeightFieldImplementation(self, *args)

    def writeNode(self, *args):
        """writeNode(Registry self, Node node, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeNode(self, *args)

    def writeNodeImplementation(self, *args):
        """writeNodeImplementation(Registry self, Node node, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeNodeImplementation(self, *args)

    def writeShader(self, *args):
        """writeShader(Registry self, Shader obj, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeShader(self, *args)

    def writeShaderImplementation(self, *args):
        """writeShaderImplementation(Registry self, Shader obj, std::string const & fileName, osgDB::Options const * options) -> osgDB::ReaderWriter::WriteResult"""
        return _osgDB.Registry_writeShaderImplementation(self, *args)

    def _buildKdTreeIfRequired(self, *args):
        """_buildKdTreeIfRequired(Registry self, osgDB::ReaderWriter::ReadResult & result, osgDB::Options const * options)"""
        return _osgDB.Registry__buildKdTreeIfRequired(self, *args)

    def setFileLocationCallback(self, *args):
        """setFileLocationCallback(Registry self, osgDB::Registry::FileLocationCallback * cb)"""
        return _osgDB.Registry_setFileLocationCallback(self, *args)

    def getFileLocationCallback(self):
        """getFileLocationCallback(Registry self) -> osgDB::Registry::FileLocationCallback *"""
        return _osgDB.Registry_getFileLocationCallback(self)

    def setBuildKdTreesHint(self, *args):
        """setBuildKdTreesHint(Registry self, osgDB::Options::BuildKdTreesHint hint)"""
        return _osgDB.Registry_setBuildKdTreesHint(self, *args)

    def getBuildKdTreesHint(self):
        """getBuildKdTreesHint(Registry self) -> osgDB::Options::BuildKdTreesHint"""
        return _osgDB.Registry_getBuildKdTreesHint(self)

    def setKdTreeBuilder(self, *args):
        """setKdTreeBuilder(Registry self, osg::KdTreeBuilder * builder)"""
        return _osgDB.Registry_setKdTreeBuilder(self, *args)

    def getKdTreeBuilder(self):
        """getKdTreeBuilder(Registry self) -> osg::KdTreeBuilder *"""
        return _osgDB.Registry_getKdTreeBuilder(self)

    def setFileCache(self, *args):
        """setFileCache(Registry self, FileCache fileCache)"""
        return _osgDB.Registry_setFileCache(self, *args)

    def getFileCache(self, *args):
        """
        getFileCache(Registry self) -> FileCache
        getFileCache(Registry self) -> FileCache
        """
        return _osgDB.Registry_getFileCache(self, *args)

    def setAuthenticationMap(self, *args):
        """setAuthenticationMap(Registry self, AuthenticationMap authenticationMap)"""
        return _osgDB.Registry_setAuthenticationMap(self, *args)

    def getAuthenticationMap(self, *args):
        """
        getAuthenticationMap(Registry self) -> AuthenticationMap
        getAuthenticationMap(Registry self) -> AuthenticationMap
        """
        return _osgDB.Registry_getAuthenticationMap(self, *args)

    def setCreateNodeFromImage(self, *args):
        """setCreateNodeFromImage(Registry self, bool flag)"""
        return _osgDB.Registry_setCreateNodeFromImage(self, *args)

    def getCreateNodeFromImage(self):
        """getCreateNodeFromImage(Registry self) -> bool"""
        return _osgDB.Registry_getCreateNodeFromImage(self)

    def setOptions(self, *args):
        """setOptions(Registry self, osgDB::Options * opt)"""
        return _osgDB.Registry_setOptions(self, *args)

    def getOptions(self, *args):
        """
        getOptions(Registry self) -> osgDB::Options
        getOptions(Registry self) -> osgDB::Options const *
        """
        return _osgDB.Registry_getOptions(self, *args)

    def initFilePathLists(self):
        """initFilePathLists(Registry self)"""
        return _osgDB.Registry_initFilePathLists(self)

    def initDataFilePathList(self):
        """initDataFilePathList(Registry self)"""
        return _osgDB.Registry_initDataFilePathList(self)

    def setDataFilePathList(self, *args):
        """
        setDataFilePathList(Registry self, stdFilePathList filepath)
        setDataFilePathList(Registry self, std::string const & paths)
        """
        return _osgDB.Registry_setDataFilePathList(self, *args)

    def getDataFilePathList(self, *args):
        """
        getDataFilePathList(Registry self) -> stdFilePathList
        getDataFilePathList(Registry self) -> stdFilePathList
        """
        return _osgDB.Registry_getDataFilePathList(self, *args)

    def initLibraryFilePathList(self):
        """initLibraryFilePathList(Registry self)"""
        return _osgDB.Registry_initLibraryFilePathList(self)

    def setLibraryFilePathList(self, *args):
        """
        setLibraryFilePathList(Registry self, stdFilePathList filepath)
        setLibraryFilePathList(Registry self, std::string const & paths)
        """
        return _osgDB.Registry_setLibraryFilePathList(self, *args)

    def getLibraryFilePathList(self, *args):
        """
        getLibraryFilePathList(Registry self) -> stdFilePathList
        getLibraryFilePathList(Registry self) -> stdFilePathList
        """
        return _osgDB.Registry_getLibraryFilePathList(self, *args)

    def updateTimeStampOfObjectsInCacheWithExternalReferences(self, *args):
        """updateTimeStampOfObjectsInCacheWithExternalReferences(Registry self, FrameStamp frameStamp)"""
        return _osgDB.Registry_updateTimeStampOfObjectsInCacheWithExternalReferences(self, *args)

    def removeExpiredObjectsInCache(self, *args):
        """removeExpiredObjectsInCache(Registry self, FrameStamp frameStamp)"""
        return _osgDB.Registry_removeExpiredObjectsInCache(self, *args)

    def setExpiryDelay(self, *args):
        """setExpiryDelay(Registry self, double expiryDelay)"""
        return _osgDB.Registry_setExpiryDelay(self, *args)

    def getExpiryDelay(self):
        """getExpiryDelay(Registry self) -> double"""
        return _osgDB.Registry_getExpiryDelay(self)

    def clearObjectCache(self):
        """clearObjectCache(Registry self)"""
        return _osgDB.Registry_clearObjectCache(self)

    def addEntryToObjectCache(self, *args):
        """
        addEntryToObjectCache(Registry self, std::string const & filename, Object object, double timestamp=0.0)
        addEntryToObjectCache(Registry self, std::string const & filename, Object object)
        """
        return _osgDB.Registry_addEntryToObjectCache(self, *args)

    def removeFromObjectCache(self, *args):
        """removeFromObjectCache(Registry self, std::string const & fileName)"""
        return _osgDB.Registry_removeFromObjectCache(self, *args)

    def getFromObjectCache(self, *args):
        """getFromObjectCache(Registry self, std::string const & fileName) -> Object"""
        return _osgDB.Registry_getFromObjectCache(self, *args)

    def getRefFromObjectCache(self, *args):
        """getRefFromObjectCache(Registry self, std::string const & fileName) -> osg::ref_ptr< osg::Object >"""
        return _osgDB.Registry_getRefFromObjectCache(self, *args)

    def addToArchiveCache(self, *args):
        """addToArchiveCache(Registry self, std::string const & fileName, Archive archive)"""
        return _osgDB.Registry_addToArchiveCache(self, *args)

    def removeFromArchiveCache(self, *args):
        """removeFromArchiveCache(Registry self, std::string const & fileName)"""
        return _osgDB.Registry_removeFromArchiveCache(self, *args)

    def getFromArchiveCache(self, *args):
        """getFromArchiveCache(Registry self, std::string const & fileName) -> Archive"""
        return _osgDB.Registry_getFromArchiveCache(self, *args)

    def getRefFromArchiveCache(self, *args):
        """getRefFromArchiveCache(Registry self, std::string const & fileName) -> osg::ref_ptr< osgDB::Archive >"""
        return _osgDB.Registry_getRefFromArchiveCache(self, *args)

    def clearArchiveCache(self):
        """clearArchiveCache(Registry self)"""
        return _osgDB.Registry_clearArchiveCache(self)

    def releaseGLObjects(self, state=None):
        """
        releaseGLObjects(Registry self, State state=None)
        releaseGLObjects(Registry self)
        """
        return _osgDB.Registry_releaseGLObjects(self, state)

    def getLibrary(self, *args):
        """getLibrary(Registry self, std::string const & fileName) -> DynamicLibrary"""
        return _osgDB.Registry_getLibrary(self, *args)

    def setSharedStateManager(self, *args):
        """setSharedStateManager(Registry self, SharedStateManager SharedStateManager)"""
        return _osgDB.Registry_setSharedStateManager(self, *args)

    def getOrCreateSharedStateManager(self):
        """getOrCreateSharedStateManager(Registry self) -> SharedStateManager"""
        return _osgDB.Registry_getOrCreateSharedStateManager(self)

    def getSharedStateManager(self):
        """getSharedStateManager(Registry self) -> SharedStateManager"""
        return _osgDB.Registry_getSharedStateManager(self)

    def addArchiveExtension(self, *args):
        """addArchiveExtension(Registry self, std::string const ext)"""
        return _osgDB.Registry_addArchiveExtension(self, *args)

    def registerProtocol(self, *args):
        """registerProtocol(Registry self, std::string const & protocol)"""
        return _osgDB.Registry_registerProtocol(self, *args)

    def isProtocolRegistered(self, *args):
        """isProtocolRegistered(Registry self, std::string const & protocol) -> bool"""
        return _osgDB.Registry_isProtocolRegistered(self, *args)

    def getObjectWrapperManager(self):
        """getObjectWrapperManager(Registry self) -> ObjectWrapperManager *"""
        return _osgDB.Registry_getObjectWrapperManager(self)

    def getDeprecatedDotOsgObjectWrapperManager(self):
        """getDeprecatedDotOsgObjectWrapperManager(Registry self) -> DeprecatedDotOsgWrapperManager"""
        return _osgDB.Registry_getDeprecatedDotOsgObjectWrapperManager(self)

    def getArchiveExtensions(self):
        """getArchiveExtensions(Registry self) -> osgDB::Registry::ArchiveExtensionList const &"""
        return _osgDB.Registry_getArchiveExtensions(self)

Registry_swigregister = _osgDB.Registry_swigregister
Registry_swigregister(Registry)

def Registry_instance(erase=False):
  """
    instance(bool erase=False) -> Registry
    Registry_instance() -> Registry
    """
  return _osgDB.Registry_instance(erase)


def readCommandLine(*args):
  """readCommandLine(ArgumentParser parser)"""
  return _osgDB.readCommandLine(*args)
class PluginFunctionProxy(_object):
    """Proxy of C++ osgDB::PluginFunctionProxy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginFunctionProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PluginFunctionProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(osgDB::PluginFunctionProxy self, CPluginFunction function) -> PluginFunctionProxy"""
        this = _osgDB.new_PluginFunctionProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_PluginFunctionProxy
    __del__ = lambda self : None;
PluginFunctionProxy_swigregister = _osgDB.PluginFunctionProxy_swigregister
PluginFunctionProxy_swigregister(PluginFunctionProxy)

# This file is compatible with both classic and new-style classes.


