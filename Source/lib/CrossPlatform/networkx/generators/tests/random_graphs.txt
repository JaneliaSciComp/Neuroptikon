Generators - Random Graphs
----------------------------

>>> from networkx import *
>>> from networkx.generators.random_graphs import *


Smoke test the random graphs
----------------------------

>>> G=gnp_random_graph(100,0.25)
>>> G=binomial_graph(100,0.25)
>>> G=erdos_renyi_graph(100,0.25)
>>> G=fast_gnp_random_graph(100,0.25)
>>> G=gnm_random_graph(100,20)
>>> G=dense_gnm_random_graph(100,20)

>>> G=watts_strogatz_graph(10,2,0.25)
>>> len(G)
10
>>> G.number_of_edges()
10
>>> G=watts_strogatz_graph(10,4,0.25)
>>> len(G)
10
>>> G.number_of_edges()
20

>>> G=newman_watts_strogatz_graph(10,2,0.0)
>>> len(G)
10
>>> G.number_of_edges()
10
>>> G=newman_watts_strogatz_graph(10,4,0.25)
>>> len(G)
10
>>> G.number_of_edges() >= 20
True


>>> G=barabasi_albert_graph(100,1)
>>> G=powerlaw_cluster_graph(100,1,1.0)


>>> G=random_regular_graph(10,20)
>>> G=random_regular_graph(3,21)
Traceback (most recent call last):
...
NetworkXError: n * d must be even

>>> constructor=[(10,20,0.8),(20,40,0.8)]
>>> G=random_shell_graph(constructor)        

>>> s=random_powerlaw_tree_sequence(10,gamma=3,tries=1000)
>>> s=random_powerlaw_tree(10,gamma=3,tries=1000)


Test create_using restrictions
------------------------------
>>> G=gnp_random_graph(100,0.25,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=binomial_graph(100,0.25,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=erdos_renyi_graph(100,0.25,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=fast_gnp_random_graph(100,0.25,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=gnm_random_graph(100,20,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=dense_gnm_random_graph(100,20,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=watts_strogatz_graph(10,2,0.25,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=newman_watts_strogatz_graph(10,4,0.25,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=barabasi_albert_graph(100,1,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=powerlaw_cluster_graph(100,1,1.0,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> G=random_regular_graph(10,20,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported
>>> s=random_powerlaw_tree(10,gamma=3,tries=1000,create_using=DiGraph())
Traceback (most recent call last):
...
NetworkXError: Directed Graph not supported

>>> G=gnp_random_graph(100,0.25,seed=1)
>>> MG=gnp_random_graph(100,0.25,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=binomial_graph(100,0.25,seed=1)
>>> MG=binomial_graph(100,0.25,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=erdos_renyi_graph(100,0.25,seed=1)
>>> MG=erdos_renyi_graph(100,0.25,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=fast_gnp_random_graph(100,0.25,seed=1)
>>> MG=fast_gnp_random_graph(100,0.25,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=gnm_random_graph(100,20,seed=1)
>>> MG=gnm_random_graph(100,20,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=dense_gnm_random_graph(100,20,seed=1)
>>> MG=dense_gnm_random_graph(100,20,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=watts_strogatz_graph(10,2,0.25,seed=1)
>>> MG=watts_strogatz_graph(10,2,0.25,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=newman_watts_strogatz_graph(10,4,0.25,seed=1)
>>> MG=newman_watts_strogatz_graph(10,4,0.25,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=barabasi_albert_graph(100,1,seed=1)
>>> MG=barabasi_albert_graph(100,1,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=powerlaw_cluster_graph(100,1,1.0,seed=1)
>>> MG=powerlaw_cluster_graph(100,1,1.0,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=random_regular_graph(10,20,seed=1)
>>> MG=random_regular_graph(10,20,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True
>>> G=random_powerlaw_tree(10,gamma=3,tries=1000,seed=1)
>>> MG=random_powerlaw_tree(10,gamma=3,tries=1000,create_using=MultiGraph(),seed=1)
>>> G.edges()==MG.edges()
True

