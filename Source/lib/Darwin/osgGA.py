# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _osgGA
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgGA.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _osgGA.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _osgGA.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _osgGA.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _osgGA.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _osgGA.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _osgGA.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _osgGA.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _osgGA.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgGA.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _osgGA.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _osgGA.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgGA.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgGA.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgGA.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _osgGA.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _osgGA.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import osg
OSGGA_EXPORT_ = _osgGA.OSGGA_EXPORT_
OSGGA_VERSION = _osgGA.OSGGA_VERSION

def osgGAGetVersion(*args):
  """osgGAGetVersion() -> char"""
  return _osgGA.osgGAGetVersion(*args)

def osgGAGetLibraryName(*args):
  """osgGAGetLibraryName() -> char"""
  return _osgGA.osgGAGetLibraryName(*args)
OSGGA_GUIACTIONADAPTER = _osgGA.OSGGA_GUIACTIONADAPTER
class GUIActionAdapter(_object):
    """Proxy of C++ GUIActionAdapter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUIActionAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GUIActionAdapter, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgGA.delete_GUIActionAdapter
    __del__ = lambda self : None;
    def asView(*args):
        """asView(self) -> View"""
        return _osgGA.GUIActionAdapter_asView(*args)

    def requestRedraw(*args):
        """requestRedraw(self)"""
        return _osgGA.GUIActionAdapter_requestRedraw(*args)

    def requestContinuousUpdate(*args):
        """
        requestContinuousUpdate(self, bool needed=True)
        requestContinuousUpdate(self)
        """
        return _osgGA.GUIActionAdapter_requestContinuousUpdate(*args)

    def requestWarpPointer(*args):
        """requestWarpPointer(self, float x, float y)"""
        return _osgGA.GUIActionAdapter_requestWarpPointer(*args)

GUIActionAdapter_swigregister = _osgGA.GUIActionAdapter_swigregister
GUIActionAdapter_swigregister(GUIActionAdapter)

OSGGA_EVENT = _osgGA.OSGGA_EVENT
class GUIEventAdapter(osg.Object):
    """Proxy of C++ GUIEventAdapter class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUIEventAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GUIEventAdapter, name)
    __repr__ = _swig_repr
    LEFT_MOUSE_BUTTON = _osgGA.GUIEventAdapter_LEFT_MOUSE_BUTTON
    MIDDLE_MOUSE_BUTTON = _osgGA.GUIEventAdapter_MIDDLE_MOUSE_BUTTON
    RIGHT_MOUSE_BUTTON = _osgGA.GUIEventAdapter_RIGHT_MOUSE_BUTTON
    NONE = _osgGA.GUIEventAdapter_NONE
    PUSH = _osgGA.GUIEventAdapter_PUSH
    RELEASE = _osgGA.GUIEventAdapter_RELEASE
    DOUBLECLICK = _osgGA.GUIEventAdapter_DOUBLECLICK
    DRAG = _osgGA.GUIEventAdapter_DRAG
    MOVE = _osgGA.GUIEventAdapter_MOVE
    KEYDOWN = _osgGA.GUIEventAdapter_KEYDOWN
    KEYUP = _osgGA.GUIEventAdapter_KEYUP
    FRAME = _osgGA.GUIEventAdapter_FRAME
    RESIZE = _osgGA.GUIEventAdapter_RESIZE
    SCROLL = _osgGA.GUIEventAdapter_SCROLL
    PEN_PRESSURE = _osgGA.GUIEventAdapter_PEN_PRESSURE
    PEN_ORIENTATION = _osgGA.GUIEventAdapter_PEN_ORIENTATION
    PEN_PROXIMITY_ENTER = _osgGA.GUIEventAdapter_PEN_PROXIMITY_ENTER
    PEN_PROXIMITY_LEAVE = _osgGA.GUIEventAdapter_PEN_PROXIMITY_LEAVE
    CLOSE_WINDOW = _osgGA.GUIEventAdapter_CLOSE_WINDOW
    QUIT_APPLICATION = _osgGA.GUIEventAdapter_QUIT_APPLICATION
    USER = _osgGA.GUIEventAdapter_USER
    KEY_Space = _osgGA.GUIEventAdapter_KEY_Space
    KEY_BackSpace = _osgGA.GUIEventAdapter_KEY_BackSpace
    KEY_Tab = _osgGA.GUIEventAdapter_KEY_Tab
    KEY_Linefeed = _osgGA.GUIEventAdapter_KEY_Linefeed
    KEY_Clear = _osgGA.GUIEventAdapter_KEY_Clear
    KEY_Return = _osgGA.GUIEventAdapter_KEY_Return
    KEY_Pause = _osgGA.GUIEventAdapter_KEY_Pause
    KEY_Scroll_Lock = _osgGA.GUIEventAdapter_KEY_Scroll_Lock
    KEY_Sys_Req = _osgGA.GUIEventAdapter_KEY_Sys_Req
    KEY_Escape = _osgGA.GUIEventAdapter_KEY_Escape
    KEY_Delete = _osgGA.GUIEventAdapter_KEY_Delete
    KEY_Home = _osgGA.GUIEventAdapter_KEY_Home
    KEY_Left = _osgGA.GUIEventAdapter_KEY_Left
    KEY_Up = _osgGA.GUIEventAdapter_KEY_Up
    KEY_Right = _osgGA.GUIEventAdapter_KEY_Right
    KEY_Down = _osgGA.GUIEventAdapter_KEY_Down
    KEY_Prior = _osgGA.GUIEventAdapter_KEY_Prior
    KEY_Page_Up = _osgGA.GUIEventAdapter_KEY_Page_Up
    KEY_Next = _osgGA.GUIEventAdapter_KEY_Next
    KEY_Page_Down = _osgGA.GUIEventAdapter_KEY_Page_Down
    KEY_End = _osgGA.GUIEventAdapter_KEY_End
    KEY_Begin = _osgGA.GUIEventAdapter_KEY_Begin
    KEY_Select = _osgGA.GUIEventAdapter_KEY_Select
    KEY_Print = _osgGA.GUIEventAdapter_KEY_Print
    KEY_Execute = _osgGA.GUIEventAdapter_KEY_Execute
    KEY_Insert = _osgGA.GUIEventAdapter_KEY_Insert
    KEY_Undo = _osgGA.GUIEventAdapter_KEY_Undo
    KEY_Redo = _osgGA.GUIEventAdapter_KEY_Redo
    KEY_Menu = _osgGA.GUIEventAdapter_KEY_Menu
    KEY_Find = _osgGA.GUIEventAdapter_KEY_Find
    KEY_Cancel = _osgGA.GUIEventAdapter_KEY_Cancel
    KEY_Help = _osgGA.GUIEventAdapter_KEY_Help
    KEY_Break = _osgGA.GUIEventAdapter_KEY_Break
    KEY_Mode_switch = _osgGA.GUIEventAdapter_KEY_Mode_switch
    KEY_Script_switch = _osgGA.GUIEventAdapter_KEY_Script_switch
    KEY_Num_Lock = _osgGA.GUIEventAdapter_KEY_Num_Lock
    KEY_KP_Space = _osgGA.GUIEventAdapter_KEY_KP_Space
    KEY_KP_Tab = _osgGA.GUIEventAdapter_KEY_KP_Tab
    KEY_KP_Enter = _osgGA.GUIEventAdapter_KEY_KP_Enter
    KEY_KP_F1 = _osgGA.GUIEventAdapter_KEY_KP_F1
    KEY_KP_F2 = _osgGA.GUIEventAdapter_KEY_KP_F2
    KEY_KP_F3 = _osgGA.GUIEventAdapter_KEY_KP_F3
    KEY_KP_F4 = _osgGA.GUIEventAdapter_KEY_KP_F4
    KEY_KP_Home = _osgGA.GUIEventAdapter_KEY_KP_Home
    KEY_KP_Left = _osgGA.GUIEventAdapter_KEY_KP_Left
    KEY_KP_Up = _osgGA.GUIEventAdapter_KEY_KP_Up
    KEY_KP_Right = _osgGA.GUIEventAdapter_KEY_KP_Right
    KEY_KP_Down = _osgGA.GUIEventAdapter_KEY_KP_Down
    KEY_KP_Prior = _osgGA.GUIEventAdapter_KEY_KP_Prior
    KEY_KP_Page_Up = _osgGA.GUIEventAdapter_KEY_KP_Page_Up
    KEY_KP_Next = _osgGA.GUIEventAdapter_KEY_KP_Next
    KEY_KP_Page_Down = _osgGA.GUIEventAdapter_KEY_KP_Page_Down
    KEY_KP_End = _osgGA.GUIEventAdapter_KEY_KP_End
    KEY_KP_Begin = _osgGA.GUIEventAdapter_KEY_KP_Begin
    KEY_KP_Insert = _osgGA.GUIEventAdapter_KEY_KP_Insert
    KEY_KP_Delete = _osgGA.GUIEventAdapter_KEY_KP_Delete
    KEY_KP_Equal = _osgGA.GUIEventAdapter_KEY_KP_Equal
    KEY_KP_Multiply = _osgGA.GUIEventAdapter_KEY_KP_Multiply
    KEY_KP_Add = _osgGA.GUIEventAdapter_KEY_KP_Add
    KEY_KP_Separator = _osgGA.GUIEventAdapter_KEY_KP_Separator
    KEY_KP_Subtract = _osgGA.GUIEventAdapter_KEY_KP_Subtract
    KEY_KP_Decimal = _osgGA.GUIEventAdapter_KEY_KP_Decimal
    KEY_KP_Divide = _osgGA.GUIEventAdapter_KEY_KP_Divide
    KEY_KP_0 = _osgGA.GUIEventAdapter_KEY_KP_0
    KEY_KP_1 = _osgGA.GUIEventAdapter_KEY_KP_1
    KEY_KP_2 = _osgGA.GUIEventAdapter_KEY_KP_2
    KEY_KP_3 = _osgGA.GUIEventAdapter_KEY_KP_3
    KEY_KP_4 = _osgGA.GUIEventAdapter_KEY_KP_4
    KEY_KP_5 = _osgGA.GUIEventAdapter_KEY_KP_5
    KEY_KP_6 = _osgGA.GUIEventAdapter_KEY_KP_6
    KEY_KP_7 = _osgGA.GUIEventAdapter_KEY_KP_7
    KEY_KP_8 = _osgGA.GUIEventAdapter_KEY_KP_8
    KEY_KP_9 = _osgGA.GUIEventAdapter_KEY_KP_9
    KEY_F1 = _osgGA.GUIEventAdapter_KEY_F1
    KEY_F2 = _osgGA.GUIEventAdapter_KEY_F2
    KEY_F3 = _osgGA.GUIEventAdapter_KEY_F3
    KEY_F4 = _osgGA.GUIEventAdapter_KEY_F4
    KEY_F5 = _osgGA.GUIEventAdapter_KEY_F5
    KEY_F6 = _osgGA.GUIEventAdapter_KEY_F6
    KEY_F7 = _osgGA.GUIEventAdapter_KEY_F7
    KEY_F8 = _osgGA.GUIEventAdapter_KEY_F8
    KEY_F9 = _osgGA.GUIEventAdapter_KEY_F9
    KEY_F10 = _osgGA.GUIEventAdapter_KEY_F10
    KEY_F11 = _osgGA.GUIEventAdapter_KEY_F11
    KEY_F12 = _osgGA.GUIEventAdapter_KEY_F12
    KEY_F13 = _osgGA.GUIEventAdapter_KEY_F13
    KEY_F14 = _osgGA.GUIEventAdapter_KEY_F14
    KEY_F15 = _osgGA.GUIEventAdapter_KEY_F15
    KEY_F16 = _osgGA.GUIEventAdapter_KEY_F16
    KEY_F17 = _osgGA.GUIEventAdapter_KEY_F17
    KEY_F18 = _osgGA.GUIEventAdapter_KEY_F18
    KEY_F19 = _osgGA.GUIEventAdapter_KEY_F19
    KEY_F20 = _osgGA.GUIEventAdapter_KEY_F20
    KEY_F21 = _osgGA.GUIEventAdapter_KEY_F21
    KEY_F22 = _osgGA.GUIEventAdapter_KEY_F22
    KEY_F23 = _osgGA.GUIEventAdapter_KEY_F23
    KEY_F24 = _osgGA.GUIEventAdapter_KEY_F24
    KEY_F25 = _osgGA.GUIEventAdapter_KEY_F25
    KEY_F26 = _osgGA.GUIEventAdapter_KEY_F26
    KEY_F27 = _osgGA.GUIEventAdapter_KEY_F27
    KEY_F28 = _osgGA.GUIEventAdapter_KEY_F28
    KEY_F29 = _osgGA.GUIEventAdapter_KEY_F29
    KEY_F30 = _osgGA.GUIEventAdapter_KEY_F30
    KEY_F31 = _osgGA.GUIEventAdapter_KEY_F31
    KEY_F32 = _osgGA.GUIEventAdapter_KEY_F32
    KEY_F33 = _osgGA.GUIEventAdapter_KEY_F33
    KEY_F34 = _osgGA.GUIEventAdapter_KEY_F34
    KEY_F35 = _osgGA.GUIEventAdapter_KEY_F35
    KEY_Shift_L = _osgGA.GUIEventAdapter_KEY_Shift_L
    KEY_Shift_R = _osgGA.GUIEventAdapter_KEY_Shift_R
    KEY_Control_L = _osgGA.GUIEventAdapter_KEY_Control_L
    KEY_Control_R = _osgGA.GUIEventAdapter_KEY_Control_R
    KEY_Caps_Lock = _osgGA.GUIEventAdapter_KEY_Caps_Lock
    KEY_Shift_Lock = _osgGA.GUIEventAdapter_KEY_Shift_Lock
    KEY_Meta_L = _osgGA.GUIEventAdapter_KEY_Meta_L
    KEY_Meta_R = _osgGA.GUIEventAdapter_KEY_Meta_R
    KEY_Alt_L = _osgGA.GUIEventAdapter_KEY_Alt_L
    KEY_Alt_R = _osgGA.GUIEventAdapter_KEY_Alt_R
    KEY_Super_L = _osgGA.GUIEventAdapter_KEY_Super_L
    KEY_Super_R = _osgGA.GUIEventAdapter_KEY_Super_R
    KEY_Hyper_L = _osgGA.GUIEventAdapter_KEY_Hyper_L
    KEY_Hyper_R = _osgGA.GUIEventAdapter_KEY_Hyper_R
    MODKEY_LEFT_SHIFT = _osgGA.GUIEventAdapter_MODKEY_LEFT_SHIFT
    MODKEY_RIGHT_SHIFT = _osgGA.GUIEventAdapter_MODKEY_RIGHT_SHIFT
    MODKEY_LEFT_CTRL = _osgGA.GUIEventAdapter_MODKEY_LEFT_CTRL
    MODKEY_RIGHT_CTRL = _osgGA.GUIEventAdapter_MODKEY_RIGHT_CTRL
    MODKEY_LEFT_ALT = _osgGA.GUIEventAdapter_MODKEY_LEFT_ALT
    MODKEY_RIGHT_ALT = _osgGA.GUIEventAdapter_MODKEY_RIGHT_ALT
    MODKEY_LEFT_META = _osgGA.GUIEventAdapter_MODKEY_LEFT_META
    MODKEY_RIGHT_META = _osgGA.GUIEventAdapter_MODKEY_RIGHT_META
    MODKEY_LEFT_SUPER = _osgGA.GUIEventAdapter_MODKEY_LEFT_SUPER
    MODKEY_RIGHT_SUPER = _osgGA.GUIEventAdapter_MODKEY_RIGHT_SUPER
    MODKEY_LEFT_HYPER = _osgGA.GUIEventAdapter_MODKEY_LEFT_HYPER
    MODKEY_RIGHT_HYPER = _osgGA.GUIEventAdapter_MODKEY_RIGHT_HYPER
    MODKEY_NUM_LOCK = _osgGA.GUIEventAdapter_MODKEY_NUM_LOCK
    MODKEY_CAPS_LOCK = _osgGA.GUIEventAdapter_MODKEY_CAPS_LOCK
    MODKEY_CTRL = _osgGA.GUIEventAdapter_MODKEY_CTRL
    MODKEY_SHIFT = _osgGA.GUIEventAdapter_MODKEY_SHIFT
    MODKEY_ALT = _osgGA.GUIEventAdapter_MODKEY_ALT
    MODKEY_META = _osgGA.GUIEventAdapter_MODKEY_META
    MODKEY_SUPER = _osgGA.GUIEventAdapter_MODKEY_SUPER
    MODKEY_HYPER = _osgGA.GUIEventAdapter_MODKEY_HYPER
    Y_INCREASING_UPWARDS = _osgGA.GUIEventAdapter_Y_INCREASING_UPWARDS
    Y_INCREASING_DOWNWARDS = _osgGA.GUIEventAdapter_Y_INCREASING_DOWNWARDS
    SCROLL_NONE = _osgGA.GUIEventAdapter_SCROLL_NONE
    SCROLL_LEFT = _osgGA.GUIEventAdapter_SCROLL_LEFT
    SCROLL_RIGHT = _osgGA.GUIEventAdapter_SCROLL_RIGHT
    SCROLL_UP = _osgGA.GUIEventAdapter_SCROLL_UP
    SCROLL_DOWN = _osgGA.GUIEventAdapter_SCROLL_DOWN
    SCROLL_2D = _osgGA.GUIEventAdapter_SCROLL_2D
    UNKNOWN = _osgGA.GUIEventAdapter_UNKNOWN
    PEN = _osgGA.GUIEventAdapter_PEN
    PUCK = _osgGA.GUIEventAdapter_PUCK
    ERASER = _osgGA.GUIEventAdapter_ERASER
    def __init__(self, *args): 
        """
        __init__(self) -> GUIEventAdapter
        __init__(self, GUIEventAdapter rhs, CopyOp copyop=SHALLOW_COPY) -> GUIEventAdapter
        __init__(self, GUIEventAdapter rhs) -> GUIEventAdapter
        """
        this = _osgGA.new_GUIEventAdapter(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgGA.GUIEventAdapter_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgGA.GUIEventAdapter_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgGA.GUIEventAdapter_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgGA.GUIEventAdapter_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgGA.GUIEventAdapter_className(*args)

    def getAccumulatedEventState(*args):
        """getAccumulatedEventState() -> osg::ref_ptr<(osgGA::GUIEventAdapter)>"""
        return _osgGA.GUIEventAdapter_getAccumulatedEventState(*args)

    if _newclass:getAccumulatedEventState = staticmethod(getAccumulatedEventState)
    __swig_getmethods__["getAccumulatedEventState"] = lambda x: getAccumulatedEventState
    def setHandled(*args):
        """setHandled(self, bool handled)"""
        return _osgGA.GUIEventAdapter_setHandled(*args)

    def getHandled(*args):
        """getHandled(self) -> bool"""
        return _osgGA.GUIEventAdapter_getHandled(*args)

    def setEventType(*args):
        """setEventType(self, EventType Type)"""
        return _osgGA.GUIEventAdapter_setEventType(*args)

    def getEventType(*args):
        """getEventType(self) -> EventType"""
        return _osgGA.GUIEventAdapter_getEventType(*args)

    def setTime(*args):
        """setTime(self, double time)"""
        return _osgGA.GUIEventAdapter_setTime(*args)

    def getTime(*args):
        """getTime(self) -> double"""
        return _osgGA.GUIEventAdapter_getTime(*args)

    def time(*args):
        """time(self) -> double"""
        return _osgGA.GUIEventAdapter_time(*args)

    def setGraphicsContext(*args):
        """setGraphicsContext(self, GraphicsContext context)"""
        return _osgGA.GUIEventAdapter_setGraphicsContext(*args)

    def getGraphicsContext(*args):
        """getGraphicsContext(self) -> GraphicsContext"""
        return _osgGA.GUIEventAdapter_getGraphicsContext(*args)

    def setWindowRectangle(*args):
        """
        setWindowRectangle(self, int x, int y, int width, int height, bool updateMouseRange=True)
        setWindowRectangle(self, int x, int y, int width, int height)
        """
        return _osgGA.GUIEventAdapter_setWindowRectangle(*args)

    def getWindowX(*args):
        """getWindowX(self) -> int"""
        return _osgGA.GUIEventAdapter_getWindowX(*args)

    def getWindowY(*args):
        """getWindowY(self) -> int"""
        return _osgGA.GUIEventAdapter_getWindowY(*args)

    def getWindowWidth(*args):
        """getWindowWidth(self) -> int"""
        return _osgGA.GUIEventAdapter_getWindowWidth(*args)

    def getWindowHeight(*args):
        """getWindowHeight(self) -> int"""
        return _osgGA.GUIEventAdapter_getWindowHeight(*args)

    def setKey(*args):
        """setKey(self, int key)"""
        return _osgGA.GUIEventAdapter_setKey(*args)

    def getKey(*args):
        """getKey(self) -> int"""
        return _osgGA.GUIEventAdapter_getKey(*args)

    def setButton(*args):
        """setButton(self, int button)"""
        return _osgGA.GUIEventAdapter_setButton(*args)

    def getButton(*args):
        """getButton(self) -> int"""
        return _osgGA.GUIEventAdapter_getButton(*args)

    def setInputRange(*args):
        """setInputRange(self, float Xmin, float Ymin, float Xmax, float Ymax)"""
        return _osgGA.GUIEventAdapter_setInputRange(*args)

    def getXmin(*args):
        """getXmin(self) -> float"""
        return _osgGA.GUIEventAdapter_getXmin(*args)

    def getXmax(*args):
        """getXmax(self) -> float"""
        return _osgGA.GUIEventAdapter_getXmax(*args)

    def getYmin(*args):
        """getYmin(self) -> float"""
        return _osgGA.GUIEventAdapter_getYmin(*args)

    def getYmax(*args):
        """getYmax(self) -> float"""
        return _osgGA.GUIEventAdapter_getYmax(*args)

    def setX(*args):
        """setX(self, float x)"""
        return _osgGA.GUIEventAdapter_setX(*args)

    def getX(*args):
        """getX(self) -> float"""
        return _osgGA.GUIEventAdapter_getX(*args)

    def setY(*args):
        """setY(self, float y)"""
        return _osgGA.GUIEventAdapter_setY(*args)

    def getY(*args):
        """getY(self) -> float"""
        return _osgGA.GUIEventAdapter_getY(*args)

    def setButtonMask(*args):
        """setButtonMask(self, unsigned int mask)"""
        return _osgGA.GUIEventAdapter_setButtonMask(*args)

    def getButtonMask(*args):
        """getButtonMask(self) -> unsigned int"""
        return _osgGA.GUIEventAdapter_getButtonMask(*args)

    def setModKeyMask(*args):
        """setModKeyMask(self, unsigned int mask)"""
        return _osgGA.GUIEventAdapter_setModKeyMask(*args)

    def getModKeyMask(*args):
        """getModKeyMask(self) -> unsigned int"""
        return _osgGA.GUIEventAdapter_getModKeyMask(*args)

    def getPenPressure(*args):
        """getPenPressure(self) -> float"""
        return _osgGA.GUIEventAdapter_getPenPressure(*args)

    def setPenPressure(*args):
        """setPenPressure(self, float pressure)"""
        return _osgGA.GUIEventAdapter_setPenPressure(*args)

    def getPenTiltX(*args):
        """getPenTiltX(self) -> float"""
        return _osgGA.GUIEventAdapter_getPenTiltX(*args)

    def setPenTiltX(*args):
        """setPenTiltX(self, float tiltX)"""
        return _osgGA.GUIEventAdapter_setPenTiltX(*args)

    def getPenTiltY(*args):
        """getPenTiltY(self) -> float"""
        return _osgGA.GUIEventAdapter_getPenTiltY(*args)

    def setPenTiltY(*args):
        """setPenTiltY(self, float tiltY)"""
        return _osgGA.GUIEventAdapter_setPenTiltY(*args)

    def getPenRotation(*args):
        """getPenRotation(self) -> float"""
        return _osgGA.GUIEventAdapter_getPenRotation(*args)

    def setPenRotation(*args):
        """setPenRotation(self, float rotation)"""
        return _osgGA.GUIEventAdapter_setPenRotation(*args)

    def getPenOrientation(*args):
        """getPenOrientation(self) -> Matrix"""
        return _osgGA.GUIEventAdapter_getPenOrientation(*args)

    def getTabletPointerType(*args):
        """getTabletPointerType(self) -> TabletPointerType"""
        return _osgGA.GUIEventAdapter_getTabletPointerType(*args)

    def setTabletPointerType(*args):
        """setTabletPointerType(self, TabletPointerType pt)"""
        return _osgGA.GUIEventAdapter_setTabletPointerType(*args)

    def setScrollingMotion(*args):
        """setScrollingMotion(self, ScrollingMotion motion)"""
        return _osgGA.GUIEventAdapter_setScrollingMotion(*args)

    def getScrollingDeltaX(*args):
        """getScrollingDeltaX(self) -> float"""
        return _osgGA.GUIEventAdapter_getScrollingDeltaX(*args)

    def getScrollingDeltaY(*args):
        """getScrollingDeltaY(self) -> float"""
        return _osgGA.GUIEventAdapter_getScrollingDeltaY(*args)

    def setScrollingMotionDelta(*args):
        """setScrollingMotionDelta(self, float x, float y)"""
        return _osgGA.GUIEventAdapter_setScrollingMotionDelta(*args)

    def getScrollingMotion(*args):
        """getScrollingMotion(self) -> ScrollingMotion"""
        return _osgGA.GUIEventAdapter_getScrollingMotion(*args)

    def getXnormalized(*args):
        """getXnormalized(self) -> float"""
        return _osgGA.GUIEventAdapter_getXnormalized(*args)

    def getYnormalized(*args):
        """getYnormalized(self) -> float"""
        return _osgGA.GUIEventAdapter_getYnormalized(*args)

    def setMouseYOrientation(*args):
        """setMouseYOrientation(self, MouseYOrientation myo)"""
        return _osgGA.GUIEventAdapter_setMouseYOrientation(*args)

    def getMouseYOrientation(*args):
        """getMouseYOrientation(self) -> MouseYOrientation"""
        return _osgGA.GUIEventAdapter_getMouseYOrientation(*args)

GUIEventAdapter_swigregister = _osgGA.GUIEventAdapter_swigregister
GUIEventAdapter_swigregister(GUIEventAdapter)

def GUIEventAdapter_getAccumulatedEventState(*args):
  """GUIEventAdapter_getAccumulatedEventState() -> osg::ref_ptr<(osgGA::GUIEventAdapter)>"""
  return _osgGA.GUIEventAdapter_getAccumulatedEventState(*args)

OSGGA_EVENTQUEUE = _osgGA.OSGGA_EVENTQUEUE
class EventQueue(osg.Referenced):
    """Proxy of C++ EventQueue class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventQueue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, MouseYOrientation mouseYOrientation=Y_INCREASING_DOWNWARDS) -> EventQueue
        __init__(self) -> EventQueue
        """
        this = _osgGA.new_EventQueue(*args)
        try: self.this.append(this)
        except: self.this = this
    def setEvents(*args):
        """setEvents(self, Events events)"""
        return _osgGA.EventQueue_setEvents(*args)

    def takeEvents(*args):
        """takeEvents(self, Events events) -> bool"""
        return _osgGA.EventQueue_takeEvents(*args)

    def copyEvents(*args):
        """copyEvents(self, Events events) -> bool"""
        return _osgGA.EventQueue_copyEvents(*args)

    def appendEvents(*args):
        """appendEvents(self, Events events)"""
        return _osgGA.EventQueue_appendEvents(*args)

    def addEvent(*args):
        """addEvent(self, GUIEventAdapter event)"""
        return _osgGA.EventQueue_addEvent(*args)

    def setUseFixedMouseInputRange(*args):
        """setUseFixedMouseInputRange(self, bool useFixedMouseInputRange)"""
        return _osgGA.EventQueue_setUseFixedMouseInputRange(*args)

    def getUseFixedMouseInputRange(*args):
        """getUseFixedMouseInputRange(self) -> bool"""
        return _osgGA.EventQueue_getUseFixedMouseInputRange(*args)

    def setGraphicsContext(*args):
        """setGraphicsContext(self, GraphicsContext context)"""
        return _osgGA.EventQueue_setGraphicsContext(*args)

    def setMouseInputRange(*args):
        """setMouseInputRange(self, float xMin, float yMin, float xMax, float yMax)"""
        return _osgGA.EventQueue_setMouseInputRange(*args)

    def windowResize(*args):
        """
        windowResize(self, int x, int y, int width, int height)
        windowResize(self, int x, int y, int width, int height, double time)
        """
        return _osgGA.EventQueue_windowResize(*args)

    def mouseScroll(*args):
        """
        mouseScroll(self, ScrollingMotion sm)
        mouseScroll(self, ScrollingMotion sm, double time)
        """
        return _osgGA.EventQueue_mouseScroll(*args)

    def mouseScroll2D(*args):
        """
        mouseScroll2D(self, float x, float y)
        mouseScroll2D(self, float x, float y, double time)
        """
        return _osgGA.EventQueue_mouseScroll2D(*args)

    def penPressure(*args):
        """
        penPressure(self, float pressure)
        penPressure(self, float pressure, double time)
        """
        return _osgGA.EventQueue_penPressure(*args)

    def penOrientation(*args):
        """
        penOrientation(self, float tiltX, float tiltY, float rotation)
        penOrientation(self, float tiltX, float tiltY, float rotation, double time)
        """
        return _osgGA.EventQueue_penOrientation(*args)

    def penProximity(*args):
        """
        penProximity(self, TabletPointerType pt, bool isEntering)
        penProximity(self, TabletPointerType pt, bool isEntering, double time)
        """
        return _osgGA.EventQueue_penProximity(*args)

    def mouseWarped(*args):
        """mouseWarped(self, float x, float y)"""
        return _osgGA.EventQueue_mouseWarped(*args)

    def mouseMotion(*args):
        """
        mouseMotion(self, float x, float y)
        mouseMotion(self, float x, float y, double time)
        """
        return _osgGA.EventQueue_mouseMotion(*args)

    def mouseButtonPress(*args):
        """
        mouseButtonPress(self, float x, float y, unsigned int button)
        mouseButtonPress(self, float x, float y, unsigned int button, double time)
        """
        return _osgGA.EventQueue_mouseButtonPress(*args)

    def mouseDoubleButtonPress(*args):
        """
        mouseDoubleButtonPress(self, float x, float y, unsigned int button)
        mouseDoubleButtonPress(self, float x, float y, unsigned int button, double time)
        """
        return _osgGA.EventQueue_mouseDoubleButtonPress(*args)

    def mouseButtonRelease(*args):
        """
        mouseButtonRelease(self, float x, float y, unsigned int button)
        mouseButtonRelease(self, float x, float y, unsigned int button, double time)
        """
        return _osgGA.EventQueue_mouseButtonRelease(*args)

    def keyPress(*args):
        """
        keyPress(self, int key)
        keyPress(self, int key, double time)
        """
        return _osgGA.EventQueue_keyPress(*args)

    def keyRelease(*args):
        """
        keyRelease(self, int key)
        keyRelease(self, int key, double time)
        """
        return _osgGA.EventQueue_keyRelease(*args)

    def closeWindow(*args):
        """
        closeWindow(self)
        closeWindow(self, double time)
        """
        return _osgGA.EventQueue_closeWindow(*args)

    def quitApplication(*args):
        """
        quitApplication(self)
        quitApplication(self, double time)
        """
        return _osgGA.EventQueue_quitApplication(*args)

    def frame(*args):
        """frame(self, double time)"""
        return _osgGA.EventQueue_frame(*args)

    def setStartTick(*args):
        """setStartTick(self, Timer_t tick)"""
        return _osgGA.EventQueue_setStartTick(*args)

    def getStartTick(*args):
        """getStartTick(self) -> Timer_t"""
        return _osgGA.EventQueue_getStartTick(*args)

    def getTime(*args):
        """getTime(self) -> double"""
        return _osgGA.EventQueue_getTime(*args)

    def createEvent(*args):
        """createEvent(self) -> GUIEventAdapter"""
        return _osgGA.EventQueue_createEvent(*args)

    def setCurrentEventState(*args):
        """setCurrentEventState(self, GUIEventAdapter ea)"""
        return _osgGA.EventQueue_setCurrentEventState(*args)

    def getCurrentEventState(*args):
        """
        getCurrentEventState(self) -> GUIEventAdapter
        getCurrentEventState(self) -> GUIEventAdapter
        """
        return _osgGA.EventQueue_getCurrentEventState(*args)

    def userEvent(*args):
        """
        userEvent(self, Referenced userEventData)
        userEvent(self, Referenced userEventData, double time)
        """
        return _osgGA.EventQueue_userEvent(*args)

EventQueue_swigregister = _osgGA.EventQueue_swigregister
EventQueue_swigregister(EventQueue)

OSGGA_GUIEVENTHANDLER = _osgGA.OSGGA_GUIEVENTHANDLER
class GUIEventHandler(osg.NodeCallback):
    """Proxy of C++ GUIEventHandler class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GUIEventHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GUIEventHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GUIEventHandler
        __init__(self, GUIEventHandler eh, CopyOp ?) -> GUIEventHandler
        """
        if self.__class__ == GUIEventHandler:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _osgGA.new_GUIEventHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgGA.GUIEventHandler_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgGA.GUIEventHandler_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgGA.GUIEventHandler_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgGA.GUIEventHandler_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgGA.GUIEventHandler_className(*args)

    def __call__(*args):
        """__call__(self, Node node, NodeVisitor nv)"""
        return _osgGA.GUIEventHandler___call__(*args)

    def event(*args):
        """event(self, NodeVisitor nv, Drawable drawable)"""
        return _osgGA.GUIEventHandler_event(*args)

    def handle(*args):
        """
        handle(self, GUIEventAdapter ea, GUIActionAdapter aa, Object arg0, 
            NodeVisitor arg1) -> bool
        handle(self, GUIEventAdapter arg0, GUIActionAdapter arg1) -> bool
        """
        return _osgGA.GUIEventHandler_handle(*args)

    def handleWithCheckAgainstIgnoreHandledEventsMask(*args):
        """
        handleWithCheckAgainstIgnoreHandledEventsMask(self, GUIEventAdapter ea, GUIActionAdapter aa, Object object, 
            NodeVisitor nv) -> bool
        handleWithCheckAgainstIgnoreHandledEventsMask(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool
        """
        return _osgGA.GUIEventHandler_handleWithCheckAgainstIgnoreHandledEventsMask(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage arg0)"""
        return _osgGA.GUIEventHandler_getUsage(*args)

    def setIgnoreHandledEventsMask(*args):
        """setIgnoreHandledEventsMask(self, unsigned int mask)"""
        return _osgGA.GUIEventHandler_setIgnoreHandledEventsMask(*args)

    def getIgnoreHandledEventsMask(*args):
        """getIgnoreHandledEventsMask(self) -> unsigned int"""
        return _osgGA.GUIEventHandler_getIgnoreHandledEventsMask(*args)

    __swig_destroy__ = _osgGA.delete_GUIEventHandler
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _osgGA.disown_GUIEventHandler(self)
        return weakref_proxy(self)
GUIEventHandler_swigregister = _osgGA.GUIEventHandler_swigregister
GUIEventHandler_swigregister(GUIEventHandler)

OSGGA_EVENTVISITOR = _osgGA.OSGGA_EVENTVISITOR
class EventVisitor(osg.NodeVisitor):
    """Proxy of C++ EventVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> EventVisitor"""
        this = _osgGA.new_EventVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgGA.delete_EventVisitor
    __del__ = lambda self : None;
    def setActionAdapter(*args):
        """setActionAdapter(self, GUIActionAdapter actionAdapter)"""
        return _osgGA.EventVisitor_setActionAdapter(*args)

    def getActionAdapter(*args):
        """
        getActionAdapter(self) -> GUIActionAdapter
        getActionAdapter(self) -> GUIActionAdapter
        """
        return _osgGA.EventVisitor_getActionAdapter(*args)

    def addEvent(*args):
        """addEvent(self, GUIEventAdapter event)"""
        return _osgGA.EventVisitor_addEvent(*args)

    def removeEvent(*args):
        """removeEvent(self, GUIEventAdapter event)"""
        return _osgGA.EventVisitor_removeEvent(*args)

    def setEventHandled(*args):
        """setEventHandled(self, bool handled)"""
        return _osgGA.EventVisitor_setEventHandled(*args)

    def getEventHandled(*args):
        """getEventHandled(self) -> bool"""
        return _osgGA.EventVisitor_getEventHandled(*args)

    def reset(*args):
        """reset(self)"""
        return _osgGA.EventVisitor_reset(*args)

    def apply(*args):
        """
        apply(self, Node node)
        apply(self, Geode node)
        apply(self, Billboard node)
        apply(self, LightSource node)
        apply(self, Group node)
        apply(self, Transform node)
        apply(self, Projection node)
        apply(self, Switch node)
        apply(self, LOD node)
        apply(self, OccluderNode node)
        """
        return _osgGA.EventVisitor_apply(*args)

EventVisitor_swigregister = _osgGA.EventVisitor_swigregister
EventVisitor_swigregister(EventVisitor)

OSGGA_FLIGHTMANIPULATOR = _osgGA.OSGGA_FLIGHTMANIPULATOR
class FlightManipulator(_object):
    """Proxy of C++ FlightManipulator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlightManipulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlightManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> FlightManipulator"""
        this = _osgGA.new_FlightManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(*args):
        """className(self) -> char"""
        return _osgGA.FlightManipulator_className(*args)

    def setByMatrix(*args):
        """setByMatrix(self, Matrixd matrix)"""
        return _osgGA.FlightManipulator_setByMatrix(*args)

    def setByInverseMatrix(*args):
        """setByInverseMatrix(self, Matrixd matrix)"""
        return _osgGA.FlightManipulator_setByInverseMatrix(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrixd"""
        return _osgGA.FlightManipulator_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> Matrixd"""
        return _osgGA.FlightManipulator_getInverseMatrix(*args)

    def setNode(*args):
        """setNode(self, Node ?)"""
        return _osgGA.FlightManipulator_setNode(*args)

    def getNode(*args):
        """
        getNode(self) -> Node
        getNode(self) -> Node
        """
        return _osgGA.FlightManipulator_getNode(*args)

    def home(*args):
        """home(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.FlightManipulator_home(*args)

    def init(*args):
        """init(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.FlightManipulator_init(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.FlightManipulator_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgGA.FlightManipulator_getUsage(*args)

    YAW_AUTOMATICALLY_WHEN_BANKED = _osgGA.FlightManipulator_YAW_AUTOMATICALLY_WHEN_BANKED
    NO_AUTOMATIC_YAW = _osgGA.FlightManipulator_NO_AUTOMATIC_YAW
    def setYawControlMode(*args):
        """setYawControlMode(self, YawControlMode ycm)"""
        return _osgGA.FlightManipulator_setYawControlMode(*args)

    def setModelScale(*args):
        """setModelScale(self, double in_ms)"""
        return _osgGA.FlightManipulator_setModelScale(*args)

    def getModelScale(*args):
        """getModelScale(self) -> double"""
        return _osgGA.FlightManipulator_getModelScale(*args)

    def setAcceleration(*args):
        """setAcceleration(self, double in_acc)"""
        return _osgGA.FlightManipulator_setAcceleration(*args)

    def getAcceleration(*args):
        """getAcceleration(self) -> double"""
        return _osgGA.FlightManipulator_getAcceleration(*args)

    def setVelocity(*args):
        """setVelocity(self, double in_vel)"""
        return _osgGA.FlightManipulator_setVelocity(*args)

    def getVelocity(*args):
        """getVelocity(self) -> double"""
        return _osgGA.FlightManipulator_getVelocity(*args)

FlightManipulator_swigregister = _osgGA.FlightManipulator_swigregister
FlightManipulator_swigregister(FlightManipulator)

OSGGA_MatrixManipulator = _osgGA.OSGGA_MatrixManipulator
class MatrixManipulator(GUIEventHandler):
    """Proxy of C++ MatrixManipulator class"""
    __swig_setmethods__ = {}
    for _s in [GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixManipulator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def className(*args):
        """className(self) -> char"""
        return _osgGA.MatrixManipulator_className(*args)

    def setMinimumDistance(*args):
        """setMinimumDistance(self, float minimumDistance)"""
        return _osgGA.MatrixManipulator_setMinimumDistance(*args)

    def getMinimumDistance(*args):
        """getMinimumDistance(self) -> float"""
        return _osgGA.MatrixManipulator_getMinimumDistance(*args)

    def getCoordinateFrame(*args):
        """getCoordinateFrame(self, Vec3d position) -> osg::CoordinateFrame"""
        return _osgGA.MatrixManipulator_getCoordinateFrame(*args)

    def getSideVector(*args):
        """getSideVector(self, osg::CoordinateFrame cf) -> Vec3d"""
        return _osgGA.MatrixManipulator_getSideVector(*args)

    def getFrontVector(*args):
        """getFrontVector(self, osg::CoordinateFrame cf) -> Vec3d"""
        return _osgGA.MatrixManipulator_getFrontVector(*args)

    def getUpVector(*args):
        """getUpVector(self, osg::CoordinateFrame cf) -> Vec3d"""
        return _osgGA.MatrixManipulator_getUpVector(*args)

    def setByMatrix(*args):
        """setByMatrix(self, Matrixd matrix)"""
        return _osgGA.MatrixManipulator_setByMatrix(*args)

    def setByInverseMatrix(*args):
        """setByInverseMatrix(self, Matrixd matrix)"""
        return _osgGA.MatrixManipulator_setByInverseMatrix(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrixd"""
        return _osgGA.MatrixManipulator_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> Matrixd"""
        return _osgGA.MatrixManipulator_getInverseMatrix(*args)

    def getFusionDistanceMode(*args):
        """getFusionDistanceMode(self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgGA.MatrixManipulator_getFusionDistanceMode(*args)

    def getFusionDistanceValue(*args):
        """getFusionDistanceValue(self) -> float"""
        return _osgGA.MatrixManipulator_getFusionDistanceValue(*args)

    def setIntersectTraversalMask(*args):
        """setIntersectTraversalMask(self, unsigned int mask)"""
        return _osgGA.MatrixManipulator_setIntersectTraversalMask(*args)

    def getIntersectTraversalMask(*args):
        """getIntersectTraversalMask(self) -> unsigned int"""
        return _osgGA.MatrixManipulator_getIntersectTraversalMask(*args)

    def setNode(*args):
        """setNode(self, Node ?)"""
        return _osgGA.MatrixManipulator_setNode(*args)

    def getNode(*args):
        """
        getNode(self) -> Node
        getNode(self) -> Node
        """
        return _osgGA.MatrixManipulator_getNode(*args)

    def setHomePosition(*args):
        """
        setHomePosition(self, Vec3d eye, Vec3d center, Vec3d up, bool autoComputeHomePosition=False)
        setHomePosition(self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.MatrixManipulator_setHomePosition(*args)

    def getHomePosition(*args):
        """getHomePosition(self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osgGA.MatrixManipulator_getHomePosition(*args)

    def setAutoComputeHomePosition(*args):
        """setAutoComputeHomePosition(self, bool flag)"""
        return _osgGA.MatrixManipulator_setAutoComputeHomePosition(*args)

    def getAutoComputeHomePosition(*args):
        """getAutoComputeHomePosition(self) -> bool"""
        return _osgGA.MatrixManipulator_getAutoComputeHomePosition(*args)

    def computeHomePosition(*args):
        """computeHomePosition(self)"""
        return _osgGA.MatrixManipulator_computeHomePosition(*args)

    def home(*args):
        """
        home(self, GUIEventAdapter ?, GUIActionAdapter ?)
        home(self, double ?)
        """
        return _osgGA.MatrixManipulator_home(*args)

    def init(*args):
        """init(self, GUIEventAdapter ?, GUIActionAdapter ?)"""
        return _osgGA.MatrixManipulator_init(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.MatrixManipulator_handle(*args)

MatrixManipulator_swigregister = _osgGA.MatrixManipulator_swigregister
MatrixManipulator_swigregister(MatrixManipulator)

OSGUTIL_KEYSWITCMATRIXMANIPULATOR = _osgGA.OSGUTIL_KEYSWITCMATRIXMANIPULATOR
class KeySwitchMatrixManipulator(MatrixManipulator):
    """Proxy of C++ KeySwitchMatrixManipulator class"""
    __swig_setmethods__ = {}
    for _s in [MatrixManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeySwitchMatrixManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeySwitchMatrixManipulator, name)
    __repr__ = _swig_repr
    def className(*args):
        """className(self) -> char"""
        return _osgGA.KeySwitchMatrixManipulator_className(*args)

    def addMatrixManipulator(*args):
        """addMatrixManipulator(self, int key, string name, MatrixManipulator cm)"""
        return _osgGA.KeySwitchMatrixManipulator_addMatrixManipulator(*args)

    def addNumberedMatrixManipulator(*args):
        """addNumberedMatrixManipulator(self, MatrixManipulator cm)"""
        return _osgGA.KeySwitchMatrixManipulator_addNumberedMatrixManipulator(*args)

    def getNumMatrixManipulators(*args):
        """getNumMatrixManipulators(self) -> unsigned int"""
        return _osgGA.KeySwitchMatrixManipulator_getNumMatrixManipulators(*args)

    def selectMatrixManipulator(*args):
        """selectMatrixManipulator(self, unsigned int num)"""
        return _osgGA.KeySwitchMatrixManipulator_selectMatrixManipulator(*args)

    def getKeyManipMap(*args):
        """
        getKeyManipMap(self) -> KeyManipMap
        getKeyManipMap(self) -> KeyManipMap
        """
        return _osgGA.KeySwitchMatrixManipulator_getKeyManipMap(*args)

    def getCurrentMatrixManipulator(*args):
        """
        getCurrentMatrixManipulator(self) -> MatrixManipulator
        getCurrentMatrixManipulator(self) -> MatrixManipulator
        """
        return _osgGA.KeySwitchMatrixManipulator_getCurrentMatrixManipulator(*args)

    def getMatrixManipulatorWithIndex(*args):
        """
        getMatrixManipulatorWithIndex(self, unsigned int key) -> MatrixManipulator
        getMatrixManipulatorWithIndex(self, unsigned int key) -> MatrixManipulator
        """
        return _osgGA.KeySwitchMatrixManipulator_getMatrixManipulatorWithIndex(*args)

    def getMatrixManipulatorWithKey(*args):
        """
        getMatrixManipulatorWithKey(self, unsigned int key) -> MatrixManipulator
        getMatrixManipulatorWithKey(self, unsigned int key) -> MatrixManipulator
        """
        return _osgGA.KeySwitchMatrixManipulator_getMatrixManipulatorWithKey(*args)

    def setMinimumDistance(*args):
        """setMinimumDistance(self, float minimumDistance)"""
        return _osgGA.KeySwitchMatrixManipulator_setMinimumDistance(*args)

    def setByMatrix(*args):
        """setByMatrix(self, Matrixd matrix)"""
        return _osgGA.KeySwitchMatrixManipulator_setByMatrix(*args)

    def setByInverseMatrix(*args):
        """setByInverseMatrix(self, Matrixd matrix)"""
        return _osgGA.KeySwitchMatrixManipulator_setByInverseMatrix(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrixd"""
        return _osgGA.KeySwitchMatrixManipulator_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> Matrixd"""
        return _osgGA.KeySwitchMatrixManipulator_getInverseMatrix(*args)

    def getFusionDistanceMode(*args):
        """getFusionDistanceMode(self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgGA.KeySwitchMatrixManipulator_getFusionDistanceMode(*args)

    def getFusionDistanceValue(*args):
        """getFusionDistanceValue(self) -> float"""
        return _osgGA.KeySwitchMatrixManipulator_getFusionDistanceValue(*args)

    def setNode(*args):
        """setNode(self, Node n)"""
        return _osgGA.KeySwitchMatrixManipulator_setNode(*args)

    def getNode(*args):
        """
        getNode(self) -> Node
        getNode(self) -> Node
        """
        return _osgGA.KeySwitchMatrixManipulator_getNode(*args)

    def setHomePosition(*args):
        """
        setHomePosition(self, Vec3d eye, Vec3d center, Vec3d up, bool autoComputeHomePosition=False)
        setHomePosition(self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osgGA.KeySwitchMatrixManipulator_setHomePosition(*args)

    def setAutoComputeHomePosition(*args):
        """setAutoComputeHomePosition(self, bool flag)"""
        return _osgGA.KeySwitchMatrixManipulator_setAutoComputeHomePosition(*args)

    def computeHomePosition(*args):
        """computeHomePosition(self)"""
        return _osgGA.KeySwitchMatrixManipulator_computeHomePosition(*args)

    def home(*args):
        """home(self, GUIEventAdapter ee, GUIActionAdapter aa)"""
        return _osgGA.KeySwitchMatrixManipulator_home(*args)

    def init(*args):
        """init(self, GUIEventAdapter ee, GUIActionAdapter aa)"""
        return _osgGA.KeySwitchMatrixManipulator_init(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.KeySwitchMatrixManipulator_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgGA.KeySwitchMatrixManipulator_getUsage(*args)

    def __init__(self, *args): 
        """__init__(self) -> KeySwitchMatrixManipulator"""
        this = _osgGA.new_KeySwitchMatrixManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgGA.delete_KeySwitchMatrixManipulator
    __del__ = lambda self : None;
KeySwitchMatrixManipulator_swigregister = _osgGA.KeySwitchMatrixManipulator_swigregister
KeySwitchMatrixManipulator_swigregister(KeySwitchMatrixManipulator)

OSGGA_STATESTATE_MANIPULATOR = _osgGA.OSGGA_STATESTATE_MANIPULATOR
class StateSetManipulator(GUIEventHandler):
    """Proxy of C++ StateSetManipulator class"""
    __swig_setmethods__ = {}
    for _s in [GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateSetManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateSetManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, StateSet stateset=0) -> StateSetManipulator
        __init__(self) -> StateSetManipulator
        """
        this = _osgGA.new_StateSetManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(*args):
        """className(self) -> char"""
        return _osgGA.StateSetManipulator_className(*args)

    def setStateSet(*args):
        """setStateSet(self, StateSet ?)"""
        return _osgGA.StateSetManipulator_setStateSet(*args)

    def getStateSet(*args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osgGA.StateSetManipulator_getStateSet(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.StateSetManipulator_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgGA.StateSetManipulator_getUsage(*args)

    def setMaximumNumOfTextureUnits(*args):
        """setMaximumNumOfTextureUnits(self, unsigned int i)"""
        return _osgGA.StateSetManipulator_setMaximumNumOfTextureUnits(*args)

    def getMaximumNumOfTextureUnits(*args):
        """getMaximumNumOfTextureUnits(self) -> unsigned int"""
        return _osgGA.StateSetManipulator_getMaximumNumOfTextureUnits(*args)

    def setBackfaceEnabled(*args):
        """setBackfaceEnabled(self, bool newbackface)"""
        return _osgGA.StateSetManipulator_setBackfaceEnabled(*args)

    def getBackfaceEnabled(*args):
        """getBackfaceEnabled(self) -> bool"""
        return _osgGA.StateSetManipulator_getBackfaceEnabled(*args)

    def setLightingEnabled(*args):
        """setLightingEnabled(self, bool newlighting)"""
        return _osgGA.StateSetManipulator_setLightingEnabled(*args)

    def getLightingEnabled(*args):
        """getLightingEnabled(self) -> bool"""
        return _osgGA.StateSetManipulator_getLightingEnabled(*args)

    def setTextureEnabled(*args):
        """setTextureEnabled(self, bool newtexture)"""
        return _osgGA.StateSetManipulator_setTextureEnabled(*args)

    def getTextureEnabled(*args):
        """getTextureEnabled(self) -> bool"""
        return _osgGA.StateSetManipulator_getTextureEnabled(*args)

    def setPolygonMode(*args):
        """setPolygonMode(self, Mode newpolygonmode)"""
        return _osgGA.StateSetManipulator_setPolygonMode(*args)

    def getPolygonMode(*args):
        """getPolygonMode(self) -> Mode"""
        return _osgGA.StateSetManipulator_getPolygonMode(*args)

    def cyclePolygonMode(*args):
        """cyclePolygonMode(self)"""
        return _osgGA.StateSetManipulator_cyclePolygonMode(*args)

    def setKeyEventToggleBackfaceCulling(*args):
        """setKeyEventToggleBackfaceCulling(self, int key)"""
        return _osgGA.StateSetManipulator_setKeyEventToggleBackfaceCulling(*args)

    def getKeyEventToggleBackfaceCulling(*args):
        """getKeyEventToggleBackfaceCulling(self) -> int"""
        return _osgGA.StateSetManipulator_getKeyEventToggleBackfaceCulling(*args)

    def setKeyEventToggleLighting(*args):
        """setKeyEventToggleLighting(self, int key)"""
        return _osgGA.StateSetManipulator_setKeyEventToggleLighting(*args)

    def getKeyEventToggleLighting(*args):
        """getKeyEventToggleLighting(self) -> int"""
        return _osgGA.StateSetManipulator_getKeyEventToggleLighting(*args)

    def setKeyEventToggleTexturing(*args):
        """setKeyEventToggleTexturing(self, int key)"""
        return _osgGA.StateSetManipulator_setKeyEventToggleTexturing(*args)

    def getKeyEventToggleTexturing(*args):
        """getKeyEventToggleTexturing(self) -> int"""
        return _osgGA.StateSetManipulator_getKeyEventToggleTexturing(*args)

    def setKeyEventCyclePolygonMode(*args):
        """setKeyEventCyclePolygonMode(self, int key)"""
        return _osgGA.StateSetManipulator_setKeyEventCyclePolygonMode(*args)

    def getKeyEventCyclePolygonMode(*args):
        """getKeyEventCyclePolygonMode(self) -> int"""
        return _osgGA.StateSetManipulator_getKeyEventCyclePolygonMode(*args)

StateSetManipulator_swigregister = _osgGA.StateSetManipulator_swigregister
StateSetManipulator_swigregister(StateSetManipulator)

OSGGA_TERRAINMANIPULATOR = _osgGA.OSGGA_TERRAINMANIPULATOR
class TerrainManipulator(MatrixManipulator):
    """Proxy of C++ TerrainManipulator class"""
    __swig_setmethods__ = {}
    for _s in [MatrixManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TerrainManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TerrainManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> TerrainManipulator"""
        this = _osgGA.new_TerrainManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(*args):
        """className(self) -> char"""
        return _osgGA.TerrainManipulator_className(*args)

    ELEVATION_AZIM_ROLL = _osgGA.TerrainManipulator_ELEVATION_AZIM_ROLL
    ELEVATION_AZIM = _osgGA.TerrainManipulator_ELEVATION_AZIM
    def setRotationMode(*args):
        """setRotationMode(self, RotationMode mode)"""
        return _osgGA.TerrainManipulator_setRotationMode(*args)

    def getRotationMode(*args):
        """getRotationMode(self) -> RotationMode"""
        return _osgGA.TerrainManipulator_getRotationMode(*args)

    def setByMatrix(*args):
        """setByMatrix(self, Matrixd matrix)"""
        return _osgGA.TerrainManipulator_setByMatrix(*args)

    def setByInverseMatrix(*args):
        """setByInverseMatrix(self, Matrixd matrix)"""
        return _osgGA.TerrainManipulator_setByInverseMatrix(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrixd"""
        return _osgGA.TerrainManipulator_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> Matrixd"""
        return _osgGA.TerrainManipulator_getInverseMatrix(*args)

    def getFusionDistanceMode(*args):
        """getFusionDistanceMode(self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgGA.TerrainManipulator_getFusionDistanceMode(*args)

    def getFusionDistanceValue(*args):
        """getFusionDistanceValue(self) -> float"""
        return _osgGA.TerrainManipulator_getFusionDistanceValue(*args)

    def setNode(*args):
        """setNode(self, Node ?)"""
        return _osgGA.TerrainManipulator_setNode(*args)

    def getNode(*args):
        """
        getNode(self) -> Node
        getNode(self) -> Node
        """
        return _osgGA.TerrainManipulator_getNode(*args)

    def home(*args):
        """home(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.TerrainManipulator_home(*args)

    def init(*args):
        """init(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.TerrainManipulator_init(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.TerrainManipulator_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgGA.TerrainManipulator_getUsage(*args)

TerrainManipulator_swigregister = _osgGA.TerrainManipulator_swigregister
TerrainManipulator_swigregister(TerrainManipulator)

OSGGA_TRACKBALLMANIPULATOR = _osgGA.OSGGA_TRACKBALLMANIPULATOR
class TrackballManipulator(MatrixManipulator):
    """Proxy of C++ TrackballManipulator class"""
    __swig_setmethods__ = {}
    for _s in [MatrixManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrackballManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrackballManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> TrackballManipulator"""
        this = _osgGA.new_TrackballManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(*args):
        """className(self) -> char"""
        return _osgGA.TrackballManipulator_className(*args)

    def setByMatrix(*args):
        """setByMatrix(self, Matrixd matrix)"""
        return _osgGA.TrackballManipulator_setByMatrix(*args)

    def setByInverseMatrix(*args):
        """setByInverseMatrix(self, Matrixd matrix)"""
        return _osgGA.TrackballManipulator_setByInverseMatrix(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrixd"""
        return _osgGA.TrackballManipulator_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> Matrixd"""
        return _osgGA.TrackballManipulator_getInverseMatrix(*args)

    def getFusionDistanceMode(*args):
        """getFusionDistanceMode(self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgGA.TrackballManipulator_getFusionDistanceMode(*args)

    def getFusionDistanceValue(*args):
        """getFusionDistanceValue(self) -> float"""
        return _osgGA.TrackballManipulator_getFusionDistanceValue(*args)

    def setNode(*args):
        """setNode(self, Node ?)"""
        return _osgGA.TrackballManipulator_setNode(*args)

    def getNode(*args):
        """
        getNode(self) -> Node
        getNode(self) -> Node
        """
        return _osgGA.TrackballManipulator_getNode(*args)

    def home(*args):
        """
        home(self, GUIEventAdapter ea, GUIActionAdapter us)
        home(self, double ?)
        """
        return _osgGA.TrackballManipulator_home(*args)

    def init(*args):
        """init(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.TrackballManipulator_init(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.TrackballManipulator_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgGA.TrackballManipulator_getUsage(*args)

    def setMinimumZoomScale(*args):
        """setMinimumZoomScale(self, double minimumZoomScale)"""
        return _osgGA.TrackballManipulator_setMinimumZoomScale(*args)

    def getMinimumZoomScale(*args):
        """getMinimumZoomScale(self) -> double"""
        return _osgGA.TrackballManipulator_getMinimumZoomScale(*args)

    def setCenter(*args):
        """setCenter(self, Vec3d center)"""
        return _osgGA.TrackballManipulator_setCenter(*args)

    def getCenter(*args):
        """getCenter(self) -> Vec3d"""
        return _osgGA.TrackballManipulator_getCenter(*args)

    def setRotation(*args):
        """setRotation(self, Quat rotation)"""
        return _osgGA.TrackballManipulator_setRotation(*args)

    def getRotation(*args):
        """getRotation(self) -> Quat"""
        return _osgGA.TrackballManipulator_getRotation(*args)

    def setDistance(*args):
        """setDistance(self, double distance)"""
        return _osgGA.TrackballManipulator_setDistance(*args)

    def getDistance(*args):
        """getDistance(self) -> double"""
        return _osgGA.TrackballManipulator_getDistance(*args)

    def setTrackballSize(*args):
        """setTrackballSize(self, float size)"""
        return _osgGA.TrackballManipulator_setTrackballSize(*args)

    def getTrackballSize(*args):
        """getTrackballSize(self) -> float"""
        return _osgGA.TrackballManipulator_getTrackballSize(*args)

TrackballManipulator_swigregister = _osgGA.TrackballManipulator_swigregister
TrackballManipulator_swigregister(TrackballManipulator)

OSGGA_UFO_MANIPULATOR_DEF = _osgGA.OSGGA_UFO_MANIPULATOR_DEF
class UFOManipulator(MatrixManipulator):
    """Proxy of C++ UFOManipulator class"""
    __swig_setmethods__ = {}
    for _s in [MatrixManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UFOManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UFOManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> UFOManipulator"""
        this = _osgGA.new_UFOManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(*args):
        """className(self) -> char"""
        return _osgGA.UFOManipulator_className(*args)

    def setByMatrix(*args):
        """setByMatrix(self, Matrixd matrix)"""
        return _osgGA.UFOManipulator_setByMatrix(*args)

    def setByInverseMatrix(*args):
        """setByInverseMatrix(self, Matrixd invmat)"""
        return _osgGA.UFOManipulator_setByInverseMatrix(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrixd"""
        return _osgGA.UFOManipulator_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> Matrixd"""
        return _osgGA.UFOManipulator_getInverseMatrix(*args)

    def setNode(*args):
        """setNode(self, Node node)"""
        return _osgGA.UFOManipulator_setNode(*args)

    def getNode(*args):
        """
        getNode(self) -> Node
        getNode(self) -> Node
        """
        return _osgGA.UFOManipulator_getNode(*args)

    def computeHomePosition(*args):
        """computeHomePosition(self)"""
        return _osgGA.UFOManipulator_computeHomePosition(*args)

    def home(*args):
        """
        home(self, GUIEventAdapter ?, GUIActionAdapter ?)
        home(self, double ?)
        """
        return _osgGA.UFOManipulator_home(*args)

    def init(*args):
        """init(self, GUIEventAdapter ?, GUIActionAdapter ?)"""
        return _osgGA.UFOManipulator_init(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgGA.UFOManipulator_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgGA.UFOManipulator_getUsage(*args)

    def getCurrentPositionAsLookAt(*args):
        """getCurrentPositionAsLookAt(self, Vec3 eye, Vec3 center, Vec3 up)"""
        return _osgGA.UFOManipulator_getCurrentPositionAsLookAt(*args)

    def setMinHeight(*args):
        """setMinHeight(self, double in_min_height)"""
        return _osgGA.UFOManipulator_setMinHeight(*args)

    def getMinHeight(*args):
        """getMinHeight(self) -> double"""
        return _osgGA.UFOManipulator_getMinHeight(*args)

    def setMinDistance(*args):
        """setMinDistance(self, double in_min_dist)"""
        return _osgGA.UFOManipulator_setMinDistance(*args)

    def getMinDistance(*args):
        """getMinDistance(self) -> double"""
        return _osgGA.UFOManipulator_getMinDistance(*args)

    def setForwardSpeed(*args):
        """setForwardSpeed(self, double in_fs)"""
        return _osgGA.UFOManipulator_setForwardSpeed(*args)

    def getForwardSpeed(*args):
        """getForwardSpeed(self) -> double"""
        return _osgGA.UFOManipulator_getForwardSpeed(*args)

    def setSideSpeed(*args):
        """setSideSpeed(self, double in_ss)"""
        return _osgGA.UFOManipulator_setSideSpeed(*args)

    def getSideSpeed(*args):
        """getSideSpeed(self) -> double"""
        return _osgGA.UFOManipulator_getSideSpeed(*args)

    def setRotationSpeed(*args):
        """setRotationSpeed(self, double in_rot_speed)"""
        return _osgGA.UFOManipulator_setRotationSpeed(*args)

    def getRotationSpeed(*args):
        """getRotationSpeed(self) -> double"""
        return _osgGA.UFOManipulator_getRotationSpeed(*args)

    __swig_destroy__ = _osgGA.delete_UFOManipulator
    __del__ = lambda self : None;
UFOManipulator_swigregister = _osgGA.UFOManipulator_swigregister
UFOManipulator_swigregister(UFOManipulator)

OSGGA_ANIMATION_PATH_MANIPULATOR = _osgGA.OSGGA_ANIMATION_PATH_MANIPULATOR
class AnimationPathManipulator(MatrixManipulator):
    """Proxy of C++ AnimationPathManipulator class"""
    __swig_setmethods__ = {}
    for _s in [MatrixManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationPathManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationPathManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, osg::AnimationPath animationPath=0) -> AnimationPathManipulator
        __init__(self) -> AnimationPathManipulator
        __init__(self, string filename) -> AnimationPathManipulator
        """
        this = _osgGA.new_AnimationPathManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(*args):
        """className(self) -> char"""
        return _osgGA.AnimationPathManipulator_className(*args)

    def setPrintOutTimingInfo(*args):
        """setPrintOutTimingInfo(self, bool printOutTimingInfo)"""
        return _osgGA.AnimationPathManipulator_setPrintOutTimingInfo(*args)

    def getPrintOutTimingInfo(*args):
        """getPrintOutTimingInfo(self) -> bool"""
        return _osgGA.AnimationPathManipulator_getPrintOutTimingInfo(*args)

    def setByMatrix(*args):
        """setByMatrix(self, Matrixd matrix)"""
        return _osgGA.AnimationPathManipulator_setByMatrix(*args)

    def setByInverseMatrix(*args):
        """setByInverseMatrix(self, Matrixd matrix)"""
        return _osgGA.AnimationPathManipulator_setByInverseMatrix(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrixd"""
        return _osgGA.AnimationPathManipulator_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> Matrixd"""
        return _osgGA.AnimationPathManipulator_getInverseMatrix(*args)

    def setAnimationPath(*args):
        """setAnimationPath(self, osg::AnimationPath animationPath)"""
        return _osgGA.AnimationPathManipulator_setAnimationPath(*args)

    def getAnimationPath(*args):
        """
        getAnimationPath(self) -> osg::AnimationPath
        getAnimationPath(self) -> osg::AnimationPath
        """
        return _osgGA.AnimationPathManipulator_getAnimationPath(*args)

    def valid(*args):
        """valid(self) -> bool"""
        return _osgGA.AnimationPathManipulator_valid(*args)

    def init(*args):
        """init(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.AnimationPathManipulator_init(*args)

    def home(*args):
        """
        home(self, GUIEventAdapter ea, GUIActionAdapter us)
        home(self, double currentTime)
        """
        return _osgGA.AnimationPathManipulator_home(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.AnimationPathManipulator_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgGA.AnimationPathManipulator_getUsage(*args)

    __swig_destroy__ = _osgGA.delete_AnimationPathManipulator
    __del__ = lambda self : None;
AnimationPathManipulator_swigregister = _osgGA.AnimationPathManipulator_swigregister
AnimationPathManipulator_swigregister(AnimationPathManipulator)

OSGGA_DRIVEMANIPULATOR = _osgGA.OSGGA_DRIVEMANIPULATOR
class DriveManipulator(MatrixManipulator):
    """Proxy of C++ DriveManipulator class"""
    __swig_setmethods__ = {}
    for _s in [MatrixManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DriveManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DriveManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> DriveManipulator"""
        this = _osgGA.new_DriveManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(*args):
        """className(self) -> char"""
        return _osgGA.DriveManipulator_className(*args)

    def setByMatrix(*args):
        """setByMatrix(self, Matrixd matrix)"""
        return _osgGA.DriveManipulator_setByMatrix(*args)

    def setByInverseMatrix(*args):
        """setByInverseMatrix(self, Matrixd matrix)"""
        return _osgGA.DriveManipulator_setByInverseMatrix(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrixd"""
        return _osgGA.DriveManipulator_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> Matrixd"""
        return _osgGA.DriveManipulator_getInverseMatrix(*args)

    def setNode(*args):
        """setNode(self, Node ?)"""
        return _osgGA.DriveManipulator_setNode(*args)

    def getNode(*args):
        """
        getNode(self) -> Node
        getNode(self) -> Node
        """
        return _osgGA.DriveManipulator_getNode(*args)

    def computeHomePosition(*args):
        """computeHomePosition(self)"""
        return _osgGA.DriveManipulator_computeHomePosition(*args)

    def home(*args):
        """home(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.DriveManipulator_home(*args)

    def init(*args):
        """init(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.DriveManipulator_init(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.DriveManipulator_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgGA.DriveManipulator_getUsage(*args)

    def setModelScale(*args):
        """setModelScale(self, double in_ms)"""
        return _osgGA.DriveManipulator_setModelScale(*args)

    def getModelScale(*args):
        """getModelScale(self) -> double"""
        return _osgGA.DriveManipulator_getModelScale(*args)

    def setVelocity(*args):
        """setVelocity(self, double in_vel)"""
        return _osgGA.DriveManipulator_setVelocity(*args)

    def getVelocity(*args):
        """getVelocity(self) -> double"""
        return _osgGA.DriveManipulator_getVelocity(*args)

    def setHeight(*args):
        """setHeight(self, double in_h)"""
        return _osgGA.DriveManipulator_setHeight(*args)

    def getHeight(*args):
        """getHeight(self) -> double"""
        return _osgGA.DriveManipulator_getHeight(*args)

DriveManipulator_swigregister = _osgGA.DriveManipulator_swigregister
DriveManipulator_swigregister(DriveManipulator)

OSGGA_NODETRACKERMANIPULATOR = _osgGA.OSGGA_NODETRACKERMANIPULATOR
class NodeTrackerManipulator(MatrixManipulator):
    """Proxy of C++ NodeTrackerManipulator class"""
    __swig_setmethods__ = {}
    for _s in [MatrixManipulator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeTrackerManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixManipulator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeTrackerManipulator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> NodeTrackerManipulator"""
        this = _osgGA.new_NodeTrackerManipulator(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(*args):
        """className(self) -> char"""
        return _osgGA.NodeTrackerManipulator_className(*args)

    def setTrackNodePath(*args):
        """
        setTrackNodePath(self, NodePath nodePath)
        setTrackNodePath(self, ObserverNodePath nodePath)
        """
        return _osgGA.NodeTrackerManipulator_setTrackNodePath(*args)

    def getTrackNodePath(*args):
        """getTrackNodePath(self) -> ObserverNodePath"""
        return _osgGA.NodeTrackerManipulator_getTrackNodePath(*args)

    def setTrackNode(*args):
        """setTrackNode(self, Node node)"""
        return _osgGA.NodeTrackerManipulator_setTrackNode(*args)

    def getTrackNode(*args):
        """
        getTrackNode(self) -> Node
        getTrackNode(self) -> Node
        """
        return _osgGA.NodeTrackerManipulator_getTrackNode(*args)

    NODE_CENTER = _osgGA.NodeTrackerManipulator_NODE_CENTER
    NODE_CENTER_AND_AZIM = _osgGA.NodeTrackerManipulator_NODE_CENTER_AND_AZIM
    NODE_CENTER_AND_ROTATION = _osgGA.NodeTrackerManipulator_NODE_CENTER_AND_ROTATION
    def setTrackerMode(*args):
        """setTrackerMode(self, TrackerMode mode)"""
        return _osgGA.NodeTrackerManipulator_setTrackerMode(*args)

    def getTrackerMode(*args):
        """getTrackerMode(self) -> TrackerMode"""
        return _osgGA.NodeTrackerManipulator_getTrackerMode(*args)

    TRACKBALL = _osgGA.NodeTrackerManipulator_TRACKBALL
    ELEVATION_AZIM = _osgGA.NodeTrackerManipulator_ELEVATION_AZIM
    def setRotationMode(*args):
        """setRotationMode(self, RotationMode mode)"""
        return _osgGA.NodeTrackerManipulator_setRotationMode(*args)

    def getRotationMode(*args):
        """getRotationMode(self) -> RotationMode"""
        return _osgGA.NodeTrackerManipulator_getRotationMode(*args)

    def setByMatrix(*args):
        """setByMatrix(self, Matrixd matrix)"""
        return _osgGA.NodeTrackerManipulator_setByMatrix(*args)

    def setByInverseMatrix(*args):
        """setByInverseMatrix(self, Matrixd matrix)"""
        return _osgGA.NodeTrackerManipulator_setByInverseMatrix(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrixd"""
        return _osgGA.NodeTrackerManipulator_getMatrix(*args)

    def getInverseMatrix(*args):
        """getInverseMatrix(self) -> Matrixd"""
        return _osgGA.NodeTrackerManipulator_getInverseMatrix(*args)

    def getFusionDistanceMode(*args):
        """getFusionDistanceMode(self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgGA.NodeTrackerManipulator_getFusionDistanceMode(*args)

    def getFusionDistanceValue(*args):
        """getFusionDistanceValue(self) -> float"""
        return _osgGA.NodeTrackerManipulator_getFusionDistanceValue(*args)

    def setNode(*args):
        """setNode(self, Node ?)"""
        return _osgGA.NodeTrackerManipulator_setNode(*args)

    def getNode(*args):
        """
        getNode(self) -> Node
        getNode(self) -> Node
        """
        return _osgGA.NodeTrackerManipulator_getNode(*args)

    def computeHomePosition(*args):
        """computeHomePosition(self)"""
        return _osgGA.NodeTrackerManipulator_computeHomePosition(*args)

    def home(*args):
        """home(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.NodeTrackerManipulator_home(*args)

    def init(*args):
        """init(self, GUIEventAdapter ea, GUIActionAdapter us)"""
        return _osgGA.NodeTrackerManipulator_init(*args)

    def handle(*args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter us) -> bool"""
        return _osgGA.NodeTrackerManipulator_handle(*args)

    def getUsage(*args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgGA.NodeTrackerManipulator_getUsage(*args)

NodeTrackerManipulator_swigregister = _osgGA.NodeTrackerManipulator_swigregister
NodeTrackerManipulator_swigregister(NodeTrackerManipulator)



