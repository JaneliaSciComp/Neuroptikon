# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _osgFX
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgFX.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _osgFX.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _osgFX.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _osgFX.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _osgFX.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _osgFX.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _osgFX.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _osgFX.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _osgFX.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgFX.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _osgFX.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _osgFX.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgFX.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgFX.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgFX.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _osgFX.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _osgFX.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import osg
class Technique(osg.Referenced):
    """Proxy of C++ Technique class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Technique, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Technique, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def techniqueName(*args):
        """techniqueName(self) -> char"""
        return _osgFX.Technique_techniqueName(*args)

    def techniqueDescription(*args):
        """techniqueDescription(self) -> char"""
        return _osgFX.Technique_techniqueDescription(*args)

    def getRequiredExtensions(*args):
        """getRequiredExtensions(self, std::vector<(std::string,std::allocator<(std::string)>)> ?)"""
        return _osgFX.Technique_getRequiredExtensions(*args)

    def validate(*args):
        """validate(self, State ?) -> bool"""
        return _osgFX.Technique_validate(*args)

    def getNumPasses(*args):
        """getNumPasses(self) -> int"""
        return _osgFX.Technique_getNumPasses(*args)

    def getPassStateSet(*args):
        """
        getPassStateSet(self, int i) -> StateSet
        getPassStateSet(self, int i) -> StateSet
        """
        return _osgFX.Technique_getPassStateSet(*args)

    def traverse(*args):
        """traverse(self, NodeVisitor nv, Effect fx)"""
        return _osgFX.Technique_traverse(*args)

Technique_swigregister = _osgFX.Technique_swigregister
Technique_swigregister(Technique)

class Effect(osg.Group):
    """Proxy of C++ Effect class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Effect, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Effect, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgFX.Effect_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgFX.Effect_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgFX.Effect_className(*args)

    def effectName(*args):
        """effectName(self) -> char"""
        return _osgFX.Effect_effectName(*args)

    def effectDescription(*args):
        """effectDescription(self) -> char"""
        return _osgFX.Effect_effectDescription(*args)

    def effectAuthor(*args):
        """effectAuthor(self) -> char"""
        return _osgFX.Effect_effectAuthor(*args)

    def getEnabled(*args):
        """getEnabled(self) -> bool"""
        return _osgFX.Effect_getEnabled(*args)

    def setEnabled(*args):
        """setEnabled(self, bool v)"""
        return _osgFX.Effect_setEnabled(*args)

    def setUpDemo(*args):
        """setUpDemo(self)"""
        return _osgFX.Effect_setUpDemo(*args)

    def getNumTechniques(*args):
        """getNumTechniques(self) -> int"""
        return _osgFX.Effect_getNumTechniques(*args)

    def getTechnique(*args):
        """
        getTechnique(self, int i) -> Technique
        getTechnique(self, int i) -> Technique
        """
        return _osgFX.Effect_getTechnique(*args)

    def getSelectedTechnique(*args):
        """getSelectedTechnique(self) -> int"""
        return _osgFX.Effect_getSelectedTechnique(*args)

    AUTO_DETECT = _osgFX.Effect_AUTO_DETECT
    def selectTechnique(*args):
        """
        selectTechnique(self, int i=AUTO_DETECT)
        selectTechnique(self)
        """
        return _osgFX.Effect_selectTechnique(*args)

    def traverse(*args):
        """traverse(self, NodeVisitor nv)"""
        return _osgFX.Effect_traverse(*args)

    def inherited_traverse(*args):
        """inherited_traverse(self, NodeVisitor nv)"""
        return _osgFX.Effect_inherited_traverse(*args)

Effect_swigregister = _osgFX.Effect_swigregister
Effect_swigregister(Effect)

class AnisotropicLighting(Effect):
    """Proxy of C++ AnisotropicLighting class"""
    __swig_setmethods__ = {}
    for _s in [Effect]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnisotropicLighting, name, value)
    __swig_getmethods__ = {}
    for _s in [Effect]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnisotropicLighting, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AnisotropicLighting
        __init__(self, AnisotropicLighting copy, CopyOp copyop=SHALLOW_COPY) -> AnisotropicLighting
        __init__(self, AnisotropicLighting copy) -> AnisotropicLighting
        """
        this = _osgFX.new_AnisotropicLighting(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgFX.AnisotropicLighting_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgFX.AnisotropicLighting_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgFX.AnisotropicLighting_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgFX.AnisotropicLighting_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgFX.AnisotropicLighting_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgFX.AnisotropicLighting_accept(*args)

    def effectName(*args):
        """effectName(self) -> char"""
        return _osgFX.AnisotropicLighting_effectName(*args)

    def effectDescription(*args):
        """effectDescription(self) -> char"""
        return _osgFX.AnisotropicLighting_effectDescription(*args)

    def effectAuthor(*args):
        """effectAuthor(self) -> char"""
        return _osgFX.AnisotropicLighting_effectAuthor(*args)

    def getLightingMap(*args):
        """
        getLightingMap(self) -> Image
        getLightingMap(self) -> Image
        """
        return _osgFX.AnisotropicLighting_getLightingMap(*args)

    def setLightingMap(*args):
        """setLightingMap(self, Image image)"""
        return _osgFX.AnisotropicLighting_setLightingMap(*args)

    def getLightNumber(*args):
        """getLightNumber(self) -> int"""
        return _osgFX.AnisotropicLighting_getLightNumber(*args)

    def setLightNumber(*args):
        """setLightNumber(self, int n)"""
        return _osgFX.AnisotropicLighting_setLightNumber(*args)

AnisotropicLighting_swigregister = _osgFX.AnisotropicLighting_swigregister
AnisotropicLighting_swigregister(AnisotropicLighting)

class BumpMapping(Effect):
    """Proxy of C++ BumpMapping class"""
    __swig_setmethods__ = {}
    for _s in [Effect]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BumpMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [Effect]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BumpMapping, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BumpMapping
        __init__(self, BumpMapping copy, CopyOp copyop=SHALLOW_COPY) -> BumpMapping
        __init__(self, BumpMapping copy) -> BumpMapping
        """
        this = _osgFX.new_BumpMapping(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgFX.BumpMapping_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgFX.BumpMapping_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgFX.BumpMapping_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgFX.BumpMapping_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgFX.BumpMapping_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgFX.BumpMapping_accept(*args)

    def effectName(*args):
        """effectName(self) -> char"""
        return _osgFX.BumpMapping_effectName(*args)

    def effectDescription(*args):
        """effectDescription(self) -> char"""
        return _osgFX.BumpMapping_effectDescription(*args)

    def effectAuthor(*args):
        """effectAuthor(self) -> char"""
        return _osgFX.BumpMapping_effectAuthor(*args)

    def getLightNumber(*args):
        """getLightNumber(self) -> int"""
        return _osgFX.BumpMapping_getLightNumber(*args)

    def setLightNumber(*args):
        """setLightNumber(self, int n)"""
        return _osgFX.BumpMapping_setLightNumber(*args)

    def getDiffuseTextureUnit(*args):
        """getDiffuseTextureUnit(self) -> int"""
        return _osgFX.BumpMapping_getDiffuseTextureUnit(*args)

    def setDiffuseTextureUnit(*args):
        """setDiffuseTextureUnit(self, int n)"""
        return _osgFX.BumpMapping_setDiffuseTextureUnit(*args)

    def getNormalMapTextureUnit(*args):
        """getNormalMapTextureUnit(self) -> int"""
        return _osgFX.BumpMapping_getNormalMapTextureUnit(*args)

    def setNormalMapTextureUnit(*args):
        """setNormalMapTextureUnit(self, int n)"""
        return _osgFX.BumpMapping_setNormalMapTextureUnit(*args)

    def getOverrideDiffuseTexture(*args):
        """
        getOverrideDiffuseTexture(self) -> Texture2D
        getOverrideDiffuseTexture(self) -> Texture2D
        """
        return _osgFX.BumpMapping_getOverrideDiffuseTexture(*args)

    def setOverrideDiffuseTexture(*args):
        """setOverrideDiffuseTexture(self, Texture2D texture)"""
        return _osgFX.BumpMapping_setOverrideDiffuseTexture(*args)

    def getOverrideNormalMapTexture(*args):
        """
        getOverrideNormalMapTexture(self) -> Texture2D
        getOverrideNormalMapTexture(self) -> Texture2D
        """
        return _osgFX.BumpMapping_getOverrideNormalMapTexture(*args)

    def setOverrideNormalMapTexture(*args):
        """setOverrideNormalMapTexture(self, Texture2D texture)"""
        return _osgFX.BumpMapping_setOverrideNormalMapTexture(*args)

    def prepareGeometry(*args):
        """prepareGeometry(self, Geometry geo)"""
        return _osgFX.BumpMapping_prepareGeometry(*args)

    def prepareNode(*args):
        """prepareNode(self, Node node)"""
        return _osgFX.BumpMapping_prepareNode(*args)

    def prepareChildren(*args):
        """prepareChildren(self)"""
        return _osgFX.BumpMapping_prepareChildren(*args)

    def setUpDemo(*args):
        """setUpDemo(self)"""
        return _osgFX.BumpMapping_setUpDemo(*args)

BumpMapping_swigregister = _osgFX.BumpMapping_swigregister
BumpMapping_swigregister(BumpMapping)

class Cartoon(Effect):
    """Proxy of C++ Cartoon class"""
    __swig_setmethods__ = {}
    for _s in [Effect]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cartoon, name, value)
    __swig_getmethods__ = {}
    for _s in [Effect]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cartoon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Cartoon
        __init__(self, Cartoon copy, CopyOp copyop=SHALLOW_COPY) -> Cartoon
        __init__(self, Cartoon copy) -> Cartoon
        """
        this = _osgFX.new_Cartoon(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgFX.Cartoon_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgFX.Cartoon_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgFX.Cartoon_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgFX.Cartoon_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgFX.Cartoon_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgFX.Cartoon_accept(*args)

    def effectName(*args):
        """effectName(self) -> char"""
        return _osgFX.Cartoon_effectName(*args)

    def effectDescription(*args):
        """effectDescription(self) -> char"""
        return _osgFX.Cartoon_effectDescription(*args)

    def effectAuthor(*args):
        """effectAuthor(self) -> char"""
        return _osgFX.Cartoon_effectAuthor(*args)

    def getOutlineColor(*args):
        """getOutlineColor(self) -> Vec4"""
        return _osgFX.Cartoon_getOutlineColor(*args)

    def setOutlineColor(*args):
        """setOutlineColor(self, Vec4 color)"""
        return _osgFX.Cartoon_setOutlineColor(*args)

    def getOutlineLineWidth(*args):
        """getOutlineLineWidth(self) -> float"""
        return _osgFX.Cartoon_getOutlineLineWidth(*args)

    def setOutlineLineWidth(*args):
        """setOutlineLineWidth(self, float w)"""
        return _osgFX.Cartoon_setOutlineLineWidth(*args)

    def getLightNumber(*args):
        """getLightNumber(self) -> int"""
        return _osgFX.Cartoon_getLightNumber(*args)

    def setLightNumber(*args):
        """setLightNumber(self, int n)"""
        return _osgFX.Cartoon_setLightNumber(*args)

Cartoon_swigregister = _osgFX.Cartoon_swigregister
Cartoon_swigregister(Cartoon)

class MultiTextureControl(osg.Group):
    """Proxy of C++ MultiTextureControl class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiTextureControl, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiTextureControl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultiTextureControl
        __init__(self, MultiTextureControl copy, CopyOp copyop=SHALLOW_COPY) -> MultiTextureControl
        __init__(self, MultiTextureControl copy) -> MultiTextureControl
        """
        this = _osgFX.new_MultiTextureControl(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgFX.MultiTextureControl_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgFX.MultiTextureControl_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgFX.MultiTextureControl_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgFX.MultiTextureControl_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgFX.MultiTextureControl_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgFX.MultiTextureControl_accept(*args)

    def setTextureWeight(*args):
        """setTextureWeight(self, unsigned int unit, float weight)"""
        return _osgFX.MultiTextureControl_setTextureWeight(*args)

    def getTextureWeight(*args):
        """getTextureWeight(self, unsigned int unit) -> float"""
        return _osgFX.MultiTextureControl_getTextureWeight(*args)

    def getNumTextureWeights(*args):
        """getNumTextureWeights(self) -> unsigned int"""
        return _osgFX.MultiTextureControl_getNumTextureWeights(*args)

MultiTextureControl_swigregister = _osgFX.MultiTextureControl_swigregister
MultiTextureControl_swigregister(MultiTextureControl)

class Registry(osg.Referenced):
    """Proxy of C++ Registry class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Registry, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Registry, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def instance(*args):
        """instance() -> Registry"""
        return _osgFX.Registry_instance(*args)

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def registerEffect(*args):
        """registerEffect(self, Effect effect)"""
        return _osgFX.Registry_registerEffect(*args)

    def getEffectMap(*args):
        """getEffectMap(self) -> EffectMap"""
        return _osgFX.Registry_getEffectMap(*args)

Registry_swigregister = _osgFX.Registry_swigregister
Registry_swigregister(Registry)

def Registry_instance(*args):
  """Registry_instance() -> Registry"""
  return _osgFX.Registry_instance(*args)

class Scribe(Effect):
    """Proxy of C++ Scribe class"""
    __swig_setmethods__ = {}
    for _s in [Effect]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scribe, name, value)
    __swig_getmethods__ = {}
    for _s in [Effect]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scribe, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Scribe
        __init__(self, Scribe copy, CopyOp copyop=SHALLOW_COPY) -> Scribe
        __init__(self, Scribe copy) -> Scribe
        """
        this = _osgFX.new_Scribe(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgFX.Scribe_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgFX.Scribe_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgFX.Scribe_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgFX.Scribe_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgFX.Scribe_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgFX.Scribe_accept(*args)

    def effectName(*args):
        """effectName(self) -> char"""
        return _osgFX.Scribe_effectName(*args)

    def effectDescription(*args):
        """effectDescription(self) -> char"""
        return _osgFX.Scribe_effectDescription(*args)

    def effectAuthor(*args):
        """effectAuthor(self) -> char"""
        return _osgFX.Scribe_effectAuthor(*args)

    def getWireframeColor(*args):
        """getWireframeColor(self) -> Vec4"""
        return _osgFX.Scribe_getWireframeColor(*args)

    def setWireframeColor(*args):
        """setWireframeColor(self, Vec4 color)"""
        return _osgFX.Scribe_setWireframeColor(*args)

    def getWireframeLineWidth(*args):
        """getWireframeLineWidth(self) -> float"""
        return _osgFX.Scribe_getWireframeLineWidth(*args)

    def setWireframeLineWidth(*args):
        """setWireframeLineWidth(self, float w)"""
        return _osgFX.Scribe_setWireframeLineWidth(*args)

Scribe_swigregister = _osgFX.Scribe_swigregister
Scribe_swigregister(Scribe)

class SpecularHighlights(Effect):
    """Proxy of C++ SpecularHighlights class"""
    __swig_setmethods__ = {}
    for _s in [Effect]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecularHighlights, name, value)
    __swig_getmethods__ = {}
    for _s in [Effect]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecularHighlights, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SpecularHighlights
        __init__(self, SpecularHighlights copy, CopyOp copyop=SHALLOW_COPY) -> SpecularHighlights
        __init__(self, SpecularHighlights copy) -> SpecularHighlights
        """
        this = _osgFX.new_SpecularHighlights(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgFX.SpecularHighlights_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgFX.SpecularHighlights_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgFX.SpecularHighlights_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgFX.SpecularHighlights_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgFX.SpecularHighlights_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgFX.SpecularHighlights_accept(*args)

    def effectName(*args):
        """effectName(self) -> char"""
        return _osgFX.SpecularHighlights_effectName(*args)

    def effectDescription(*args):
        """effectDescription(self) -> char"""
        return _osgFX.SpecularHighlights_effectDescription(*args)

    def effectAuthor(*args):
        """effectAuthor(self) -> char"""
        return _osgFX.SpecularHighlights_effectAuthor(*args)

    def getLightNumber(*args):
        """getLightNumber(self) -> int"""
        return _osgFX.SpecularHighlights_getLightNumber(*args)

    def setLightNumber(*args):
        """setLightNumber(self, int n)"""
        return _osgFX.SpecularHighlights_setLightNumber(*args)

    def getTextureUnit(*args):
        """getTextureUnit(self) -> int"""
        return _osgFX.SpecularHighlights_getTextureUnit(*args)

    def setTextureUnit(*args):
        """setTextureUnit(self, int n)"""
        return _osgFX.SpecularHighlights_setTextureUnit(*args)

    def getSpecularColor(*args):
        """getSpecularColor(self) -> Vec4"""
        return _osgFX.SpecularHighlights_getSpecularColor(*args)

    def setSpecularColor(*args):
        """setSpecularColor(self, Vec4 color)"""
        return _osgFX.SpecularHighlights_setSpecularColor(*args)

    def getSpecularExponent(*args):
        """getSpecularExponent(self) -> float"""
        return _osgFX.SpecularHighlights_getSpecularExponent(*args)

    def setSpecularExponent(*args):
        """setSpecularExponent(self, float e)"""
        return _osgFX.SpecularHighlights_setSpecularExponent(*args)

SpecularHighlights_swigregister = _osgFX.SpecularHighlights_swigregister
SpecularHighlights_swigregister(SpecularHighlights)

class Validator(osg.StateAttribute):
    """Proxy of C++ Validator class"""
    __swig_setmethods__ = {}
    for _s in [osg.StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Validator, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Validator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Validator
        __init__(self, Effect effect) -> Validator
        __init__(self, Validator copy, CopyOp copyop=SHALLOW_COPY) -> Validator
        __init__(self, Validator copy) -> Validator
        """
        this = _osgFX.new_Validator(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgFX.Validator_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgFX.Validator_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgFX.Validator_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgFX.Validator_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgFX.Validator_className(*args)

    def getType(*args):
        """getType(self) -> Type"""
        return _osgFX.Validator_getType(*args)

    def apply(*args):
        """apply(self, State state)"""
        return _osgFX.Validator_apply(*args)

    def compileGLObjects(*args):
        """compileGLObjects(self, State state)"""
        return _osgFX.Validator_compileGLObjects(*args)

    def compare(*args):
        """compare(self, StateAttribute sa) -> int"""
        return _osgFX.Validator_compare(*args)

    def disable(*args):
        """disable(self)"""
        return _osgFX.Validator_disable(*args)

Validator_swigregister = _osgFX.Validator_swigregister
Validator_swigregister(Validator)



