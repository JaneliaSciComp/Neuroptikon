# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osgVolume', [dirname(__file__)])
        except ImportError:
            import _osgVolume
            return _osgVolume
        if fp is not None:
            try:
                _mod = imp.load_module('_osgVolume', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osgVolume = swig_import_helper()
    del swig_import_helper
else:
    import _osgVolume
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgVolume.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _osgVolume.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgVolume.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgVolume.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _osgVolume.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgVolume.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _osgVolume.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _osgVolume.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _osgVolume.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _osgVolume.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgVolume.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgVolume.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgVolume.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgVolume.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgVolume.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgVolume.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osgVolume.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osgVolume.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import osg
import osgGA
OSGVOLUME_EXPORT_ = _osgVolume.OSGVOLUME_EXPORT_
OSGVOLUME_PROPERTY = _osgVolume.OSGVOLUME_PROPERTY
class PropertyVisitor(_object):
    """Proxy of C++ osgVolume::PropertyVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, traverseOnlyActiveChildren=True): 
        """
        __init__(osgVolume::PropertyVisitor self, bool traverseOnlyActiveChildren=True) -> PropertyVisitor
        __init__(osgVolume::PropertyVisitor self) -> PropertyVisitor
        """
        this = _osgVolume.new_PropertyVisitor(traverseOnlyActiveChildren)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgVolume.delete_PropertyVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(PropertyVisitor self, Property arg2)
        apply(PropertyVisitor self, CompositeProperty arg2)
        apply(PropertyVisitor self, SwitchProperty arg2)
        apply(PropertyVisitor self, TransferFunctionProperty arg2)
        apply(PropertyVisitor self, ScalarProperty arg2)
        apply(PropertyVisitor self, IsoSurfaceProperty arg2)
        apply(PropertyVisitor self, AlphaFuncProperty arg2)
        apply(PropertyVisitor self, MaximumIntensityProjectionProperty arg2)
        apply(PropertyVisitor self, LightingProperty arg2)
        apply(PropertyVisitor self, SampleDensityProperty arg2)
        apply(PropertyVisitor self, SampleDensityWhenMovingProperty arg2)
        apply(PropertyVisitor self, TransparencyProperty arg2)
        """
        return _osgVolume.PropertyVisitor_apply(self, *args)

    __swig_setmethods__["_traverseOnlyActiveChildren"] = _osgVolume.PropertyVisitor__traverseOnlyActiveChildren_set
    __swig_getmethods__["_traverseOnlyActiveChildren"] = _osgVolume.PropertyVisitor__traverseOnlyActiveChildren_get
    if _newclass:_traverseOnlyActiveChildren = _swig_property(_osgVolume.PropertyVisitor__traverseOnlyActiveChildren_get, _osgVolume.PropertyVisitor__traverseOnlyActiveChildren_set)
PropertyVisitor_swigregister = _osgVolume.PropertyVisitor_swigregister
PropertyVisitor_swigregister(PropertyVisitor)

class Property(osg.Object):
    """Proxy of C++ osgVolume::Property class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Property, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Property, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::Property self) -> Property
        __init__(osgVolume::Property self, Property arg2, CopyOp copyop=SHALLOW_COPY) -> Property
        __init__(osgVolume::Property self, Property arg2) -> Property
        """
        this = _osgVolume.new_Property(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Property self) -> Object"""
        return _osgVolume.Property_cloneType(self)

    def clone(self, *args):
        """clone(Property self, CopyOp copyop) -> Object"""
        return _osgVolume.Property_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Property self, Object obj) -> bool"""
        return _osgVolume.Property_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Property self) -> char const *"""
        return _osgVolume.Property_libraryName(self)

    def className(self):
        """className(Property self) -> char const *"""
        return _osgVolume.Property_className(self)

    def accept(self, *args):
        """accept(Property self, PropertyVisitor pv)"""
        return _osgVolume.Property_accept(self, *args)

Property_swigregister = _osgVolume.Property_swigregister
Property_swigregister(Property)

class CompositeProperty(Property):
    """Proxy of C++ osgVolume::CompositeProperty class"""
    __swig_setmethods__ = {}
    for _s in [Property]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [Property]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::CompositeProperty self) -> CompositeProperty
        __init__(osgVolume::CompositeProperty self, CompositeProperty compositeProperty, CopyOp copyop=SHALLOW_COPY) -> CompositeProperty
        __init__(osgVolume::CompositeProperty self, CompositeProperty compositeProperty) -> CompositeProperty
        """
        this = _osgVolume.new_CompositeProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(CompositeProperty self) -> Object"""
        return _osgVolume.CompositeProperty_cloneType(self)

    def clone(self, *args):
        """clone(CompositeProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.CompositeProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(CompositeProperty self, Object obj) -> bool"""
        return _osgVolume.CompositeProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(CompositeProperty self) -> char const *"""
        return _osgVolume.CompositeProperty_libraryName(self)

    def className(self):
        """className(CompositeProperty self) -> char const *"""
        return _osgVolume.CompositeProperty_className(self)

    def accept(self, *args):
        """accept(CompositeProperty self, PropertyVisitor pv)"""
        return _osgVolume.CompositeProperty_accept(self, *args)

    def clear(self):
        """clear(CompositeProperty self)"""
        return _osgVolume.CompositeProperty_clear(self)

    def setProperty(self, *args):
        """setProperty(CompositeProperty self, unsigned int i, Property property)"""
        return _osgVolume.CompositeProperty_setProperty(self, *args)

    def getProperty(self, *args):
        """
        getProperty(CompositeProperty self, unsigned int i) -> Property
        getProperty(CompositeProperty self, unsigned int i) -> Property
        """
        return _osgVolume.CompositeProperty_getProperty(self, *args)

    def addProperty(self, *args):
        """addProperty(CompositeProperty self, Property property)"""
        return _osgVolume.CompositeProperty_addProperty(self, *args)

    def removeProperty(self, *args):
        """removeProperty(CompositeProperty self, unsigned int i)"""
        return _osgVolume.CompositeProperty_removeProperty(self, *args)

    def getNumProperties(self):
        """getNumProperties(CompositeProperty self) -> unsigned int"""
        return _osgVolume.CompositeProperty_getNumProperties(self)

CompositeProperty_swigregister = _osgVolume.CompositeProperty_swigregister
CompositeProperty_swigregister(CompositeProperty)

class SwitchProperty(CompositeProperty):
    """Proxy of C++ osgVolume::SwitchProperty class"""
    __swig_setmethods__ = {}
    for _s in [CompositeProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [CompositeProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::SwitchProperty self) -> SwitchProperty
        __init__(osgVolume::SwitchProperty self, SwitchProperty switchProperty, CopyOp copyop=SHALLOW_COPY) -> SwitchProperty
        __init__(osgVolume::SwitchProperty self, SwitchProperty switchProperty) -> SwitchProperty
        """
        this = _osgVolume.new_SwitchProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(SwitchProperty self) -> Object"""
        return _osgVolume.SwitchProperty_cloneType(self)

    def clone(self, *args):
        """clone(SwitchProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.SwitchProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(SwitchProperty self, Object obj) -> bool"""
        return _osgVolume.SwitchProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(SwitchProperty self) -> char const *"""
        return _osgVolume.SwitchProperty_libraryName(self)

    def className(self):
        """className(SwitchProperty self) -> char const *"""
        return _osgVolume.SwitchProperty_className(self)

    def accept(self, *args):
        """accept(SwitchProperty self, PropertyVisitor pv)"""
        return _osgVolume.SwitchProperty_accept(self, *args)

    def setActiveProperty(self, *args):
        """setActiveProperty(SwitchProperty self, int i)"""
        return _osgVolume.SwitchProperty_setActiveProperty(self, *args)

    def getActiveProperty(self):
        """getActiveProperty(SwitchProperty self) -> int"""
        return _osgVolume.SwitchProperty_getActiveProperty(self)

SwitchProperty_swigregister = _osgVolume.SwitchProperty_swigregister
SwitchProperty_swigregister(SwitchProperty)

class TransferFunctionProperty(Property):
    """Proxy of C++ osgVolume::TransferFunctionProperty class"""
    __swig_setmethods__ = {}
    for _s in [Property]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransferFunctionProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [Property]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransferFunctionProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::TransferFunctionProperty self, osg::TransferFunction * tf=None) -> TransferFunctionProperty
        __init__(osgVolume::TransferFunctionProperty self) -> TransferFunctionProperty
        __init__(osgVolume::TransferFunctionProperty self, TransferFunctionProperty tfp, CopyOp copyop=SHALLOW_COPY) -> TransferFunctionProperty
        __init__(osgVolume::TransferFunctionProperty self, TransferFunctionProperty tfp) -> TransferFunctionProperty
        """
        this = _osgVolume.new_TransferFunctionProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TransferFunctionProperty self) -> Object"""
        return _osgVolume.TransferFunctionProperty_cloneType(self)

    def clone(self, *args):
        """clone(TransferFunctionProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.TransferFunctionProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TransferFunctionProperty self, Object obj) -> bool"""
        return _osgVolume.TransferFunctionProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TransferFunctionProperty self) -> char const *"""
        return _osgVolume.TransferFunctionProperty_libraryName(self)

    def className(self):
        """className(TransferFunctionProperty self) -> char const *"""
        return _osgVolume.TransferFunctionProperty_className(self)

    def accept(self, *args):
        """accept(TransferFunctionProperty self, PropertyVisitor pv)"""
        return _osgVolume.TransferFunctionProperty_accept(self, *args)

    def setTransferFunction(self, *args):
        """setTransferFunction(TransferFunctionProperty self, osg::TransferFunction * tf)"""
        return _osgVolume.TransferFunctionProperty_setTransferFunction(self, *args)

    def getTransferFunction(self, *args):
        """
        getTransferFunction(TransferFunctionProperty self) -> osg::TransferFunction
        getTransferFunction(TransferFunctionProperty self) -> osg::TransferFunction const *
        """
        return _osgVolume.TransferFunctionProperty_getTransferFunction(self, *args)

TransferFunctionProperty_swigregister = _osgVolume.TransferFunctionProperty_swigregister
TransferFunctionProperty_swigregister(TransferFunctionProperty)

class ScalarProperty(Property):
    """Proxy of C++ osgVolume::ScalarProperty class"""
    __swig_setmethods__ = {}
    for _s in [Property]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [Property]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::ScalarProperty self, std::string const & scaleName, float value) -> ScalarProperty
        __init__(osgVolume::ScalarProperty self, ScalarProperty scalarProperty, CopyOp copyop=SHALLOW_COPY) -> ScalarProperty
        __init__(osgVolume::ScalarProperty self, ScalarProperty scalarProperty) -> ScalarProperty
        """
        this = _osgVolume.new_ScalarProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ScalarProperty self) -> Object"""
        return _osgVolume.ScalarProperty_cloneType(self)

    def clone(self, *args):
        """clone(ScalarProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.ScalarProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ScalarProperty self, Object obj) -> bool"""
        return _osgVolume.ScalarProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ScalarProperty self) -> char const *"""
        return _osgVolume.ScalarProperty_libraryName(self)

    def className(self):
        """className(ScalarProperty self) -> char const *"""
        return _osgVolume.ScalarProperty_className(self)

    def accept(self, *args):
        """accept(ScalarProperty self, PropertyVisitor pv)"""
        return _osgVolume.ScalarProperty_accept(self, *args)

    def setValue(self, *args):
        """setValue(ScalarProperty self, float v)"""
        return _osgVolume.ScalarProperty_setValue(self, *args)

    def getValue(self):
        """getValue(ScalarProperty self) -> float"""
        return _osgVolume.ScalarProperty_getValue(self)

    def getUniform(self, *args):
        """
        getUniform(ScalarProperty self) -> Uniform
        getUniform(ScalarProperty self) -> Uniform
        """
        return _osgVolume.ScalarProperty_getUniform(self, *args)

ScalarProperty_swigregister = _osgVolume.ScalarProperty_swigregister
ScalarProperty_swigregister(ScalarProperty)

class IsoSurfaceProperty(ScalarProperty):
    """Proxy of C++ osgVolume::IsoSurfaceProperty class"""
    __swig_setmethods__ = {}
    for _s in [ScalarProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsoSurfaceProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsoSurfaceProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::IsoSurfaceProperty self, float value=1.0) -> IsoSurfaceProperty
        __init__(osgVolume::IsoSurfaceProperty self) -> IsoSurfaceProperty
        __init__(osgVolume::IsoSurfaceProperty self, IsoSurfaceProperty isp, CopyOp copyop=SHALLOW_COPY) -> IsoSurfaceProperty
        __init__(osgVolume::IsoSurfaceProperty self, IsoSurfaceProperty isp) -> IsoSurfaceProperty
        """
        this = _osgVolume.new_IsoSurfaceProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(IsoSurfaceProperty self) -> Object"""
        return _osgVolume.IsoSurfaceProperty_cloneType(self)

    def clone(self, *args):
        """clone(IsoSurfaceProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.IsoSurfaceProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(IsoSurfaceProperty self, Object obj) -> bool"""
        return _osgVolume.IsoSurfaceProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(IsoSurfaceProperty self) -> char const *"""
        return _osgVolume.IsoSurfaceProperty_libraryName(self)

    def className(self):
        """className(IsoSurfaceProperty self) -> char const *"""
        return _osgVolume.IsoSurfaceProperty_className(self)

    def accept(self, *args):
        """accept(IsoSurfaceProperty self, PropertyVisitor pv)"""
        return _osgVolume.IsoSurfaceProperty_accept(self, *args)

IsoSurfaceProperty_swigregister = _osgVolume.IsoSurfaceProperty_swigregister
IsoSurfaceProperty_swigregister(IsoSurfaceProperty)

class AlphaFuncProperty(ScalarProperty):
    """Proxy of C++ osgVolume::AlphaFuncProperty class"""
    __swig_setmethods__ = {}
    for _s in [ScalarProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlphaFuncProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlphaFuncProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::AlphaFuncProperty self, float value=1.0) -> AlphaFuncProperty
        __init__(osgVolume::AlphaFuncProperty self) -> AlphaFuncProperty
        __init__(osgVolume::AlphaFuncProperty self, AlphaFuncProperty isp, CopyOp copyop=SHALLOW_COPY) -> AlphaFuncProperty
        __init__(osgVolume::AlphaFuncProperty self, AlphaFuncProperty isp) -> AlphaFuncProperty
        """
        this = _osgVolume.new_AlphaFuncProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(AlphaFuncProperty self) -> Object"""
        return _osgVolume.AlphaFuncProperty_cloneType(self)

    def clone(self, *args):
        """clone(AlphaFuncProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.AlphaFuncProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(AlphaFuncProperty self, Object obj) -> bool"""
        return _osgVolume.AlphaFuncProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(AlphaFuncProperty self) -> char const *"""
        return _osgVolume.AlphaFuncProperty_libraryName(self)

    def className(self):
        """className(AlphaFuncProperty self) -> char const *"""
        return _osgVolume.AlphaFuncProperty_className(self)

    def accept(self, *args):
        """accept(AlphaFuncProperty self, PropertyVisitor pv)"""
        return _osgVolume.AlphaFuncProperty_accept(self, *args)

    def setValue(self, *args):
        """setValue(AlphaFuncProperty self, float v)"""
        return _osgVolume.AlphaFuncProperty_setValue(self, *args)

    def getAlphaFunc(self, *args):
        """
        getAlphaFunc(AlphaFuncProperty self) -> AlphaFunc
        getAlphaFunc(AlphaFuncProperty self) -> AlphaFunc
        """
        return _osgVolume.AlphaFuncProperty_getAlphaFunc(self, *args)

AlphaFuncProperty_swigregister = _osgVolume.AlphaFuncProperty_swigregister
AlphaFuncProperty_swigregister(AlphaFuncProperty)

class MaximumIntensityProjectionProperty(Property):
    """Proxy of C++ osgVolume::MaximumIntensityProjectionProperty class"""
    __swig_setmethods__ = {}
    for _s in [Property]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaximumIntensityProjectionProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [Property]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaximumIntensityProjectionProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::MaximumIntensityProjectionProperty self) -> MaximumIntensityProjectionProperty
        __init__(osgVolume::MaximumIntensityProjectionProperty self, MaximumIntensityProjectionProperty mipp, CopyOp copyop=SHALLOW_COPY) -> MaximumIntensityProjectionProperty
        __init__(osgVolume::MaximumIntensityProjectionProperty self, MaximumIntensityProjectionProperty mipp) -> MaximumIntensityProjectionProperty
        """
        this = _osgVolume.new_MaximumIntensityProjectionProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(MaximumIntensityProjectionProperty self) -> Object"""
        return _osgVolume.MaximumIntensityProjectionProperty_cloneType(self)

    def clone(self, *args):
        """clone(MaximumIntensityProjectionProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.MaximumIntensityProjectionProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(MaximumIntensityProjectionProperty self, Object obj) -> bool"""
        return _osgVolume.MaximumIntensityProjectionProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(MaximumIntensityProjectionProperty self) -> char const *"""
        return _osgVolume.MaximumIntensityProjectionProperty_libraryName(self)

    def className(self):
        """className(MaximumIntensityProjectionProperty self) -> char const *"""
        return _osgVolume.MaximumIntensityProjectionProperty_className(self)

    def accept(self, *args):
        """accept(MaximumIntensityProjectionProperty self, PropertyVisitor pv)"""
        return _osgVolume.MaximumIntensityProjectionProperty_accept(self, *args)

MaximumIntensityProjectionProperty_swigregister = _osgVolume.MaximumIntensityProjectionProperty_swigregister
MaximumIntensityProjectionProperty_swigregister(MaximumIntensityProjectionProperty)

class LightingProperty(Property):
    """Proxy of C++ osgVolume::LightingProperty class"""
    __swig_setmethods__ = {}
    for _s in [Property]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightingProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [Property]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightingProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::LightingProperty self) -> LightingProperty
        __init__(osgVolume::LightingProperty self, LightingProperty mipp, CopyOp copyop=SHALLOW_COPY) -> LightingProperty
        __init__(osgVolume::LightingProperty self, LightingProperty mipp) -> LightingProperty
        """
        this = _osgVolume.new_LightingProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(LightingProperty self) -> Object"""
        return _osgVolume.LightingProperty_cloneType(self)

    def clone(self, *args):
        """clone(LightingProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.LightingProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(LightingProperty self, Object obj) -> bool"""
        return _osgVolume.LightingProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(LightingProperty self) -> char const *"""
        return _osgVolume.LightingProperty_libraryName(self)

    def className(self):
        """className(LightingProperty self) -> char const *"""
        return _osgVolume.LightingProperty_className(self)

    def accept(self, *args):
        """accept(LightingProperty self, PropertyVisitor pv)"""
        return _osgVolume.LightingProperty_accept(self, *args)

LightingProperty_swigregister = _osgVolume.LightingProperty_swigregister
LightingProperty_swigregister(LightingProperty)

class SampleDensityProperty(ScalarProperty):
    """Proxy of C++ osgVolume::SampleDensityProperty class"""
    __swig_setmethods__ = {}
    for _s in [ScalarProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleDensityProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleDensityProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::SampleDensityProperty self, float value=1.0) -> SampleDensityProperty
        __init__(osgVolume::SampleDensityProperty self) -> SampleDensityProperty
        __init__(osgVolume::SampleDensityProperty self, SampleDensityProperty isp, CopyOp copyop=SHALLOW_COPY) -> SampleDensityProperty
        __init__(osgVolume::SampleDensityProperty self, SampleDensityProperty isp) -> SampleDensityProperty
        """
        this = _osgVolume.new_SampleDensityProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(SampleDensityProperty self) -> Object"""
        return _osgVolume.SampleDensityProperty_cloneType(self)

    def clone(self, *args):
        """clone(SampleDensityProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.SampleDensityProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(SampleDensityProperty self, Object obj) -> bool"""
        return _osgVolume.SampleDensityProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(SampleDensityProperty self) -> char const *"""
        return _osgVolume.SampleDensityProperty_libraryName(self)

    def className(self):
        """className(SampleDensityProperty self) -> char const *"""
        return _osgVolume.SampleDensityProperty_className(self)

    def accept(self, *args):
        """accept(SampleDensityProperty self, PropertyVisitor pv)"""
        return _osgVolume.SampleDensityProperty_accept(self, *args)

SampleDensityProperty_swigregister = _osgVolume.SampleDensityProperty_swigregister
SampleDensityProperty_swigregister(SampleDensityProperty)

class SampleDensityWhenMovingProperty(ScalarProperty):
    """Proxy of C++ osgVolume::SampleDensityWhenMovingProperty class"""
    __swig_setmethods__ = {}
    for _s in [ScalarProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleDensityWhenMovingProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleDensityWhenMovingProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::SampleDensityWhenMovingProperty self, float value=1.0) -> SampleDensityWhenMovingProperty
        __init__(osgVolume::SampleDensityWhenMovingProperty self) -> SampleDensityWhenMovingProperty
        __init__(osgVolume::SampleDensityWhenMovingProperty self, SampleDensityWhenMovingProperty isp, CopyOp copyop=SHALLOW_COPY) -> SampleDensityWhenMovingProperty
        __init__(osgVolume::SampleDensityWhenMovingProperty self, SampleDensityWhenMovingProperty isp) -> SampleDensityWhenMovingProperty
        """
        this = _osgVolume.new_SampleDensityWhenMovingProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(SampleDensityWhenMovingProperty self) -> Object"""
        return _osgVolume.SampleDensityWhenMovingProperty_cloneType(self)

    def clone(self, *args):
        """clone(SampleDensityWhenMovingProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.SampleDensityWhenMovingProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(SampleDensityWhenMovingProperty self, Object obj) -> bool"""
        return _osgVolume.SampleDensityWhenMovingProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(SampleDensityWhenMovingProperty self) -> char const *"""
        return _osgVolume.SampleDensityWhenMovingProperty_libraryName(self)

    def className(self):
        """className(SampleDensityWhenMovingProperty self) -> char const *"""
        return _osgVolume.SampleDensityWhenMovingProperty_className(self)

    def accept(self, *args):
        """accept(SampleDensityWhenMovingProperty self, PropertyVisitor pv)"""
        return _osgVolume.SampleDensityWhenMovingProperty_accept(self, *args)

SampleDensityWhenMovingProperty_swigregister = _osgVolume.SampleDensityWhenMovingProperty_swigregister
SampleDensityWhenMovingProperty_swigregister(SampleDensityWhenMovingProperty)

class TransparencyProperty(ScalarProperty):
    """Proxy of C++ osgVolume::TransparencyProperty class"""
    __swig_setmethods__ = {}
    for _s in [ScalarProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransparencyProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransparencyProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::TransparencyProperty self, float value=1.0) -> TransparencyProperty
        __init__(osgVolume::TransparencyProperty self) -> TransparencyProperty
        __init__(osgVolume::TransparencyProperty self, TransparencyProperty isp, CopyOp copyop=SHALLOW_COPY) -> TransparencyProperty
        __init__(osgVolume::TransparencyProperty self, TransparencyProperty isp) -> TransparencyProperty
        """
        this = _osgVolume.new_TransparencyProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(TransparencyProperty self) -> Object"""
        return _osgVolume.TransparencyProperty_cloneType(self)

    def clone(self, *args):
        """clone(TransparencyProperty self, CopyOp copyop) -> Object"""
        return _osgVolume.TransparencyProperty_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(TransparencyProperty self, Object obj) -> bool"""
        return _osgVolume.TransparencyProperty_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(TransparencyProperty self) -> char const *"""
        return _osgVolume.TransparencyProperty_libraryName(self)

    def className(self):
        """className(TransparencyProperty self) -> char const *"""
        return _osgVolume.TransparencyProperty_className(self)

    def accept(self, *args):
        """accept(TransparencyProperty self, PropertyVisitor pv)"""
        return _osgVolume.TransparencyProperty_accept(self, *args)

TransparencyProperty_swigregister = _osgVolume.TransparencyProperty_swigregister
TransparencyProperty_swigregister(TransparencyProperty)

class CollectPropertiesVisitor(PropertyVisitor):
    """Proxy of C++ osgVolume::CollectPropertiesVisitor class"""
    __swig_setmethods__ = {}
    for _s in [PropertyVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectPropertiesVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [PropertyVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollectPropertiesVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, traverseOnlyActiveChildren=True): 
        """
        __init__(osgVolume::CollectPropertiesVisitor self, bool traverseOnlyActiveChildren=True) -> CollectPropertiesVisitor
        __init__(osgVolume::CollectPropertiesVisitor self) -> CollectPropertiesVisitor
        """
        this = _osgVolume.new_CollectPropertiesVisitor(traverseOnlyActiveChildren)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """
        apply(CollectPropertiesVisitor self, Property arg2)
        apply(CollectPropertiesVisitor self, TransferFunctionProperty arg2)
        apply(CollectPropertiesVisitor self, ScalarProperty arg2)
        apply(CollectPropertiesVisitor self, IsoSurfaceProperty iso)
        apply(CollectPropertiesVisitor self, AlphaFuncProperty af)
        apply(CollectPropertiesVisitor self, MaximumIntensityProjectionProperty mip)
        apply(CollectPropertiesVisitor self, LightingProperty lp)
        apply(CollectPropertiesVisitor self, SampleDensityProperty sdp)
        apply(CollectPropertiesVisitor self, SampleDensityWhenMovingProperty sdp)
        apply(CollectPropertiesVisitor self, TransparencyProperty tp)
        """
        return _osgVolume.CollectPropertiesVisitor_apply(self, *args)

    __swig_setmethods__["_tfProperty"] = _osgVolume.CollectPropertiesVisitor__tfProperty_set
    __swig_getmethods__["_tfProperty"] = _osgVolume.CollectPropertiesVisitor__tfProperty_get
    if _newclass:_tfProperty = _swig_property(_osgVolume.CollectPropertiesVisitor__tfProperty_get, _osgVolume.CollectPropertiesVisitor__tfProperty_set)
    __swig_setmethods__["_isoProperty"] = _osgVolume.CollectPropertiesVisitor__isoProperty_set
    __swig_getmethods__["_isoProperty"] = _osgVolume.CollectPropertiesVisitor__isoProperty_get
    if _newclass:_isoProperty = _swig_property(_osgVolume.CollectPropertiesVisitor__isoProperty_get, _osgVolume.CollectPropertiesVisitor__isoProperty_set)
    __swig_setmethods__["_afProperty"] = _osgVolume.CollectPropertiesVisitor__afProperty_set
    __swig_getmethods__["_afProperty"] = _osgVolume.CollectPropertiesVisitor__afProperty_get
    if _newclass:_afProperty = _swig_property(_osgVolume.CollectPropertiesVisitor__afProperty_get, _osgVolume.CollectPropertiesVisitor__afProperty_set)
    __swig_setmethods__["_mipProperty"] = _osgVolume.CollectPropertiesVisitor__mipProperty_set
    __swig_getmethods__["_mipProperty"] = _osgVolume.CollectPropertiesVisitor__mipProperty_get
    if _newclass:_mipProperty = _swig_property(_osgVolume.CollectPropertiesVisitor__mipProperty_get, _osgVolume.CollectPropertiesVisitor__mipProperty_set)
    __swig_setmethods__["_lightingProperty"] = _osgVolume.CollectPropertiesVisitor__lightingProperty_set
    __swig_getmethods__["_lightingProperty"] = _osgVolume.CollectPropertiesVisitor__lightingProperty_get
    if _newclass:_lightingProperty = _swig_property(_osgVolume.CollectPropertiesVisitor__lightingProperty_get, _osgVolume.CollectPropertiesVisitor__lightingProperty_set)
    __swig_setmethods__["_sampleDensityProperty"] = _osgVolume.CollectPropertiesVisitor__sampleDensityProperty_set
    __swig_getmethods__["_sampleDensityProperty"] = _osgVolume.CollectPropertiesVisitor__sampleDensityProperty_get
    if _newclass:_sampleDensityProperty = _swig_property(_osgVolume.CollectPropertiesVisitor__sampleDensityProperty_get, _osgVolume.CollectPropertiesVisitor__sampleDensityProperty_set)
    __swig_setmethods__["_sampleDensityWhenMovingProperty"] = _osgVolume.CollectPropertiesVisitor__sampleDensityWhenMovingProperty_set
    __swig_getmethods__["_sampleDensityWhenMovingProperty"] = _osgVolume.CollectPropertiesVisitor__sampleDensityWhenMovingProperty_get
    if _newclass:_sampleDensityWhenMovingProperty = _swig_property(_osgVolume.CollectPropertiesVisitor__sampleDensityWhenMovingProperty_get, _osgVolume.CollectPropertiesVisitor__sampleDensityWhenMovingProperty_set)
    __swig_setmethods__["_transparencyProperty"] = _osgVolume.CollectPropertiesVisitor__transparencyProperty_set
    __swig_getmethods__["_transparencyProperty"] = _osgVolume.CollectPropertiesVisitor__transparencyProperty_get
    if _newclass:_transparencyProperty = _swig_property(_osgVolume.CollectPropertiesVisitor__transparencyProperty_get, _osgVolume.CollectPropertiesVisitor__transparencyProperty_set)
    __swig_destroy__ = _osgVolume.delete_CollectPropertiesVisitor
    __del__ = lambda self : None;
CollectPropertiesVisitor_swigregister = _osgVolume.CollectPropertiesVisitor_swigregister
CollectPropertiesVisitor_swigregister(CollectPropertiesVisitor)

class PropertyAdjustmentCallback(osgGA.GUIEventHandler):
    """Proxy of C++ osgVolume::PropertyAdjustmentCallback class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyAdjustmentCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyAdjustmentCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::PropertyAdjustmentCallback self) -> PropertyAdjustmentCallback
        __init__(osgVolume::PropertyAdjustmentCallback self, PropertyAdjustmentCallback arg2, CopyOp arg3) -> PropertyAdjustmentCallback
        """
        this = _osgVolume.new_PropertyAdjustmentCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(PropertyAdjustmentCallback self) -> Object"""
        return _osgVolume.PropertyAdjustmentCallback_cloneType(self)

    def clone(self, *args):
        """clone(PropertyAdjustmentCallback self, CopyOp copyop) -> Object"""
        return _osgVolume.PropertyAdjustmentCallback_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(PropertyAdjustmentCallback self, Object obj) -> bool"""
        return _osgVolume.PropertyAdjustmentCallback_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(PropertyAdjustmentCallback self) -> char const *"""
        return _osgVolume.PropertyAdjustmentCallback_libraryName(self)

    def className(self):
        """className(PropertyAdjustmentCallback self) -> char const *"""
        return _osgVolume.PropertyAdjustmentCallback_className(self)

    def setKeyEventCycleForward(self, *args):
        """setKeyEventCycleForward(PropertyAdjustmentCallback self, int key)"""
        return _osgVolume.PropertyAdjustmentCallback_setKeyEventCycleForward(self, *args)

    def getKeyEventCycleForward(self):
        """getKeyEventCycleForward(PropertyAdjustmentCallback self) -> int"""
        return _osgVolume.PropertyAdjustmentCallback_getKeyEventCycleForward(self)

    def setKeyEventCycleBackward(self, *args):
        """setKeyEventCycleBackward(PropertyAdjustmentCallback self, int key)"""
        return _osgVolume.PropertyAdjustmentCallback_setKeyEventCycleBackward(self, *args)

    def getKeyEventCycleBackward(self):
        """getKeyEventCycleBackward(PropertyAdjustmentCallback self) -> int"""
        return _osgVolume.PropertyAdjustmentCallback_getKeyEventCycleBackward(self)

    def setKeyEventActivatesTransparencyAdjustment(self, *args):
        """setKeyEventActivatesTransparencyAdjustment(PropertyAdjustmentCallback self, int key)"""
        return _osgVolume.PropertyAdjustmentCallback_setKeyEventActivatesTransparencyAdjustment(self, *args)

    def getKeyEventActivatesTransparencyAdjustment(self):
        """getKeyEventActivatesTransparencyAdjustment(PropertyAdjustmentCallback self) -> int"""
        return _osgVolume.PropertyAdjustmentCallback_getKeyEventActivatesTransparencyAdjustment(self)

    def setKeyEventActivatesSampleDensityAdjustment(self, *args):
        """setKeyEventActivatesSampleDensityAdjustment(PropertyAdjustmentCallback self, int key)"""
        return _osgVolume.PropertyAdjustmentCallback_setKeyEventActivatesSampleDensityAdjustment(self, *args)

    def getKeyEventActivatesSampleDensityAdjustment(self):
        """getKeyEventActivatesSampleDensityAdjustment(PropertyAdjustmentCallback self) -> int"""
        return _osgVolume.PropertyAdjustmentCallback_getKeyEventActivatesSampleDensityAdjustment(self)

    def setKeyEventActivatesAlphaFuncAdjustment(self, *args):
        """setKeyEventActivatesAlphaFuncAdjustment(PropertyAdjustmentCallback self, int key)"""
        return _osgVolume.PropertyAdjustmentCallback_setKeyEventActivatesAlphaFuncAdjustment(self, *args)

    def getKeyEventActivatesAlphaFuncAdjustment(self):
        """getKeyEventActivatesAlphaFuncAdjustment(PropertyAdjustmentCallback self) -> int"""
        return _osgVolume.PropertyAdjustmentCallback_getKeyEventActivatesAlphaFuncAdjustment(self)

    def handle(self, *args):
        """handle(PropertyAdjustmentCallback self, GUIEventAdapter ea, GUIActionAdapter arg3, Object object, NodeVisitor arg5) -> bool"""
        return _osgVolume.PropertyAdjustmentCallback_handle(self, *args)

    __swig_setmethods__["_cyleForwardKey"] = _osgVolume.PropertyAdjustmentCallback__cyleForwardKey_set
    __swig_getmethods__["_cyleForwardKey"] = _osgVolume.PropertyAdjustmentCallback__cyleForwardKey_get
    if _newclass:_cyleForwardKey = _swig_property(_osgVolume.PropertyAdjustmentCallback__cyleForwardKey_get, _osgVolume.PropertyAdjustmentCallback__cyleForwardKey_set)
    __swig_setmethods__["_cyleBackwardKey"] = _osgVolume.PropertyAdjustmentCallback__cyleBackwardKey_set
    __swig_getmethods__["_cyleBackwardKey"] = _osgVolume.PropertyAdjustmentCallback__cyleBackwardKey_get
    if _newclass:_cyleBackwardKey = _swig_property(_osgVolume.PropertyAdjustmentCallback__cyleBackwardKey_get, _osgVolume.PropertyAdjustmentCallback__cyleBackwardKey_set)
    __swig_setmethods__["_transparencyKey"] = _osgVolume.PropertyAdjustmentCallback__transparencyKey_set
    __swig_getmethods__["_transparencyKey"] = _osgVolume.PropertyAdjustmentCallback__transparencyKey_get
    if _newclass:_transparencyKey = _swig_property(_osgVolume.PropertyAdjustmentCallback__transparencyKey_get, _osgVolume.PropertyAdjustmentCallback__transparencyKey_set)
    __swig_setmethods__["_alphaFuncKey"] = _osgVolume.PropertyAdjustmentCallback__alphaFuncKey_set
    __swig_getmethods__["_alphaFuncKey"] = _osgVolume.PropertyAdjustmentCallback__alphaFuncKey_get
    if _newclass:_alphaFuncKey = _swig_property(_osgVolume.PropertyAdjustmentCallback__alphaFuncKey_get, _osgVolume.PropertyAdjustmentCallback__alphaFuncKey_set)
    __swig_setmethods__["_sampleDensityKey"] = _osgVolume.PropertyAdjustmentCallback__sampleDensityKey_set
    __swig_getmethods__["_sampleDensityKey"] = _osgVolume.PropertyAdjustmentCallback__sampleDensityKey_get
    if _newclass:_sampleDensityKey = _swig_property(_osgVolume.PropertyAdjustmentCallback__sampleDensityKey_get, _osgVolume.PropertyAdjustmentCallback__sampleDensityKey_set)
    __swig_setmethods__["_updateTransparency"] = _osgVolume.PropertyAdjustmentCallback__updateTransparency_set
    __swig_getmethods__["_updateTransparency"] = _osgVolume.PropertyAdjustmentCallback__updateTransparency_get
    if _newclass:_updateTransparency = _swig_property(_osgVolume.PropertyAdjustmentCallback__updateTransparency_get, _osgVolume.PropertyAdjustmentCallback__updateTransparency_set)
    __swig_setmethods__["_updateAlphaCutOff"] = _osgVolume.PropertyAdjustmentCallback__updateAlphaCutOff_set
    __swig_getmethods__["_updateAlphaCutOff"] = _osgVolume.PropertyAdjustmentCallback__updateAlphaCutOff_get
    if _newclass:_updateAlphaCutOff = _swig_property(_osgVolume.PropertyAdjustmentCallback__updateAlphaCutOff_get, _osgVolume.PropertyAdjustmentCallback__updateAlphaCutOff_set)
    __swig_setmethods__["_updateSampleDensity"] = _osgVolume.PropertyAdjustmentCallback__updateSampleDensity_set
    __swig_getmethods__["_updateSampleDensity"] = _osgVolume.PropertyAdjustmentCallback__updateSampleDensity_get
    if _newclass:_updateSampleDensity = _swig_property(_osgVolume.PropertyAdjustmentCallback__updateSampleDensity_get, _osgVolume.PropertyAdjustmentCallback__updateSampleDensity_set)
    __swig_destroy__ = _osgVolume.delete_PropertyAdjustmentCallback
    __del__ = lambda self : None;
PropertyAdjustmentCallback_swigregister = _osgVolume.PropertyAdjustmentCallback_swigregister
PropertyAdjustmentCallback_swigregister(PropertyAdjustmentCallback)

OSGVOLUME_VOLUMETECHNIQUE = _osgVolume.OSGVOLUME_VOLUMETECHNIQUE
class VolumeTechnique(osg.Object):
    """Proxy of C++ osgVolume::VolumeTechnique class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeTechnique, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeTechnique, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::VolumeTechnique self) -> VolumeTechnique
        __init__(osgVolume::VolumeTechnique self, VolumeTechnique arg2, CopyOp copyop=SHALLOW_COPY) -> VolumeTechnique
        __init__(osgVolume::VolumeTechnique self, VolumeTechnique arg2) -> VolumeTechnique
        """
        this = _osgVolume.new_VolumeTechnique(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(VolumeTechnique self) -> Object"""
        return _osgVolume.VolumeTechnique_cloneType(self)

    def clone(self, *args):
        """clone(VolumeTechnique self, CopyOp copyop) -> Object"""
        return _osgVolume.VolumeTechnique_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(VolumeTechnique self, Object obj) -> bool"""
        return _osgVolume.VolumeTechnique_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(VolumeTechnique self) -> char const *"""
        return _osgVolume.VolumeTechnique_libraryName(self)

    def className(self):
        """className(VolumeTechnique self) -> char const *"""
        return _osgVolume.VolumeTechnique_className(self)

    def getVolumeTile(self, *args):
        """
        getVolumeTile(VolumeTechnique self) -> VolumeTile
        getVolumeTile(VolumeTechnique self) -> VolumeTile
        """
        return _osgVolume.VolumeTechnique_getVolumeTile(self, *args)

    def init(self):
        """init(VolumeTechnique self)"""
        return _osgVolume.VolumeTechnique_init(self)

    def update(self, *args):
        """update(VolumeTechnique self, osgUtil::UpdateVisitor * nv)"""
        return _osgVolume.VolumeTechnique_update(self, *args)

    def cull(self, *args):
        """cull(VolumeTechnique self, osgUtil::CullVisitor * nv)"""
        return _osgVolume.VolumeTechnique_cull(self, *args)

    def cleanSceneGraph(self):
        """cleanSceneGraph(VolumeTechnique self)"""
        return _osgVolume.VolumeTechnique_cleanSceneGraph(self)

    def traverse(self, *args):
        """traverse(VolumeTechnique self, NodeVisitor nv)"""
        return _osgVolume.VolumeTechnique_traverse(self, *args)

VolumeTechnique_swigregister = _osgVolume.VolumeTechnique_swigregister
VolumeTechnique_swigregister(VolumeTechnique)

OSGVOLUME_FIXEDFUNCTIONTECHNIQUE = _osgVolume.OSGVOLUME_FIXEDFUNCTIONTECHNIQUE
class FixedFunctionTechnique(VolumeTechnique):
    """Proxy of C++ osgVolume::FixedFunctionTechnique class"""
    __swig_setmethods__ = {}
    for _s in [VolumeTechnique]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedFunctionTechnique, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeTechnique]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedFunctionTechnique, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::FixedFunctionTechnique self) -> FixedFunctionTechnique
        __init__(osgVolume::FixedFunctionTechnique self, FixedFunctionTechnique arg2, CopyOp copyop=SHALLOW_COPY) -> FixedFunctionTechnique
        __init__(osgVolume::FixedFunctionTechnique self, FixedFunctionTechnique arg2) -> FixedFunctionTechnique
        """
        this = _osgVolume.new_FixedFunctionTechnique(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(FixedFunctionTechnique self) -> Object"""
        return _osgVolume.FixedFunctionTechnique_cloneType(self)

    def clone(self, *args):
        """clone(FixedFunctionTechnique self, CopyOp copyop) -> Object"""
        return _osgVolume.FixedFunctionTechnique_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(FixedFunctionTechnique self, Object obj) -> bool"""
        return _osgVolume.FixedFunctionTechnique_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(FixedFunctionTechnique self) -> char const *"""
        return _osgVolume.FixedFunctionTechnique_libraryName(self)

    def className(self):
        """className(FixedFunctionTechnique self) -> char const *"""
        return _osgVolume.FixedFunctionTechnique_className(self)

    def init(self):
        """init(FixedFunctionTechnique self)"""
        return _osgVolume.FixedFunctionTechnique_init(self)

    def update(self, *args):
        """update(FixedFunctionTechnique self, osgUtil::UpdateVisitor * nv)"""
        return _osgVolume.FixedFunctionTechnique_update(self, *args)

    def cull(self, *args):
        """cull(FixedFunctionTechnique self, osgUtil::CullVisitor * nv)"""
        return _osgVolume.FixedFunctionTechnique_cull(self, *args)

    def setNumSlices(self, *args):
        """setNumSlices(FixedFunctionTechnique self, unsigned int numSlices)"""
        return _osgVolume.FixedFunctionTechnique_setNumSlices(self, *args)

    def getNumSlices(self):
        """getNumSlices(FixedFunctionTechnique self) -> unsigned int"""
        return _osgVolume.FixedFunctionTechnique_getNumSlices(self)

    def cleanSceneGraph(self):
        """cleanSceneGraph(FixedFunctionTechnique self)"""
        return _osgVolume.FixedFunctionTechnique_cleanSceneGraph(self)

    def traverse(self, *args):
        """traverse(FixedFunctionTechnique self, NodeVisitor nv)"""
        return _osgVolume.FixedFunctionTechnique_traverse(self, *args)

FixedFunctionTechnique_swigregister = _osgVolume.FixedFunctionTechnique_swigregister
FixedFunctionTechnique_swigregister(FixedFunctionTechnique)

OSGVOLUME_LAYER = _osgVolume.OSGVOLUME_LAYER
class ImageDetails(osg.Object):
    """Proxy of C++ osgVolume::ImageDetails class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageDetails, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageDetails, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::ImageDetails self) -> ImageDetails
        __init__(osgVolume::ImageDetails self, ImageDetails arg2, CopyOp copyop=SHALLOW_COPY) -> ImageDetails
        __init__(osgVolume::ImageDetails self, ImageDetails arg2) -> ImageDetails
        """
        this = _osgVolume.new_ImageDetails(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ImageDetails self) -> Object"""
        return _osgVolume.ImageDetails_cloneType(self)

    def clone(self, *args):
        """clone(ImageDetails self, CopyOp copyop) -> Object"""
        return _osgVolume.ImageDetails_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ImageDetails self, Object obj) -> bool"""
        return _osgVolume.ImageDetails_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ImageDetails self) -> char const *"""
        return _osgVolume.ImageDetails_libraryName(self)

    def className(self):
        """className(ImageDetails self) -> char const *"""
        return _osgVolume.ImageDetails_className(self)

    def setTexelOffset(self, *args):
        """setTexelOffset(ImageDetails self, Vec4f offset)"""
        return _osgVolume.ImageDetails_setTexelOffset(self, *args)

    def getTexelOffset(self):
        """getTexelOffset(ImageDetails self) -> Vec4f"""
        return _osgVolume.ImageDetails_getTexelOffset(self)

    def setTexelScale(self, *args):
        """setTexelScale(ImageDetails self, Vec4f scale)"""
        return _osgVolume.ImageDetails_setTexelScale(self, *args)

    def getTexelScale(self):
        """getTexelScale(ImageDetails self) -> Vec4f"""
        return _osgVolume.ImageDetails_getTexelScale(self)

    def setMatrix(self, *args):
        """setMatrix(ImageDetails self, RefMatrixd matrix)"""
        return _osgVolume.ImageDetails_setMatrix(self, *args)

    def getMatrix(self, *args):
        """
        getMatrix(ImageDetails self) -> RefMatrixd
        getMatrix(ImageDetails self) -> RefMatrixd
        """
        return _osgVolume.ImageDetails_getMatrix(self, *args)

    __swig_destroy__ = _osgVolume.delete_ImageDetails
    __del__ = lambda self : None;
ImageDetails_swigregister = _osgVolume.ImageDetails_swigregister
ImageDetails_swigregister(ImageDetails)

class Layer(osg.Object):
    """Proxy of C++ osgVolume::Layer class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::Layer self) -> Layer
        __init__(osgVolume::Layer self, Layer arg2, CopyOp copyop=SHALLOW_COPY) -> Layer
        __init__(osgVolume::Layer self, Layer arg2) -> Layer
        """
        this = _osgVolume.new_Layer(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Layer self) -> Object"""
        return _osgVolume.Layer_cloneType(self)

    def clone(self, *args):
        """clone(Layer self, CopyOp copyop) -> Object"""
        return _osgVolume.Layer_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Layer self, Object obj) -> bool"""
        return _osgVolume.Layer_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Layer self) -> char const *"""
        return _osgVolume.Layer_libraryName(self)

    def className(self):
        """className(Layer self) -> char const *"""
        return _osgVolume.Layer_className(self)

    def setFileName(self, *args):
        """setFileName(Layer self, std::string const & filename)"""
        return _osgVolume.Layer_setFileName(self, *args)

    def getFileName(self):
        """getFileName(Layer self) -> std::string const &"""
        return _osgVolume.Layer_getFileName(self)

    def setLocator(self, *args):
        """setLocator(Layer self, Locator * locator)"""
        return _osgVolume.Layer_setLocator(self, *args)

    def getLocator(self, *args):
        """
        getLocator(Layer self) -> Locator
        getLocator(Layer self) -> Locator const *
        """
        return _osgVolume.Layer_getLocator(self, *args)

    def setDefaultValue(self, *args):
        """setDefaultValue(Layer self, Vec4f value)"""
        return _osgVolume.Layer_setDefaultValue(self, *args)

    def getDefaultValue(self):
        """getDefaultValue(Layer self) -> Vec4f"""
        return _osgVolume.Layer_getDefaultValue(self)

    def setMinFilter(self, *args):
        """setMinFilter(Layer self, osg::Texture::FilterMode filter)"""
        return _osgVolume.Layer_setMinFilter(self, *args)

    def getMinFilter(self):
        """getMinFilter(Layer self) -> osg::Texture::FilterMode"""
        return _osgVolume.Layer_getMinFilter(self)

    def setMagFilter(self, *args):
        """setMagFilter(Layer self, osg::Texture::FilterMode filter)"""
        return _osgVolume.Layer_setMagFilter(self, *args)

    def getMagFilter(self):
        """getMagFilter(Layer self) -> osg::Texture::FilterMode"""
        return _osgVolume.Layer_getMagFilter(self)

    def getImage(self, *args):
        """
        getImage(Layer self) -> Image
        getImage(Layer self) -> Image
        """
        return _osgVolume.Layer_getImage(self, *args)

    def setProperty(self, *args):
        """setProperty(Layer self, Property property)"""
        return _osgVolume.Layer_setProperty(self, *args)

    def getProperty(self, *args):
        """
        getProperty(Layer self) -> Property
        getProperty(Layer self) -> Property
        """
        return _osgVolume.Layer_getProperty(self, *args)

    def addProperty(self, *args):
        """addProperty(Layer self, Property property)"""
        return _osgVolume.Layer_addProperty(self, *args)

    def requiresUpdateTraversal(self):
        """requiresUpdateTraversal(Layer self) -> bool"""
        return _osgVolume.Layer_requiresUpdateTraversal(self)

    def update(self, *args):
        """update(Layer self, NodeVisitor arg2)"""
        return _osgVolume.Layer_update(self, *args)

    def dirty(self):
        """dirty(Layer self)"""
        return _osgVolume.Layer_dirty(self)

    def setModifiedCount(self, *args):
        """setModifiedCount(Layer self, unsigned int arg2)"""
        return _osgVolume.Layer_setModifiedCount(self, *args)

    def getModifiedCount(self):
        """getModifiedCount(Layer self) -> unsigned int"""
        return _osgVolume.Layer_getModifiedCount(self)

    def computeBound(self):
        """computeBound(Layer self) -> BoundingSpheref"""
        return _osgVolume.Layer_computeBound(self)

Layer_swigregister = _osgVolume.Layer_swigregister
Layer_swigregister(Layer)

class ImageLayer(Layer):
    """Proxy of C++ osgVolume::ImageLayer class"""
    __swig_setmethods__ = {}
    for _s in [Layer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::ImageLayer self, Image image=None) -> ImageLayer
        __init__(osgVolume::ImageLayer self) -> ImageLayer
        __init__(osgVolume::ImageLayer self, ImageLayer imageLayer, CopyOp copyop=SHALLOW_COPY) -> ImageLayer
        __init__(osgVolume::ImageLayer self, ImageLayer imageLayer) -> ImageLayer
        """
        this = _osgVolume.new_ImageLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(ImageLayer self) -> Object"""
        return _osgVolume.ImageLayer_cloneType(self)

    def clone(self, *args):
        """clone(ImageLayer self, CopyOp copyop) -> Object"""
        return _osgVolume.ImageLayer_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(ImageLayer self, Object obj) -> bool"""
        return _osgVolume.ImageLayer_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(ImageLayer self) -> char const *"""
        return _osgVolume.ImageLayer_libraryName(self)

    def className(self):
        """className(ImageLayer self) -> char const *"""
        return _osgVolume.ImageLayer_className(self)

    def setFileName(self, *args):
        """setFileName(ImageLayer self, std::string const & filename)"""
        return _osgVolume.ImageLayer_setFileName(self, *args)

    def getFileName(self):
        """getFileName(ImageLayer self) -> std::string const &"""
        return _osgVolume.ImageLayer_getFileName(self)

    def setImage(self, *args):
        """setImage(ImageLayer self, Image image)"""
        return _osgVolume.ImageLayer_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(ImageLayer self) -> Image
        getImage(ImageLayer self) -> Image
        """
        return _osgVolume.ImageLayer_getImage(self, *args)

    def setTexelOffset(self, *args):
        """setTexelOffset(ImageLayer self, Vec4f offset)"""
        return _osgVolume.ImageLayer_setTexelOffset(self, *args)

    def getTexelOffset(self):
        """getTexelOffset(ImageLayer self) -> Vec4f"""
        return _osgVolume.ImageLayer_getTexelOffset(self)

    def setTexelScale(self, *args):
        """setTexelScale(ImageLayer self, Vec4f scale)"""
        return _osgVolume.ImageLayer_setTexelScale(self, *args)

    def getTexelScale(self):
        """getTexelScale(ImageLayer self) -> Vec4f"""
        return _osgVolume.ImageLayer_getTexelScale(self)

    def computeMinMax(self, *args):
        """computeMinMax(ImageLayer self, Vec4f min, Vec4f max) -> bool"""
        return _osgVolume.ImageLayer_computeMinMax(self, *args)

    def offsetAndScaleImage(self, *args):
        """offsetAndScaleImage(ImageLayer self, Vec4f offset, Vec4f scale)"""
        return _osgVolume.ImageLayer_offsetAndScaleImage(self, *args)

    def rescaleToZeroToOneRange(self):
        """rescaleToZeroToOneRange(ImageLayer self)"""
        return _osgVolume.ImageLayer_rescaleToZeroToOneRange(self)

    def translateMinToZero(self):
        """translateMinToZero(ImageLayer self)"""
        return _osgVolume.ImageLayer_translateMinToZero(self)

    def requiresUpdateTraversal(self):
        """requiresUpdateTraversal(ImageLayer self) -> bool"""
        return _osgVolume.ImageLayer_requiresUpdateTraversal(self)

    def update(self, *args):
        """update(ImageLayer self, NodeVisitor arg2)"""
        return _osgVolume.ImageLayer_update(self, *args)

    def dirty(self):
        """dirty(ImageLayer self)"""
        return _osgVolume.ImageLayer_dirty(self)

    def setModifiedCount(self, *args):
        """setModifiedCount(ImageLayer self, unsigned int value)"""
        return _osgVolume.ImageLayer_setModifiedCount(self, *args)

    def getModifiedCount(self):
        """getModifiedCount(ImageLayer self) -> unsigned int"""
        return _osgVolume.ImageLayer_getModifiedCount(self)

ImageLayer_swigregister = _osgVolume.ImageLayer_swigregister
ImageLayer_swigregister(ImageLayer)

class CompositeLayer(Layer):
    """Proxy of C++ osgVolume::CompositeLayer class"""
    __swig_setmethods__ = {}
    for _s in [Layer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::CompositeLayer self) -> CompositeLayer
        __init__(osgVolume::CompositeLayer self, CompositeLayer compositeLayer, CopyOp copyop=SHALLOW_COPY) -> CompositeLayer
        __init__(osgVolume::CompositeLayer self, CompositeLayer compositeLayer) -> CompositeLayer
        """
        this = _osgVolume.new_CompositeLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(CompositeLayer self) -> Object"""
        return _osgVolume.CompositeLayer_cloneType(self)

    def clone(self, *args):
        """clone(CompositeLayer self, CopyOp copyop) -> Object"""
        return _osgVolume.CompositeLayer_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(CompositeLayer self, Object obj) -> bool"""
        return _osgVolume.CompositeLayer_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(CompositeLayer self) -> char const *"""
        return _osgVolume.CompositeLayer_libraryName(self)

    def className(self):
        """className(CompositeLayer self) -> char const *"""
        return _osgVolume.CompositeLayer_className(self)

    def clear(self):
        """clear(CompositeLayer self)"""
        return _osgVolume.CompositeLayer_clear(self)

    def setFileName(self, *args):
        """setFileName(CompositeLayer self, unsigned int i, std::string const & filename)"""
        return _osgVolume.CompositeLayer_setFileName(self, *args)

    def getFileName(self, *args):
        """getFileName(CompositeLayer self, unsigned int i) -> std::string const &"""
        return _osgVolume.CompositeLayer_getFileName(self, *args)

    def setLayer(self, *args):
        """setLayer(CompositeLayer self, unsigned int i, Layer layer)"""
        return _osgVolume.CompositeLayer_setLayer(self, *args)

    def getLayer(self, *args):
        """
        getLayer(CompositeLayer self, unsigned int i) -> Layer
        getLayer(CompositeLayer self, unsigned int i) -> Layer
        """
        return _osgVolume.CompositeLayer_getLayer(self, *args)

    def addLayer(self, *args):
        """addLayer(CompositeLayer self, Layer layer)"""
        return _osgVolume.CompositeLayer_addLayer(self, *args)

    def removeLayer(self, *args):
        """removeLayer(CompositeLayer self, unsigned int i)"""
        return _osgVolume.CompositeLayer_removeLayer(self, *args)

    def getNumLayers(self):
        """getNumLayers(CompositeLayer self) -> unsigned int"""
        return _osgVolume.CompositeLayer_getNumLayers(self)

    def requiresUpdateTraversal(self):
        """requiresUpdateTraversal(CompositeLayer self) -> bool"""
        return _osgVolume.CompositeLayer_requiresUpdateTraversal(self)

    def update(self, *args):
        """update(CompositeLayer self, NodeVisitor arg2)"""
        return _osgVolume.CompositeLayer_update(self, *args)

CompositeLayer_swigregister = _osgVolume.CompositeLayer_swigregister
CompositeLayer_swigregister(CompositeLayer)


def createNormalMapTexture(*args):
  """createNormalMapTexture(Image image_3d) -> Image"""
  return _osgVolume.createNormalMapTexture(*args)

def applyTransferFunction(*args):
  """applyTransferFunction(Image image, osg::TransferFunction1D * transferFunction) -> Image"""
  return _osgVolume.applyTransferFunction(*args)
OSGVOLUME_LOCATOR = _osgVolume.OSGVOLUME_LOCATOR
class Locator(osg.Object):
    """Proxy of C++ osgVolume::Locator class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Locator, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Locator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::Locator self) -> Locator
        __init__(osgVolume::Locator self, Matrixd transform) -> Locator
        __init__(osgVolume::Locator self, Locator locator, CopyOp copyop=SHALLOW_COPY) -> Locator
        __init__(osgVolume::Locator self, Locator locator) -> Locator
        """
        this = _osgVolume.new_Locator(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Locator self) -> Object"""
        return _osgVolume.Locator_cloneType(self)

    def clone(self, *args):
        """clone(Locator self, CopyOp copyop) -> Object"""
        return _osgVolume.Locator_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Locator self, Object obj) -> bool"""
        return _osgVolume.Locator_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Locator self) -> char const *"""
        return _osgVolume.Locator_libraryName(self)

    def className(self):
        """className(Locator self) -> char const *"""
        return _osgVolume.Locator_className(self)

    def setTransform(self, *args):
        """setTransform(Locator self, Matrixd transform)"""
        return _osgVolume.Locator_setTransform(self, *args)

    def getTransform(self):
        """getTransform(Locator self) -> Matrixd"""
        return _osgVolume.Locator_getTransform(self)

    def setTransformAsExtents(self, *args):
        """setTransformAsExtents(Locator self, double minX, double minY, double maxX, double maxY, double minZ, double maxZ)"""
        return _osgVolume.Locator_setTransformAsExtents(self, *args)

    def convertLocalToModel(self, *args):
        """convertLocalToModel(Locator self, Vec3d arg2, Vec3d arg3) -> bool"""
        return _osgVolume.Locator_convertLocalToModel(self, *args)

    def convertModelToLocal(self, *args):
        """convertModelToLocal(Locator self, Vec3d arg2, Vec3d arg3) -> bool"""
        return _osgVolume.Locator_convertModelToLocal(self, *args)

    def convertLocalCoordBetween(*args):
        """convertLocalCoordBetween(Locator source, Vec3d sourceNDC, Locator destination, Vec3d destinationNDC) -> bool"""
        return _osgVolume.Locator_convertLocalCoordBetween(*args)

    if _newclass:convertLocalCoordBetween = staticmethod(convertLocalCoordBetween)
    __swig_getmethods__["convertLocalCoordBetween"] = lambda x: convertLocalCoordBetween
    def computeLocalBounds(self, *args):
        """
        computeLocalBounds(Locator self, Vec3d bottomLeft, Vec3d topRight) -> bool
        computeLocalBounds(Locator self, Locator source, Vec3d bottomLeft, Vec3d topRight) -> bool
        """
        return _osgVolume.Locator_computeLocalBounds(self, *args)

    def addCallback(self, *args):
        """addCallback(Locator self, osgVolume::Locator::LocatorCallback * callback)"""
        return _osgVolume.Locator_addCallback(self, *args)

    def removeCallback(self, *args):
        """removeCallback(Locator self, osgVolume::Locator::LocatorCallback * callback)"""
        return _osgVolume.Locator_removeCallback(self, *args)

    def getLocatorCallbacks(self, *args):
        """
        getLocatorCallbacks(Locator self) -> osgVolume::Locator::LocatorCallbacks
        getLocatorCallbacks(Locator self) -> osgVolume::Locator::LocatorCallbacks const &
        """
        return _osgVolume.Locator_getLocatorCallbacks(self, *args)

    __swig_destroy__ = _osgVolume.delete_Locator
    __del__ = lambda self : None;
Locator_swigregister = _osgVolume.Locator_swigregister
Locator_swigregister(Locator)

def Locator_convertLocalCoordBetween(*args):
  """Locator_convertLocalCoordBetween(Locator source, Vec3d sourceNDC, Locator destination, Vec3d destinationNDC) -> bool"""
  return _osgVolume.Locator_convertLocalCoordBetween(*args)

OSGVOLUME_RAYTRACEDTECHNIQUE = _osgVolume.OSGVOLUME_RAYTRACEDTECHNIQUE
class RayTracedTechnique(VolumeTechnique):
    """Proxy of C++ osgVolume::RayTracedTechnique class"""
    __swig_setmethods__ = {}
    for _s in [VolumeTechnique]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayTracedTechnique, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeTechnique]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RayTracedTechnique, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::RayTracedTechnique self) -> RayTracedTechnique
        __init__(osgVolume::RayTracedTechnique self, RayTracedTechnique arg2, CopyOp copyop=SHALLOW_COPY) -> RayTracedTechnique
        __init__(osgVolume::RayTracedTechnique self, RayTracedTechnique arg2) -> RayTracedTechnique
        """
        this = _osgVolume.new_RayTracedTechnique(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(RayTracedTechnique self) -> Object"""
        return _osgVolume.RayTracedTechnique_cloneType(self)

    def clone(self, *args):
        """clone(RayTracedTechnique self, CopyOp copyop) -> Object"""
        return _osgVolume.RayTracedTechnique_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(RayTracedTechnique self, Object obj) -> bool"""
        return _osgVolume.RayTracedTechnique_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(RayTracedTechnique self) -> char const *"""
        return _osgVolume.RayTracedTechnique_libraryName(self)

    def className(self):
        """className(RayTracedTechnique self) -> char const *"""
        return _osgVolume.RayTracedTechnique_className(self)

    def init(self):
        """init(RayTracedTechnique self)"""
        return _osgVolume.RayTracedTechnique_init(self)

    def update(self, *args):
        """update(RayTracedTechnique self, osgUtil::UpdateVisitor * nv)"""
        return _osgVolume.RayTracedTechnique_update(self, *args)

    def cull(self, *args):
        """cull(RayTracedTechnique self, osgUtil::CullVisitor * nv)"""
        return _osgVolume.RayTracedTechnique_cull(self, *args)

    def cleanSceneGraph(self):
        """cleanSceneGraph(RayTracedTechnique self)"""
        return _osgVolume.RayTracedTechnique_cleanSceneGraph(self)

    def traverse(self, *args):
        """traverse(RayTracedTechnique self, NodeVisitor nv)"""
        return _osgVolume.RayTracedTechnique_traverse(self, *args)

RayTracedTechnique_swigregister = _osgVolume.RayTracedTechnique_swigregister
RayTracedTechnique_swigregister(RayTracedTechnique)

OSGVOLUME_VERSION = _osgVolume.OSGVOLUME_VERSION

def osgVolumeGetVersion():
  """osgVolumeGetVersion() -> char const *"""
  return _osgVolume.osgVolumeGetVersion()

def osgVolumeGetLibraryName():
  """osgVolumeGetLibraryName() -> char const *"""
  return _osgVolume.osgVolumeGetLibraryName()
OSGVOLUME = _osgVolume.OSGVOLUME
class Volume(osg.Group):
    """Proxy of C++ osgVolume::Volume class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Volume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::Volume self) -> Volume
        __init__(osgVolume::Volume self, Volume arg2, CopyOp copyop=SHALLOW_COPY) -> Volume
        __init__(osgVolume::Volume self, Volume arg2) -> Volume
        """
        this = _osgVolume.new_Volume(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(Volume self) -> Object"""
        return _osgVolume.Volume_cloneType(self)

    def clone(self, *args):
        """clone(Volume self, CopyOp copyop) -> Object"""
        return _osgVolume.Volume_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Volume self, Object obj) -> bool"""
        return _osgVolume.Volume_isSameKindAs(self, *args)

    def className(self):
        """className(Volume self) -> char const *"""
        return _osgVolume.Volume_className(self)

    def libraryName(self):
        """libraryName(Volume self) -> char const *"""
        return _osgVolume.Volume_libraryName(self)

    def accept(self, *args):
        """accept(Volume self, NodeVisitor nv)"""
        return _osgVolume.Volume_accept(self, *args)

    def traverse(self, *args):
        """traverse(Volume self, NodeVisitor nv)"""
        return _osgVolume.Volume_traverse(self, *args)

    def getVolumeTile(self, *args):
        """
        getVolumeTile(Volume self, TileID const & tileID) -> VolumeTile
        getVolumeTile(Volume self, TileID const & tileID) -> VolumeTile
        """
        return _osgVolume.Volume_getVolumeTile(self, *args)

    def setVolumeTechniquePrototype(self, *args):
        """setVolumeTechniquePrototype(Volume self, VolumeTechnique volumeTechnique)"""
        return _osgVolume.Volume_setVolumeTechniquePrototype(self, *args)

    def getVolumeTechniquePrototype(self, *args):
        """
        getVolumeTechniquePrototype(Volume self) -> VolumeTechnique
        getVolumeTechniquePrototype(Volume self) -> VolumeTechnique
        """
        return _osgVolume.Volume_getVolumeTechniquePrototype(self, *args)

Volume_swigregister = _osgVolume.Volume_swigregister
Volume_swigregister(Volume)

OSGVOLUME_tile = _osgVolume.OSGVOLUME_tile
class TileID(_object):
    """Proxy of C++ osgVolume::TileID class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TileID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TileID, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::TileID self) -> TileID
        __init__(osgVolume::TileID self, int in_level, int in_x, int in_y, int in_z) -> TileID
        """
        this = _osgVolume.new_TileID(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(TileID self, TileID rhs) -> bool"""
        return _osgVolume.TileID___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(TileID self, TileID rhs) -> bool"""
        return _osgVolume.TileID___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(TileID self, TileID rhs) -> bool"""
        return _osgVolume.TileID___lt__(self, *args)

    def valid(self):
        """valid(TileID self) -> bool"""
        return _osgVolume.TileID_valid(self)

    __swig_setmethods__["level"] = _osgVolume.TileID_level_set
    __swig_getmethods__["level"] = _osgVolume.TileID_level_get
    if _newclass:level = _swig_property(_osgVolume.TileID_level_get, _osgVolume.TileID_level_set)
    __swig_setmethods__["x"] = _osgVolume.TileID_x_set
    __swig_getmethods__["x"] = _osgVolume.TileID_x_get
    if _newclass:x = _swig_property(_osgVolume.TileID_x_get, _osgVolume.TileID_x_set)
    __swig_setmethods__["y"] = _osgVolume.TileID_y_set
    __swig_getmethods__["y"] = _osgVolume.TileID_y_get
    if _newclass:y = _swig_property(_osgVolume.TileID_y_get, _osgVolume.TileID_y_set)
    __swig_setmethods__["z"] = _osgVolume.TileID_z_set
    __swig_getmethods__["z"] = _osgVolume.TileID_z_get
    if _newclass:z = _swig_property(_osgVolume.TileID_z_get, _osgVolume.TileID_z_set)
    __swig_destroy__ = _osgVolume.delete_TileID
    __del__ = lambda self : None;
TileID_swigregister = _osgVolume.TileID_swigregister
TileID_swigregister(TileID)

class VolumeTile(osg.Group):
    """Proxy of C++ osgVolume::VolumeTile class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeTile, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeTile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgVolume::VolumeTile self) -> VolumeTile
        __init__(osgVolume::VolumeTile self, VolumeTile arg2, CopyOp copyop=SHALLOW_COPY) -> VolumeTile
        __init__(osgVolume::VolumeTile self, VolumeTile arg2) -> VolumeTile
        """
        this = _osgVolume.new_VolumeTile(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(VolumeTile self) -> Object"""
        return _osgVolume.VolumeTile_cloneType(self)

    def clone(self, *args):
        """clone(VolumeTile self, CopyOp copyop) -> Object"""
        return _osgVolume.VolumeTile_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(VolumeTile self, Object obj) -> bool"""
        return _osgVolume.VolumeTile_isSameKindAs(self, *args)

    def className(self):
        """className(VolumeTile self) -> char const *"""
        return _osgVolume.VolumeTile_className(self)

    def libraryName(self):
        """libraryName(VolumeTile self) -> char const *"""
        return _osgVolume.VolumeTile_libraryName(self)

    def accept(self, *args):
        """accept(VolumeTile self, NodeVisitor nv)"""
        return _osgVolume.VolumeTile_accept(self, *args)

    def traverse(self, *args):
        """traverse(VolumeTile self, NodeVisitor nv)"""
        return _osgVolume.VolumeTile_traverse(self, *args)

    def init(self):
        """init(VolumeTile self)"""
        return _osgVolume.VolumeTile_init(self)

    def setVolume(self, *args):
        """setVolume(VolumeTile self, Volume ts)"""
        return _osgVolume.VolumeTile_setVolume(self, *args)

    def getVolume(self, *args):
        """
        getVolume(VolumeTile self) -> Volume
        getVolume(VolumeTile self) -> Volume
        """
        return _osgVolume.VolumeTile_getVolume(self, *args)

    def setTileID(self, *args):
        """setTileID(VolumeTile self, TileID tileID)"""
        return _osgVolume.VolumeTile_setTileID(self, *args)

    def getTileID(self):
        """getTileID(VolumeTile self) -> TileID"""
        return _osgVolume.VolumeTile_getTileID(self)

    def setLocator(self, *args):
        """setLocator(VolumeTile self, Locator locator)"""
        return _osgVolume.VolumeTile_setLocator(self, *args)

    def getLocator(self, *args):
        """
        getLocator(VolumeTile self) -> Locator
        getLocator(VolumeTile self) -> Locator
        """
        return _osgVolume.VolumeTile_getLocator(self, *args)

    def setLayer(self, *args):
        """setLayer(VolumeTile self, Layer layer)"""
        return _osgVolume.VolumeTile_setLayer(self, *args)

    def getLayer(self, *args):
        """
        getLayer(VolumeTile self) -> Layer
        getLayer(VolumeTile self) -> Layer
        """
        return _osgVolume.VolumeTile_getLayer(self, *args)

    def setVolumeTechnique(self, *args):
        """setVolumeTechnique(VolumeTile self, VolumeTechnique VolumeTechnique)"""
        return _osgVolume.VolumeTile_setVolumeTechnique(self, *args)

    def getVolumeTechnique(self, *args):
        """
        getVolumeTechnique(VolumeTile self) -> VolumeTechnique
        getVolumeTechnique(VolumeTile self) -> VolumeTechnique
        """
        return _osgVolume.VolumeTile_getVolumeTechnique(self, *args)

    def setDirty(self, *args):
        """setDirty(VolumeTile self, bool dirty)"""
        return _osgVolume.VolumeTile_setDirty(self, *args)

    def getDirty(self):
        """getDirty(VolumeTile self) -> bool"""
        return _osgVolume.VolumeTile_getDirty(self)

    def computeBound(self):
        """computeBound(VolumeTile self) -> BoundingSpheref"""
        return _osgVolume.VolumeTile_computeBound(self)

VolumeTile_swigregister = _osgVolume.VolumeTile_swigregister
VolumeTile_swigregister(VolumeTile)

# This file is compatible with both classic and new-style classes.


