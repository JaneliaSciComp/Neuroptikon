# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _osgDB
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgDB.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _osgDB.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _osgDB.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _osgDB.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _osgDB.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _osgDB.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _osgDB.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _osgDB.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _osgDB.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgDB.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _osgDB.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _osgDB.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgDB.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgDB.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgDB.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _osgDB.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _osgDB.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import osg
class stdFilePathList(_object):
    """Proxy of C++ stdFilePathList class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdFilePathList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdFilePathList, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _osgDB.stdFilePathList_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _osgDB.stdFilePathList___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _osgDB.stdFilePathList___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _osgDB.stdFilePathList_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> stdFilePathList"""
        return _osgDB.stdFilePathList___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, stdFilePathList v)"""
        return _osgDB.stdFilePathList___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgDB.stdFilePathList___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _osgDB.stdFilePathList___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _osgDB.stdFilePathList___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _osgDB.stdFilePathList___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _osgDB.stdFilePathList_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _osgDB.stdFilePathList_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _osgDB.stdFilePathList_size(*args)

    def clear(*args):
        """clear(self)"""
        return _osgDB.stdFilePathList_clear(*args)

    def swap(*args):
        """swap(self, stdFilePathList v)"""
        return _osgDB.stdFilePathList_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _osgDB.stdFilePathList_get_allocator(*args)

    def begin(*args):
        """
        begin(self) -> iterator
        begin(self) -> const_iterator
        """
        return _osgDB.stdFilePathList_begin(*args)

    def end(*args):
        """
        end(self) -> iterator
        end(self) -> const_iterator
        """
        return _osgDB.stdFilePathList_end(*args)

    def rbegin(*args):
        """
        rbegin(self) -> reverse_iterator
        rbegin(self) -> const_reverse_iterator
        """
        return _osgDB.stdFilePathList_rbegin(*args)

    def rend(*args):
        """
        rend(self) -> reverse_iterator
        rend(self) -> const_reverse_iterator
        """
        return _osgDB.stdFilePathList_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _osgDB.stdFilePathList_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgDB.stdFilePathList_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> stdFilePathList
        __init__(self, stdFilePathList ?) -> stdFilePathList
        __init__(self, size_type size) -> stdFilePathList
        __init__(self, size_type size, value_type value) -> stdFilePathList
        """
        this = _osgDB.new_stdFilePathList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _osgDB.stdFilePathList_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _osgDB.stdFilePathList_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _osgDB.stdFilePathList_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _osgDB.stdFilePathList_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgDB.stdFilePathList_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgDB.stdFilePathList_insert(*args)

    def pop_front(*args):
        """pop_front(self)"""
        return _osgDB.stdFilePathList_pop_front(*args)

    def push_front(*args):
        """push_front(self, value_type x)"""
        return _osgDB.stdFilePathList_push_front(*args)

    __swig_destroy__ = _osgDB.delete_stdFilePathList
    __del__ = lambda self : None;
stdFilePathList_swigregister = _osgDB.stdFilePathList_swigregister
stdFilePathList_swigregister(stdFilePathList)

OSGDB_VERSION = _osgDB.OSGDB_VERSION

def osgDBGetVersion(*args):
  """osgDBGetVersion() -> char"""
  return _osgDB.osgDBGetVersion(*args)

def osgDBGetLibraryName(*args):
  """osgDBGetLibraryName() -> char"""
  return _osgDB.osgDBGetLibraryName(*args)
OSGDB_EXPORT_ = _osgDB.OSGDB_EXPORT_
OSGDB_AUTHENTICATIONMAP = _osgDB.OSGDB_AUTHENTICATIONMAP
class AuthenticationDetails(osg.Referenced):
    """Proxy of C++ AuthenticationDetails class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthenticationDetails, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthenticationDetails, name)
    __repr__ = _swig_repr
    BASIC = _osgDB.AuthenticationDetails_BASIC
    DIGEST = _osgDB.AuthenticationDetails_DIGEST
    NTLM = _osgDB.AuthenticationDetails_NTLM
    GSSNegotiate = _osgDB.AuthenticationDetails_GSSNegotiate
    ANY = _osgDB.AuthenticationDetails_ANY
    ANYSAFE = _osgDB.AuthenticationDetails_ANYSAFE
    def __init__(self, *args): 
        """
        __init__(self, string u, string p, HttpAuthentication auth=BASIC) -> AuthenticationDetails
        __init__(self, string u, string p) -> AuthenticationDetails
        """
        this = _osgDB.new_AuthenticationDetails(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["username"] = _osgDB.AuthenticationDetails_username_set
    __swig_getmethods__["username"] = _osgDB.AuthenticationDetails_username_get
    if _newclass:username = _swig_property(_osgDB.AuthenticationDetails_username_get, _osgDB.AuthenticationDetails_username_set)
    __swig_setmethods__["password"] = _osgDB.AuthenticationDetails_password_set
    __swig_getmethods__["password"] = _osgDB.AuthenticationDetails_password_get
    if _newclass:password = _swig_property(_osgDB.AuthenticationDetails_password_get, _osgDB.AuthenticationDetails_password_set)
    __swig_setmethods__["httpAuthentication"] = _osgDB.AuthenticationDetails_httpAuthentication_set
    __swig_getmethods__["httpAuthentication"] = _osgDB.AuthenticationDetails_httpAuthentication_get
    if _newclass:httpAuthentication = _swig_property(_osgDB.AuthenticationDetails_httpAuthentication_get, _osgDB.AuthenticationDetails_httpAuthentication_set)
AuthenticationDetails_swigregister = _osgDB.AuthenticationDetails_swigregister
AuthenticationDetails_swigregister(AuthenticationDetails)

class AuthenticationMap(osg.Referenced):
    """Proxy of C++ AuthenticationMap class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthenticationMap, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthenticationMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> AuthenticationMap"""
        this = _osgDB.new_AuthenticationMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def addAuthenticationDetails(*args):
        """addAuthenticationDetails(self, string path, AuthenticationDetails details)"""
        return _osgDB.AuthenticationMap_addAuthenticationDetails(*args)

    def getAuthenticationDetails(*args):
        """getAuthenticationDetails(self, string path) -> AuthenticationDetails"""
        return _osgDB.AuthenticationMap_getAuthenticationDetails(*args)

AuthenticationMap_swigregister = _osgDB.AuthenticationMap_swigregister
AuthenticationMap_swigregister(AuthenticationMap)

OSGDB_READERWRITER = _osgDB.OSGDB_READERWRITER
OSGDB_WRITEFILE = _osgDB.OSGDB_WRITEFILE
OSGDB_SHAREDSTATEMANAGER = _osgDB.OSGDB_SHAREDSTATEMANAGER
class SharedStateManager(osg.NodeVisitor):
    """Proxy of C++ SharedStateManager class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedStateManager, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SharedStateManager, name)
    __repr__ = _swig_repr
    SHARE_NONE = _osgDB.SharedStateManager_SHARE_NONE
    SHARE_STATIC_TEXTURES = _osgDB.SharedStateManager_SHARE_STATIC_TEXTURES
    SHARE_UNSPECIFIED_TEXTURES = _osgDB.SharedStateManager_SHARE_UNSPECIFIED_TEXTURES
    SHARE_DYNAMIC_TEXTURES = _osgDB.SharedStateManager_SHARE_DYNAMIC_TEXTURES
    SHARE_STATIC_STATESETS = _osgDB.SharedStateManager_SHARE_STATIC_STATESETS
    SHARE_UNSPECIFIED_STATESETS = _osgDB.SharedStateManager_SHARE_UNSPECIFIED_STATESETS
    SHARE_DYNAMIC_STATESETS = _osgDB.SharedStateManager_SHARE_DYNAMIC_STATESETS
    SHARE_TEXTURES = _osgDB.SharedStateManager_SHARE_TEXTURES
    SHARE_STATESETS = _osgDB.SharedStateManager_SHARE_STATESETS
    SHARE_ALL = _osgDB.SharedStateManager_SHARE_ALL
    def __init__(self, *args): 
        """
        __init__(self, unsigned int mode=SHARE_ALL) -> SharedStateManager
        __init__(self) -> SharedStateManager
        """
        this = _osgDB.new_SharedStateManager(*args)
        try: self.this.append(this)
        except: self.this = this
    def setShareMode(*args):
        """setShareMode(self, unsigned int mode)"""
        return _osgDB.SharedStateManager_setShareMode(*args)

    def getShareMode(*args):
        """getShareMode(self) -> unsigned int"""
        return _osgDB.SharedStateManager_getShareMode(*args)

    def prune(*args):
        """prune(self)"""
        return _osgDB.SharedStateManager_prune(*args)

    def share(*args):
        """
        share(self, Node node, OpenThreads::Mutex mt=0)
        share(self, Node node)
        """
        return _osgDB.SharedStateManager_share(*args)

    def apply(*args):
        """
        apply(self, Node node)
        apply(self, Geode geode)
        """
        return _osgDB.SharedStateManager_apply(*args)

    def isShared(*args):
        """isShared(self, StateSet stateSet) -> bool"""
        return _osgDB.SharedStateManager_isShared(*args)

    __swig_destroy__ = _osgDB.delete_SharedStateManager
    __del__ = lambda self : None;
SharedStateManager_swigregister = _osgDB.SharedStateManager_swigregister
SharedStateManager_swigregister(SharedStateManager)

def writeObjectFile(*args):
  """
    writeObjectFile(Object object, string filename, osgDB::ReaderWriter::Options options) -> bool
    writeObjectFile(Object object, string filename) -> bool
    """
  return _osgDB.writeObjectFile(*args)

def writeImageFile(*args):
  """
    writeImageFile(Image image, string filename, osgDB::ReaderWriter::Options options) -> bool
    writeImageFile(Image image, string filename) -> bool
    """
  return _osgDB.writeImageFile(*args)

def writeHeightFieldFile(*args):
  """
    writeHeightFieldFile(HeightField hf, string filename, osgDB::ReaderWriter::Options options) -> bool
    writeHeightFieldFile(HeightField hf, string filename) -> bool
    """
  return _osgDB.writeHeightFieldFile(*args)

def writeNodeFile(*args):
  """
    writeNodeFile(Node node, string filename, osgDB::ReaderWriter::Options options) -> bool
    writeNodeFile(Node node, string filename) -> bool
    """
  return _osgDB.writeNodeFile(*args)

def writeShaderFile(*args):
  """
    writeShaderFile(Shader shader, string filename, osgDB::ReaderWriter::Options options) -> bool
    writeShaderFile(Shader shader, string filename) -> bool
    """
  return _osgDB.writeShaderFile(*args)

OSGDB_READFILE = _osgDB.OSGDB_READFILE
OSGDB_FIELDREADER = _osgDB.OSGDB_FIELDREADER
class FieldReader(_object):
    """Proxy of C++ FieldReader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FieldReader
        __init__(self, FieldReader ic) -> FieldReader
        """
        this = _osgDB.new_FieldReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_FieldReader
    __del__ = lambda self : None;
    def attach(*args):
        """attach(self, std::istream input)"""
        return _osgDB.FieldReader_attach(*args)

    def detach(*args):
        """detach(self)"""
        return _osgDB.FieldReader_detach(*args)

    def eof(*args):
        """eof(self) -> bool"""
        return _osgDB.FieldReader_eof(*args)

    def readField(*args):
        """readField(self, Field fieldPtr) -> bool"""
        return _osgDB.FieldReader_readField(*args)

    def ignoreField(*args):
        """ignoreField(self)"""
        return _osgDB.FieldReader_ignoreField(*args)

    def getNoNestedBrackets(*args):
        """getNoNestedBrackets(self) -> int"""
        return _osgDB.FieldReader_getNoNestedBrackets(*args)

FieldReader_swigregister = _osgDB.FieldReader_swigregister
FieldReader_swigregister(FieldReader)

def readObjectFile(*args):
  """
    readObjectFile(string filename, osgDB::ReaderWriter::Options options) -> Object
    readObjectFile(string filename) -> Object
    """
  return _osgDB.readObjectFile(*args)

def readImageFile(*args):
  """
    readImageFile(string filename, osgDB::ReaderWriter::Options options) -> Image
    readImageFile(string filename) -> Image
    """
  return _osgDB.readImageFile(*args)

def readHeightFieldFile(*args):
  """
    readHeightFieldFile(string filename, osgDB::ReaderWriter::Options options) -> HeightField
    readHeightFieldFile(string filename) -> HeightField
    """
  return _osgDB.readHeightFieldFile(*args)

def readNodeFile(*args):
  """
    readNodeFile(string filename, osgDB::ReaderWriter::Options options) -> Node
    readNodeFile(string filename) -> Node
    """
  return _osgDB.readNodeFile(*args)

def readNodeFiles(*args):
  """
    readNodeFiles(__dummy_0__ commandLine, osgDB::ReaderWriter::Options options) -> Node
    readNodeFiles(__dummy_0__ commandLine) -> Node
    readNodeFiles(ArgumentParser parser, osgDB::ReaderWriter::Options options) -> Node
    readNodeFiles(ArgumentParser parser) -> Node
    """
  return _osgDB.readNodeFiles(*args)

def readShaderFile(*args):
  """
    readShaderFile(string filename, osgDB::ReaderWriter::Options options) -> Shader
    readShaderFile(string filename) -> Shader
    """
  return _osgDB.readShaderFile(*args)

def readRefObjectFile(*args):
  """
    readRefObjectFile(string filename, osgDB::ReaderWriter::Options options) -> osg::ref_ptr<(osg::Object)>
    readRefObjectFile(string filename) -> osg::ref_ptr<(osg::Object)>
    """
  return _osgDB.readRefObjectFile(*args)

def readRefImageFile(*args):
  """
    readRefImageFile(string filename, osgDB::ReaderWriter::Options options) -> ImageRef
    readRefImageFile(string filename) -> ImageRef
    """
  return _osgDB.readRefImageFile(*args)

def readRefHeightFieldFile(*args):
  """
    readRefHeightFieldFile(string filename, osgDB::ReaderWriter::Options options) -> osg::ref_ptr<(osg::HeightField)>
    readRefHeightFieldFile(string filename) -> osg::ref_ptr<(osg::HeightField)>
    """
  return _osgDB.readRefHeightFieldFile(*args)

def readRefNodeFile(*args):
  """
    readRefNodeFile(string filename, osgDB::ReaderWriter::Options options) -> NodeRef
    readRefNodeFile(string filename) -> NodeRef
    """
  return _osgDB.readRefNodeFile(*args)

def readRefShaderFile(*args):
  """
    readRefShaderFile(string filename, osgDB::ReaderWriter::Options options) -> osg::ref_ptr<(osg::Shader)>
    readRefShaderFile(string filename) -> osg::ref_ptr<(osg::Shader)>
    """
  return _osgDB.readRefShaderFile(*args)

OSGDB_FIELDREADERITERATOR = _osgDB.OSGDB_FIELDREADERITERATOR
class FieldReaderIterator(_object):
    """Proxy of C++ FieldReaderIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldReaderIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldReaderIterator, name)
    __repr__ = _swig_repr
    MINIMUM_FIELD_READER_QUEUE_SIZE = _osgDB.FieldReaderIterator_MINIMUM_FIELD_READER_QUEUE_SIZE
    def __init__(self, *args): 
        """
        __init__(self) -> FieldReaderIterator
        __init__(self, FieldReaderIterator ic) -> FieldReaderIterator
        """
        this = _osgDB.new_FieldReaderIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_FieldReaderIterator
    __del__ = lambda self : None;
    def attach(*args):
        """attach(self, std::istream input)"""
        return _osgDB.FieldReaderIterator_attach(*args)

    def detach(*args):
        """detach(self)"""
        return _osgDB.FieldReaderIterator_detach(*args)

    def eof(*args):
        """eof(self) -> bool"""
        return _osgDB.FieldReaderIterator_eof(*args)

    def getFieldReader(*args):
        """getFieldReader(self) -> FieldReader"""
        return _osgDB.FieldReaderIterator_getFieldReader(*args)

    def insert(*args):
        """
        insert(self, int pos, Field field)
        insert(self, int pos, char str)
        """
        return _osgDB.FieldReaderIterator_insert(*args)

    def field(*args):
        """field(self, int pos) -> Field"""
        return _osgDB.FieldReaderIterator_field(*args)

    def __iadd__(*args):
        """__iadd__(self, int no) -> FieldReaderIterator"""
        return _osgDB.FieldReaderIterator___iadd__(*args)

    def advanceOverCurrentFieldOrBlock(*args):
        """advanceOverCurrentFieldOrBlock(self)"""
        return _osgDB.FieldReaderIterator_advanceOverCurrentFieldOrBlock(*args)

    def advanceToEndOfCurrentBlock(*args):
        """advanceToEndOfCurrentBlock(self)"""
        return _osgDB.FieldReaderIterator_advanceToEndOfCurrentBlock(*args)

    def advanceToEndOfBlock(*args):
        """advanceToEndOfBlock(self, int noNestBrackets)"""
        return _osgDB.FieldReaderIterator_advanceToEndOfBlock(*args)

    def matchSequence(*args):
        """matchSequence(self, char str) -> bool"""
        return _osgDB.FieldReaderIterator_matchSequence(*args)

    def readSequence(*args):
        """
        readSequence(self, char keyword, string value) -> bool
        readSequence(self, char keyword, unsigned int value) -> bool
        readSequence(self, char keyword, int value) -> bool
        readSequence(self, char keyword, float value) -> bool
        readSequence(self, char keyword, Vec2f value) -> bool
        readSequence(self, char keyword, Vec3f value) -> bool
        readSequence(self, char keyword, Vec4f value) -> bool
        readSequence(self, char keyword, Vec2d value) -> bool
        readSequence(self, char keyword, Vec3d value) -> bool
        readSequence(self, char keyword, Vec4d value) -> bool
        readSequence(self, string value) -> bool
        readSequence(self, unsigned int value) -> bool
        readSequence(self, int value) -> bool
        readSequence(self, float value) -> bool
        readSequence(self, Vec2f value) -> bool
        readSequence(self, Vec3f value) -> bool
        readSequence(self, Vec4f value) -> bool
        readSequence(self, Vec2d value) -> bool
        readSequence(self, Vec3d value) -> bool
        readSequence(self, Vec4d value) -> bool
        """
        return _osgDB.FieldReaderIterator_readSequence(*args)

FieldReaderIterator_swigregister = _osgDB.FieldReaderIterator_swigregister
FieldReaderIterator_swigregister(FieldReaderIterator)

OSGDB_INPUT = _osgDB.OSGDB_INPUT
class Input(FieldReaderIterator):
    """Proxy of C++ Input class"""
    __swig_setmethods__ = {}
    for _s in [FieldReaderIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Input, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldReaderIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Input, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Input"""
        this = _osgDB.new_Input(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_Input
    __del__ = lambda self : None;
    def setOptions(*args):
        """setOptions(self, osgDB::ReaderWriter::Options options)"""
        return _osgDB.Input_setOptions(*args)

    def getOptions(*args):
        """getOptions(self) -> osgDB::ReaderWriter::Options"""
        return _osgDB.Input_getOptions(*args)

    def readObjectOfType(*args):
        """
        readObjectOfType(self, Object compObj) -> Object
        readObjectOfType(self, basic_type_wrapper btw) -> Object
        """
        return _osgDB.Input_readObjectOfType(*args)

    def readDrawable(*args):
        """readDrawable(self) -> Drawable"""
        return _osgDB.Input_readDrawable(*args)

    def readStateAttribute(*args):
        """readStateAttribute(self) -> StateAttribute"""
        return _osgDB.Input_readStateAttribute(*args)

    def readUniform(*args):
        """readUniform(self) -> Uniform"""
        return _osgDB.Input_readUniform(*args)

    def readObject(*args):
        """
        readObject(self) -> Object
        readObject(self, string fileName) -> Object
        """
        return _osgDB.Input_readObject(*args)

    def readImage(*args):
        """
        readImage(self) -> Image
        readImage(self, string fileName) -> Image
        """
        return _osgDB.Input_readImage(*args)

    def readNode(*args):
        """
        readNode(self) -> Node
        readNode(self, string fileName) -> Node
        """
        return _osgDB.Input_readNode(*args)

    def readShader(*args):
        """
        readShader(self) -> Shader
        readShader(self, string fileName) -> Shader
        """
        return _osgDB.Input_readShader(*args)

    def getObjectForUniqueID(*args):
        """getObjectForUniqueID(self, string uniqueID) -> Object"""
        return _osgDB.Input_getObjectForUniqueID(*args)

    def registerUniqueIDForObject(*args):
        """registerUniqueIDForObject(self, string uniqueID, Object obj)"""
        return _osgDB.Input_registerUniqueIDForObject(*args)

Input_swigregister = _osgDB.Input_swigregister
Input_swigregister(Input)

OSGDB_OUTPUT = _osgDB.OSGDB_OUTPUT
class Output(_object):
    """Proxy of C++ Output class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Output, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Output
        __init__(self, char name) -> Output
        """
        this = _osgDB.new_Output(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_Output
    __del__ = lambda self : None;
    def setOptions(*args):
        """setOptions(self, osgDB::ReaderWriter::Options options)"""
        return _osgDB.Output_setOptions(*args)

    def getOptions(*args):
        """getOptions(self) -> osgDB::ReaderWriter::Options"""
        return _osgDB.Output_getOptions(*args)

    def setWriteOutDefaultValues(*args):
        """setWriteOutDefaultValues(self, bool flag)"""
        return _osgDB.Output_setWriteOutDefaultValues(*args)

    def getWriteOutDefaultValues(*args):
        """getWriteOutDefaultValues(self) -> bool"""
        return _osgDB.Output_getWriteOutDefaultValues(*args)

    def open(*args):
        """open(self, char name)"""
        return _osgDB.Output_open(*args)

    def indent(*args):
        """indent(self) -> Output"""
        return _osgDB.Output_indent(*args)

    def wrapString(*args):
        """
        wrapString(self, char str) -> string
        wrapString(self, string str) -> string
        """
        return _osgDB.Output_wrapString(*args)

    def setIndentStep(*args):
        """setIndentStep(self, int step)"""
        return _osgDB.Output_setIndentStep(*args)

    def getIndentStep(*args):
        """getIndentStep(self) -> int"""
        return _osgDB.Output_getIndentStep(*args)

    def setIndent(*args):
        """setIndent(self, int indent)"""
        return _osgDB.Output_setIndent(*args)

    def getIndent(*args):
        """getIndent(self) -> int"""
        return _osgDB.Output_getIndent(*args)

    def setNumIndicesPerLine(*args):
        """setNumIndicesPerLine(self, int num)"""
        return _osgDB.Output_setNumIndicesPerLine(*args)

    def getNumIndicesPerLine(*args):
        """getNumIndicesPerLine(self) -> int"""
        return _osgDB.Output_getNumIndicesPerLine(*args)

    def moveIn(*args):
        """moveIn(self)"""
        return _osgDB.Output_moveIn(*args)

    def moveOut(*args):
        """moveOut(self)"""
        return _osgDB.Output_moveOut(*args)

    def writeObject(*args):
        """writeObject(self, Object obj) -> bool"""
        return _osgDB.Output_writeObject(*args)

    def writeBeginObject(*args):
        """writeBeginObject(self, string name)"""
        return _osgDB.Output_writeBeginObject(*args)

    def writeEndObject(*args):
        """writeEndObject(self)"""
        return _osgDB.Output_writeEndObject(*args)

    def writeUseID(*args):
        """writeUseID(self, string id)"""
        return _osgDB.Output_writeUseID(*args)

    def writeUniqueID(*args):
        """writeUniqueID(self, string id)"""
        return _osgDB.Output_writeUniqueID(*args)

    def getUniqueIDForObject(*args):
        """getUniqueIDForObject(self, Object obj, string uniqueID) -> bool"""
        return _osgDB.Output_getUniqueIDForObject(*args)

    def createUniqueIDForObject(*args):
        """createUniqueIDForObject(self, Object obj, string uniqueID) -> bool"""
        return _osgDB.Output_createUniqueIDForObject(*args)

    def registerUniqueIDForObject(*args):
        """registerUniqueIDForObject(self, Object obj, string uniqueID) -> bool"""
        return _osgDB.Output_registerUniqueIDForObject(*args)

    AS_IS = _osgDB.Output_AS_IS
    FULL_PATH = _osgDB.Output_FULL_PATH
    RELATIVE_PATH = _osgDB.Output_RELATIVE_PATH
    FILENAME_ONLY = _osgDB.Output_FILENAME_ONLY
    def setPathNameHint(*args):
        """setPathNameHint(self, PathNameHint pnh)"""
        return _osgDB.Output_setPathNameHint(*args)

    def getPathNameHint(*args):
        """getPathNameHint(self) -> int"""
        return _osgDB.Output_getPathNameHint(*args)

    def getFileNameForOutput(*args):
        """getFileNameForOutput(self, string filename) -> string"""
        return _osgDB.Output_getFileNameForOutput(*args)

    def getFileName(*args):
        """getFileName(self) -> string"""
        return _osgDB.Output_getFileName(*args)

    def setOutputTextureFiles(*args):
        """setOutputTextureFiles(self, bool flag)"""
        return _osgDB.Output_setOutputTextureFiles(*args)

    def getOutputTextureFiles(*args):
        """getOutputTextureFiles(self) -> bool"""
        return _osgDB.Output_getOutputTextureFiles(*args)

    def getTextureFileNameForOutput(*args):
        """getTextureFileNameForOutput(self) -> string"""
        return _osgDB.Output_getTextureFileNameForOutput(*args)

    def setOutputShaderFiles(*args):
        """setOutputShaderFiles(self, bool flag)"""
        return _osgDB.Output_setOutputShaderFiles(*args)

    def getOutputShaderFiles(*args):
        """getOutputShaderFiles(self) -> bool"""
        return _osgDB.Output_getOutputShaderFiles(*args)

    def getShaderFileNameForOutput(*args):
        """getShaderFileNameForOutput(self) -> string"""
        return _osgDB.Output_getShaderFileNameForOutput(*args)

Output_swigregister = _osgDB.Output_swigregister
Output_swigregister(Output)

OSGDB_PARAMETEROUTPUT = _osgDB.OSGDB_PARAMETEROUTPUT
class ParameterOutput(_object):
    """Proxy of C++ ParameterOutput class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterOutput, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Output fw) -> ParameterOutput
        __init__(self, Output fw, int numItemsPerLine) -> ParameterOutput
        """
        this = _osgDB.new_ParameterOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    def begin(*args):
        """begin(self)"""
        return _osgDB.ParameterOutput_begin(*args)

    def newLine(*args):
        """newLine(self)"""
        return _osgDB.ParameterOutput_newLine(*args)

    def end(*args):
        """end(self)"""
        return _osgDB.ParameterOutput_end(*args)

    __swig_destroy__ = _osgDB.delete_ParameterOutput
    __del__ = lambda self : None;
ParameterOutput_swigregister = _osgDB.ParameterOutput_swigregister
ParameterOutput_swigregister(ParameterOutput)

OSGDB_IMAGEOPTIONS = _osgDB.OSGDB_IMAGEOPTIONS
class ImageOptions(_object):
    """Proxy of C++ ImageOptions class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ImageOptions
        __init__(self, string str) -> ImageOptions
        __init__(self, ImageOptions options, CopyOp copyop=SHALLOW_COPY) -> ImageOptions
        __init__(self, ImageOptions options) -> ImageOptions
        """
        this = _osgDB.new_ImageOptions(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgDB.ImageOptions_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgDB.ImageOptions_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgDB.ImageOptions_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgDB.ImageOptions_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgDB.ImageOptions_className(*args)

    ALL_IMAGE = _osgDB.ImageOptions_ALL_IMAGE
    RATIO_WINDOW = _osgDB.ImageOptions_RATIO_WINDOW
    PIXEL_WINDOW = _osgDB.ImageOptions_PIXEL_WINDOW
    NEAREST = _osgDB.ImageOptions_NEAREST
    LINEAR = _osgDB.ImageOptions_LINEAR
    CUBIC = _osgDB.ImageOptions_CUBIC
    __swig_setmethods__["_destinationImage"] = _osgDB.ImageOptions__destinationImage_set
    __swig_getmethods__["_destinationImage"] = _osgDB.ImageOptions__destinationImage_get
    if _newclass:_destinationImage = _swig_property(_osgDB.ImageOptions__destinationImage_get, _osgDB.ImageOptions__destinationImage_set)
    __swig_setmethods__["_destinationDataType"] = _osgDB.ImageOptions__destinationDataType_set
    __swig_getmethods__["_destinationDataType"] = _osgDB.ImageOptions__destinationDataType_get
    if _newclass:_destinationDataType = _swig_property(_osgDB.ImageOptions__destinationDataType_get, _osgDB.ImageOptions__destinationDataType_set)
    __swig_setmethods__["_destinationPixelFormat"] = _osgDB.ImageOptions__destinationPixelFormat_set
    __swig_getmethods__["_destinationPixelFormat"] = _osgDB.ImageOptions__destinationPixelFormat_get
    if _newclass:_destinationPixelFormat = _swig_property(_osgDB.ImageOptions__destinationPixelFormat_get, _osgDB.ImageOptions__destinationPixelFormat_set)
    def init(*args):
        """init(self)"""
        return _osgDB.ImageOptions_init(*args)

    __swig_destroy__ = _osgDB.delete_ImageOptions
    __del__ = lambda self : None;
ImageOptions_swigregister = _osgDB.ImageOptions_swigregister
ImageOptions_swigregister(ImageOptions)

OSGDB_FILEUTILS = _osgDB.OSGDB_FILEUTILS
CASE_SENSITIVE = _osgDB.CASE_SENSITIVE
CASE_INSENSITIVE = _osgDB.CASE_INSENSITIVE
FILE_NOT_FOUND = _osgDB.FILE_NOT_FOUND
REGULAR_FILE = _osgDB.REGULAR_FILE
DIRECTORY = _osgDB.DIRECTORY

def makeDirectory(*args):
  """makeDirectory(string directoryPath) -> bool"""
  return _osgDB.makeDirectory(*args)

def makeDirectoryForFile(*args):
  """makeDirectoryForFile(string filePath) -> bool"""
  return _osgDB.makeDirectoryForFile(*args)

def fileExists(*args):
  """fileExists(string filename) -> bool"""
  return _osgDB.fileExists(*args)

def fileType(*args):
  """fileType(string filename) -> int"""
  return _osgDB.fileType(*args)

def getDirectoryContents(*args):
  """getDirectoryContents(string dirName) -> DirectoryContents"""
  return _osgDB.getDirectoryContents(*args)

def getDataFilePathList(*args):
  """getDataFilePathList() -> FilePathList"""
  return _osgDB.getDataFilePathList(*args)

def getLibraryFilePathList(*args):
  """getLibraryFilePathList() -> FilePathList"""
  return _osgDB.getLibraryFilePathList(*args)

def convertStringPathIntoFilePathList(*args):
  """convertStringPathIntoFilePathList(string paths, FilePathList filepath)"""
  return _osgDB.convertStringPathIntoFilePathList(*args)

def appendPlatformSpecificLibraryFilePaths(*args):
  """appendPlatformSpecificLibraryFilePaths(FilePathList filepath)"""
  return _osgDB.appendPlatformSpecificLibraryFilePaths(*args)

def appendPlatformSpecificResourceFilePaths(*args):
  """appendPlatformSpecificResourceFilePaths(FilePathList filepath)"""
  return _osgDB.appendPlatformSpecificResourceFilePaths(*args)
OSGDB_FILENAMEUTILS = _osgDB.OSGDB_FILENAMEUTILS

def getFilePath(*args):
  """getFilePath(string filename) -> string"""
  return _osgDB.getFilePath(*args)

def getFileExtension(*args):
  """getFileExtension(string filename) -> string"""
  return _osgDB.getFileExtension(*args)

def getLowerCaseFileExtension(*args):
  """getLowerCaseFileExtension(string filename) -> string"""
  return _osgDB.getLowerCaseFileExtension(*args)

def getSimpleFileName(*args):
  """getSimpleFileName(string fileName) -> string"""
  return _osgDB.getSimpleFileName(*args)

def getNameLessExtension(*args):
  """getNameLessExtension(string fileName) -> string"""
  return _osgDB.getNameLessExtension(*args)

def getStrippedName(*args):
  """getStrippedName(string fileName) -> string"""
  return _osgDB.getStrippedName(*args)

def convertFileNameToWindowsStyle(*args):
  """convertFileNameToWindowsStyle(string fileName) -> string"""
  return _osgDB.convertFileNameToWindowsStyle(*args)

def convertFileNameToUnixStyle(*args):
  """convertFileNameToUnixStyle(string fileName) -> string"""
  return _osgDB.convertFileNameToUnixStyle(*args)

def convertToLowerCase(*args):
  """convertToLowerCase(string fileName) -> string"""
  return _osgDB.convertToLowerCase(*args)

def isFileNameNativeStyle(*args):
  """isFileNameNativeStyle(string fileName) -> bool"""
  return _osgDB.isFileNameNativeStyle(*args)

def convertFileNameToNativeStyle(*args):
  """convertFileNameToNativeStyle(string fileName) -> string"""
  return _osgDB.convertFileNameToNativeStyle(*args)

def containsServerAddress(*args):
  """containsServerAddress(string filename) -> bool"""
  return _osgDB.containsServerAddress(*args)

def getServerAddress(*args):
  """getServerAddress(string filename) -> string"""
  return _osgDB.getServerAddress(*args)

def getServerFileName(*args):
  """getServerFileName(string filename) -> string"""
  return _osgDB.getServerFileName(*args)

def concatPaths(*args):
  """concatPaths(string left, string right) -> string"""
  return _osgDB.concatPaths(*args)

def getRealPath(*args):
  """getRealPath(string path) -> string"""
  return _osgDB.getRealPath(*args)
OSGDB_FIELD = _osgDB.OSGDB_FIELD
class Field(_object):
    """Proxy of C++ Field class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    MIN_CACHE_SIZE = _osgDB.Field_MIN_CACHE_SIZE
    def __init__(self, *args): 
        """
        __init__(self) -> Field
        __init__(self, Field field) -> Field
        """
        this = _osgDB.new_Field(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_Field
    __del__ = lambda self : None;
    def reset(*args):
        """reset(self)"""
        return _osgDB.Field_reset(*args)

    def addChar(*args):
        """addChar(self, char c)"""
        return _osgDB.Field_addChar(*args)

    def getNoCharacters(*args):
        """getNoCharacters(self) -> int"""
        return _osgDB.Field_getNoCharacters(*args)

    def setWithinQuotes(*args):
        """
        setWithinQuotes(self, bool withinQuotes=True)
        setWithinQuotes(self)
        """
        return _osgDB.Field_setWithinQuotes(*args)

    def getWithinQuotes(*args):
        """getWithinQuotes(self) -> bool"""
        return _osgDB.Field_getWithinQuotes(*args)

    def setNoNestedBrackets(*args):
        """setNoNestedBrackets(self, int no)"""
        return _osgDB.Field_setNoNestedBrackets(*args)

    def getNoNestedBrackets(*args):
        """getNoNestedBrackets(self) -> int"""
        return _osgDB.Field_getNoNestedBrackets(*args)

    OPEN_BRACKET = _osgDB.Field_OPEN_BRACKET
    CLOSE_BRACKET = _osgDB.Field_CLOSE_BRACKET
    STRING = _osgDB.Field_STRING
    WORD = _osgDB.Field_WORD
    REAL = _osgDB.Field_REAL
    INTEGER = _osgDB.Field_INTEGER
    BLANK = _osgDB.Field_BLANK
    UNINITIALISED = _osgDB.Field_UNINITIALISED
    def getFieldType(*args):
        """getFieldType(self) -> int"""
        return _osgDB.Field_getFieldType(*args)

    def isValid(*args):
        """isValid(self) -> bool"""
        return _osgDB.Field_isValid(*args)

    def isOpenBracket(*args):
        """isOpenBracket(self) -> bool"""
        return _osgDB.Field_isOpenBracket(*args)

    def isCloseBracket(*args):
        """isCloseBracket(self) -> bool"""
        return _osgDB.Field_isCloseBracket(*args)

    def isWord(*args):
        """isWord(self) -> bool"""
        return _osgDB.Field_isWord(*args)

    def matchWord(*args):
        """
        matchWord(self, char str) -> bool
        matchWord(self, char str, int noCharacters) -> bool
        """
        return _osgDB.Field_matchWord(*args)

    def isString(*args):
        """isString(self) -> bool"""
        return _osgDB.Field_isString(*args)

    def matchString(*args):
        """
        matchString(self, char str) -> bool
        matchString(self, char str, int noCharacters) -> bool
        """
        return _osgDB.Field_matchString(*args)

    def isQuotedString(*args):
        """isQuotedString(self) -> bool"""
        return _osgDB.Field_isQuotedString(*args)

    def getStr(*args):
        """getStr(self) -> char"""
        return _osgDB.Field_getStr(*args)

    def takeStr(*args):
        """takeStr(self) -> char"""
        return _osgDB.Field_takeStr(*args)

    def isInt(*args):
        """isInt(self) -> bool"""
        return _osgDB.Field_isInt(*args)

    def matchInt(*args):
        """matchInt(self, int i) -> bool"""
        return _osgDB.Field_matchInt(*args)

    def getInt(*args):
        """getInt(self, int i) -> bool"""
        return _osgDB.Field_getInt(*args)

    def isUInt(*args):
        """isUInt(self) -> bool"""
        return _osgDB.Field_isUInt(*args)

    def matchUInt(*args):
        """matchUInt(self, unsigned int i) -> bool"""
        return _osgDB.Field_matchUInt(*args)

    def getUInt(*args):
        """getUInt(self, unsigned int i) -> bool"""
        return _osgDB.Field_getUInt(*args)

    def isFloat(*args):
        """isFloat(self) -> bool"""
        return _osgDB.Field_isFloat(*args)

    def matchFloat(*args):
        """matchFloat(self, float f) -> bool"""
        return _osgDB.Field_matchFloat(*args)

    def getFloat(*args):
        """
        getFloat(self, float f) -> bool
        getFloat(self, double f) -> bool
        """
        return _osgDB.Field_getFloat(*args)

    def calculateFieldType(*args):
        """
        calculateFieldType(char str, bool withinQuotes=False) -> int
        calculateFieldType(char str) -> int
        """
        return _osgDB.Field_calculateFieldType(*args)

    if _newclass:calculateFieldType = staticmethod(calculateFieldType)
    __swig_getmethods__["calculateFieldType"] = lambda x: calculateFieldType
Field_swigregister = _osgDB.Field_swigregister
Field_swigregister(Field)

def findFileInPath(*args):
  """
    findFileInPath(string filename, FilePathList filePath, CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> string
    findFileInPath(string filename, FilePathList filePath) -> string
    """
  return _osgDB.findFileInPath(*args)

def findFileInDirectory(*args):
  """
    findFileInDirectory(string fileName, string dirName, CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> string
    findFileInDirectory(string fileName, string dirName) -> string
    """
  return _osgDB.findFileInDirectory(*args)

def setDataFilePathList(*args):
  """
    setDataFilePathList(FilePathList filepath)
    setDataFilePathList(string paths)
    """
  return _osgDB.setDataFilePathList(*args)

def findDataFile(*args):
  """
    findDataFile(string filename, CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> string
    findDataFile(string filename) -> string
    findDataFile(string filename, osgDB::ReaderWriter::Options options, 
        CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> string
    findDataFile(string filename, osgDB::ReaderWriter::Options options) -> string
    """
  return _osgDB.findDataFile(*args)

def setLibraryFilePathList(*args):
  """
    setLibraryFilePathList(FilePathList filepaths)
    setLibraryFilePathList(string paths)
    """
  return _osgDB.setLibraryFilePathList(*args)

def findLibraryFile(*args):
  """
    findLibraryFile(string filename, CaseSensitivity caseSensitivity=CASE_SENSITIVE) -> string
    findLibraryFile(string filename) -> string
    """
  return _osgDB.findLibraryFile(*args)

def equalCaseInsensitive(*args):
  """
    equalCaseInsensitive(string lhs, string rhs) -> bool
    equalCaseInsensitive(string lhs, char rhs) -> bool
    """
  return _osgDB.equalCaseInsensitive(*args)

def Field_calculateFieldType(*args):
  """
    calculateFieldType(char str, bool withinQuotes=False) -> int
    Field_calculateFieldType(char str) -> int
    """
  return _osgDB.Field_calculateFieldType(*args)

OSGDB_DYNAMICLIBRARY = _osgDB.OSGDB_DYNAMICLIBRARY
class DynamicLibrary(osg.Referenced):
    """Proxy of C++ DynamicLibrary class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicLibrary, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicLibrary, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def loadLibrary(*args):
        """loadLibrary(string libraryName) -> DynamicLibrary"""
        return _osgDB.DynamicLibrary_loadLibrary(*args)

    if _newclass:loadLibrary = staticmethod(loadLibrary)
    __swig_getmethods__["loadLibrary"] = lambda x: loadLibrary
    def getName(*args):
        """getName(self) -> string"""
        return _osgDB.DynamicLibrary_getName(*args)

    def getFullName(*args):
        """getFullName(self) -> string"""
        return _osgDB.DynamicLibrary_getFullName(*args)

    def getHandle(*args):
        """getHandle(self) -> HANDLE"""
        return _osgDB.DynamicLibrary_getHandle(*args)

    def getProcAddress(*args):
        """getProcAddress(self, string procName) -> PROC_ADDRESS"""
        return _osgDB.DynamicLibrary_getProcAddress(*args)

DynamicLibrary_swigregister = _osgDB.DynamicLibrary_swigregister
DynamicLibrary_swigregister(DynamicLibrary)

def DynamicLibrary_loadLibrary(*args):
  """DynamicLibrary_loadLibrary(string libraryName) -> DynamicLibrary"""
  return _osgDB.DynamicLibrary_loadLibrary(*args)

OSGDB_DATABASEPAGER = _osgDB.OSGDB_DATABASEPAGER
class DatabasePager(_object):
    """Proxy of C++ DatabasePager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabasePager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatabasePager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DatabasePager
        __init__(self, DatabasePager rhs) -> DatabasePager
        """
        this = _osgDB.new_DatabasePager(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> DatabasePager"""
        return _osgDB.DatabasePager_clone(*args)

    def prototype(*args):
        """prototype() -> osg::ref_ptr<(osgDB::DatabasePager)>"""
        return _osgDB.DatabasePager_prototype(*args)

    if _newclass:prototype = staticmethod(prototype)
    __swig_getmethods__["prototype"] = lambda x: prototype
    def create(*args):
        """create() -> DatabasePager"""
        return _osgDB.DatabasePager_create(*args)

    if _newclass:create = staticmethod(create)
    __swig_getmethods__["create"] = lambda x: create
    def requestNodeFile(*args):
        """
        requestNodeFile(self, string fileName, Group group, float priority, FrameStamp framestamp, 
            osg::ref_ptr<(osg::Referenced)> databaseRequest)
        requestNodeFile(self, string fileName, Group group, float priority, FrameStamp framestamp, 
            osg::ref_ptr<(osg::Referenced)> databaseRequest, 
            osgDB::ReaderWriter::Options loadOptions)
        """
        return _osgDB.DatabasePager_requestNodeFile(*args)

    def setSchedulePriority(*args):
        """setSchedulePriority(self, OpenThreads::Thread::ThreadPriority priority) -> int"""
        return _osgDB.DatabasePager_setSchedulePriority(*args)

    def cancel(*args):
        """cancel(self) -> int"""
        return _osgDB.DatabasePager_cancel(*args)

    def isRunning(*args):
        """isRunning(self) -> bool"""
        return _osgDB.DatabasePager_isRunning(*args)

    def clear(*args):
        """clear(self)"""
        return _osgDB.DatabasePager_clear(*args)

    def setDatabasePagerThreadPause(*args):
        """setDatabasePagerThreadPause(self, bool pause)"""
        return _osgDB.DatabasePager_setDatabasePagerThreadPause(*args)

    def getDatabasePagerThreadPause(*args):
        """getDatabasePagerThreadPause(self) -> bool"""
        return _osgDB.DatabasePager_getDatabasePagerThreadPause(*args)

    def setAcceptNewDatabaseRequests(*args):
        """setAcceptNewDatabaseRequests(self, bool acceptNewRequests)"""
        return _osgDB.DatabasePager_setAcceptNewDatabaseRequests(*args)

    def getAcceptNewDatabaseRequests(*args):
        """getAcceptNewDatabaseRequests(self) -> bool"""
        return _osgDB.DatabasePager_getAcceptNewDatabaseRequests(*args)

    def getNumFramesActive(*args):
        """getNumFramesActive(self) -> int"""
        return _osgDB.DatabasePager_getNumFramesActive(*args)

    def signalBeginFrame(*args):
        """signalBeginFrame(self, FrameStamp framestamp)"""
        return _osgDB.DatabasePager_signalBeginFrame(*args)

    def signalEndFrame(*args):
        """signalEndFrame(self)"""
        return _osgDB.DatabasePager_signalEndFrame(*args)

    def registerPagedLODs(*args):
        """registerPagedLODs(self, Node subgraph)"""
        return _osgDB.DatabasePager_registerPagedLODs(*args)

    def setDoPreCompile(*args):
        """setDoPreCompile(self, bool flag)"""
        return _osgDB.DatabasePager_setDoPreCompile(*args)

    def getDoPreCompile(*args):
        """getDoPreCompile(self) -> bool"""
        return _osgDB.DatabasePager_getDoPreCompile(*args)

    def setTargetFrameRate(*args):
        """setTargetFrameRate(self, double tfr)"""
        return _osgDB.DatabasePager_setTargetFrameRate(*args)

    def getTargetFrameRate(*args):
        """getTargetFrameRate(self) -> double"""
        return _osgDB.DatabasePager_getTargetFrameRate(*args)

    def setMinimumTimeAvailableForGLCompileAndDeletePerFrame(*args):
        """setMinimumTimeAvailableForGLCompileAndDeletePerFrame(self, double ta)"""
        return _osgDB.DatabasePager_setMinimumTimeAvailableForGLCompileAndDeletePerFrame(*args)

    def getMinimumTimeAvailableForGLCompileAndDeletePerFrame(*args):
        """getMinimumTimeAvailableForGLCompileAndDeletePerFrame(self) -> double"""
        return _osgDB.DatabasePager_getMinimumTimeAvailableForGLCompileAndDeletePerFrame(*args)

    def setMaximumNumOfObjectsToCompilePerFrame(*args):
        """setMaximumNumOfObjectsToCompilePerFrame(self, unsigned int num)"""
        return _osgDB.DatabasePager_setMaximumNumOfObjectsToCompilePerFrame(*args)

    def getMaximumNumOfObjectsToCompilePerFrame(*args):
        """getMaximumNumOfObjectsToCompilePerFrame(self) -> unsigned int"""
        return _osgDB.DatabasePager_getMaximumNumOfObjectsToCompilePerFrame(*args)

    def setExpiryDelay(*args):
        """setExpiryDelay(self, double expiryDelay)"""
        return _osgDB.DatabasePager_setExpiryDelay(*args)

    def getExpiryDelay(*args):
        """getExpiryDelay(self) -> double"""
        return _osgDB.DatabasePager_getExpiryDelay(*args)

    def setDeleteRemovedSubgraphsInDatabaseThread(*args):
        """setDeleteRemovedSubgraphsInDatabaseThread(self, bool flag)"""
        return _osgDB.DatabasePager_setDeleteRemovedSubgraphsInDatabaseThread(*args)

    def getDeleteRemovedSubgraphsInDatabaseThread(*args):
        """getDeleteRemovedSubgraphsInDatabaseThread(self) -> bool"""
        return _osgDB.DatabasePager_getDeleteRemovedSubgraphsInDatabaseThread(*args)

    DO_NOT_MODIFY_DRAWABLE_SETTINGS = _osgDB.DatabasePager_DO_NOT_MODIFY_DRAWABLE_SETTINGS
    USE_DISPLAY_LISTS = _osgDB.DatabasePager_USE_DISPLAY_LISTS
    USE_VERTEX_BUFFER_OBJECTS = _osgDB.DatabasePager_USE_VERTEX_BUFFER_OBJECTS
    USE_VERTEX_ARRAYS = _osgDB.DatabasePager_USE_VERTEX_ARRAYS
    def setDrawablePolicy(*args):
        """setDrawablePolicy(self, DrawablePolicy policy)"""
        return _osgDB.DatabasePager_setDrawablePolicy(*args)

    def getDrawablePolicy(*args):
        """getDrawablePolicy(self) -> int"""
        return _osgDB.DatabasePager_getDrawablePolicy(*args)

    def setUnrefImageDataAfterApplyPolicy(*args):
        """setUnrefImageDataAfterApplyPolicy(self, bool changeAutoUnRef, bool valueAutoUnRef)"""
        return _osgDB.DatabasePager_setUnrefImageDataAfterApplyPolicy(*args)

    def getUnrefImageDataAfterApplyPolicy(*args):
        """getUnrefImageDataAfterApplyPolicy(self, bool changeAutoUnRef, bool valueAutoUnRef)"""
        return _osgDB.DatabasePager_getUnrefImageDataAfterApplyPolicy(*args)

    def setMaxAnisotropyPolicy(*args):
        """setMaxAnisotropyPolicy(self, bool changeAnisotropy, float valueAnisotropy)"""
        return _osgDB.DatabasePager_setMaxAnisotropyPolicy(*args)

    def getMaxAnisotropyPolicy(*args):
        """getMaxAnisotropyPolicy(self, bool changeAnisotropy, float valueAnisotropy)"""
        return _osgDB.DatabasePager_getMaxAnisotropyPolicy(*args)

    def requiresUpdateSceneGraph(*args):
        """requiresUpdateSceneGraph(self) -> bool"""
        return _osgDB.DatabasePager_requiresUpdateSceneGraph(*args)

    def updateSceneGraph(*args):
        """updateSceneGraph(self, double currentFrameTime)"""
        return _osgDB.DatabasePager_updateSceneGraph(*args)

    def setCompileGLObjectsForContextID(*args):
        """setCompileGLObjectsForContextID(self, unsigned int contextID, bool on)"""
        return _osgDB.DatabasePager_setCompileGLObjectsForContextID(*args)

    def getCompileGLObjectsForContextID(*args):
        """getCompileGLObjectsForContextID(self, unsigned int contextID) -> bool"""
        return _osgDB.DatabasePager_getCompileGLObjectsForContextID(*args)

    def requiresExternalCompileGLObjects(*args):
        """requiresExternalCompileGLObjects(self, unsigned int contextID) -> bool"""
        return _osgDB.DatabasePager_requiresExternalCompileGLObjects(*args)

    def requiresCompileGLObjects(*args):
        """requiresCompileGLObjects(self) -> bool"""
        return _osgDB.DatabasePager_requiresCompileGLObjects(*args)

    def compileGLObjects(*args):
        """compileGLObjects(self, State state, double availableTime)"""
        return _osgDB.DatabasePager_compileGLObjects(*args)

    def compileAllGLObjects(*args):
        """compileAllGLObjects(self, State state)"""
        return _osgDB.DatabasePager_compileAllGLObjects(*args)

    def getFileRequestListSize(*args):
        """getFileRequestListSize(self) -> unsigned int"""
        return _osgDB.DatabasePager_getFileRequestListSize(*args)

    def getDataToCompileListSize(*args):
        """getDataToCompileListSize(self) -> unsigned int"""
        return _osgDB.DatabasePager_getDataToCompileListSize(*args)

    def getMinimumTimeToMergeTile(*args):
        """getMinimumTimeToMergeTile(self) -> double"""
        return _osgDB.DatabasePager_getMinimumTimeToMergeTile(*args)

    def getMaximumTimeToMergeTile(*args):
        """getMaximumTimeToMergeTile(self) -> double"""
        return _osgDB.DatabasePager_getMaximumTimeToMergeTile(*args)

    def getAverageTimeToMergeTiles(*args):
        """getAverageTimeToMergeTiles(self) -> double"""
        return _osgDB.DatabasePager_getAverageTimeToMergeTiles(*args)

    def resetStats(*args):
        """resetStats(self)"""
        return _osgDB.DatabasePager_resetStats(*args)

DatabasePager_swigregister = _osgDB.DatabasePager_swigregister
DatabasePager_swigregister(DatabasePager)

def DatabasePager_prototype(*args):
  """DatabasePager_prototype() -> osg::ref_ptr<(osgDB::DatabasePager)>"""
  return _osgDB.DatabasePager_prototype(*args)

def DatabasePager_create(*args):
  """DatabasePager_create() -> DatabasePager"""
  return _osgDB.DatabasePager_create(*args)

OSGDB_ARCHIVE = _osgDB.OSGDB_ARCHIVE
class Archive(_object):
    """Proxy of C++ Archive class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Archive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Archive, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgDB.delete_Archive
    __del__ = lambda self : None;
    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgDB.Archive_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgDB.Archive_className(*args)

    def acceptsExtension(*args):
        """acceptsExtension(self, string ?) -> bool"""
        return _osgDB.Archive_acceptsExtension(*args)

    def close(*args):
        """close(self)"""
        return _osgDB.Archive_close(*args)

    def fileExists(*args):
        """fileExists(self, string filename) -> bool"""
        return _osgDB.Archive_fileExists(*args)

    def getMasterFileName(*args):
        """getMasterFileName(self) -> string"""
        return _osgDB.Archive_getMasterFileName(*args)

    def getFileNames(*args):
        """getFileNames(self, FileNameList fileNameList) -> bool"""
        return _osgDB.Archive_getFileNames(*args)

Archive_swigregister = _osgDB.Archive_swigregister
Archive_swigregister(Archive)

OSGDB_DOTOSGWRAPPER = _osgDB.OSGDB_DOTOSGWRAPPER
class DotOsgWrapper(osg.Referenced):
    """Proxy of C++ DotOsgWrapper class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotOsgWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DotOsgWrapper, name)
    __repr__ = _swig_repr
    READ_AND_WRITE = _osgDB.DotOsgWrapper_READ_AND_WRITE
    READ_ONLY = _osgDB.DotOsgWrapper_READ_ONLY
    def __init__(self, *args): 
        """
        __init__(self, Object proto, string name, string associates, ReadFunc readFunc, 
            WriteFunc writeFunc, ReadWriteMode readWriteMode=READ_AND_WRITE) -> DotOsgWrapper
        __init__(self, Object proto, string name, string associates, ReadFunc readFunc, 
            WriteFunc writeFunc) -> DotOsgWrapper
        """
        this = _osgDB.new_DotOsgWrapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPrototype(*args):
        """getPrototype(self) -> Object"""
        return _osgDB.DotOsgWrapper_getPrototype(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _osgDB.DotOsgWrapper_getName(*args)

    def getAssociates(*args):
        """getAssociates(self) -> Associates"""
        return _osgDB.DotOsgWrapper_getAssociates(*args)

    def getReadFunc(*args):
        """getReadFunc(self) -> ReadFunc"""
        return _osgDB.DotOsgWrapper_getReadFunc(*args)

    def getWriteFunc(*args):
        """getWriteFunc(self) -> WriteFunc"""
        return _osgDB.DotOsgWrapper_getWriteFunc(*args)

    def getReadWriteMode(*args):
        """getReadWriteMode(self) -> int"""
        return _osgDB.DotOsgWrapper_getReadWriteMode(*args)

DotOsgWrapper_swigregister = _osgDB.DotOsgWrapper_swigregister
DotOsgWrapper_swigregister(DotOsgWrapper)

def openArchive(*args):
  """
    openArchive(string filename, ArchiveStatus status, unsigned int indexBlockSizeHint=4096) -> Archive
    openArchive(string filename, ArchiveStatus status) -> Archive
    openArchive(string filename, ArchiveStatus status, unsigned int indexBlockSizeHint, 
        osgDB::ReaderWriter::Options options) -> Archive
    """
  return _osgDB.openArchive(*args)

OSGDB_REGISTRY = _osgDB.OSGDB_REGISTRY
class basic_type_wrapper(_object):
    """Proxy of C++ basic_type_wrapper class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_type_wrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_type_wrapper, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgDB.delete_basic_type_wrapper
    __del__ = lambda self : None;
    def matches(*args):
        """matches(self, Object proto) -> bool"""
        return _osgDB.basic_type_wrapper_matches(*args)

basic_type_wrapper_swigregister = _osgDB.basic_type_wrapper_swigregister
basic_type_wrapper_swigregister(basic_type_wrapper)

class Registry(osg.Referenced):
    """Proxy of C++ Registry class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Registry, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Registry, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def instance(*args):
        """
        instance(bool erase=False) -> Registry
        instance() -> Registry
        """
        return _osgDB.Registry_instance(*args)

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def readCommandLine(*args):
        """readCommandLine(self, ArgumentParser commandLine)"""
        return _osgDB.Registry_readCommandLine(*args)

    def addFileExtensionAlias(*args):
        """addFileExtensionAlias(self, string mapExt, string toExt)"""
        return _osgDB.Registry_addFileExtensionAlias(*args)

    def readPluginAliasConfigurationFile(*args):
        """readPluginAliasConfigurationFile(self, string file) -> bool"""
        return _osgDB.Registry_readPluginAliasConfigurationFile(*args)

    def addDotOsgWrapper(*args):
        """addDotOsgWrapper(self, DotOsgWrapper wrapper)"""
        return _osgDB.Registry_addDotOsgWrapper(*args)

    def removeDotOsgWrapper(*args):
        """removeDotOsgWrapper(self, DotOsgWrapper wrapper)"""
        return _osgDB.Registry_removeDotOsgWrapper(*args)

    def addReaderWriter(*args):
        """addReaderWriter(self,  rw)"""
        return _osgDB.Registry_addReaderWriter(*args)

    def removeReaderWriter(*args):
        """removeReaderWriter(self,  rw)"""
        return _osgDB.Registry_removeReaderWriter(*args)

    def createLibraryNameForFile(*args):
        """createLibraryNameForFile(self, string fileName) -> string"""
        return _osgDB.Registry_createLibraryNameForFile(*args)

    def createLibraryNameForExtension(*args):
        """createLibraryNameForExtension(self, string ext) -> string"""
        return _osgDB.Registry_createLibraryNameForExtension(*args)

    def createLibraryNameForNodeKit(*args):
        """createLibraryNameForNodeKit(self, string name) -> string"""
        return _osgDB.Registry_createLibraryNameForNodeKit(*args)

    def loadLibrary(*args):
        """loadLibrary(self, string fileName) -> bool"""
        return _osgDB.Registry_loadLibrary(*args)

    def closeLibrary(*args):
        """closeLibrary(self, string fileName) -> bool"""
        return _osgDB.Registry_closeLibrary(*args)

    def closeAllLibraries(*args):
        """closeAllLibraries(self)"""
        return _osgDB.Registry_closeAllLibraries(*args)

    def getReaderWriterForExtension(*args):
        """getReaderWriterForExtension(self, string ext)"""
        return _osgDB.Registry_getReaderWriterForExtension(*args)

    def getReaderWriterList(*args):
        """
        getReaderWriterList(self) -> ReaderWriterList
        getReaderWriterList(self) -> ReaderWriterList
        """
        return _osgDB.Registry_getReaderWriterList(*args)

    def readObjectOfType(*args):
        """
        readObjectOfType(self, Object compObj, Input fr) -> Object
        readObjectOfType(self, basic_type_wrapper btw, Input fr) -> Object
        """
        return _osgDB.Registry_readObjectOfType(*args)

    def readDrawable(*args):
        """readDrawable(self, Input fr) -> Drawable"""
        return _osgDB.Registry_readDrawable(*args)

    def readUniform(*args):
        """readUniform(self, Input fr) -> Uniform"""
        return _osgDB.Registry_readUniform(*args)

    def readStateAttribute(*args):
        """readStateAttribute(self, Input fr) -> StateAttribute"""
        return _osgDB.Registry_readStateAttribute(*args)

    def openArchive(*args):
        """
        openArchive(self, string fileName, ArchiveStatus status, unsigned int indexBlockSizeHint, 
            osgDB::ReaderWriter::Options options) -> ReadResult
        """
        return _osgDB.Registry_openArchive(*args)

    def openArchiveImplementation(*args):
        """
        openArchiveImplementation(self, string fileName, ArchiveStatus status, unsigned int indexBlockSizeHint, 
            osgDB::ReaderWriter::Options options) -> ReadResult
        """
        return _osgDB.Registry_openArchiveImplementation(*args)

    def readObject(*args):
        """
        readObject(self, Input fr) -> Object
        readObject(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult
        """
        return _osgDB.Registry_readObject(*args)

    def readObjectImplementation(*args):
        """readObjectImplementation(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult"""
        return _osgDB.Registry_readObjectImplementation(*args)

    def readImage(*args):
        """
        readImage(self, Input fr) -> Image
        readImage(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult
        """
        return _osgDB.Registry_readImage(*args)

    def readImageImplementation(*args):
        """readImageImplementation(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult"""
        return _osgDB.Registry_readImageImplementation(*args)

    def readHeightField(*args):
        """readHeightField(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult"""
        return _osgDB.Registry_readHeightField(*args)

    def readHeightFieldImplementation(*args):
        """readHeightFieldImplementation(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult"""
        return _osgDB.Registry_readHeightFieldImplementation(*args)

    def readNode(*args):
        """
        readNode(self, Input fr) -> Node
        readNode(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult
        """
        return _osgDB.Registry_readNode(*args)

    def readNodeImplementation(*args):
        """readNodeImplementation(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult"""
        return _osgDB.Registry_readNodeImplementation(*args)

    def readShader(*args):
        """
        readShader(self, Input fr) -> Shader
        readShader(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult
        """
        return _osgDB.Registry_readShader(*args)

    def readShaderImplementation(*args):
        """readShaderImplementation(self, string fileName, osgDB::ReaderWriter::Options options) -> ReadResult"""
        return _osgDB.Registry_readShaderImplementation(*args)

    def writeObject(*args):
        """
        writeObject(self, Object obj, Output fw) -> bool
        writeObject(self, Object obj, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult
        """
        return _osgDB.Registry_writeObject(*args)

    def writeObjectImplementation(*args):
        """writeObjectImplementation(self, Object obj, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult"""
        return _osgDB.Registry_writeObjectImplementation(*args)

    def writeImage(*args):
        """writeImage(self, Image obj, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult"""
        return _osgDB.Registry_writeImage(*args)

    def writeImageImplementation(*args):
        """writeImageImplementation(self, Image obj, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult"""
        return _osgDB.Registry_writeImageImplementation(*args)

    def writeHeightField(*args):
        """writeHeightField(self, HeightField obj, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult"""
        return _osgDB.Registry_writeHeightField(*args)

    def writeHeightFieldImplementation(*args):
        """writeHeightFieldImplementation(self, HeightField obj, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult"""
        return _osgDB.Registry_writeHeightFieldImplementation(*args)

    def writeNode(*args):
        """writeNode(self, Node node, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult"""
        return _osgDB.Registry_writeNode(*args)

    def writeNodeImplementation(*args):
        """writeNodeImplementation(self, Node node, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult"""
        return _osgDB.Registry_writeNodeImplementation(*args)

    def writeShader(*args):
        """writeShader(self, Shader obj, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult"""
        return _osgDB.Registry_writeShader(*args)

    def writeShaderImplementation(*args):
        """writeShaderImplementation(self, Shader obj, string fileName, osgDB::ReaderWriter::Options options) -> WriteResult"""
        return _osgDB.Registry_writeShaderImplementation(*args)

    def buildKdTreeIfRequired(*args):
        """buildKdTreeIfRequired(self, ReadResult result, osgDB::ReaderWriter::Options options)"""
        return _osgDB.Registry_buildKdTreeIfRequired(*args)

    def setBuildKdTreesHint(*args):
        """setBuildKdTreesHint(self, osgDB::ReaderWriter::Options::BuildKdTreesHint hint)"""
        return _osgDB.Registry_setBuildKdTreesHint(*args)

    def getBuildKdTreesHint(*args):
        """getBuildKdTreesHint(self) -> osgDB::ReaderWriter::Options::BuildKdTreesHint"""
        return _osgDB.Registry_getBuildKdTreesHint(*args)

    def setKdTreeBuilder(*args):
        """setKdTreeBuilder(self, osg::KdTreeBuilder builder)"""
        return _osgDB.Registry_setKdTreeBuilder(*args)

    def getKdTreeBuilder(*args):
        """getKdTreeBuilder(self) -> osg::KdTreeBuilder"""
        return _osgDB.Registry_getKdTreeBuilder(*args)

    def setAuthenticationMap(*args):
        """setAuthenticationMap(self, AuthenticationMap authenticationMap)"""
        return _osgDB.Registry_setAuthenticationMap(*args)

    def getAuthenticationMap(*args):
        """
        getAuthenticationMap(self) -> AuthenticationMap
        getAuthenticationMap(self) -> AuthenticationMap
        """
        return _osgDB.Registry_getAuthenticationMap(*args)

    def setCreateNodeFromImage(*args):
        """setCreateNodeFromImage(self, bool flag)"""
        return _osgDB.Registry_setCreateNodeFromImage(*args)

    def getCreateNodeFromImage(*args):
        """getCreateNodeFromImage(self) -> bool"""
        return _osgDB.Registry_getCreateNodeFromImage(*args)

    def setOptions(*args):
        """setOptions(self, osgDB::ReaderWriter::Options opt)"""
        return _osgDB.Registry_setOptions(*args)

    def getOptions(*args):
        """
        getOptions(self) -> osgDB::ReaderWriter::Options
        getOptions(self) -> osgDB::ReaderWriter::Options
        """
        return _osgDB.Registry_getOptions(*args)

    def initFilePathLists(*args):
        """initFilePathLists(self)"""
        return _osgDB.Registry_initFilePathLists(*args)

    def initDataFilePathList(*args):
        """initDataFilePathList(self)"""
        return _osgDB.Registry_initDataFilePathList(*args)

    def setDataFilePathList(*args):
        """
        setDataFilePathList(self, FilePathList filepath)
        setDataFilePathList(self, string paths)
        """
        return _osgDB.Registry_setDataFilePathList(*args)

    def getDataFilePathList(*args):
        """
        getDataFilePathList(self) -> FilePathList
        getDataFilePathList(self) -> FilePathList
        """
        return _osgDB.Registry_getDataFilePathList(*args)

    def initLibraryFilePathList(*args):
        """initLibraryFilePathList(self)"""
        return _osgDB.Registry_initLibraryFilePathList(*args)

    def setLibraryFilePathList(*args):
        """
        setLibraryFilePathList(self, FilePathList filepath)
        setLibraryFilePathList(self, string paths)
        """
        return _osgDB.Registry_setLibraryFilePathList(*args)

    def getLibraryFilePathList(*args):
        """
        getLibraryFilePathList(self) -> FilePathList
        getLibraryFilePathList(self) -> FilePathList
        """
        return _osgDB.Registry_getLibraryFilePathList(*args)

    def updateTimeStampOfObjectsInCacheWithExternalReferences(*args):
        """updateTimeStampOfObjectsInCacheWithExternalReferences(self, double currentTime)"""
        return _osgDB.Registry_updateTimeStampOfObjectsInCacheWithExternalReferences(*args)

    def removeExpiredObjectsInCache(*args):
        """removeExpiredObjectsInCache(self, double expiryTime)"""
        return _osgDB.Registry_removeExpiredObjectsInCache(*args)

    def clearObjectCache(*args):
        """clearObjectCache(self)"""
        return _osgDB.Registry_clearObjectCache(*args)

    def addEntryToObjectCache(*args):
        """
        addEntryToObjectCache(self, string filename, Object object, double timestamp=0.0)
        addEntryToObjectCache(self, string filename, Object object)
        """
        return _osgDB.Registry_addEntryToObjectCache(*args)

    def getFromObjectCache(*args):
        """getFromObjectCache(self, string fileName) -> Object"""
        return _osgDB.Registry_getFromObjectCache(*args)

    def addToArchiveCache(*args):
        """addToArchiveCache(self, string fileName, Archive archive)"""
        return _osgDB.Registry_addToArchiveCache(*args)

    def removeFromArchiveCache(*args):
        """removeFromArchiveCache(self, string fileName)"""
        return _osgDB.Registry_removeFromArchiveCache(*args)

    def getFromArchiveCache(*args):
        """getFromArchiveCache(self, string fileName) -> Archive"""
        return _osgDB.Registry_getFromArchiveCache(*args)

    def clearArchiveCache(*args):
        """clearArchiveCache(self)"""
        return _osgDB.Registry_clearArchiveCache(*args)

    def releaseGLObjects(*args):
        """
        releaseGLObjects(self, State state=0)
        releaseGLObjects(self)
        """
        return _osgDB.Registry_releaseGLObjects(*args)

    def getLibrary(*args):
        """getLibrary(self, string fileName) -> DynamicLibrary"""
        return _osgDB.Registry_getLibrary(*args)

    def setDatabasePager(*args):
        """setDatabasePager(self, DatabasePager databasePager)"""
        return _osgDB.Registry_setDatabasePager(*args)

    def getOrCreateDatabasePager(*args):
        """getOrCreateDatabasePager(self) -> DatabasePager"""
        return _osgDB.Registry_getOrCreateDatabasePager(*args)

    def getDatabasePager(*args):
        """getDatabasePager(self) -> DatabasePager"""
        return _osgDB.Registry_getDatabasePager(*args)

    def setSharedStateManager(*args):
        """setSharedStateManager(self, SharedStateManager SharedStateManager)"""
        return _osgDB.Registry_setSharedStateManager(*args)

    def getOrCreateSharedStateManager(*args):
        """getOrCreateSharedStateManager(self) -> SharedStateManager"""
        return _osgDB.Registry_getOrCreateSharedStateManager(*args)

    def getSharedStateManager(*args):
        """getSharedStateManager(self) -> SharedStateManager"""
        return _osgDB.Registry_getSharedStateManager(*args)

    def addArchiveExtension(*args):
        """addArchiveExtension(self, string ext)"""
        return _osgDB.Registry_addArchiveExtension(*args)

Registry_swigregister = _osgDB.Registry_swigregister
Registry_swigregister(Registry)

def Registry_instance(*args):
  """
    instance(bool erase=False) -> Registry
    Registry_instance() -> Registry
    """
  return _osgDB.Registry_instance(*args)


def readCommandLine(*args):
  """readCommandLine(ArgumentParser parser)"""
  return _osgDB.readCommandLine(*args)
class RegisterDotOsgWrapperProxy(_object):
    """Proxy of C++ RegisterDotOsgWrapperProxy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisterDotOsgWrapperProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisterDotOsgWrapperProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Object proto, string name, string associates, ReadFunc readFunc, 
            WriteFunc writeFunc, ReadWriteMode readWriteMode=READ_AND_WRITE) -> RegisterDotOsgWrapperProxy
        __init__(self, Object proto, string name, string associates, ReadFunc readFunc, 
            WriteFunc writeFunc) -> RegisterDotOsgWrapperProxy
        """
        this = _osgDB.new_RegisterDotOsgWrapperProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_RegisterDotOsgWrapperProxy
    __del__ = lambda self : None;
RegisterDotOsgWrapperProxy_swigregister = _osgDB.RegisterDotOsgWrapperProxy_swigregister
RegisterDotOsgWrapperProxy_swigregister(RegisterDotOsgWrapperProxy)

class PluginFunctionProxy(_object):
    """Proxy of C++ PluginFunctionProxy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginFunctionProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PluginFunctionProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CPluginFunction function) -> PluginFunctionProxy"""
        this = _osgDB.new_PluginFunctionProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgDB.delete_PluginFunctionProxy
    __del__ = lambda self : None;
PluginFunctionProxy_swigregister = _osgDB.PluginFunctionProxy_swigregister
PluginFunctionProxy_swigregister(PluginFunctionProxy)



