# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _osgSim
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgSim.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _osgSim.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _osgSim.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _osgSim.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _osgSim.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _osgSim.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _osgSim.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _osgSim.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _osgSim.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgSim.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _osgSim.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _osgSim.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgSim.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgSim.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgSim.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _osgSim.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _osgSim.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import osg
OSGSIM_BLINKSQUENCE = _osgSim.OSGSIM_BLINKSQUENCE
class SequenceGroup(osg.Object):
    """Proxy of C++ SequenceGroup class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SequenceGroup
        __init__(self, SequenceGroup bs, CopyOp copyop=SHALLOW_COPY) -> SequenceGroup
        __init__(self, SequenceGroup bs) -> SequenceGroup
        __init__(self, double baseTime) -> SequenceGroup
        """
        this = _osgSim.new_SequenceGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.SequenceGroup_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.SequenceGroup_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.SequenceGroup_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.SequenceGroup_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.SequenceGroup_className(*args)

    __swig_setmethods__["_baseTime"] = _osgSim.SequenceGroup__baseTime_set
    __swig_getmethods__["_baseTime"] = _osgSim.SequenceGroup__baseTime_get
    if _newclass:_baseTime = _swig_property(_osgSim.SequenceGroup__baseTime_get, _osgSim.SequenceGroup__baseTime_set)
    __swig_destroy__ = _osgSim.delete_SequenceGroup
    __del__ = lambda self : None;
SequenceGroup_swigregister = _osgSim.SequenceGroup_swigregister
SequenceGroup_swigregister(SequenceGroup)

class BlinkSequence(osg.Object):
    """Proxy of C++ BlinkSequence class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlinkSequence, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlinkSequence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BlinkSequence
        __init__(self, BlinkSequence bs, CopyOp copyop=SHALLOW_COPY) -> BlinkSequence
        __init__(self, BlinkSequence bs) -> BlinkSequence
        """
        this = _osgSim.new_BlinkSequence(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.BlinkSequence_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.BlinkSequence_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.BlinkSequence_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.BlinkSequence_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.BlinkSequence_className(*args)

    def addPulse(*args):
        """addPulse(self, double length, Vec4 color)"""
        return _osgSim.BlinkSequence_addPulse(*args)

    def getNumPulses(*args):
        """getNumPulses(self) -> int"""
        return _osgSim.BlinkSequence_getNumPulses(*args)

    def getPulse(*args):
        """getPulse(self, unsigned int i, double length, Vec4 color)"""
        return _osgSim.BlinkSequence_getPulse(*args)

    def setPulse(*args):
        """setPulse(self, unsigned int i, double length, Vec4 color)"""
        return _osgSim.BlinkSequence_setPulse(*args)

    def getPulsePeriod(*args):
        """getPulsePeriod(self) -> double"""
        return _osgSim.BlinkSequence_getPulsePeriod(*args)

    def setSequenceGroup(*args):
        """setSequenceGroup(self, SequenceGroup sg)"""
        return _osgSim.BlinkSequence_setSequenceGroup(*args)

    def getSequenceGroup(*args):
        """
        getSequenceGroup(self) -> SequenceGroup
        getSequenceGroup(self) -> SequenceGroup
        """
        return _osgSim.BlinkSequence_getSequenceGroup(*args)

    def setPhaseShift(*args):
        """setPhaseShift(self, double ps)"""
        return _osgSim.BlinkSequence_setPhaseShift(*args)

    def getPhaseShift(*args):
        """getPhaseShift(self) -> double"""
        return _osgSim.BlinkSequence_getPhaseShift(*args)

    def localTime(*args):
        """localTime(self, double time) -> double"""
        return _osgSim.BlinkSequence_localTime(*args)

    def color(*args):
        """color(self, double time, double length) -> Vec4"""
        return _osgSim.BlinkSequence_color(*args)

    __swig_destroy__ = _osgSim.delete_BlinkSequence
    __del__ = lambda self : None;
BlinkSequence_swigregister = _osgSim.BlinkSequence_swigregister
BlinkSequence_swigregister(BlinkSequence)

OSGSIM_COLORRANGE = _osgSim.OSGSIM_COLORRANGE
class ColorRange(_object):
    """Proxy of C++ ColorRange class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, float min, float max) -> ColorRange
        __init__(self, float min, float max, std::vector<(osg::Vec4,std::allocator<(osg::Vec4)>)> colors) -> ColorRange
        """
        this = _osgSim.new_ColorRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def setColors(*args):
        """setColors(self, std::vector<(osg::Vec4,std::allocator<(osg::Vec4)>)> colors)"""
        return _osgSim.ColorRange_setColors(*args)

    def getColor(*args):
        """getColor(self, float scalar) -> Vec4"""
        return _osgSim.ColorRange_getColor(*args)

    __swig_destroy__ = _osgSim.delete_ColorRange
    __del__ = lambda self : None;
ColorRange_swigregister = _osgSim.ColorRange_swigregister
ColorRange_swigregister(ColorRange)

OSGSIM_DOFTRANSFORM = _osgSim.OSGSIM_DOFTRANSFORM
class DOFTransform(osg.Transform):
    """Proxy of C++ DOFTransform class"""
    __swig_setmethods__ = {}
    for _s in [osg.Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DOFTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DOFTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DOFTransform
        __init__(self, DOFTransform dof, CopyOp copyop=SHALLOW_COPY) -> DOFTransform
        __init__(self, DOFTransform dof) -> DOFTransform
        """
        this = _osgSim.new_DOFTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.DOFTransform_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.DOFTransform_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.DOFTransform_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.DOFTransform_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.DOFTransform_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.DOFTransform_accept(*args)

    def traverse(*args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.DOFTransform_traverse(*args)

    def setMinHPR(*args):
        """setMinHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_setMinHPR(*args)

    def getMinHPR(*args):
        """getMinHPR(self) -> Vec3"""
        return _osgSim.DOFTransform_getMinHPR(*args)

    def setMaxHPR(*args):
        """setMaxHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_setMaxHPR(*args)

    def getMaxHPR(*args):
        """getMaxHPR(self) -> Vec3"""
        return _osgSim.DOFTransform_getMaxHPR(*args)

    def setIncrementHPR(*args):
        """setIncrementHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_setIncrementHPR(*args)

    def getIncrementHPR(*args):
        """getIncrementHPR(self) -> Vec3"""
        return _osgSim.DOFTransform_getIncrementHPR(*args)

    def setCurrentHPR(*args):
        """setCurrentHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_setCurrentHPR(*args)

    def getCurrentHPR(*args):
        """getCurrentHPR(self) -> Vec3"""
        return _osgSim.DOFTransform_getCurrentHPR(*args)

    def updateCurrentHPR(*args):
        """updateCurrentHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_updateCurrentHPR(*args)

    def setMinTranslate(*args):
        """setMinTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_setMinTranslate(*args)

    def getMinTranslate(*args):
        """getMinTranslate(self) -> Vec3"""
        return _osgSim.DOFTransform_getMinTranslate(*args)

    def setMaxTranslate(*args):
        """setMaxTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_setMaxTranslate(*args)

    def getMaxTranslate(*args):
        """getMaxTranslate(self) -> Vec3"""
        return _osgSim.DOFTransform_getMaxTranslate(*args)

    def setIncrementTranslate(*args):
        """setIncrementTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_setIncrementTranslate(*args)

    def getIncrementTranslate(*args):
        """getIncrementTranslate(self) -> Vec3"""
        return _osgSim.DOFTransform_getIncrementTranslate(*args)

    def setCurrentTranslate(*args):
        """setCurrentTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_setCurrentTranslate(*args)

    def getCurrentTranslate(*args):
        """getCurrentTranslate(self) -> Vec3"""
        return _osgSim.DOFTransform_getCurrentTranslate(*args)

    def updateCurrentTranslate(*args):
        """updateCurrentTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_updateCurrentTranslate(*args)

    def setMinScale(*args):
        """setMinScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_setMinScale(*args)

    def getMinScale(*args):
        """getMinScale(self) -> Vec3"""
        return _osgSim.DOFTransform_getMinScale(*args)

    def setMaxScale(*args):
        """setMaxScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_setMaxScale(*args)

    def getMaxScale(*args):
        """getMaxScale(self) -> Vec3"""
        return _osgSim.DOFTransform_getMaxScale(*args)

    def setIncrementScale(*args):
        """setIncrementScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_setIncrementScale(*args)

    def getIncrementScale(*args):
        """getIncrementScale(self) -> Vec3"""
        return _osgSim.DOFTransform_getIncrementScale(*args)

    def setCurrentScale(*args):
        """setCurrentScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_setCurrentScale(*args)

    def getCurrentScale(*args):
        """getCurrentScale(self) -> Vec3"""
        return _osgSim.DOFTransform_getCurrentScale(*args)

    def updateCurrentScale(*args):
        """updateCurrentScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_updateCurrentScale(*args)

    def setPutMatrix(*args):
        """setPutMatrix(self, Matrix put)"""
        return _osgSim.DOFTransform_setPutMatrix(*args)

    def getPutMatrix(*args):
        """getPutMatrix(self) -> Matrix"""
        return _osgSim.DOFTransform_getPutMatrix(*args)

    def setInversePutMatrix(*args):
        """setInversePutMatrix(self, Matrix inversePut)"""
        return _osgSim.DOFTransform_setInversePutMatrix(*args)

    def getInversePutMatrix(*args):
        """getInversePutMatrix(self) -> Matrix"""
        return _osgSim.DOFTransform_getInversePutMatrix(*args)

    def setLimitationFlags(*args):
        """setLimitationFlags(self, unsigned long flags)"""
        return _osgSim.DOFTransform_setLimitationFlags(*args)

    def getLimitationFlags(*args):
        """getLimitationFlags(self) -> unsigned long"""
        return _osgSim.DOFTransform_getLimitationFlags(*args)

    PRH = _osgSim.DOFTransform_PRH
    PHR = _osgSim.DOFTransform_PHR
    HPR = _osgSim.DOFTransform_HPR
    HRP = _osgSim.DOFTransform_HRP
    RPH = _osgSim.DOFTransform_RPH
    RHP = _osgSim.DOFTransform_RHP
    def setHPRMultOrder(*args):
        """setHPRMultOrder(self, MultOrder order)"""
        return _osgSim.DOFTransform_setHPRMultOrder(*args)

    def getHPRMultOrder(*args):
        """getHPRMultOrder(self) -> MultOrder"""
        return _osgSim.DOFTransform_getHPRMultOrder(*args)

    def setAnimationOn(*args):
        """setAnimationOn(self, bool do_animate)"""
        return _osgSim.DOFTransform_setAnimationOn(*args)

    def getAnimationOn(*args):
        """getAnimationOn(self) -> bool"""
        return _osgSim.DOFTransform_getAnimationOn(*args)

    def animate(*args):
        """animate(self, float deltaTime)"""
        return _osgSim.DOFTransform_animate(*args)

    def computeLocalToWorldMatrix(*args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osgSim.DOFTransform_computeLocalToWorldMatrix(*args)

    def computeWorldToLocalMatrix(*args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osgSim.DOFTransform_computeWorldToLocalMatrix(*args)

DOFTransform_swigregister = _osgSim.DOFTransform_swigregister
DOFTransform_swigregister(DOFTransform)

OSGSIM_ELEVATIONSLICE = _osgSim.OSGSIM_ELEVATIONSLICE
class ElevationSlice(_object):
    """Proxy of C++ ElevationSlice class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElevationSlice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElevationSlice, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ElevationSlice"""
        this = _osgSim.new_ElevationSlice(*args)
        try: self.this.append(this)
        except: self.this = this
    def setStartPoint(*args):
        """setStartPoint(self, Vec3d startPoint)"""
        return _osgSim.ElevationSlice_setStartPoint(*args)

    def getStartPoint(*args):
        """getStartPoint(self) -> Vec3d"""
        return _osgSim.ElevationSlice_getStartPoint(*args)

    def setEndPoint(*args):
        """setEndPoint(self, Vec3d endPoint)"""
        return _osgSim.ElevationSlice_setEndPoint(*args)

    def getEndPoint(*args):
        """getEndPoint(self) -> Vec3d"""
        return _osgSim.ElevationSlice_getEndPoint(*args)

    def getIntersections(*args):
        """getIntersections(self) -> Vec3dList"""
        return _osgSim.ElevationSlice_getIntersections(*args)

    def getDistanceHeightIntersections(*args):
        """getDistanceHeightIntersections(self) -> DistanceHeightList"""
        return _osgSim.ElevationSlice_getDistanceHeightIntersections(*args)

    def computeIntersections(*args):
        """
        computeIntersections(self, Node scene, NodeMask traversalMask=0xffffffff)
        computeIntersections(self, Node scene)
        """
        return _osgSim.ElevationSlice_computeIntersections(*args)

    def computeElevationSlice(*args):
        """
        computeElevationSlice(Node scene, Vec3d startPoint, Vec3d endPoint, NodeMask traversalMask=0xffffffff) -> Vec3dList
        computeElevationSlice(Node scene, Vec3d startPoint, Vec3d endPoint) -> Vec3dList
        """
        return _osgSim.ElevationSlice_computeElevationSlice(*args)

    if _newclass:computeElevationSlice = staticmethod(computeElevationSlice)
    __swig_getmethods__["computeElevationSlice"] = lambda x: computeElevationSlice
    def clearDatabaseCache(*args):
        """clearDatabaseCache(self)"""
        return _osgSim.ElevationSlice_clearDatabaseCache(*args)

    def setDatabaseCacheReadCallback(*args):
        """setDatabaseCacheReadCallback(self, DatabaseCacheReadCallback dcrc)"""
        return _osgSim.ElevationSlice_setDatabaseCacheReadCallback(*args)

    def getDatabaseCacheReadCallback(*args):
        """getDatabaseCacheReadCallback(self) -> DatabaseCacheReadCallback"""
        return _osgSim.ElevationSlice_getDatabaseCacheReadCallback(*args)

    __swig_destroy__ = _osgSim.delete_ElevationSlice
    __del__ = lambda self : None;
ElevationSlice_swigregister = _osgSim.ElevationSlice_swigregister
ElevationSlice_swigregister(ElevationSlice)

def ElevationSlice_computeElevationSlice(*args):
  """
    computeElevationSlice(Node scene, Vec3d startPoint, Vec3d endPoint, NodeMask traversalMask=0xffffffff) -> Vec3dList
    ElevationSlice_computeElevationSlice(Node scene, Vec3d startPoint, Vec3d endPoint) -> Vec3dList
    """
  return _osgSim.ElevationSlice_computeElevationSlice(*args)

OSGSIM_EXPORT_ = _osgSim.OSGSIM_EXPORT_
NULL = _osgSim.NULL
OSGSIM_GEOGRAPHICLOCATION = _osgSim.OSGSIM_GEOGRAPHICLOCATION
class GeographicLocation(osg.Referenced):
    """Proxy of C++ GeographicLocation class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeographicLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeographicLocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GeographicLocation
        __init__(self, double lat, double lon) -> GeographicLocation
        """
        this = _osgSim.new_GeographicLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, GeographicLocation v) -> bool"""
        return _osgSim.GeographicLocation___eq__(*args)

    def __ne__(*args):
        """__ne__(self, GeographicLocation v) -> bool"""
        return _osgSim.GeographicLocation___ne__(*args)

    def __lt__(*args):
        """__lt__(self, GeographicLocation v) -> bool"""
        return _osgSim.GeographicLocation___lt__(*args)

    def ptr(*args):
        """
        ptr(self) -> double
        ptr(self) -> double
        """
        return _osgSim.GeographicLocation_ptr(*args)

    def set(*args):
        """set(self, double lat, double lon)"""
        return _osgSim.GeographicLocation_set(*args)

    def latitude(*args):
        """
        latitude(self) -> double
        latitude(self) -> double
        """
        return _osgSim.GeographicLocation_latitude(*args)

    def longitude(*args):
        """
        longitude(self) -> double
        longitude(self) -> double
        """
        return _osgSim.GeographicLocation_longitude(*args)

    def valid(*args):
        """valid(self) -> bool"""
        return _osgSim.GeographicLocation_valid(*args)

    def isNaN(*args):
        """isNaN(self) -> bool"""
        return _osgSim.GeographicLocation_isNaN(*args)

    def __add__(*args):
        """__add__(self, GeographicLocation rhs) -> GeographicLocation"""
        return _osgSim.GeographicLocation___add__(*args)

    def __sub__(*args):
        """__sub__(self, GeographicLocation rhs) -> GeographicLocation"""
        return _osgSim.GeographicLocation___sub__(*args)

    __swig_destroy__ = _osgSim.delete_GeographicLocation
    __del__ = lambda self : None;
GeographicLocation_swigregister = _osgSim.GeographicLocation_swigregister
GeographicLocation_swigregister(GeographicLocation)

OSGSIM_HEIGHTABOVETERRAIN = _osgSim.OSGSIM_HEIGHTABOVETERRAIN
class HeightAboveTerrain(_object):
    """Proxy of C++ HeightAboveTerrain class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeightAboveTerrain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeightAboveTerrain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> HeightAboveTerrain"""
        this = _osgSim.new_HeightAboveTerrain(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args):
        """clear(self)"""
        return _osgSim.HeightAboveTerrain_clear(*args)

    def addPoint(*args):
        """addPoint(self, Vec3d point) -> unsigned int"""
        return _osgSim.HeightAboveTerrain_addPoint(*args)

    def getNumPoints(*args):
        """getNumPoints(self) -> unsigned int"""
        return _osgSim.HeightAboveTerrain_getNumPoints(*args)

    def setPoint(*args):
        """setPoint(self, unsigned int i, Vec3d point)"""
        return _osgSim.HeightAboveTerrain_setPoint(*args)

    def getPoint(*args):
        """getPoint(self, unsigned int i) -> Vec3d"""
        return _osgSim.HeightAboveTerrain_getPoint(*args)

    def getHeightAboveTerrain(*args):
        """getHeightAboveTerrain(self, unsigned int i) -> double"""
        return _osgSim.HeightAboveTerrain_getHeightAboveTerrain(*args)

    def setLowestHeight(*args):
        """setLowestHeight(self, double lowestHeight)"""
        return _osgSim.HeightAboveTerrain_setLowestHeight(*args)

    def getLowestHeight(*args):
        """getLowestHeight(self) -> double"""
        return _osgSim.HeightAboveTerrain_getLowestHeight(*args)

    def computeIntersections(*args):
        """
        computeIntersections(self, Node scene, NodeMask traversalMask=0xffffffff)
        computeIntersections(self, Node scene)
        """
        return _osgSim.HeightAboveTerrain_computeIntersections(*args)

    def computeHeightAboveTerrain(*args):
        """
        computeHeightAboveTerrain(Node scene, Vec3d point, NodeMask traversalMask=0xffffffff) -> double
        computeHeightAboveTerrain(Node scene, Vec3d point) -> double
        """
        return _osgSim.HeightAboveTerrain_computeHeightAboveTerrain(*args)

    if _newclass:computeHeightAboveTerrain = staticmethod(computeHeightAboveTerrain)
    __swig_getmethods__["computeHeightAboveTerrain"] = lambda x: computeHeightAboveTerrain
    def clearDatabaseCache(*args):
        """clearDatabaseCache(self)"""
        return _osgSim.HeightAboveTerrain_clearDatabaseCache(*args)

    def setDatabaseCacheReadCallback(*args):
        """setDatabaseCacheReadCallback(self, DatabaseCacheReadCallback dcrc)"""
        return _osgSim.HeightAboveTerrain_setDatabaseCacheReadCallback(*args)

    def getDatabaseCacheReadCallback(*args):
        """getDatabaseCacheReadCallback(self) -> DatabaseCacheReadCallback"""
        return _osgSim.HeightAboveTerrain_getDatabaseCacheReadCallback(*args)

    __swig_destroy__ = _osgSim.delete_HeightAboveTerrain
    __del__ = lambda self : None;
HeightAboveTerrain_swigregister = _osgSim.HeightAboveTerrain_swigregister
HeightAboveTerrain_swigregister(HeightAboveTerrain)

def HeightAboveTerrain_computeHeightAboveTerrain(*args):
  """
    computeHeightAboveTerrain(Node scene, Vec3d point, NodeMask traversalMask=0xffffffff) -> double
    HeightAboveTerrain_computeHeightAboveTerrain(Node scene, Vec3d point) -> double
    """
  return _osgSim.HeightAboveTerrain_computeHeightAboveTerrain(*args)

OSGSIM_IMPOSTOR = _osgSim.OSGSIM_IMPOSTOR
class Impostor(osg.LOD):
    """Proxy of C++ Impostor class"""
    __swig_setmethods__ = {}
    for _s in [osg.LOD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Impostor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.LOD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Impostor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Impostor
        __init__(self, Impostor es, CopyOp copyop=SHALLOW_COPY) -> Impostor
        __init__(self, Impostor es) -> Impostor
        """
        this = _osgSim.new_Impostor(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.Impostor_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.Impostor_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.Impostor_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.Impostor_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.Impostor_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.Impostor_accept(*args)

    def traverse(*args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.Impostor_traverse(*args)

    def setImpostorThreshold(*args):
        """setImpostorThreshold(self, float distance)"""
        return _osgSim.Impostor_setImpostorThreshold(*args)

    def getImpostorThreshold(*args):
        """getImpostorThreshold(self) -> float"""
        return _osgSim.Impostor_getImpostorThreshold(*args)

    def setImpostorThresholdToBound(*args):
        """
        setImpostorThresholdToBound(self, float ratio=1.0)
        setImpostorThresholdToBound(self)
        """
        return _osgSim.Impostor_setImpostorThresholdToBound(*args)

    def findBestImpostorSprite(*args):
        """findBestImpostorSprite(self, unsigned int contextID, Vec3 currLocalEyePoint) -> ImpostorSprite"""
        return _osgSim.Impostor_findBestImpostorSprite(*args)

    def addImpostorSprite(*args):
        """addImpostorSprite(self, unsigned int contextID, ImpostorSprite is)"""
        return _osgSim.Impostor_addImpostorSprite(*args)

    def getImpostorSpriteList(*args):
        """
        getImpostorSpriteList(self, unsigned int contexID) -> ImpostorSpriteList
        getImpostorSpriteList(self, unsigned int contexID) -> ImpostorSpriteList
        """
        return _osgSim.Impostor_getImpostorSpriteList(*args)

    def computeBound(*args):
        """computeBound(self) -> BoundingSphere"""
        return _osgSim.Impostor_computeBound(*args)

Impostor_swigregister = _osgSim.Impostor_swigregister
Impostor_swigregister(Impostor)

OSG_ImpostorSprite = _osgSim.OSG_ImpostorSprite
class ImpostorSprite(osg.Drawable):
    """Proxy of C++ ImpostorSprite class"""
    __swig_setmethods__ = {}
    for _s in [osg.Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpostorSprite, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpostorSprite, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ImpostorSprite"""
        this = _osgSim.new_ImpostorSprite(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.ImpostorSprite_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp ?) -> Object"""
        return _osgSim.ImpostorSprite_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.ImpostorSprite_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.ImpostorSprite_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.ImpostorSprite_className(*args)

    def setParent(*args):
        """setParent(self, Impostor parent)"""
        return _osgSim.ImpostorSprite_setParent(*args)

    def getParent(*args):
        """
        getParent(self) -> Impostor
        getParent(self) -> Impostor
        """
        return _osgSim.ImpostorSprite_getParent(*args)

    def setStoredLocalEyePoint(*args):
        """setStoredLocalEyePoint(self, Vec3 v)"""
        return _osgSim.ImpostorSprite_setStoredLocalEyePoint(*args)

    def getStoredLocalEyePoint(*args):
        """getStoredLocalEyePoint(self) -> Vec3"""
        return _osgSim.ImpostorSprite_getStoredLocalEyePoint(*args)

    def setLastFrameUsed(*args):
        """setLastFrameUsed(self, int frameNumber)"""
        return _osgSim.ImpostorSprite_setLastFrameUsed(*args)

    def getLastFrameUsed(*args):
        """getLastFrameUsed(self) -> int"""
        return _osgSim.ImpostorSprite_getLastFrameUsed(*args)

    def getCoords(*args):
        """
        getCoords(self) -> Vec3
        getCoords(self) -> Vec3
        """
        return _osgSim.ImpostorSprite_getCoords(*args)

    def getTexCoords(*args):
        """
        getTexCoords(self) -> Vec2
        getTexCoords(self) -> Vec2
        """
        return _osgSim.ImpostorSprite_getTexCoords(*args)

    def getControlCoords(*args):
        """
        getControlCoords(self) -> Vec3
        getControlCoords(self) -> Vec3
        """
        return _osgSim.ImpostorSprite_getControlCoords(*args)

    def calcPixelError(*args):
        """calcPixelError(self, Matrix MVPW) -> float"""
        return _osgSim.ImpostorSprite_calcPixelError(*args)

    def setTexture(*args):
        """setTexture(self, Texture2D tex, int s, int t)"""
        return _osgSim.ImpostorSprite_setTexture(*args)

    def getTexture(*args):
        """
        getTexture(self) -> Texture2D
        getTexture(self) -> Texture2D
        """
        return _osgSim.ImpostorSprite_getTexture(*args)

    def s(*args):
        """s(self) -> int"""
        return _osgSim.ImpostorSprite_s(*args)

    def t(*args):
        """t(self) -> int"""
        return _osgSim.ImpostorSprite_t(*args)

    def drawImplementation(*args):
        """drawImplementation(self, RenderInfo renderInfo)"""
        return _osgSim.ImpostorSprite_drawImplementation(*args)

    __swig_setmethods__["_color"] = _osgSim.ImpostorSprite__color_set
    __swig_getmethods__["_color"] = _osgSim.ImpostorSprite__color_get
    if _newclass:_color = _swig_property(_osgSim.ImpostorSprite__color_get, _osgSim.ImpostorSprite__color_set)
    def computeBound(*args):
        """computeBound(self) -> BoundingBox"""
        return _osgSim.ImpostorSprite_computeBound(*args)

    def setCamera(*args):
        """setCamera(self, Camera camera)"""
        return _osgSim.ImpostorSprite_setCamera(*args)

    def getCamera(*args):
        """
        getCamera(self) -> Camera
        getCamera(self) -> Camera
        """
        return _osgSim.ImpostorSprite_getCamera(*args)

ImpostorSprite_swigregister = _osgSim.ImpostorSprite_swigregister
ImpostorSprite_swigregister(ImpostorSprite)

class ImpostorSpriteManager(osg.Referenced):
    """Proxy of C++ ImpostorSpriteManager class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpostorSpriteManager, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpostorSpriteManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ImpostorSpriteManager"""
        this = _osgSim.new_ImpostorSpriteManager(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args):
        """empty(self) -> bool"""
        return _osgSim.ImpostorSpriteManager_empty(*args)

    def first(*args):
        """first(self) -> ImpostorSprite"""
        return _osgSim.ImpostorSpriteManager_first(*args)

    def last(*args):
        """last(self) -> ImpostorSprite"""
        return _osgSim.ImpostorSpriteManager_last(*args)

    def push_back(*args):
        """push_back(self, ImpostorSprite is)"""
        return _osgSim.ImpostorSpriteManager_push_back(*args)

    def remove(*args):
        """remove(self, ImpostorSprite is)"""
        return _osgSim.ImpostorSpriteManager_remove(*args)

    def createOrReuseImpostorSprite(*args):
        """createOrReuseImpostorSprite(self, int s, int t, int frameNumber) -> ImpostorSprite"""
        return _osgSim.ImpostorSpriteManager_createOrReuseImpostorSprite(*args)

    def createOrReuseStateSet(*args):
        """createOrReuseStateSet(self) -> StateSet"""
        return _osgSim.ImpostorSpriteManager_createOrReuseStateSet(*args)

    def reset(*args):
        """reset(self)"""
        return _osgSim.ImpostorSpriteManager_reset(*args)

ImpostorSpriteManager_swigregister = _osgSim.ImpostorSpriteManager_swigregister
ImpostorSpriteManager_swigregister(ImpostorSpriteManager)

class InsertImpostorsVisitor(osg.NodeVisitor):
    """Proxy of C++ InsertImpostorsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertImpostorsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InsertImpostorsVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> InsertImpostorsVisitor"""
        this = _osgSim.new_InsertImpostorsVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def setImpostorThresholdRatio(*args):
        """setImpostorThresholdRatio(self, float ratio)"""
        return _osgSim.InsertImpostorsVisitor_setImpostorThresholdRatio(*args)

    def getImpostorThresholdRatio(*args):
        """getImpostorThresholdRatio(self) -> float"""
        return _osgSim.InsertImpostorsVisitor_getImpostorThresholdRatio(*args)

    def setMaximumNumberOfNestedImpostors(*args):
        """setMaximumNumberOfNestedImpostors(self, unsigned int num)"""
        return _osgSim.InsertImpostorsVisitor_setMaximumNumberOfNestedImpostors(*args)

    def getMaximumNumberOfNestedImpostors(*args):
        """getMaximumNumberOfNestedImpostors(self) -> unsigned int"""
        return _osgSim.InsertImpostorsVisitor_getMaximumNumberOfNestedImpostors(*args)

    def reset(*args):
        """reset(self)"""
        return _osgSim.InsertImpostorsVisitor_reset(*args)

    def apply(*args):
        """
        apply(self, Node node)
        apply(self, Group node)
        apply(self, LOD node)
        """
        return _osgSim.InsertImpostorsVisitor_apply(*args)

    def insertImpostors(*args):
        """insertImpostors(self)"""
        return _osgSim.InsertImpostorsVisitor_insertImpostors(*args)

    __swig_destroy__ = _osgSim.delete_InsertImpostorsVisitor
    __del__ = lambda self : None;
InsertImpostorsVisitor_swigregister = _osgSim.InsertImpostorsVisitor_swigregister
InsertImpostorsVisitor_swigregister(InsertImpostorsVisitor)

OSGSIM_LIGHTPOINT = _osgSim.OSGSIM_LIGHTPOINT
class LightPoint(_object):
    """Proxy of C++ LightPoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightPoint, name)
    __repr__ = _swig_repr
    ADDITIVE = _osgSim.LightPoint_ADDITIVE
    BLENDED = _osgSim.LightPoint_BLENDED
    def __init__(self, *args): 
        """
        __init__(self) -> LightPoint
        __init__(self, Vec3 position, Vec4 color) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity=1.0, 
            float radius=1.0, Sector sector=0, BlinkSequence blinkSequence=0, 
            BlendingMode blendingMode=BLENDED) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity=1.0, 
            float radius=1.0, Sector sector=0, BlinkSequence blinkSequence=0) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity=1.0, 
            float radius=1.0, Sector sector=0) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity=1.0, 
            float radius=1.0) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity=1.0) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color) -> LightPoint
        __init__(self, LightPoint lp) -> LightPoint
        """
        this = _osgSim.new_LightPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["_on"] = _osgSim.LightPoint__on_set
    __swig_getmethods__["_on"] = _osgSim.LightPoint__on_get
    if _newclass:_on = _swig_property(_osgSim.LightPoint__on_get, _osgSim.LightPoint__on_set)
    __swig_setmethods__["_position"] = _osgSim.LightPoint__position_set
    __swig_getmethods__["_position"] = _osgSim.LightPoint__position_get
    if _newclass:_position = _swig_property(_osgSim.LightPoint__position_get, _osgSim.LightPoint__position_set)
    __swig_setmethods__["_color"] = _osgSim.LightPoint__color_set
    __swig_getmethods__["_color"] = _osgSim.LightPoint__color_get
    if _newclass:_color = _swig_property(_osgSim.LightPoint__color_get, _osgSim.LightPoint__color_set)
    __swig_setmethods__["_intensity"] = _osgSim.LightPoint__intensity_set
    __swig_getmethods__["_intensity"] = _osgSim.LightPoint__intensity_get
    if _newclass:_intensity = _swig_property(_osgSim.LightPoint__intensity_get, _osgSim.LightPoint__intensity_set)
    __swig_setmethods__["_radius"] = _osgSim.LightPoint__radius_set
    __swig_getmethods__["_radius"] = _osgSim.LightPoint__radius_get
    if _newclass:_radius = _swig_property(_osgSim.LightPoint__radius_get, _osgSim.LightPoint__radius_set)
    __swig_setmethods__["_sector"] = _osgSim.LightPoint__sector_set
    __swig_getmethods__["_sector"] = _osgSim.LightPoint__sector_get
    if _newclass:_sector = _swig_property(_osgSim.LightPoint__sector_get, _osgSim.LightPoint__sector_set)
    __swig_setmethods__["_blinkSequence"] = _osgSim.LightPoint__blinkSequence_set
    __swig_getmethods__["_blinkSequence"] = _osgSim.LightPoint__blinkSequence_get
    if _newclass:_blinkSequence = _swig_property(_osgSim.LightPoint__blinkSequence_get, _osgSim.LightPoint__blinkSequence_set)
    __swig_setmethods__["_blendingMode"] = _osgSim.LightPoint__blendingMode_set
    __swig_getmethods__["_blendingMode"] = _osgSim.LightPoint__blendingMode_get
    if _newclass:_blendingMode = _swig_property(_osgSim.LightPoint__blendingMode_get, _osgSim.LightPoint__blendingMode_set)
    __swig_destroy__ = _osgSim.delete_LightPoint
    __del__ = lambda self : None;
LightPoint_swigregister = _osgSim.LightPoint_swigregister
LightPoint_swigregister(LightPoint)

OSGSIM_LIGHTPOINTNODE = _osgSim.OSGSIM_LIGHTPOINTNODE
class LightPointNode(osg.Node):
    """Proxy of C++ LightPointNode class"""
    __swig_setmethods__ = {}
    for _s in [osg.Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightPointNode, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightPointNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightPointNode
        __init__(self, LightPointNode ?, CopyOp copyop=SHALLOW_COPY) -> LightPointNode
        __init__(self, LightPointNode ?) -> LightPointNode
        """
        this = _osgSim.new_LightPointNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.LightPointNode_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.LightPointNode_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.LightPointNode_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.LightPointNode_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.LightPointNode_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.LightPointNode_accept(*args)

    def traverse(*args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.LightPointNode_traverse(*args)

    def getNumLightPoints(*args):
        """getNumLightPoints(self) -> unsigned int"""
        return _osgSim.LightPointNode_getNumLightPoints(*args)

    def addLightPoint(*args):
        """addLightPoint(self, LightPoint lp) -> unsigned int"""
        return _osgSim.LightPointNode_addLightPoint(*args)

    def removeLightPoint(*args):
        """removeLightPoint(self, unsigned int pos)"""
        return _osgSim.LightPointNode_removeLightPoint(*args)

    def getLightPoint(*args):
        """
        getLightPoint(self, unsigned int pos) -> LightPoint
        getLightPoint(self, unsigned int pos) -> LightPoint
        """
        return _osgSim.LightPointNode_getLightPoint(*args)

    def setLightPointList(*args):
        """setLightPointList(self, LightPointList lpl)"""
        return _osgSim.LightPointNode_setLightPointList(*args)

    def getLightPointList(*args):
        """
        getLightPointList(self) -> LightPointList
        getLightPointList(self) -> LightPointList
        """
        return _osgSim.LightPointNode_getLightPointList(*args)

    def setMinPixelSize(*args):
        """setMinPixelSize(self, float minPixelSize)"""
        return _osgSim.LightPointNode_setMinPixelSize(*args)

    def getMinPixelSize(*args):
        """getMinPixelSize(self) -> float"""
        return _osgSim.LightPointNode_getMinPixelSize(*args)

    def setMaxPixelSize(*args):
        """setMaxPixelSize(self, float maxPixelSize)"""
        return _osgSim.LightPointNode_setMaxPixelSize(*args)

    def getMaxPixelSize(*args):
        """getMaxPixelSize(self) -> float"""
        return _osgSim.LightPointNode_getMaxPixelSize(*args)

    def setMaxVisibleDistance2(*args):
        """setMaxVisibleDistance2(self, float maxVisibleDistance2)"""
        return _osgSim.LightPointNode_setMaxVisibleDistance2(*args)

    def getMaxVisibleDistance2(*args):
        """getMaxVisibleDistance2(self) -> float"""
        return _osgSim.LightPointNode_getMaxVisibleDistance2(*args)

    def setLightPointSystem(*args):
        """setLightPointSystem(self, LightPointSystem lps)"""
        return _osgSim.LightPointNode_setLightPointSystem(*args)

    def getLightPointSystem(*args):
        """getLightPointSystem(self) -> LightPointSystem"""
        return _osgSim.LightPointNode_getLightPointSystem(*args)

    def setPointSprite(*args):
        """
        setPointSprite(self, bool enable=True)
        setPointSprite(self)
        """
        return _osgSim.LightPointNode_setPointSprite(*args)

    def getPointSprite(*args):
        """getPointSprite(self) -> bool"""
        return _osgSim.LightPointNode_getPointSprite(*args)

    def computeBound(*args):
        """computeBound(self) -> BoundingSphere"""
        return _osgSim.LightPointNode_computeBound(*args)

LightPointNode_swigregister = _osgSim.LightPointNode_swigregister
LightPointNode_swigregister(LightPointNode)

OSGSIM_LIGHTPOINTSYSTEM = _osgSim.OSGSIM_LIGHTPOINTSYSTEM
class LightPointSystem(osg.Object):
    """Proxy of C++ LightPointSystem class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightPointSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightPointSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightPointSystem
        __init__(self, LightPointSystem lps, CopyOp copyop=SHALLOW_COPY) -> LightPointSystem
        __init__(self, LightPointSystem lps) -> LightPointSystem
        """
        this = _osgSim.new_LightPointSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.LightPointSystem_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.LightPointSystem_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.LightPointSystem_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.LightPointSystem_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.LightPointSystem_className(*args)

    ANIMATION_ON = _osgSim.LightPointSystem_ANIMATION_ON
    ANIMATION_OFF = _osgSim.LightPointSystem_ANIMATION_OFF
    ANIMATION_RANDOM = _osgSim.LightPointSystem_ANIMATION_RANDOM
    def setIntensity(*args):
        """setIntensity(self, float intensity)"""
        return _osgSim.LightPointSystem_setIntensity(*args)

    def getIntensity(*args):
        """getIntensity(self) -> float"""
        return _osgSim.LightPointSystem_getIntensity(*args)

    def setAnimationState(*args):
        """setAnimationState(self, AnimationState state)"""
        return _osgSim.LightPointSystem_setAnimationState(*args)

    def getAnimationState(*args):
        """getAnimationState(self) -> AnimationState"""
        return _osgSim.LightPointSystem_getAnimationState(*args)

LightPointSystem_swigregister = _osgSim.LightPointSystem_swigregister
LightPointSystem_swigregister(LightPointSystem)

OSGSIM_LINEOFSIGHT = _osgSim.OSGSIM_LINEOFSIGHT
class DatabaseCacheReadCallback(_object):
    """Proxy of C++ DatabaseCacheReadCallback class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseCacheReadCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseCacheReadCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> DatabaseCacheReadCallback"""
        this = _osgSim.new_DatabaseCacheReadCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def setMaximumNumOfFilesToCache(*args):
        """setMaximumNumOfFilesToCache(self, unsigned int maxNumFilesToCache)"""
        return _osgSim.DatabaseCacheReadCallback_setMaximumNumOfFilesToCache(*args)

    def getMaximumNumOfFilesToCache(*args):
        """getMaximumNumOfFilesToCache(self) -> unsigned int"""
        return _osgSim.DatabaseCacheReadCallback_getMaximumNumOfFilesToCache(*args)

    def clearDatabaseCache(*args):
        """clearDatabaseCache(self)"""
        return _osgSim.DatabaseCacheReadCallback_clearDatabaseCache(*args)

    def pruneUnusedDatabaseCache(*args):
        """pruneUnusedDatabaseCache(self)"""
        return _osgSim.DatabaseCacheReadCallback_pruneUnusedDatabaseCache(*args)

    def readNodeFile(*args):
        """readNodeFile(self, string filename) -> Node"""
        return _osgSim.DatabaseCacheReadCallback_readNodeFile(*args)

    __swig_destroy__ = _osgSim.delete_DatabaseCacheReadCallback
    __del__ = lambda self : None;
DatabaseCacheReadCallback_swigregister = _osgSim.DatabaseCacheReadCallback_swigregister
DatabaseCacheReadCallback_swigregister(DatabaseCacheReadCallback)

class LineOfSight(_object):
    """Proxy of C++ LineOfSight class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineOfSight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineOfSight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> LineOfSight"""
        this = _osgSim.new_LineOfSight(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args):
        """clear(self)"""
        return _osgSim.LineOfSight_clear(*args)

    def addLOS(*args):
        """addLOS(self, Vec3d start, Vec3d end) -> unsigned int"""
        return _osgSim.LineOfSight_addLOS(*args)

    def getNumLOS(*args):
        """getNumLOS(self) -> unsigned int"""
        return _osgSim.LineOfSight_getNumLOS(*args)

    def setStartPoint(*args):
        """setStartPoint(self, unsigned int i, Vec3d start)"""
        return _osgSim.LineOfSight_setStartPoint(*args)

    def getStartPoint(*args):
        """getStartPoint(self, unsigned int i) -> Vec3d"""
        return _osgSim.LineOfSight_getStartPoint(*args)

    def setEndPoint(*args):
        """setEndPoint(self, unsigned int i, Vec3d end)"""
        return _osgSim.LineOfSight_setEndPoint(*args)

    def getEndPoint(*args):
        """getEndPoint(self, unsigned int i) -> Vec3d"""
        return _osgSim.LineOfSight_getEndPoint(*args)

    def getIntersections(*args):
        """getIntersections(self, unsigned int i) -> Intersections"""
        return _osgSim.LineOfSight_getIntersections(*args)

    def computeIntersections(*args):
        """
        computeIntersections(Node scene, NodeMask traversalMask=0xffffffff)
        computeIntersections(Node scene)
        computeIntersections(Node scene, Vec3d start, Vec3d end, NodeMask traversalMask=0xffffffff) -> Intersections
        computeIntersections(Node scene, Vec3d start, Vec3d end) -> Intersections
        """
        return _osgSim.LineOfSight_computeIntersections(*args)

    if _newclass:computeIntersections = staticmethod(computeIntersections)
    __swig_getmethods__["computeIntersections"] = lambda x: computeIntersections
    def clearDatabaseCache(*args):
        """clearDatabaseCache(self)"""
        return _osgSim.LineOfSight_clearDatabaseCache(*args)

    def setDatabaseCacheReadCallback(*args):
        """setDatabaseCacheReadCallback(self, DatabaseCacheReadCallback dcrc)"""
        return _osgSim.LineOfSight_setDatabaseCacheReadCallback(*args)

    def getDatabaseCacheReadCallback(*args):
        """getDatabaseCacheReadCallback(self) -> DatabaseCacheReadCallback"""
        return _osgSim.LineOfSight_getDatabaseCacheReadCallback(*args)

    __swig_destroy__ = _osgSim.delete_LineOfSight
    __del__ = lambda self : None;
LineOfSight_swigregister = _osgSim.LineOfSight_swigregister
LineOfSight_swigregister(LineOfSight)

def LineOfSight_computeIntersections(*args):
  """
    computeIntersections(Node scene, NodeMask traversalMask=0xffffffff)
    computeIntersections(Node scene)
    computeIntersections(Node scene, Vec3d start, Vec3d end, NodeMask traversalMask=0xffffffff) -> Intersections
    LineOfSight_computeIntersections(Node scene, Vec3d start, Vec3d end) -> Intersections
    """
  return _osgSim.LineOfSight_computeIntersections(*args)

OSG_MULTISWITCH = _osgSim.OSG_MULTISWITCH
class MultiSwitch(osg.Group):
    """Proxy of C++ MultiSwitch class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiSwitch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultiSwitch
        __init__(self, MultiSwitch ?, CopyOp copyop=SHALLOW_COPY) -> MultiSwitch
        __init__(self, MultiSwitch ?) -> MultiSwitch
        """
        this = _osgSim.new_MultiSwitch(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.MultiSwitch_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.MultiSwitch_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.MultiSwitch_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.MultiSwitch_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.MultiSwitch_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.MultiSwitch_accept(*args)

    def traverse(*args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.MultiSwitch_traverse(*args)

    def setNewChildDefaultValue(*args):
        """setNewChildDefaultValue(self, bool value)"""
        return _osgSim.MultiSwitch_setNewChildDefaultValue(*args)

    def getNewChildDefaultValue(*args):
        """getNewChildDefaultValue(self) -> bool"""
        return _osgSim.MultiSwitch_getNewChildDefaultValue(*args)

    def addChild(*args):
        """addChild(self, Node child) -> bool"""
        return _osgSim.MultiSwitch_addChild(*args)

    def insertChild(*args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osgSim.MultiSwitch_insertChild(*args)

    def removeChild(*args):
        """removeChild(self, Node child) -> bool"""
        return _osgSim.MultiSwitch_removeChild(*args)

    def setValue(*args):
        """setValue(self, unsigned int switchSet, unsigned int pos, bool value)"""
        return _osgSim.MultiSwitch_setValue(*args)

    def getValue(*args):
        """getValue(self, unsigned int switchSet, unsigned int pos) -> bool"""
        return _osgSim.MultiSwitch_getValue(*args)

    def setChildValue(*args):
        """setChildValue(self, Node child, unsigned int switchSet, bool value)"""
        return _osgSim.MultiSwitch_setChildValue(*args)

    def getChildValue(*args):
        """getChildValue(self, Node child, unsigned int switchSet) -> bool"""
        return _osgSim.MultiSwitch_getChildValue(*args)

    def setAllChildrenOff(*args):
        """setAllChildrenOff(self, unsigned int switchSet) -> bool"""
        return _osgSim.MultiSwitch_setAllChildrenOff(*args)

    def setAllChildrenOn(*args):
        """setAllChildrenOn(self, unsigned int switchSet) -> bool"""
        return _osgSim.MultiSwitch_setAllChildrenOn(*args)

    def setSingleChildOn(*args):
        """setSingleChildOn(self, unsigned int switchSet, unsigned int pos) -> bool"""
        return _osgSim.MultiSwitch_setSingleChildOn(*args)

    def setActiveSwitchSet(*args):
        """setActiveSwitchSet(self, unsigned int switchSet)"""
        return _osgSim.MultiSwitch_setActiveSwitchSet(*args)

    def getActiveSwitchSet(*args):
        """getActiveSwitchSet(self) -> unsigned int"""
        return _osgSim.MultiSwitch_getActiveSwitchSet(*args)

    def setSwitchSetList(*args):
        """setSwitchSetList(self, SwitchSetList switchSetList)"""
        return _osgSim.MultiSwitch_setSwitchSetList(*args)

    def getSwitchSetList(*args):
        """getSwitchSetList(self) -> SwitchSetList"""
        return _osgSim.MultiSwitch_getSwitchSetList(*args)

    def setValueList(*args):
        """setValueList(self, unsigned int switchSet, ValueList values)"""
        return _osgSim.MultiSwitch_setValueList(*args)

    def getValueList(*args):
        """getValueList(self, unsigned int switchSet) -> ValueList"""
        return _osgSim.MultiSwitch_getValueList(*args)

MultiSwitch_swigregister = _osgSim.MultiSwitch_swigregister
MultiSwitch_swigregister(MultiSwitch)

OSGSIM_OBJECTRECORDDATA = _osgSim.OSGSIM_OBJECTRECORDDATA
class ObjectRecordData(osg.Object):
    """Proxy of C++ ObjectRecordData class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectRecordData, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectRecordData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ObjectRecordData
        __init__(self, ObjectRecordData copy, CopyOp copyop=SHALLOW_COPY) -> ObjectRecordData
        __init__(self, ObjectRecordData copy) -> ObjectRecordData
        """
        this = _osgSim.new_ObjectRecordData(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.ObjectRecordData_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.ObjectRecordData_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.ObjectRecordData_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.ObjectRecordData_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.ObjectRecordData_className(*args)

    DONT_DISPLAY_IN_DAYLIGHT = _osgSim.ObjectRecordData_DONT_DISPLAY_IN_DAYLIGHT
    DONT_DISPLAY_AT_DUSK = _osgSim.ObjectRecordData_DONT_DISPLAY_AT_DUSK
    DONT_DISPLAY_AT_NIGHT = _osgSim.ObjectRecordData_DONT_DISPLAY_AT_NIGHT
    DONT_ILLUMINATE = _osgSim.ObjectRecordData_DONT_ILLUMINATE
    FLAT_SHADED = _osgSim.ObjectRecordData_FLAT_SHADED
    GROUPS_SHADOW_OBJECT = _osgSim.ObjectRecordData_GROUPS_SHADOW_OBJECT
    __swig_setmethods__["_flags"] = _osgSim.ObjectRecordData__flags_set
    __swig_getmethods__["_flags"] = _osgSim.ObjectRecordData__flags_get
    if _newclass:_flags = _swig_property(_osgSim.ObjectRecordData__flags_get, _osgSim.ObjectRecordData__flags_set)
    __swig_setmethods__["_relativePriority"] = _osgSim.ObjectRecordData__relativePriority_set
    __swig_getmethods__["_relativePriority"] = _osgSim.ObjectRecordData__relativePriority_get
    if _newclass:_relativePriority = _swig_property(_osgSim.ObjectRecordData__relativePriority_get, _osgSim.ObjectRecordData__relativePriority_set)
    __swig_setmethods__["_transparency"] = _osgSim.ObjectRecordData__transparency_set
    __swig_getmethods__["_transparency"] = _osgSim.ObjectRecordData__transparency_get
    if _newclass:_transparency = _swig_property(_osgSim.ObjectRecordData__transparency_get, _osgSim.ObjectRecordData__transparency_set)
    __swig_setmethods__["_effectID1"] = _osgSim.ObjectRecordData__effectID1_set
    __swig_getmethods__["_effectID1"] = _osgSim.ObjectRecordData__effectID1_get
    if _newclass:_effectID1 = _swig_property(_osgSim.ObjectRecordData__effectID1_get, _osgSim.ObjectRecordData__effectID1_set)
    __swig_setmethods__["_effectID2"] = _osgSim.ObjectRecordData__effectID2_set
    __swig_getmethods__["_effectID2"] = _osgSim.ObjectRecordData__effectID2_get
    if _newclass:_effectID2 = _swig_property(_osgSim.ObjectRecordData__effectID2_get, _osgSim.ObjectRecordData__effectID2_set)
    __swig_setmethods__["_significance"] = _osgSim.ObjectRecordData__significance_set
    __swig_getmethods__["_significance"] = _osgSim.ObjectRecordData__significance_get
    if _newclass:_significance = _swig_property(_osgSim.ObjectRecordData__significance_get, _osgSim.ObjectRecordData__significance_set)
    __swig_destroy__ = _osgSim.delete_ObjectRecordData
    __del__ = lambda self : None;
ObjectRecordData_swigregister = _osgSim.ObjectRecordData_swigregister
ObjectRecordData_swigregister(ObjectRecordData)

OSGSIM_OVERLAYNODE = _osgSim.OSGSIM_OVERLAYNODE
class OverlayNode(osg.Group):
    """Proxy of C++ OverlayNode class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverlayNode, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OverlayNode, name)
    __repr__ = _swig_repr
    OBJECT_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY = _osgSim.OverlayNode_OBJECT_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY
    VIEW_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY = _osgSim.OverlayNode_VIEW_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY
    VIEW_DEPENDENT_WITH_PERSPECTIVE_OVERLAY = _osgSim.OverlayNode_VIEW_DEPENDENT_WITH_PERSPECTIVE_OVERLAY
    def __init__(self, *args): 
        """
        __init__(self, OverlayTechnique technique=OBJECT_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY) -> OverlayNode
        __init__(self) -> OverlayNode
        __init__(self, OverlayNode es, CopyOp copyop=SHALLOW_COPY) -> OverlayNode
        __init__(self, OverlayNode es) -> OverlayNode
        """
        this = _osgSim.new_OverlayNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.OverlayNode_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.OverlayNode_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.OverlayNode_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.OverlayNode_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.OverlayNode_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.OverlayNode_accept(*args)

    def traverse(*args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.OverlayNode_traverse(*args)

    def setOverlayTechnique(*args):
        """setOverlayTechnique(self, OverlayTechnique technique)"""
        return _osgSim.OverlayNode_setOverlayTechnique(*args)

    def getOverlayTechnique(*args):
        """getOverlayTechnique(self) -> OverlayTechnique"""
        return _osgSim.OverlayNode_getOverlayTechnique(*args)

    def setRenderTargetImplementation(*args):
        """setRenderTargetImplementation(self, RenderTargetImplementation impl)"""
        return _osgSim.OverlayNode_setRenderTargetImplementation(*args)

    def setOverlaySubgraph(*args):
        """setOverlaySubgraph(self, Node node)"""
        return _osgSim.OverlayNode_setOverlaySubgraph(*args)

    def getOverlaySubgraph(*args):
        """
        getOverlaySubgraph(self) -> Node
        getOverlaySubgraph(self) -> Node
        """
        return _osgSim.OverlayNode_getOverlaySubgraph(*args)

    def dirtyOverlayTexture(*args):
        """dirtyOverlayTexture(self)"""
        return _osgSim.OverlayNode_dirtyOverlayTexture(*args)

    def setContinuousUpdate(*args):
        """setContinuousUpdate(self, bool update)"""
        return _osgSim.OverlayNode_setContinuousUpdate(*args)

    def getContinuousUpdate(*args):
        """getContinuousUpdate(self) -> bool"""
        return _osgSim.OverlayNode_getContinuousUpdate(*args)

    def setOverlayBaseHeight(*args):
        """setOverlayBaseHeight(self, double baseHeight)"""
        return _osgSim.OverlayNode_setOverlayBaseHeight(*args)

    def getOverlayBaseHeight(*args):
        """getOverlayBaseHeight(self) -> double"""
        return _osgSim.OverlayNode_getOverlayBaseHeight(*args)

    def setOverlayClearColor(*args):
        """setOverlayClearColor(self, Vec4 color)"""
        return _osgSim.OverlayNode_setOverlayClearColor(*args)

    def getOverlayClearColor(*args):
        """getOverlayClearColor(self) -> Vec4"""
        return _osgSim.OverlayNode_getOverlayClearColor(*args)

    def setTexEnvMode(*args):
        """setTexEnvMode(self, GLenum mode)"""
        return _osgSim.OverlayNode_setTexEnvMode(*args)

    def getTexEnvMode(*args):
        """getTexEnvMode(self) -> GLenum"""
        return _osgSim.OverlayNode_getTexEnvMode(*args)

    def setOverlayTextureUnit(*args):
        """setOverlayTextureUnit(self, unsigned int unit)"""
        return _osgSim.OverlayNode_setOverlayTextureUnit(*args)

    def getOverlayTextureUnit(*args):
        """getOverlayTextureUnit(self) -> unsigned int"""
        return _osgSim.OverlayNode_getOverlayTextureUnit(*args)

    def setOverlayTextureSizeHint(*args):
        """setOverlayTextureSizeHint(self, unsigned int size)"""
        return _osgSim.OverlayNode_setOverlayTextureSizeHint(*args)

    def getOverlayTextureSizeHint(*args):
        """getOverlayTextureSizeHint(self) -> unsigned int"""
        return _osgSim.OverlayNode_getOverlayTextureSizeHint(*args)

    def setThreadSafeRefUnref(*args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osgSim.OverlayNode_setThreadSafeRefUnref(*args)

    def resizeGLObjectBuffers(*args):
        """resizeGLObjectBuffers(self, unsigned int ?)"""
        return _osgSim.OverlayNode_resizeGLObjectBuffers(*args)

    def releaseGLObjects(*args):
        """
        releaseGLObjects(self, State ?=0)
        releaseGLObjects(self)
        """
        return _osgSim.OverlayNode_releaseGLObjects(*args)

OverlayNode_swigregister = _osgSim.OverlayNode_swigregister
OverlayNode_swigregister(OverlayNode)

OSGSIM_SCALARSTCOLORS = _osgSim.OSGSIM_SCALARSTCOLORS
class ScalarsToColors(osg.Referenced):
    """Proxy of C++ ScalarsToColors class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarsToColors, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarsToColors, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, float scalarMin, float scalarMax) -> ScalarsToColors"""
        this = _osgSim.new_ScalarsToColors(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgSim.delete_ScalarsToColors
    __del__ = lambda self : None;
    def getColor(*args):
        """getColor(self, float scalar) -> Vec4"""
        return _osgSim.ScalarsToColors_getColor(*args)

    def getMin(*args):
        """getMin(self) -> float"""
        return _osgSim.ScalarsToColors_getMin(*args)

    def getMax(*args):
        """getMax(self) -> float"""
        return _osgSim.ScalarsToColors_getMax(*args)

ScalarsToColors_swigregister = _osgSim.ScalarsToColors_swigregister
ScalarsToColors_swigregister(ScalarsToColors)

OSGSIM_SECTOR = _osgSim.OSGSIM_SECTOR
class Sector(osg.Object):
    """Proxy of C++ Sector class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sector, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sector, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.Sector_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.Sector_className(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.Sector_isSameKindAs(*args)

    def __call__(*args):
        """__call__(self, Vec3 ?) -> float"""
        return _osgSim.Sector___call__(*args)

Sector_swigregister = _osgSim.Sector_swigregister
Sector_swigregister(Sector)

class AzimRange(_object):
    """Proxy of C++ AzimRange class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AzimRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AzimRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> AzimRange"""
        this = _osgSim.new_AzimRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def setAzimuthRange(*args):
        """
        setAzimuthRange(self, float minAzimuth, float maxAzimuth, float fadeAngle=0.0)
        setAzimuthRange(self, float minAzimuth, float maxAzimuth)
        """
        return _osgSim.AzimRange_setAzimuthRange(*args)

    def getAzimuthRange(*args):
        """getAzimuthRange(self, float minAzimuth, float maxAzimuth, float fadeAngle)"""
        return _osgSim.AzimRange_getAzimuthRange(*args)

    def azimSector(*args):
        """azimSector(self, Vec3 eyeLocal) -> float"""
        return _osgSim.AzimRange_azimSector(*args)

    __swig_destroy__ = _osgSim.delete_AzimRange
    __del__ = lambda self : None;
AzimRange_swigregister = _osgSim.AzimRange_swigregister
AzimRange_swigregister(AzimRange)

class ElevationRange(_object):
    """Proxy of C++ ElevationRange class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElevationRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElevationRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ElevationRange"""
        this = _osgSim.new_ElevationRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def setElevationRange(*args):
        """
        setElevationRange(self, float minElevation, float maxElevation, float fadeAngle=0.0)
        setElevationRange(self, float minElevation, float maxElevation)
        """
        return _osgSim.ElevationRange_setElevationRange(*args)

    def getMinElevation(*args):
        """getMinElevation(self) -> float"""
        return _osgSim.ElevationRange_getMinElevation(*args)

    def getMaxElevation(*args):
        """getMaxElevation(self) -> float"""
        return _osgSim.ElevationRange_getMaxElevation(*args)

    def getFadeAngle(*args):
        """getFadeAngle(self) -> float"""
        return _osgSim.ElevationRange_getFadeAngle(*args)

    def elevationSector(*args):
        """elevationSector(self, Vec3 eyeLocal) -> float"""
        return _osgSim.ElevationRange_elevationSector(*args)

    __swig_destroy__ = _osgSim.delete_ElevationRange
    __del__ = lambda self : None;
ElevationRange_swigregister = _osgSim.ElevationRange_swigregister
ElevationRange_swigregister(ElevationRange)

class AzimSector(Sector,AzimRange):
    """Proxy of C++ AzimSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector,AzimRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AzimSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector,AzimRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AzimSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AzimSector
        __init__(self, AzimSector copy, CopyOp copyop=SHALLOW_COPY) -> AzimSector
        __init__(self, AzimSector copy) -> AzimSector
        __init__(self, float minAzimuth, float maxAzimuth, float fadeAngle=0.0) -> AzimSector
        __init__(self, float minAzimuth, float maxAzimuth) -> AzimSector
        """
        this = _osgSim.new_AzimSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.AzimSector_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.AzimSector_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.AzimSector_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.AzimSector_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.AzimSector_className(*args)

    def __call__(*args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.AzimSector___call__(*args)

AzimSector_swigregister = _osgSim.AzimSector_swigregister
AzimSector_swigregister(AzimSector)

class ElevationSector(Sector,ElevationRange):
    """Proxy of C++ ElevationSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector,ElevationRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElevationSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector,ElevationRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElevationSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ElevationSector
        __init__(self, ElevationSector copy, CopyOp copyop=SHALLOW_COPY) -> ElevationSector
        __init__(self, ElevationSector copy) -> ElevationSector
        __init__(self, float minElevation, float maxElevation, float fadeAngle=0.0) -> ElevationSector
        __init__(self, float minElevation, float maxElevation) -> ElevationSector
        """
        this = _osgSim.new_ElevationSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.ElevationSector_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.ElevationSector_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.ElevationSector_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.ElevationSector_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.ElevationSector_className(*args)

    def __call__(*args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.ElevationSector___call__(*args)

ElevationSector_swigregister = _osgSim.ElevationSector_swigregister
ElevationSector_swigregister(ElevationSector)

class AzimElevationSector(Sector,AzimRange,ElevationRange):
    """Proxy of C++ AzimElevationSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector,AzimRange,ElevationRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AzimElevationSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector,AzimRange,ElevationRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AzimElevationSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AzimElevationSector
        __init__(self, AzimElevationSector copy, CopyOp copyop=SHALLOW_COPY) -> AzimElevationSector
        __init__(self, AzimElevationSector copy) -> AzimElevationSector
        __init__(self, float minAzimuth, float maxAzimuth, float minElevation, 
            float maxElevation, float fadeAngle=0.0) -> AzimElevationSector
        __init__(self, float minAzimuth, float maxAzimuth, float minElevation, 
            float maxElevation) -> AzimElevationSector
        """
        this = _osgSim.new_AzimElevationSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.AzimElevationSector_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.AzimElevationSector_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.AzimElevationSector_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.AzimElevationSector_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.AzimElevationSector_className(*args)

    def __call__(*args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.AzimElevationSector___call__(*args)

AzimElevationSector_swigregister = _osgSim.AzimElevationSector_swigregister
AzimElevationSector_swigregister(AzimElevationSector)

class ConeSector(Sector):
    """Proxy of C++ ConeSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConeSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConeSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ConeSector
        __init__(self, ConeSector copy, CopyOp copyop=SHALLOW_COPY) -> ConeSector
        __init__(self, ConeSector copy) -> ConeSector
        __init__(self, Vec3 axis, float angle, float fadeangle=0.0) -> ConeSector
        __init__(self, Vec3 axis, float angle) -> ConeSector
        """
        this = _osgSim.new_ConeSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.ConeSector_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.ConeSector_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.ConeSector_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.ConeSector_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.ConeSector_className(*args)

    def setAxis(*args):
        """setAxis(self, Vec3 axis)"""
        return _osgSim.ConeSector_setAxis(*args)

    def getAxis(*args):
        """getAxis(self) -> Vec3"""
        return _osgSim.ConeSector_getAxis(*args)

    def setAngle(*args):
        """
        setAngle(self, float angle, float fadeangle=0.0)
        setAngle(self, float angle)
        """
        return _osgSim.ConeSector_setAngle(*args)

    def getAngle(*args):
        """getAngle(self) -> float"""
        return _osgSim.ConeSector_getAngle(*args)

    def getFadeAngle(*args):
        """getFadeAngle(self) -> float"""
        return _osgSim.ConeSector_getFadeAngle(*args)

    def __call__(*args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.ConeSector___call__(*args)

ConeSector_swigregister = _osgSim.ConeSector_swigregister
ConeSector_swigregister(ConeSector)

class DirectionalSector(Sector):
    """Proxy of C++ DirectionalSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectionalSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirectionalSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DirectionalSector
        __init__(self, DirectionalSector copy, CopyOp copyop=SHALLOW_COPY) -> DirectionalSector
        __init__(self, DirectionalSector copy) -> DirectionalSector
        __init__(self, Vec3 direction, float horizLobeAngle, float vertLobeAngle, 
            float lobeRollAngle, float fadeAngle=0.0) -> DirectionalSector
        __init__(self, Vec3 direction, float horizLobeAngle, float vertLobeAngle, 
            float lobeRollAngle) -> DirectionalSector
        """
        this = _osgSim.new_DirectionalSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.DirectionalSector_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.DirectionalSector_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.DirectionalSector_isSameKindAs(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.DirectionalSector_libraryName(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.DirectionalSector_className(*args)

    def setDirection(*args):
        """setDirection(self, Vec3 direction)"""
        return _osgSim.DirectionalSector_setDirection(*args)

    def getDirection(*args):
        """getDirection(self) -> Vec3"""
        return _osgSim.DirectionalSector_getDirection(*args)

    def setHorizLobeAngle(*args):
        """setHorizLobeAngle(self, float angle)"""
        return _osgSim.DirectionalSector_setHorizLobeAngle(*args)

    def getHorizLobeAngle(*args):
        """getHorizLobeAngle(self) -> float"""
        return _osgSim.DirectionalSector_getHorizLobeAngle(*args)

    def setLobeRollAngle(*args):
        """setLobeRollAngle(self, float angle)"""
        return _osgSim.DirectionalSector_setLobeRollAngle(*args)

    def getLobeRollAngle(*args):
        """getLobeRollAngle(self) -> float"""
        return _osgSim.DirectionalSector_getLobeRollAngle(*args)

    def setVertLobeAngle(*args):
        """setVertLobeAngle(self, float angle)"""
        return _osgSim.DirectionalSector_setVertLobeAngle(*args)

    def getVertLobeAngle(*args):
        """getVertLobeAngle(self) -> float"""
        return _osgSim.DirectionalSector_getVertLobeAngle(*args)

    def setFadeAngle(*args):
        """setFadeAngle(self, float angle)"""
        return _osgSim.DirectionalSector_setFadeAngle(*args)

    def getFadeAngle(*args):
        """getFadeAngle(self) -> float"""
        return _osgSim.DirectionalSector_getFadeAngle(*args)

    def __call__(*args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.DirectionalSector___call__(*args)

    def computeMatrix(*args):
        """computeMatrix(self)"""
        return _osgSim.DirectionalSector_computeMatrix(*args)

DirectionalSector_swigregister = _osgSim.DirectionalSector_swigregister
DirectionalSector_swigregister(DirectionalSector)

OSGSIM_SPHERESEGMENT = _osgSim.OSGSIM_SPHERESEGMENT
class SphereSegment(osg.Geode):
    """Proxy of C++ SphereSegment class"""
    __swig_setmethods__ = {}
    for _s in [osg.Geode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereSegment, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Geode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphereSegment, name)
    __repr__ = _swig_repr
    SURFACE = _osgSim.SphereSegment_SURFACE
    SPOKES = _osgSim.SphereSegment_SPOKES
    EDGELINE = _osgSim.SphereSegment_EDGELINE
    SIDES = _osgSim.SphereSegment_SIDES
    ALL = _osgSim.SphereSegment_ALL
    def __init__(self, *args): 
        """
        __init__(self) -> SphereSegment
        __init__(self, Vec3 centre, float radius, float azMin, float azMax, 
            float elevMin, float elevMax, int density) -> SphereSegment
        __init__(self, Vec3 centre, float radius, Vec3 vec, float azRange, 
            float elevRange, int density) -> SphereSegment
        __init__(self, SphereSegment rhs, CopyOp co) -> SphereSegment
        """
        this = _osgSim.new_SphereSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    def setCentre(*args):
        """setCentre(self, Vec3 c)"""
        return _osgSim.SphereSegment_setCentre(*args)

    def getCentre(*args):
        """getCentre(self) -> Vec3"""
        return _osgSim.SphereSegment_getCentre(*args)

    def setRadius(*args):
        """setRadius(self, float r)"""
        return _osgSim.SphereSegment_setRadius(*args)

    def getRadius(*args):
        """getRadius(self) -> float"""
        return _osgSim.SphereSegment_getRadius(*args)

    def setArea(*args):
        """
        setArea(self, Vec3 vec, float azRange, float elevRange)
        setArea(self, float azMin, float azMax, float elevMin, float elevMax)
        """
        return _osgSim.SphereSegment_setArea(*args)

    def getArea(*args):
        """
        getArea(self, Vec3 vec, float azRange, float elevRange)
        getArea(self, float azMin, float azMax, float elevMin, float elevMax)
        """
        return _osgSim.SphereSegment_getArea(*args)

    def setDensity(*args):
        """setDensity(self, int d)"""
        return _osgSim.SphereSegment_setDensity(*args)

    def getDensity(*args):
        """getDensity(self) -> int"""
        return _osgSim.SphereSegment_getDensity(*args)

    def setDrawMask(*args):
        """setDrawMask(self, DrawMask dm)"""
        return _osgSim.SphereSegment_setDrawMask(*args)

    def getDrawMask(*args):
        """getDrawMask(self) -> DrawMask"""
        return _osgSim.SphereSegment_getDrawMask(*args)

    def setSurfaceColor(*args):
        """setSurfaceColor(self, Vec4 c)"""
        return _osgSim.SphereSegment_setSurfaceColor(*args)

    def getSurfaceColor(*args):
        """getSurfaceColor(self) -> Vec4"""
        return _osgSim.SphereSegment_getSurfaceColor(*args)

    def setSpokeColor(*args):
        """setSpokeColor(self, Vec4 c)"""
        return _osgSim.SphereSegment_setSpokeColor(*args)

    def getSpokeColor(*args):
        """getSpokeColor(self) -> Vec4"""
        return _osgSim.SphereSegment_getSpokeColor(*args)

    def setEdgeLineColor(*args):
        """setEdgeLineColor(self, Vec4 c)"""
        return _osgSim.SphereSegment_setEdgeLineColor(*args)

    def getEdgeLineColor(*args):
        """getEdgeLineColor(self) -> Vec4"""
        return _osgSim.SphereSegment_getEdgeLineColor(*args)

    def setSideColor(*args):
        """setSideColor(self, Vec4 c)"""
        return _osgSim.SphereSegment_setSideColor(*args)

    def getSideColor(*args):
        """getSideColor(self) -> Vec4"""
        return _osgSim.SphereSegment_getSideColor(*args)

    def setAllColors(*args):
        """setAllColors(self, Vec4 c)"""
        return _osgSim.SphereSegment_setAllColors(*args)

    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.SphereSegment_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.SphereSegment_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.SphereSegment_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.SphereSegment_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.SphereSegment_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.SphereSegment_accept(*args)

    def computeIntersectionSubgraph(*args):
        """
        computeIntersectionSubgraph(self, Matrixd matrix, Node subgraph) -> Node
        computeIntersectionSubgraph(self, Matrixd matrix, Drawable drawable) -> Node
        """
        return _osgSim.SphereSegment_computeIntersectionSubgraph(*args)

    __swig_destroy__ = _osgSim.delete_SphereSegment
    __del__ = lambda self : None;
SphereSegment_swigregister = _osgSim.SphereSegment_swigregister
SphereSegment_swigregister(SphereSegment)

OSGSIM_VERSION = _osgSim.OSGSIM_VERSION

def osgSimGetVersion(*args):
  """osgSimGetVersion() -> char"""
  return _osgSim.osgSimGetVersion(*args)

def osgSimGetLibraryName(*args):
  """osgSimGetLibraryName() -> char"""
  return _osgSim.osgSimGetLibraryName(*args)
OSGSIM_VISIBILITYGROUP = _osgSim.OSGSIM_VISIBILITYGROUP
class VisibilityGroup(osg.Group):
    """Proxy of C++ VisibilityGroup class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisibilityGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisibilityGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> VisibilityGroup
        __init__(self, VisibilityGroup ?, CopyOp copyop=SHALLOW_COPY) -> VisibilityGroup
        __init__(self, VisibilityGroup ?) -> VisibilityGroup
        """
        this = _osgSim.new_VisibilityGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgSim.VisibilityGroup_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.VisibilityGroup_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.VisibilityGroup_isSameKindAs(*args)

    def className(*args):
        """className(self) -> char"""
        return _osgSim.VisibilityGroup_className(*args)

    def libraryName(*args):
        """libraryName(self) -> char"""
        return _osgSim.VisibilityGroup_libraryName(*args)

    def accept(*args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.VisibilityGroup_accept(*args)

    def traverse(*args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.VisibilityGroup_traverse(*args)

    def setVisibilityVolume(*args):
        """setVisibilityVolume(self, Node node)"""
        return _osgSim.VisibilityGroup_setVisibilityVolume(*args)

    def getVisibilityVolume(*args):
        """
        getVisibilityVolume(self) -> Node
        getVisibilityVolume(self) -> Node
        """
        return _osgSim.VisibilityGroup_getVisibilityVolume(*args)

    def setVolumeIntersectionMask(*args):
        """setVolumeIntersectionMask(self, NodeMask mask)"""
        return _osgSim.VisibilityGroup_setVolumeIntersectionMask(*args)

    def getVolumeIntersectionMask(*args):
        """getVolumeIntersectionMask(self) -> NodeMask"""
        return _osgSim.VisibilityGroup_getVolumeIntersectionMask(*args)

    def setSegmentLength(*args):
        """setSegmentLength(self, float length)"""
        return _osgSim.VisibilityGroup_setSegmentLength(*args)

    def getSegmentLength(*args):
        """getSegmentLength(self) -> float"""
        return _osgSim.VisibilityGroup_getSegmentLength(*args)

VisibilityGroup_swigregister = _osgSim.VisibilityGroup_swigregister
VisibilityGroup_swigregister(VisibilityGroup)



