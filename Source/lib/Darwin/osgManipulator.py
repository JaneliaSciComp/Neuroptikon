# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _osgManipulator
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _osgManipulator.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _osgManipulator.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _osgManipulator.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _osgManipulator.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _osgManipulator.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _osgManipulator.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _osgManipulator.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _osgManipulator.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _osgManipulator.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgManipulator.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _osgManipulator.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _osgManipulator.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgManipulator.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgManipulator.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _osgManipulator.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _osgManipulator.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _osgManipulator.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import osg
OSGMANIPULATOR_SELECTION = _osgManipulator.OSGMANIPULATOR_SELECTION

def computeNodePathToRoot(*args):
  """computeNodePathToRoot(Node node, NodePath np)"""
  return _osgManipulator.computeNodePathToRoot(*args)
class Selection(osg.MatrixTransform):
    """Proxy of C++ Selection class"""
    __swig_setmethods__ = {}
    for _s in [osg.MatrixTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Selection, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.MatrixTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Selection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Selection"""
        this = _osgManipulator.new_Selection(*args)
        try: self.this.append(this)
        except: self.this = this
    def receive(*args):
        """
        receive(self, MotionCommand ?) -> bool
        receive(self, TranslateInLineCommand command) -> bool
        receive(self, TranslateInPlaneCommand command) -> bool
        receive(self, Scale1DCommand command) -> bool
        receive(self, Scale2DCommand command) -> bool
        receive(self, ScaleUniformCommand command) -> bool
        receive(self, Rotate3DCommand command) -> bool
        """
        return _osgManipulator.Selection_receive(*args)

Selection_swigregister = _osgManipulator.Selection_swigregister
Selection_swigregister(Selection)

_OSG_ANTISQUISH_ = _osgManipulator._OSG_ANTISQUISH_
class AntiSquish(osg.MatrixTransform):
    """Proxy of C++ AntiSquish class"""
    __swig_setmethods__ = {}
    for _s in [osg.MatrixTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntiSquish, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.MatrixTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AntiSquish, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AntiSquish
        __init__(self, Vec3 pivot) -> AntiSquish
        __init__(self, Vec3 pivot, Vec3 position) -> AntiSquish
        __init__(self, AntiSquish pat, CopyOp copyop=SHALLOW_COPY) -> AntiSquish
        __init__(self, AntiSquish pat) -> AntiSquish
        """
        this = _osgManipulator.new_AntiSquish(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(*args):
        """cloneType(self) -> Object"""
        return _osgManipulator.AntiSquish_cloneType(*args)

    def clone(*args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgManipulator.AntiSquish_clone(*args)

    def isSameKindAs(*args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgManipulator.AntiSquish_isSameKindAs(*args)

    def setPivot(*args):
        """setPivot(self, Vec3 pvt)"""
        return _osgManipulator.AntiSquish_setPivot(*args)

    def getPivot(*args):
        """getPivot(self) -> Vec3"""
        return _osgManipulator.AntiSquish_getPivot(*args)

    def setPosition(*args):
        """setPosition(self, Vec3 pos)"""
        return _osgManipulator.AntiSquish_setPosition(*args)

    def getPosition(*args):
        """getPosition(self) -> Vec3"""
        return _osgManipulator.AntiSquish_getPosition(*args)

    __swig_destroy__ = _osgManipulator.delete_AntiSquish
    __del__ = lambda self : None;
    def computeUnSquishedMatrix(*args):
        """computeUnSquishedMatrix(self, Matrix ?, bool flag) -> Matrix"""
        return _osgManipulator.AntiSquish_computeUnSquishedMatrix(*args)

AntiSquish_swigregister = _osgManipulator.AntiSquish_swigregister
AntiSquish_swigregister(AntiSquish)

OSGMANIPULATOR_COMMAND = _osgManipulator.OSGMANIPULATOR_COMMAND
class MotionCommand(osg.Referenced):
    """Proxy of C++ MotionCommand class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MotionCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MotionCommand, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    NONE = _osgManipulator.MotionCommand_NONE
    START = _osgManipulator.MotionCommand_START
    MOVE = _osgManipulator.MotionCommand_MOVE
    FINISH = _osgManipulator.MotionCommand_FINISH
    def execute(*args):
        """execute(self) -> bool"""
        return _osgManipulator.MotionCommand_execute(*args)

    def unexecute(*args):
        """unexecute(self) -> bool"""
        return _osgManipulator.MotionCommand_unexecute(*args)

    def applyConstraint(*args):
        """applyConstraint(self, Constraint ?)"""
        return _osgManipulator.MotionCommand_applyConstraint(*args)

    def addSelection(*args):
        """addSelection(self, Selection ?)"""
        return _osgManipulator.MotionCommand_addSelection(*args)

    def removeSelection(*args):
        """removeSelection(self, Selection ?)"""
        return _osgManipulator.MotionCommand_removeSelection(*args)

    def getMotionMatrix(*args):
        """getMotionMatrix(self) -> Matrix"""
        return _osgManipulator.MotionCommand_getMotionMatrix(*args)

    def setLocalToWorldAndWorldToLocal(*args):
        """setLocalToWorldAndWorldToLocal(self, Matrix localToWorld, Matrix worldToLocal)"""
        return _osgManipulator.MotionCommand_setLocalToWorldAndWorldToLocal(*args)

    def getLocalToWorld(*args):
        """getLocalToWorld(self) -> Matrix"""
        return _osgManipulator.MotionCommand_getLocalToWorld(*args)

    def getWorldToLocal(*args):
        """getWorldToLocal(self) -> Matrix"""
        return _osgManipulator.MotionCommand_getWorldToLocal(*args)

    def setStage(*args):
        """setStage(self, Stage s)"""
        return _osgManipulator.MotionCommand_setStage(*args)

    def getStage(*args):
        """getStage(self) -> Stage"""
        return _osgManipulator.MotionCommand_getStage(*args)

MotionCommand_swigregister = _osgManipulator.MotionCommand_swigregister
MotionCommand_swigregister(MotionCommand)

class TranslateInLineCommand(MotionCommand):
    """Proxy of C++ TranslateInLineCommand class"""
    __swig_setmethods__ = {}
    for _s in [MotionCommand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateInLineCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MotionCommand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateInLineCommand, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TranslateInLineCommand
        __init__(self, osg::LineSegment::vec_type s, osg::LineSegment::vec_type e) -> TranslateInLineCommand
        """
        this = _osgManipulator.new_TranslateInLineCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    def execute(*args):
        """execute(self) -> bool"""
        return _osgManipulator.TranslateInLineCommand_execute(*args)

    def unexecute(*args):
        """unexecute(self) -> bool"""
        return _osgManipulator.TranslateInLineCommand_unexecute(*args)

    def applyConstraint(*args):
        """applyConstraint(self, Constraint ?)"""
        return _osgManipulator.TranslateInLineCommand_applyConstraint(*args)

    def setLine(*args):
        """setLine(self, osg::LineSegment::vec_type s, osg::LineSegment::vec_type e)"""
        return _osgManipulator.TranslateInLineCommand_setLine(*args)

    def getLineStart(*args):
        """getLineStart(self) -> osg::LineSegment::vec_type"""
        return _osgManipulator.TranslateInLineCommand_getLineStart(*args)

    def getLineEnd(*args):
        """getLineEnd(self) -> osg::LineSegment::vec_type"""
        return _osgManipulator.TranslateInLineCommand_getLineEnd(*args)

    def setTranslation(*args):
        """setTranslation(self, Vec3 t)"""
        return _osgManipulator.TranslateInLineCommand_setTranslation(*args)

    def getTranslation(*args):
        """getTranslation(self) -> Vec3"""
        return _osgManipulator.TranslateInLineCommand_getTranslation(*args)

    def getMotionMatrix(*args):
        """getMotionMatrix(self) -> Matrix"""
        return _osgManipulator.TranslateInLineCommand_getMotionMatrix(*args)

TranslateInLineCommand_swigregister = _osgManipulator.TranslateInLineCommand_swigregister
TranslateInLineCommand_swigregister(TranslateInLineCommand)

class TranslateInPlaneCommand(MotionCommand):
    """Proxy of C++ TranslateInPlaneCommand class"""
    __swig_setmethods__ = {}
    for _s in [MotionCommand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateInPlaneCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MotionCommand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateInPlaneCommand, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TranslateInPlaneCommand
        __init__(self, Plane plane) -> TranslateInPlaneCommand
        """
        this = _osgManipulator.new_TranslateInPlaneCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    def execute(*args):
        """execute(self) -> bool"""
        return _osgManipulator.TranslateInPlaneCommand_execute(*args)

    def unexecute(*args):
        """unexecute(self) -> bool"""
        return _osgManipulator.TranslateInPlaneCommand_unexecute(*args)

    def applyConstraint(*args):
        """applyConstraint(self, Constraint ?)"""
        return _osgManipulator.TranslateInPlaneCommand_applyConstraint(*args)

    def setPlane(*args):
        """setPlane(self, Plane plane)"""
        return _osgManipulator.TranslateInPlaneCommand_setPlane(*args)

    def getPlane(*args):
        """getPlane(self) -> Plane"""
        return _osgManipulator.TranslateInPlaneCommand_getPlane(*args)

    def setTranslation(*args):
        """setTranslation(self, Vec3 t)"""
        return _osgManipulator.TranslateInPlaneCommand_setTranslation(*args)

    def getTranslation(*args):
        """getTranslation(self) -> Vec3"""
        return _osgManipulator.TranslateInPlaneCommand_getTranslation(*args)

    def setReferencePoint(*args):
        """setReferencePoint(self, Vec3 rp)"""
        return _osgManipulator.TranslateInPlaneCommand_setReferencePoint(*args)

    def getReferencePoint(*args):
        """getReferencePoint(self) -> Vec3"""
        return _osgManipulator.TranslateInPlaneCommand_getReferencePoint(*args)

    def getMotionMatrix(*args):
        """getMotionMatrix(self) -> Matrix"""
        return _osgManipulator.TranslateInPlaneCommand_getMotionMatrix(*args)

TranslateInPlaneCommand_swigregister = _osgManipulator.TranslateInPlaneCommand_swigregister
TranslateInPlaneCommand_swigregister(TranslateInPlaneCommand)

class Scale1DCommand(MotionCommand):
    """Proxy of C++ Scale1DCommand class"""
    __swig_setmethods__ = {}
    for _s in [MotionCommand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale1DCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MotionCommand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale1DCommand, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Scale1DCommand"""
        this = _osgManipulator.new_Scale1DCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    def execute(*args):
        """execute(self) -> bool"""
        return _osgManipulator.Scale1DCommand_execute(*args)

    def unexecute(*args):
        """unexecute(self) -> bool"""
        return _osgManipulator.Scale1DCommand_unexecute(*args)

    def applyConstraint(*args):
        """applyConstraint(self, Constraint ?)"""
        return _osgManipulator.Scale1DCommand_applyConstraint(*args)

    def setScale(*args):
        """setScale(self, float s)"""
        return _osgManipulator.Scale1DCommand_setScale(*args)

    def getScale(*args):
        """getScale(self) -> float"""
        return _osgManipulator.Scale1DCommand_getScale(*args)

    def setScaleCenter(*args):
        """setScaleCenter(self, float center)"""
        return _osgManipulator.Scale1DCommand_setScaleCenter(*args)

    def getScaleCenter(*args):
        """getScaleCenter(self) -> float"""
        return _osgManipulator.Scale1DCommand_getScaleCenter(*args)

    def setReferencePoint(*args):
        """setReferencePoint(self, float rp)"""
        return _osgManipulator.Scale1DCommand_setReferencePoint(*args)

    def getReferencePoint(*args):
        """getReferencePoint(self) -> float"""
        return _osgManipulator.Scale1DCommand_getReferencePoint(*args)

    def setMinScale(*args):
        """setMinScale(self, float min)"""
        return _osgManipulator.Scale1DCommand_setMinScale(*args)

    def getMinScale(*args):
        """getMinScale(self) -> float"""
        return _osgManipulator.Scale1DCommand_getMinScale(*args)

    def getMotionMatrix(*args):
        """getMotionMatrix(self) -> Matrix"""
        return _osgManipulator.Scale1DCommand_getMotionMatrix(*args)

Scale1DCommand_swigregister = _osgManipulator.Scale1DCommand_swigregister
Scale1DCommand_swigregister(Scale1DCommand)

class Scale2DCommand(MotionCommand):
    """Proxy of C++ Scale2DCommand class"""
    __swig_setmethods__ = {}
    for _s in [MotionCommand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale2DCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MotionCommand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale2DCommand, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Scale2DCommand"""
        this = _osgManipulator.new_Scale2DCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    def execute(*args):
        """execute(self) -> bool"""
        return _osgManipulator.Scale2DCommand_execute(*args)

    def unexecute(*args):
        """unexecute(self) -> bool"""
        return _osgManipulator.Scale2DCommand_unexecute(*args)

    def applyConstraint(*args):
        """applyConstraint(self, Constraint ?)"""
        return _osgManipulator.Scale2DCommand_applyConstraint(*args)

    def setScale(*args):
        """setScale(self, Vec2 s)"""
        return _osgManipulator.Scale2DCommand_setScale(*args)

    def getScale(*args):
        """getScale(self) -> Vec2"""
        return _osgManipulator.Scale2DCommand_getScale(*args)

    def setScaleCenter(*args):
        """setScaleCenter(self, Vec2 center)"""
        return _osgManipulator.Scale2DCommand_setScaleCenter(*args)

    def getScaleCenter(*args):
        """getScaleCenter(self) -> Vec2"""
        return _osgManipulator.Scale2DCommand_getScaleCenter(*args)

    def setReferencePoint(*args):
        """setReferencePoint(self, Vec2 rp)"""
        return _osgManipulator.Scale2DCommand_setReferencePoint(*args)

    def getReferencePoint(*args):
        """getReferencePoint(self) -> Vec2"""
        return _osgManipulator.Scale2DCommand_getReferencePoint(*args)

    def setMinScale(*args):
        """setMinScale(self, Vec2 min)"""
        return _osgManipulator.Scale2DCommand_setMinScale(*args)

    def getMinScale(*args):
        """getMinScale(self) -> Vec2"""
        return _osgManipulator.Scale2DCommand_getMinScale(*args)

    def getMotionMatrix(*args):
        """getMotionMatrix(self) -> Matrix"""
        return _osgManipulator.Scale2DCommand_getMotionMatrix(*args)

Scale2DCommand_swigregister = _osgManipulator.Scale2DCommand_swigregister
Scale2DCommand_swigregister(Scale2DCommand)

class ScaleUniformCommand(MotionCommand):
    """Proxy of C++ ScaleUniformCommand class"""
    __swig_setmethods__ = {}
    for _s in [MotionCommand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleUniformCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MotionCommand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleUniformCommand, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ScaleUniformCommand"""
        this = _osgManipulator.new_ScaleUniformCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    def execute(*args):
        """execute(self) -> bool"""
        return _osgManipulator.ScaleUniformCommand_execute(*args)

    def unexecute(*args):
        """unexecute(self) -> bool"""
        return _osgManipulator.ScaleUniformCommand_unexecute(*args)

    def applyConstraint(*args):
        """applyConstraint(self, Constraint ?)"""
        return _osgManipulator.ScaleUniformCommand_applyConstraint(*args)

    def setScale(*args):
        """setScale(self, float s)"""
        return _osgManipulator.ScaleUniformCommand_setScale(*args)

    def getScale(*args):
        """getScale(self) -> float"""
        return _osgManipulator.ScaleUniformCommand_getScale(*args)

    def setScaleCenter(*args):
        """setScaleCenter(self, Vec3 center)"""
        return _osgManipulator.ScaleUniformCommand_setScaleCenter(*args)

    def getScaleCenter(*args):
        """getScaleCenter(self) -> Vec3"""
        return _osgManipulator.ScaleUniformCommand_getScaleCenter(*args)

    def getMotionMatrix(*args):
        """getMotionMatrix(self) -> Matrix"""
        return _osgManipulator.ScaleUniformCommand_getMotionMatrix(*args)

ScaleUniformCommand_swigregister = _osgManipulator.ScaleUniformCommand_swigregister
ScaleUniformCommand_swigregister(ScaleUniformCommand)

class Rotate3DCommand(MotionCommand):
    """Proxy of C++ Rotate3DCommand class"""
    __swig_setmethods__ = {}
    for _s in [MotionCommand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rotate3DCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [MotionCommand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rotate3DCommand, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Rotate3DCommand"""
        this = _osgManipulator.new_Rotate3DCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    def execute(*args):
        """execute(self) -> bool"""
        return _osgManipulator.Rotate3DCommand_execute(*args)

    def unexecute(*args):
        """unexecute(self) -> bool"""
        return _osgManipulator.Rotate3DCommand_unexecute(*args)

    def applyConstraint(*args):
        """applyConstraint(self, Constraint ?)"""
        return _osgManipulator.Rotate3DCommand_applyConstraint(*args)

    def setRotation(*args):
        """setRotation(self, Quat rotation)"""
        return _osgManipulator.Rotate3DCommand_setRotation(*args)

    def getRotation(*args):
        """getRotation(self) -> Quat"""
        return _osgManipulator.Rotate3DCommand_getRotation(*args)

    def getMotionMatrix(*args):
        """getMotionMatrix(self) -> Matrix"""
        return _osgManipulator.Rotate3DCommand_getMotionMatrix(*args)

Rotate3DCommand_swigregister = _osgManipulator.Rotate3DCommand_swigregister
Rotate3DCommand_swigregister(Rotate3DCommand)

OSGMANIPULATOR_DRAGGER = _osgManipulator.OSGMANIPULATOR_DRAGGER
class PointerInfo(_object):
    """Proxy of C++ PointerInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointerInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointerInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PointerInfo
        __init__(self, PointerInfo rhs) -> PointerInfo
        """
        this = _osgManipulator.new_PointerInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args):
        """reset(self)"""
        return _osgManipulator.PointerInfo_reset(*args)

    def completed(*args):
        """completed(self) -> bool"""
        return _osgManipulator.PointerInfo_completed(*args)

    def next(*args):
        """next(self)"""
        return _osgManipulator.PointerInfo_next(*args)

    def getLocalIntersectPoint(*args):
        """getLocalIntersectPoint(self) -> Vec3"""
        return _osgManipulator.PointerInfo_getLocalIntersectPoint(*args)

    def setNearFarPoints(*args):
        """setNearFarPoints(self, Vec3 nearPoint, Vec3 farPoint)"""
        return _osgManipulator.PointerInfo_setNearFarPoints(*args)

    def getEyeDir(*args):
        """getEyeDir(self) -> Vec3"""
        return _osgManipulator.PointerInfo_getEyeDir(*args)

    def getNearFarPoints(*args):
        """getNearFarPoints(self, Vec3 nearPoint, Vec3 farPoint)"""
        return _osgManipulator.PointerInfo_getNearFarPoints(*args)

    def contains(*args):
        """contains(self, Node node) -> bool"""
        return _osgManipulator.PointerInfo_contains(*args)

    def setCamera(*args):
        """setCamera(self, Camera camera)"""
        return _osgManipulator.PointerInfo_setCamera(*args)

    def addIntersection(*args):
        """addIntersection(self, NodePath nodePath, Vec3 intersectionPoint)"""
        return _osgManipulator.PointerInfo_addIntersection(*args)

    def setMousePosition(*args):
        """setMousePosition(self, float pixel_x, float pixel_y)"""
        return _osgManipulator.PointerInfo_setMousePosition(*args)

    __swig_setmethods__["_hitList"] = _osgManipulator.PointerInfo__hitList_set
    __swig_getmethods__["_hitList"] = _osgManipulator.PointerInfo__hitList_get
    if _newclass:_hitList = _swig_property(_osgManipulator.PointerInfo__hitList_get, _osgManipulator.PointerInfo__hitList_set)
    __swig_setmethods__["_hitIter"] = _osgManipulator.PointerInfo__hitIter_set
    __swig_getmethods__["_hitIter"] = _osgManipulator.PointerInfo__hitIter_get
    if _newclass:_hitIter = _swig_property(_osgManipulator.PointerInfo__hitIter_get, _osgManipulator.PointerInfo__hitIter_set)
    __swig_destroy__ = _osgManipulator.delete_PointerInfo
    __del__ = lambda self : None;
PointerInfo_swigregister = _osgManipulator.PointerInfo_swigregister
PointerInfo_swigregister(PointerInfo)

class Dragger(Selection):
    """Proxy of C++ Dragger class"""
    __swig_setmethods__ = {}
    for _s in [Selection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dragger, name, value)
    __swig_getmethods__ = {}
    for _s in [Selection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dragger, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setCommandManager(*args):
        """setCommandManager(self, CommandManager cm)"""
        return _osgManipulator.Dragger_setCommandManager(*args)

    def getCommandManager(*args):
        """
        getCommandManager(self) -> CommandManager
        getCommandManager(self) -> CommandManager
        """
        return _osgManipulator.Dragger_getCommandManager(*args)

    def setParentDragger(*args):
        """setParentDragger(self, Dragger parent)"""
        return _osgManipulator.Dragger_setParentDragger(*args)

    def getParentDragger(*args):
        """
        getParentDragger(self) -> Dragger
        getParentDragger(self) -> Dragger
        """
        return _osgManipulator.Dragger_getParentDragger(*args)

    def getComposite(*args):
        """
        getComposite(self) -> CompositeDragger
        getComposite(self) -> CompositeDragger
        """
        return _osgManipulator.Dragger_getComposite(*args)

    def handle(*args):
        """handle(self, PointerInfo ?, osgGA::GUIEventAdapter ?, osgGA::GUIActionAdapter ?) -> bool"""
        return _osgManipulator.Dragger_handle(*args)

Dragger_swigregister = _osgManipulator.Dragger_swigregister
Dragger_swigregister(Dragger)

class CompositeDragger(Dragger):
    """Proxy of C++ CompositeDragger class"""
    __swig_setmethods__ = {}
    for _s in [Dragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [Dragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeDragger, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getComposite(*args):
        """
        getComposite(self) -> CompositeDragger
        getComposite(self) -> CompositeDragger
        """
        return _osgManipulator.CompositeDragger_getComposite(*args)

    def setCommandManager(*args):
        """setCommandManager(self, CommandManager cm)"""
        return _osgManipulator.CompositeDragger_setCommandManager(*args)

    def setParentDragger(*args):
        """setParentDragger(self, Dragger parent)"""
        return _osgManipulator.CompositeDragger_setParentDragger(*args)

    def handle(*args):
        """handle(self, PointerInfo pi, osgGA::GUIEventAdapter ea, osgGA::GUIActionAdapter aa) -> bool"""
        return _osgManipulator.CompositeDragger_handle(*args)

    def addDragger(*args):
        """addDragger(self, Dragger dragger) -> bool"""
        return _osgManipulator.CompositeDragger_addDragger(*args)

    def removeDragger(*args):
        """removeDragger(self, Dragger dragger) -> bool"""
        return _osgManipulator.CompositeDragger_removeDragger(*args)

    def getNumDraggers(*args):
        """getNumDraggers(self) -> unsigned int"""
        return _osgManipulator.CompositeDragger_getNumDraggers(*args)

    def getDragger(*args):
        """
        getDragger(self, unsigned int i) -> Dragger
        getDragger(self, unsigned int i) -> Dragger
        """
        return _osgManipulator.CompositeDragger_getDragger(*args)

    def containsDragger(*args):
        """containsDragger(self, Dragger dragger) -> bool"""
        return _osgManipulator.CompositeDragger_containsDragger(*args)

    def findDragger(*args):
        """findDragger(self, Dragger dragger) -> osgManipulator::CompositeDragger::DraggerList::iterator"""
        return _osgManipulator.CompositeDragger_findDragger(*args)

CompositeDragger_swigregister = _osgManipulator.CompositeDragger_swigregister
CompositeDragger_swigregister(CompositeDragger)


def setDrawableToAlwaysCull(*args):
  """setDrawableToAlwaysCull(Drawable drawable)"""
  return _osgManipulator.setDrawableToAlwaysCull(*args)

def setMaterialColor(*args):
  """setMaterialColor(Vec4 color, Node node)"""
  return _osgManipulator.setMaterialColor(*args)
OSGMANIPULATOR_COMMANDMANAGER = _osgManipulator.OSGMANIPULATOR_COMMANDMANAGER
class CommandManager(osg.Referenced):
    """Proxy of C++ CommandManager class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandManager, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommandManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> CommandManager"""
        this = _osgManipulator.new_CommandManager(*args)
        try: self.this.append(this)
        except: self.this = this
    def connect(*args):
        """
        connect(self, Dragger dragger, Selection selection) -> bool
        connect(self, Dragger dragger, Constraint constrain) -> bool
        """
        return _osgManipulator.CommandManager_connect(*args)

    def disconnect(*args):
        """disconnect(self, Dragger dragger) -> bool"""
        return _osgManipulator.CommandManager_disconnect(*args)

    def dispatch(*args):
        """dispatch(self, MotionCommand command)"""
        return _osgManipulator.CommandManager_dispatch(*args)

    def addSelectionsToCommand(*args):
        """addSelectionsToCommand(self, MotionCommand command, Dragger dragger)"""
        return _osgManipulator.CommandManager_addSelectionsToCommand(*args)

CommandManager_swigregister = _osgManipulator.CommandManager_swigregister
CommandManager_swigregister(CommandManager)

OSGMANIPULATOR_CONSTRAINT = _osgManipulator.OSGMANIPULATOR_CONSTRAINT
class Constraint(osg.Referenced):
    """Proxy of C++ Constraint class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def constrain(*args):
        """
        constrain(self, MotionCommand ?) -> bool
        constrain(self, TranslateInLineCommand command) -> bool
        constrain(self, TranslateInPlaneCommand command) -> bool
        constrain(self, Scale1DCommand command) -> bool
        constrain(self, Scale2DCommand command) -> bool
        constrain(self, ScaleUniformCommand command) -> bool
        """
        return _osgManipulator.Constraint_constrain(*args)

Constraint_swigregister = _osgManipulator.Constraint_swigregister
Constraint_swigregister(Constraint)

class GridConstraint(Constraint):
    """Proxy of C++ GridConstraint class"""
    __swig_setmethods__ = {}
    for _s in [Constraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GridConstraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Node refNode, Vec3d origin, Vec3d spacing) -> GridConstraint"""
        this = _osgManipulator.new_GridConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def setOrigin(*args):
        """setOrigin(self, Vec3d origin)"""
        return _osgManipulator.GridConstraint_setOrigin(*args)

    def setSpacing(*args):
        """setSpacing(self, Vec3d spacing)"""
        return _osgManipulator.GridConstraint_setSpacing(*args)

    def constrain(*args):
        """
        constrain(self, TranslateInLineCommand command) -> bool
        constrain(self, TranslateInPlaneCommand command) -> bool
        constrain(self, Scale1DCommand command) -> bool
        constrain(self, Scale2DCommand command) -> bool
        constrain(self, ScaleUniformCommand command) -> bool
        """
        return _osgManipulator.GridConstraint_constrain(*args)

GridConstraint_swigregister = _osgManipulator.GridConstraint_swigregister
GridConstraint_swigregister(GridConstraint)

OSGMANIPULATOR_PROJECTOR = _osgManipulator.OSGMANIPULATOR_PROJECTOR
class Projector(osg.Referenced):
    """Proxy of C++ Projector class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Projector, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Projector, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def project(*args):
        """project(self, PointerInfo pi, Vec3 projectedPoint) -> bool"""
        return _osgManipulator.Projector_project(*args)

    def setLocalToWorld(*args):
        """setLocalToWorld(self, Matrix localToWorld)"""
        return _osgManipulator.Projector_setLocalToWorld(*args)

    def getLocalToWorld(*args):
        """getLocalToWorld(self) -> Matrix"""
        return _osgManipulator.Projector_getLocalToWorld(*args)

    def getWorldToLocal(*args):
        """getWorldToLocal(self) -> Matrix"""
        return _osgManipulator.Projector_getWorldToLocal(*args)

Projector_swigregister = _osgManipulator.Projector_swigregister
Projector_swigregister(Projector)

class LineProjector(Projector):
    """Proxy of C++ LineProjector class"""
    __swig_setmethods__ = {}
    for _s in [Projector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineProjector, name, value)
    __swig_getmethods__ = {}
    for _s in [Projector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineProjector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LineProjector
        __init__(self, osg::LineSegment::vec_type s, osg::LineSegment::vec_type e) -> LineProjector
        """
        this = _osgManipulator.new_LineProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def setLine(*args):
        """setLine(self, osg::LineSegment::vec_type s, osg::LineSegment::vec_type e)"""
        return _osgManipulator.LineProjector_setLine(*args)

    def getLineStart(*args):
        """
        getLineStart(self) -> osg::LineSegment::vec_type
        getLineStart(self) -> osg::LineSegment::vec_type
        """
        return _osgManipulator.LineProjector_getLineStart(*args)

    def getLineEnd(*args):
        """
        getLineEnd(self) -> osg::LineSegment::vec_type
        getLineEnd(self) -> osg::LineSegment::vec_type
        """
        return _osgManipulator.LineProjector_getLineEnd(*args)

    def project(*args):
        """project(self, PointerInfo pi, Vec3 projectedPoint) -> bool"""
        return _osgManipulator.LineProjector_project(*args)

LineProjector_swigregister = _osgManipulator.LineProjector_swigregister
LineProjector_swigregister(LineProjector)

class PlaneProjector(Projector):
    """Proxy of C++ PlaneProjector class"""
    __swig_setmethods__ = {}
    for _s in [Projector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlaneProjector, name, value)
    __swig_getmethods__ = {}
    for _s in [Projector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlaneProjector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PlaneProjector
        __init__(self, Plane plane) -> PlaneProjector
        """
        this = _osgManipulator.new_PlaneProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPlane(*args):
        """setPlane(self, Plane plane)"""
        return _osgManipulator.PlaneProjector_setPlane(*args)

    def getPlane(*args):
        """getPlane(self) -> Plane"""
        return _osgManipulator.PlaneProjector_getPlane(*args)

    def project(*args):
        """project(self, PointerInfo pi, Vec3 projectedPoint) -> bool"""
        return _osgManipulator.PlaneProjector_project(*args)

PlaneProjector_swigregister = _osgManipulator.PlaneProjector_swigregister
PlaneProjector_swigregister(PlaneProjector)

class SphereProjector(Projector):
    """Proxy of C++ SphereProjector class"""
    __swig_setmethods__ = {}
    for _s in [Projector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereProjector, name, value)
    __swig_getmethods__ = {}
    for _s in [Projector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphereProjector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SphereProjector
        __init__(self, Sphere sphere) -> SphereProjector
        """
        this = _osgManipulator.new_SphereProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def setSphere(*args):
        """setSphere(self, Sphere sphere)"""
        return _osgManipulator.SphereProjector_setSphere(*args)

    def getSphere(*args):
        """getSphere(self) -> Sphere"""
        return _osgManipulator.SphereProjector_getSphere(*args)

    def project(*args):
        """project(self, PointerInfo pi, Vec3 projectedPoint) -> bool"""
        return _osgManipulator.SphereProjector_project(*args)

    def isPointInFront(*args):
        """isPointInFront(self, PointerInfo pi, Matrix localToWorld) -> bool"""
        return _osgManipulator.SphereProjector_isPointInFront(*args)

    def setFront(*args):
        """setFront(self, bool front)"""
        return _osgManipulator.SphereProjector_setFront(*args)

SphereProjector_swigregister = _osgManipulator.SphereProjector_swigregister
SphereProjector_swigregister(SphereProjector)

class SpherePlaneProjector(SphereProjector):
    """Proxy of C++ SpherePlaneProjector class"""
    __swig_setmethods__ = {}
    for _s in [SphereProjector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpherePlaneProjector, name, value)
    __swig_getmethods__ = {}
    for _s in [SphereProjector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpherePlaneProjector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SpherePlaneProjector
        __init__(self, Sphere sphere) -> SpherePlaneProjector
        """
        this = _osgManipulator.new_SpherePlaneProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def project(*args):
        """project(self, PointerInfo pi, Vec3 projectedPoint) -> bool"""
        return _osgManipulator.SpherePlaneProjector_project(*args)

    def isProjectionOnSphere(*args):
        """isProjectionOnSphere(self) -> bool"""
        return _osgManipulator.SpherePlaneProjector_isProjectionOnSphere(*args)

    def getRotation(*args):
        """
        getRotation(self, Vec3 p1, bool p1OnSphere, Vec3 p2, bool p2OnSphere, 
            float radialFactor=0.0) -> Quat
        getRotation(self, Vec3 p1, bool p1OnSphere, Vec3 p2, bool p2OnSphere) -> Quat
        """
        return _osgManipulator.SpherePlaneProjector_getRotation(*args)

SpherePlaneProjector_swigregister = _osgManipulator.SpherePlaneProjector_swigregister
SpherePlaneProjector_swigregister(SpherePlaneProjector)

class CylinderProjector(Projector):
    """Proxy of C++ CylinderProjector class"""
    __swig_setmethods__ = {}
    for _s in [Projector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylinderProjector, name, value)
    __swig_getmethods__ = {}
    for _s in [Projector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CylinderProjector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CylinderProjector
        __init__(self, Cylinder cylinder) -> CylinderProjector
        """
        this = _osgManipulator.new_CylinderProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def setCylinder(*args):
        """setCylinder(self, Cylinder cylinder)"""
        return _osgManipulator.CylinderProjector_setCylinder(*args)

    def getCylinder(*args):
        """getCylinder(self) -> Cylinder"""
        return _osgManipulator.CylinderProjector_getCylinder(*args)

    def project(*args):
        """project(self, PointerInfo pi, Vec3 projectedPoint) -> bool"""
        return _osgManipulator.CylinderProjector_project(*args)

    def isPointInFront(*args):
        """isPointInFront(self, PointerInfo pi, Matrix localToWorld) -> bool"""
        return _osgManipulator.CylinderProjector_isPointInFront(*args)

    def setFront(*args):
        """setFront(self, bool front)"""
        return _osgManipulator.CylinderProjector_setFront(*args)

CylinderProjector_swigregister = _osgManipulator.CylinderProjector_swigregister
CylinderProjector_swigregister(CylinderProjector)

class CylinderPlaneProjector(CylinderProjector):
    """Proxy of C++ CylinderPlaneProjector class"""
    __swig_setmethods__ = {}
    for _s in [CylinderProjector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylinderPlaneProjector, name, value)
    __swig_getmethods__ = {}
    for _s in [CylinderProjector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CylinderPlaneProjector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CylinderPlaneProjector
        __init__(self, Cylinder cylinder) -> CylinderPlaneProjector
        """
        this = _osgManipulator.new_CylinderPlaneProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def project(*args):
        """project(self, PointerInfo pi, Vec3 projectedPoint) -> bool"""
        return _osgManipulator.CylinderPlaneProjector_project(*args)

    def isProjectionOnCylinder(*args):
        """isProjectionOnCylinder(self) -> bool"""
        return _osgManipulator.CylinderPlaneProjector_isProjectionOnCylinder(*args)

    def getRotation(*args):
        """getRotation(self, Vec3 p1, bool p1OnCyl, Vec3 p2, bool p2OnCyl) -> Quat"""
        return _osgManipulator.CylinderPlaneProjector_getRotation(*args)

CylinderPlaneProjector_swigregister = _osgManipulator.CylinderPlaneProjector_swigregister
CylinderPlaneProjector_swigregister(CylinderPlaneProjector)

OSGMANIPULATOR_ROTATECYLINDERDRAGGER = _osgManipulator.OSGMANIPULATOR_ROTATECYLINDERDRAGGER
class RotateCylinderDragger(Dragger):
    """Proxy of C++ RotateCylinderDragger class"""
    __swig_setmethods__ = {}
    for _s in [Dragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotateCylinderDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [Dragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotateCylinderDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> RotateCylinderDragger"""
        this = _osgManipulator.new_RotateCylinderDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def handle(*args):
        """handle(self, PointerInfo pi, osgGA::GUIEventAdapter ea, osgGA::GUIActionAdapter us) -> bool"""
        return _osgManipulator.RotateCylinderDragger_handle(*args)

    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.RotateCylinderDragger_setupDefaultGeometry(*args)

    def setColor(*args):
        """setColor(self, Vec4 color)"""
        return _osgManipulator.RotateCylinderDragger_setColor(*args)

    def getColor(*args):
        """getColor(self) -> Vec4"""
        return _osgManipulator.RotateCylinderDragger_getColor(*args)

    def setPickColor(*args):
        """setPickColor(self, Vec4 color)"""
        return _osgManipulator.RotateCylinderDragger_setPickColor(*args)

    def getPickColor(*args):
        """getPickColor(self) -> Vec4"""
        return _osgManipulator.RotateCylinderDragger_getPickColor(*args)

RotateCylinderDragger_swigregister = _osgManipulator.RotateCylinderDragger_swigregister
RotateCylinderDragger_swigregister(RotateCylinderDragger)

OSGMANIPULATOR_ROTATESPHEREDRAGGER = _osgManipulator.OSGMANIPULATOR_ROTATESPHEREDRAGGER
class RotateSphereDragger(Dragger):
    """Proxy of C++ RotateSphereDragger class"""
    __swig_setmethods__ = {}
    for _s in [Dragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotateSphereDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [Dragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotateSphereDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> RotateSphereDragger"""
        this = _osgManipulator.new_RotateSphereDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def handle(*args):
        """handle(self, PointerInfo ?, osgGA::GUIEventAdapter ea, osgGA::GUIActionAdapter us) -> bool"""
        return _osgManipulator.RotateSphereDragger_handle(*args)

    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.RotateSphereDragger_setupDefaultGeometry(*args)

    def setColor(*args):
        """setColor(self, Vec4 color)"""
        return _osgManipulator.RotateSphereDragger_setColor(*args)

    def getColor(*args):
        """getColor(self) -> Vec4"""
        return _osgManipulator.RotateSphereDragger_getColor(*args)

    def setPickColor(*args):
        """setPickColor(self, Vec4 color)"""
        return _osgManipulator.RotateSphereDragger_setPickColor(*args)

    def getPickColor(*args):
        """getPickColor(self) -> Vec4"""
        return _osgManipulator.RotateSphereDragger_getPickColor(*args)

RotateSphereDragger_swigregister = _osgManipulator.RotateSphereDragger_swigregister
RotateSphereDragger_swigregister(RotateSphereDragger)

OSGMANIPULATOR_SCALE1DDRAGGER = _osgManipulator.OSGMANIPULATOR_SCALE1DDRAGGER
class Scale1DDragger(Dragger):
    """Proxy of C++ Scale1DDragger class"""
    __swig_setmethods__ = {}
    for _s in [Dragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale1DDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [Dragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale1DDragger, name)
    __repr__ = _swig_repr
    SCALE_WITH_ORIGIN_AS_PIVOT = _osgManipulator.Scale1DDragger_SCALE_WITH_ORIGIN_AS_PIVOT
    SCALE_WITH_OPPOSITE_HANDLE_AS_PIVOT = _osgManipulator.Scale1DDragger_SCALE_WITH_OPPOSITE_HANDLE_AS_PIVOT
    def __init__(self, *args): 
        """
        __init__(self, ScaleMode scaleMode=SCALE_WITH_ORIGIN_AS_PIVOT) -> Scale1DDragger
        __init__(self) -> Scale1DDragger
        """
        this = _osgManipulator.new_Scale1DDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def handle(*args):
        """handle(self, PointerInfo pi, osgGA::GUIEventAdapter ea, osgGA::GUIActionAdapter us) -> bool"""
        return _osgManipulator.Scale1DDragger_handle(*args)

    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.Scale1DDragger_setupDefaultGeometry(*args)

    def setMinScale(*args):
        """setMinScale(self, float min)"""
        return _osgManipulator.Scale1DDragger_setMinScale(*args)

    def getMinScale(*args):
        """getMinScale(self) -> float"""
        return _osgManipulator.Scale1DDragger_getMinScale(*args)

    def setColor(*args):
        """setColor(self, Vec4 color)"""
        return _osgManipulator.Scale1DDragger_setColor(*args)

    def getColor(*args):
        """getColor(self) -> Vec4"""
        return _osgManipulator.Scale1DDragger_getColor(*args)

    def setPickColor(*args):
        """setPickColor(self, Vec4 color)"""
        return _osgManipulator.Scale1DDragger_setPickColor(*args)

    def getPickColor(*args):
        """getPickColor(self) -> Vec4"""
        return _osgManipulator.Scale1DDragger_getPickColor(*args)

    def setLeftHandleNode(*args):
        """setLeftHandleNode(self, Node node)"""
        return _osgManipulator.Scale1DDragger_setLeftHandleNode(*args)

    def setRightHandleNode(*args):
        """setRightHandleNode(self, Node node)"""
        return _osgManipulator.Scale1DDragger_setRightHandleNode(*args)

    def getLeftHandleNode(*args):
        """getLeftHandleNode(self) -> Node"""
        return _osgManipulator.Scale1DDragger_getLeftHandleNode(*args)

    def getRightHandleNode(*args):
        """getRightHandleNode(self) -> Node"""
        return _osgManipulator.Scale1DDragger_getRightHandleNode(*args)

    def setLeftHandlePosition(*args):
        """setLeftHandlePosition(self, float pos)"""
        return _osgManipulator.Scale1DDragger_setLeftHandlePosition(*args)

    def getLeftHandlePosition(*args):
        """getLeftHandlePosition(self) -> float"""
        return _osgManipulator.Scale1DDragger_getLeftHandlePosition(*args)

    def setRightHandlePosition(*args):
        """setRightHandlePosition(self, float pos)"""
        return _osgManipulator.Scale1DDragger_setRightHandlePosition(*args)

    def getRightHandlePosition(*args):
        """getRightHandlePosition(self) -> float"""
        return _osgManipulator.Scale1DDragger_getRightHandlePosition(*args)

Scale1DDragger_swigregister = _osgManipulator.Scale1DDragger_swigregister
Scale1DDragger_swigregister(Scale1DDragger)

OSGMANIPULATOR_SCALE2DDRAGGER = _osgManipulator.OSGMANIPULATOR_SCALE2DDRAGGER
class Scale2DDragger(Dragger):
    """Proxy of C++ Scale2DDragger class"""
    __swig_setmethods__ = {}
    for _s in [Dragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale2DDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [Dragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale2DDragger, name)
    __repr__ = _swig_repr
    SCALE_WITH_ORIGIN_AS_PIVOT = _osgManipulator.Scale2DDragger_SCALE_WITH_ORIGIN_AS_PIVOT
    SCALE_WITH_OPPOSITE_HANDLE_AS_PIVOT = _osgManipulator.Scale2DDragger_SCALE_WITH_OPPOSITE_HANDLE_AS_PIVOT
    def __init__(self, *args): 
        """
        __init__(self, ScaleMode scaleMode=SCALE_WITH_ORIGIN_AS_PIVOT) -> Scale2DDragger
        __init__(self) -> Scale2DDragger
        """
        this = _osgManipulator.new_Scale2DDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def handle(*args):
        """handle(self, PointerInfo pi, osgGA::GUIEventAdapter ea, osgGA::GUIActionAdapter us) -> bool"""
        return _osgManipulator.Scale2DDragger_handle(*args)

    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.Scale2DDragger_setupDefaultGeometry(*args)

    def setMinScale(*args):
        """setMinScale(self, Vec2 min)"""
        return _osgManipulator.Scale2DDragger_setMinScale(*args)

    def getMinScale(*args):
        """getMinScale(self) -> Vec2"""
        return _osgManipulator.Scale2DDragger_getMinScale(*args)

    def setColor(*args):
        """setColor(self, Vec4 color)"""
        return _osgManipulator.Scale2DDragger_setColor(*args)

    def getColor(*args):
        """getColor(self) -> Vec4"""
        return _osgManipulator.Scale2DDragger_getColor(*args)

    def setPickColor(*args):
        """setPickColor(self, Vec4 color)"""
        return _osgManipulator.Scale2DDragger_setPickColor(*args)

    def getPickColor(*args):
        """getPickColor(self) -> Vec4"""
        return _osgManipulator.Scale2DDragger_getPickColor(*args)

    def setTopLeftHandleNode(*args):
        """setTopLeftHandleNode(self, Node node)"""
        return _osgManipulator.Scale2DDragger_setTopLeftHandleNode(*args)

    def getTopLeftHandleNode(*args):
        """getTopLeftHandleNode(self) -> Node"""
        return _osgManipulator.Scale2DDragger_getTopLeftHandleNode(*args)

    def setBottomLeftHandleNode(*args):
        """setBottomLeftHandleNode(self, Node node)"""
        return _osgManipulator.Scale2DDragger_setBottomLeftHandleNode(*args)

    def getBottomLeftHandleNode(*args):
        """getBottomLeftHandleNode(self) -> Node"""
        return _osgManipulator.Scale2DDragger_getBottomLeftHandleNode(*args)

    def setTopRightHandleNode(*args):
        """setTopRightHandleNode(self, Node node)"""
        return _osgManipulator.Scale2DDragger_setTopRightHandleNode(*args)

    def getTopRightHandleNode(*args):
        """getTopRightHandleNode(self) -> Node"""
        return _osgManipulator.Scale2DDragger_getTopRightHandleNode(*args)

    def setBottomRightHandleNode(*args):
        """setBottomRightHandleNode(self, Node node)"""
        return _osgManipulator.Scale2DDragger_setBottomRightHandleNode(*args)

    def getBottomRightHandleNode(*args):
        """getBottomRightHandleNode(self) -> Node"""
        return _osgManipulator.Scale2DDragger_getBottomRightHandleNode(*args)

    def setTopLeftHandlePosition(*args):
        """setTopLeftHandlePosition(self, Vec2 pos)"""
        return _osgManipulator.Scale2DDragger_setTopLeftHandlePosition(*args)

    def getTopLeftHandlePosition(*args):
        """getTopLeftHandlePosition(self) -> Vec2"""
        return _osgManipulator.Scale2DDragger_getTopLeftHandlePosition(*args)

    def setBottomLeftHandlePosition(*args):
        """setBottomLeftHandlePosition(self, Vec2 pos)"""
        return _osgManipulator.Scale2DDragger_setBottomLeftHandlePosition(*args)

    def getBottomLeftHandlePosition(*args):
        """getBottomLeftHandlePosition(self) -> Vec2"""
        return _osgManipulator.Scale2DDragger_getBottomLeftHandlePosition(*args)

    def setTopRightHandlePosition(*args):
        """setTopRightHandlePosition(self, Vec2 pos)"""
        return _osgManipulator.Scale2DDragger_setTopRightHandlePosition(*args)

    def getTopRightHandlePosition(*args):
        """getTopRightHandlePosition(self) -> Vec2"""
        return _osgManipulator.Scale2DDragger_getTopRightHandlePosition(*args)

    def setBottomRightHandlePosition(*args):
        """setBottomRightHandlePosition(self, Vec2 pos)"""
        return _osgManipulator.Scale2DDragger_setBottomRightHandlePosition(*args)

    def getBottomRightHandlePosition(*args):
        """getBottomRightHandlePosition(self) -> Vec2"""
        return _osgManipulator.Scale2DDragger_getBottomRightHandlePosition(*args)

Scale2DDragger_swigregister = _osgManipulator.Scale2DDragger_swigregister
Scale2DDragger_swigregister(Scale2DDragger)

OSGMANIPULATOR_SCALEAXISDRAGGER = _osgManipulator.OSGMANIPULATOR_SCALEAXISDRAGGER
class ScaleAxisDragger(CompositeDragger):
    """Proxy of C++ ScaleAxisDragger class"""
    __swig_setmethods__ = {}
    for _s in [CompositeDragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleAxisDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [CompositeDragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleAxisDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ScaleAxisDragger"""
        this = _osgManipulator.new_ScaleAxisDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.ScaleAxisDragger_setupDefaultGeometry(*args)

ScaleAxisDragger_swigregister = _osgManipulator.ScaleAxisDragger_swigregister
ScaleAxisDragger_swigregister(ScaleAxisDragger)

OSGMANIPULATOR_TABBOXDRAGGER = _osgManipulator.OSGMANIPULATOR_TABBOXDRAGGER
class TabBoxDragger(CompositeDragger):
    """Proxy of C++ TabBoxDragger class"""
    __swig_setmethods__ = {}
    for _s in [CompositeDragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabBoxDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [CompositeDragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabBoxDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> TabBoxDragger"""
        this = _osgManipulator.new_TabBoxDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.TabBoxDragger_setupDefaultGeometry(*args)

    def setPlaneColor(*args):
        """setPlaneColor(self, Vec4 color)"""
        return _osgManipulator.TabBoxDragger_setPlaneColor(*args)

TabBoxDragger_swigregister = _osgManipulator.TabBoxDragger_swigregister
TabBoxDragger_swigregister(TabBoxDragger)

OSGMANIPULATOR_TABPLANEDRAGGER = _osgManipulator.OSGMANIPULATOR_TABPLANEDRAGGER
class TabPlaneDragger(CompositeDragger):
    """Proxy of C++ TabPlaneDragger class"""
    __swig_setmethods__ = {}
    for _s in [CompositeDragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabPlaneDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [CompositeDragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabPlaneDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> TabPlaneDragger"""
        this = _osgManipulator.new_TabPlaneDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def handle(*args):
        """handle(self, PointerInfo pi, osgGA::GUIEventAdapter ea, osgGA::GUIActionAdapter us) -> bool"""
        return _osgManipulator.TabPlaneDragger_handle(*args)

    def setupDefaultGeometry(*args):
        """
        setupDefaultGeometry(self, bool twoSidedHandle=True)
        setupDefaultGeometry(self)
        """
        return _osgManipulator.TabPlaneDragger_setupDefaultGeometry(*args)

    def setPlaneColor(*args):
        """setPlaneColor(self, Vec4 color)"""
        return _osgManipulator.TabPlaneDragger_setPlaneColor(*args)

TabPlaneDragger_swigregister = _osgManipulator.TabPlaneDragger_swigregister
TabPlaneDragger_swigregister(TabPlaneDragger)

OSGMANIPULATOR_TABPLANETRACKBALLDRAGGER = _osgManipulator.OSGMANIPULATOR_TABPLANETRACKBALLDRAGGER
class TabPlaneTrackballDragger(CompositeDragger):
    """Proxy of C++ TabPlaneTrackballDragger class"""
    __swig_setmethods__ = {}
    for _s in [CompositeDragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabPlaneTrackballDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [CompositeDragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TabPlaneTrackballDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> TabPlaneTrackballDragger"""
        this = _osgManipulator.new_TabPlaneTrackballDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.TabPlaneTrackballDragger_setupDefaultGeometry(*args)

    def setPlaneColor(*args):
        """setPlaneColor(self, Vec4 color)"""
        return _osgManipulator.TabPlaneTrackballDragger_setPlaneColor(*args)

TabPlaneTrackballDragger_swigregister = _osgManipulator.TabPlaneTrackballDragger_swigregister
TabPlaneTrackballDragger_swigregister(TabPlaneTrackballDragger)

OSGMANIPULATOR_TRACKBALLDRAGGER = _osgManipulator.OSGMANIPULATOR_TRACKBALLDRAGGER
class TrackballDragger(CompositeDragger):
    """Proxy of C++ TrackballDragger class"""
    __swig_setmethods__ = {}
    for _s in [CompositeDragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrackballDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [CompositeDragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrackballDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, bool useAutoTransform=False) -> TrackballDragger
        __init__(self) -> TrackballDragger
        """
        this = _osgManipulator.new_TrackballDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.TrackballDragger_setupDefaultGeometry(*args)

TrackballDragger_swigregister = _osgManipulator.TrackballDragger_swigregister
TrackballDragger_swigregister(TrackballDragger)

OSGMANIPULATOR_TRANSLATE1DDRAGGER = _osgManipulator.OSGMANIPULATOR_TRANSLATE1DDRAGGER
class Translate1DDragger(Dragger):
    """Proxy of C++ Translate1DDragger class"""
    __swig_setmethods__ = {}
    for _s in [Dragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Translate1DDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [Dragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Translate1DDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Translate1DDragger
        __init__(self, Vec3 s, Vec3 e) -> Translate1DDragger
        """
        this = _osgManipulator.new_Translate1DDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def handle(*args):
        """handle(self, PointerInfo pi, osgGA::GUIEventAdapter ea, osgGA::GUIActionAdapter us) -> bool"""
        return _osgManipulator.Translate1DDragger_handle(*args)

    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.Translate1DDragger_setupDefaultGeometry(*args)

    def setColor(*args):
        """setColor(self, Vec4 color)"""
        return _osgManipulator.Translate1DDragger_setColor(*args)

    def getColor(*args):
        """getColor(self) -> Vec4"""
        return _osgManipulator.Translate1DDragger_getColor(*args)

    def setPickColor(*args):
        """setPickColor(self, Vec4 color)"""
        return _osgManipulator.Translate1DDragger_setPickColor(*args)

    def getPickColor(*args):
        """getPickColor(self) -> Vec4"""
        return _osgManipulator.Translate1DDragger_getPickColor(*args)

    def setCheckForNodeInNodePath(*args):
        """setCheckForNodeInNodePath(self, bool onOff)"""
        return _osgManipulator.Translate1DDragger_setCheckForNodeInNodePath(*args)

Translate1DDragger_swigregister = _osgManipulator.Translate1DDragger_swigregister
Translate1DDragger_swigregister(Translate1DDragger)

OSGMANIPULATOR_TRANSLATE2DDRAGGER = _osgManipulator.OSGMANIPULATOR_TRANSLATE2DDRAGGER
class Translate2DDragger(Dragger):
    """Proxy of C++ Translate2DDragger class"""
    __swig_setmethods__ = {}
    for _s in [Dragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Translate2DDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [Dragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Translate2DDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Translate2DDragger
        __init__(self, Plane plane) -> Translate2DDragger
        """
        this = _osgManipulator.new_Translate2DDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def handle(*args):
        """handle(self, PointerInfo pi, osgGA::GUIEventAdapter ea, osgGA::GUIActionAdapter us) -> bool"""
        return _osgManipulator.Translate2DDragger_handle(*args)

    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.Translate2DDragger_setupDefaultGeometry(*args)

    def setColor(*args):
        """setColor(self, Vec4 color)"""
        return _osgManipulator.Translate2DDragger_setColor(*args)

    def getColor(*args):
        """getColor(self) -> Vec4"""
        return _osgManipulator.Translate2DDragger_getColor(*args)

    def setPickColor(*args):
        """setPickColor(self, Vec4 color)"""
        return _osgManipulator.Translate2DDragger_setPickColor(*args)

    def getPickColor(*args):
        """getPickColor(self) -> Vec4"""
        return _osgManipulator.Translate2DDragger_getPickColor(*args)

Translate2DDragger_swigregister = _osgManipulator.Translate2DDragger_swigregister
Translate2DDragger_swigregister(Translate2DDragger)

OSGMANIPULATOR_TRANSLATEAXISDRAGGER = _osgManipulator.OSGMANIPULATOR_TRANSLATEAXISDRAGGER
class TranslateAxisDragger(CompositeDragger):
    """Proxy of C++ TranslateAxisDragger class"""
    __swig_setmethods__ = {}
    for _s in [CompositeDragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateAxisDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [CompositeDragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateAxisDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> TranslateAxisDragger"""
        this = _osgManipulator.new_TranslateAxisDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.TranslateAxisDragger_setupDefaultGeometry(*args)

TranslateAxisDragger_swigregister = _osgManipulator.TranslateAxisDragger_swigregister
TranslateAxisDragger_swigregister(TranslateAxisDragger)

OSGMANIPULATOR_TRANSLATEPLANEDRAGGER = _osgManipulator.OSGMANIPULATOR_TRANSLATEPLANEDRAGGER
class TranslatePlaneDragger(CompositeDragger):
    """Proxy of C++ TranslatePlaneDragger class"""
    __swig_setmethods__ = {}
    for _s in [CompositeDragger]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslatePlaneDragger, name, value)
    __swig_getmethods__ = {}
    for _s in [CompositeDragger]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslatePlaneDragger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> TranslatePlaneDragger"""
        this = _osgManipulator.new_TranslatePlaneDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def handle(*args):
        """handle(self, PointerInfo pi, osgGA::GUIEventAdapter ea, osgGA::GUIActionAdapter us) -> bool"""
        return _osgManipulator.TranslatePlaneDragger_handle(*args)

    def setupDefaultGeometry(*args):
        """setupDefaultGeometry(self)"""
        return _osgManipulator.TranslatePlaneDragger_setupDefaultGeometry(*args)

    def setColor(*args):
        """setColor(self, Vec4 color)"""
        return _osgManipulator.TranslatePlaneDragger_setColor(*args)

    def getTranslate1DDragger(*args):
        """getTranslate1DDragger(self) -> Translate1DDragger"""
        return _osgManipulator.TranslatePlaneDragger_getTranslate1DDragger(*args)

    def getTranslate2DDragger(*args):
        """getTranslate2DDragger(self) -> Translate2DDragger"""
        return _osgManipulator.TranslatePlaneDragger_getTranslate2DDragger(*args)

TranslatePlaneDragger_swigregister = _osgManipulator.TranslatePlaneDragger_swigregister
TranslatePlaneDragger_swigregister(TranslatePlaneDragger)


def NodeToDragger(*args):
  """NodeToDragger(Node d) -> Dragger"""
  return _osgManipulator.NodeToDragger(*args)

def NodeToSelection(*args):
  """NodeToSelection(Node d) -> Selection"""
  return _osgManipulator.NodeToSelection(*args)


