# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osgAnimation', [dirname(__file__)])
        except ImportError:
            import _osgAnimation
            return _osgAnimation
        if fp is not None:
            try:
                _mod = imp.load_module('_osgAnimation', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osgAnimation = swig_import_helper()
    del swig_import_helper
else:
    import _osgAnimation
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgAnimation.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _osgAnimation.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgAnimation.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _osgAnimation.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _osgAnimation.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgAnimation.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _osgAnimation.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _osgAnimation.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _osgAnimation.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _osgAnimation.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgAnimation.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgAnimation.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _osgAnimation.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgAnimation.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgAnimation.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgAnimation.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osgAnimation.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osgAnimation.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import osg

def dynamic_cast_Bone(*args):
  """dynamic_cast_Bone(Node node) -> Bone"""
  return _osgAnimation.dynamic_cast_Bone(*args)

def dynamic_cast_Skeleton(*args):
  """dynamic_cast_Skeleton(Node node) -> Skeleton"""
  return _osgAnimation.dynamic_cast_Skeleton(*args)

def dynamic_cast_RigGeometry(*args):
  """dynamic_cast_RigGeometry(Geometry geometry) -> RigGeometry"""
  return _osgAnimation.dynamic_cast_RigGeometry(*args)
class Vec3Packed(_object):
    """Proxy of C++ osgAnimation::Vec3Packed class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3Packed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3Packed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m32bits"] = _osgAnimation.Vec3Packed_m32bits_set
    __swig_getmethods__["m32bits"] = _osgAnimation.Vec3Packed_m32bits_get
    if _newclass:m32bits = _swig_property(_osgAnimation.Vec3Packed_m32bits_get, _osgAnimation.Vec3Packed_m32bits_set)
    def __init__(self, *args): 
        """
        __init__(osgAnimation::Vec3Packed self, osgAnimation::Vec3Packed::uint32_t val) -> Vec3Packed
        __init__(osgAnimation::Vec3Packed self) -> Vec3Packed
        """
        this = _osgAnimation.new_Vec3Packed(*args)
        try: self.this.append(this)
        except: self.this = this
    def uncompress(self, *args):
        """uncompress(Vec3Packed self, Vec3f scale, Vec3f min, Vec3f result)"""
        return _osgAnimation.Vec3Packed_uncompress(self, *args)

    def compress(self, *args):
        """compress(Vec3Packed self, Vec3f src, Vec3f min, Vec3f scaleInv)"""
        return _osgAnimation.Vec3Packed_compress(self, *args)

    __swig_destroy__ = _osgAnimation.delete_Vec3Packed
    __del__ = lambda self : None;
Vec3Packed_swigregister = _osgAnimation.Vec3Packed_swigregister
Vec3Packed_swigregister(Vec3Packed)

class Vec3ArrayPacked(_object):
    """Proxy of C++ osgAnimation::Vec3ArrayPacked class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3ArrayPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3ArrayPacked, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mVecCompressed"] = _osgAnimation.Vec3ArrayPacked_mVecCompressed_set
    __swig_getmethods__["mVecCompressed"] = _osgAnimation.Vec3ArrayPacked_mVecCompressed_get
    if _newclass:mVecCompressed = _swig_property(_osgAnimation.Vec3ArrayPacked_mVecCompressed_get, _osgAnimation.Vec3ArrayPacked_mVecCompressed_set)
    __swig_setmethods__["mMin"] = _osgAnimation.Vec3ArrayPacked_mMin_set
    __swig_getmethods__["mMin"] = _osgAnimation.Vec3ArrayPacked_mMin_get
    if _newclass:mMin = _swig_property(_osgAnimation.Vec3ArrayPacked_mMin_get, _osgAnimation.Vec3ArrayPacked_mMin_set)
    __swig_setmethods__["mScale"] = _osgAnimation.Vec3ArrayPacked_mScale_set
    __swig_getmethods__["mScale"] = _osgAnimation.Vec3ArrayPacked_mScale_get
    if _newclass:mScale = _swig_property(_osgAnimation.Vec3ArrayPacked_mScale_get, _osgAnimation.Vec3ArrayPacked_mScale_set)
    __swig_setmethods__["mScaleInv"] = _osgAnimation.Vec3ArrayPacked_mScaleInv_set
    __swig_getmethods__["mScaleInv"] = _osgAnimation.Vec3ArrayPacked_mScaleInv_get
    if _newclass:mScaleInv = _swig_property(_osgAnimation.Vec3ArrayPacked_mScaleInv_get, _osgAnimation.Vec3ArrayPacked_mScaleInv_set)
    def analyze(self, *args):
        """analyze(Vec3ArrayPacked self, vectorVec3 src)"""
        return _osgAnimation.Vec3ArrayPacked_analyze(self, *args)

    def compress(self, *args):
        """compress(Vec3ArrayPacked self, vectorVec3 src)"""
        return _osgAnimation.Vec3ArrayPacked_compress(self, *args)

    def __init__(self): 
        """__init__(osgAnimation::Vec3ArrayPacked self) -> Vec3ArrayPacked"""
        this = _osgAnimation.new_Vec3ArrayPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_Vec3ArrayPacked
    __del__ = lambda self : None;
Vec3ArrayPacked_swigregister = _osgAnimation.Vec3ArrayPacked_swigregister
Vec3ArrayPacked_swigregister(Vec3ArrayPacked)

OSGANIMATION_BONE = _osgAnimation.OSGANIMATION_BONE
class Bone(osg.MatrixTransform):
    """Proxy of C++ osgAnimation::Bone class"""
    __swig_setmethods__ = {}
    for _s in [osg.MatrixTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bone, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.MatrixTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bone, name)
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(Bone self) -> Object"""
        return _osgAnimation.Bone_cloneType(self)

    def clone(self, *args):
        """clone(Bone self, CopyOp copyop) -> Object"""
        return _osgAnimation.Bone_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Bone self, Object obj) -> bool"""
        return _osgAnimation.Bone_isSameKindAs(self, *args)

    def className(self):
        """className(Bone self) -> char const *"""
        return _osgAnimation.Bone_className(self)

    def libraryName(self):
        """libraryName(Bone self) -> char const *"""
        return _osgAnimation.Bone_libraryName(self)

    def accept(self, *args):
        """accept(Bone self, NodeVisitor nv)"""
        return _osgAnimation.Bone_accept(self, *args)

    def __init__(self, *args): 
        """
        __init__(osgAnimation::Bone self, Bone b, CopyOp copyop=SHALLOW_COPY) -> Bone
        __init__(osgAnimation::Bone self, Bone b) -> Bone
        __init__(osgAnimation::Bone self, std::string const & name="") -> Bone
        __init__(osgAnimation::Bone self) -> Bone
        """
        this = _osgAnimation.new_Bone(*args)
        try: self.this.append(this)
        except: self.this = this
    def setDefaultUpdateCallback(self, name=""):
        """
        setDefaultUpdateCallback(Bone self, std::string const & name="")
        setDefaultUpdateCallback(Bone self)
        """
        return _osgAnimation.Bone_setDefaultUpdateCallback(self, name)

    def getBoneParent(self, *args):
        """
        getBoneParent(Bone self) -> Bone
        getBoneParent(Bone self) -> Bone
        """
        return _osgAnimation.Bone_getBoneParent(self, *args)

    def getMatrixInBoneSpace(self):
        """getMatrixInBoneSpace(Bone self) -> Matrixd"""
        return _osgAnimation.Bone_getMatrixInBoneSpace(self)

    def getMatrixInSkeletonSpace(self):
        """getMatrixInSkeletonSpace(Bone self) -> Matrixd"""
        return _osgAnimation.Bone_getMatrixInSkeletonSpace(self)

    def getInvBindMatrixInSkeletonSpace(self):
        """getInvBindMatrixInSkeletonSpace(Bone self) -> Matrixd"""
        return _osgAnimation.Bone_getInvBindMatrixInSkeletonSpace(self)

    def setMatrixInSkeletonSpace(self, *args):
        """setMatrixInSkeletonSpace(Bone self, Matrixd matrix)"""
        return _osgAnimation.Bone_setMatrixInSkeletonSpace(self, *args)

    def setInvBindMatrixInSkeletonSpace(self, *args):
        """setInvBindMatrixInSkeletonSpace(Bone self, Matrixd matrix)"""
        return _osgAnimation.Bone_setInvBindMatrixInSkeletonSpace(self, *args)

    __swig_destroy__ = _osgAnimation.delete_Bone
    __del__ = lambda self : None;
Bone_swigregister = _osgAnimation.Bone_swigregister
Bone_swigregister(Bone)

OSGANIMATION_TARGET = _osgAnimation.OSGANIMATION_TARGET
class Target(osg.Referenced):
    """Proxy of C++ osgAnimation::Target class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Target, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Target, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::Target self) -> Target"""
        this = _osgAnimation.new_Target()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_Target
    __del__ = lambda self : None;
    def reset(self):
        """reset(Target self)"""
        return _osgAnimation.Target_reset(self)

    def getCount(self):
        """getCount(Target self) -> int"""
        return _osgAnimation.Target_getCount(self)

    def getWeight(self):
        """getWeight(Target self) -> float"""
        return _osgAnimation.Target_getWeight(self)

Target_swigregister = _osgAnimation.Target_swigregister
Target_swigregister(Target)

class Keyframe(_object):
    """Proxy of C++ osgAnimation::Keyframe class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Keyframe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Keyframe, name)
    __repr__ = _swig_repr
    def getTime(self):
        """getTime(Keyframe self) -> double"""
        return _osgAnimation.Keyframe_getTime(self)

    def setTime(self, *args):
        """setTime(Keyframe self, double time)"""
        return _osgAnimation.Keyframe_setTime(self, *args)

    def __init__(self): 
        """__init__(osgAnimation::Keyframe self) -> Keyframe"""
        this = _osgAnimation.new_Keyframe()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_Keyframe
    __del__ = lambda self : None;
Keyframe_swigregister = _osgAnimation.Keyframe_swigregister
Keyframe_swigregister(Keyframe)

class KeyframeContainer(osg.Referenced):
    """Proxy of C++ osgAnimation::KeyframeContainer class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyframeContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyframeContainer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def size(self):
        """size(KeyframeContainer self) -> unsigned int"""
        return _osgAnimation.KeyframeContainer_size(self)

KeyframeContainer_swigregister = _osgAnimation.KeyframeContainer_swigregister
KeyframeContainer_swigregister(KeyframeContainer)

OSGANIMATION_SAMPLER = _osgAnimation.OSGANIMATION_SAMPLER
class Sampler(osg.Referenced):
    """Proxy of C++ osgAnimation::Sampler class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sampler, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sampler, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getKeyframeContainer(self, *args):
        """
        getKeyframeContainer(Sampler self) -> KeyframeContainer
        getKeyframeContainer(Sampler self) -> KeyframeContainer
        """
        return _osgAnimation.Sampler_getKeyframeContainer(self, *args)

    __swig_destroy__ = _osgAnimation.delete_Sampler
    __del__ = lambda self : None;
Sampler_swigregister = _osgAnimation.Sampler_swigregister
Sampler_swigregister(Sampler)

OSGANIMATION_CHANNEL = _osgAnimation.OSGANIMATION_CHANNEL
class Channel(osg.Referenced):
    """Proxy of C++ osgAnimation::Channel class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channel, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Channel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgAnimation.delete_Channel
    __del__ = lambda self : None;
    def clone(self):
        """clone(Channel self) -> Channel"""
        return _osgAnimation.Channel_clone(self)

    def update(self, *args):
        """update(Channel self, double time, float weight, int priority)"""
        return _osgAnimation.Channel_update(self, *args)

    def reset(self):
        """reset(Channel self)"""
        return _osgAnimation.Channel_reset(self)

    def getTarget(self):
        """getTarget(Channel self) -> Target"""
        return _osgAnimation.Channel_getTarget(self)

    def setTarget(self, *args):
        """setTarget(Channel self, Target arg2) -> bool"""
        return _osgAnimation.Channel_setTarget(self, *args)

    def getName(self):
        """getName(Channel self) -> std::string const &"""
        return _osgAnimation.Channel_getName(self)

    def setName(self, *args):
        """setName(Channel self, std::string const & name)"""
        return _osgAnimation.Channel_setName(self, *args)

    def getStartTime(self):
        """getStartTime(Channel self) -> double"""
        return _osgAnimation.Channel_getStartTime(self)

    def getEndTime(self):
        """getEndTime(Channel self) -> double"""
        return _osgAnimation.Channel_getEndTime(self)

    def getTargetName(self):
        """getTargetName(Channel self) -> std::string const &"""
        return _osgAnimation.Channel_getTargetName(self)

    def setTargetName(self, *args):
        """setTargetName(Channel self, std::string const & name)"""
        return _osgAnimation.Channel_setTargetName(self, *args)

    def getSampler(self, *args):
        """
        getSampler(Channel self) -> Sampler
        getSampler(Channel self) -> Sampler
        """
        return _osgAnimation.Channel_getSampler(self, *args)

    def createKeyframeContainerFromTargetValue(self):
        """createKeyframeContainerFromTargetValue(Channel self) -> bool"""
        return _osgAnimation.Channel_createKeyframeContainerFromTargetValue(self)

Channel_swigregister = _osgAnimation.Channel_swigregister
Channel_swigregister(Channel)

OSGANIMATION_ANIMATION = _osgAnimation.OSGANIMATION_ANIMATION
class Animation(osg.Object):
    """Proxy of C++ osgAnimation::Animation class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Animation, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Animation, name)
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(Animation self) -> Object"""
        return _osgAnimation.Animation_cloneType(self)

    def clone(self, *args):
        """clone(Animation self, CopyOp copyop) -> Object"""
        return _osgAnimation.Animation_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Animation self, Object obj) -> bool"""
        return _osgAnimation.Animation_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(Animation self) -> char const *"""
        return _osgAnimation.Animation_libraryName(self)

    def className(self):
        """className(Animation self) -> char const *"""
        return _osgAnimation.Animation_className(self)

    def __init__(self, *args): 
        """
        __init__(osgAnimation::Animation self) -> Animation
        __init__(osgAnimation::Animation self, Animation arg2, CopyOp arg3) -> Animation
        """
        this = _osgAnimation.new_Animation(*args)
        try: self.this.append(this)
        except: self.this = this
    ONCE = _osgAnimation.Animation_ONCE
    STAY = _osgAnimation.Animation_STAY
    LOOP = _osgAnimation.Animation_LOOP
    PPONG = _osgAnimation.Animation_PPONG
    def addChannel(self, *args):
        """addChannel(Animation self, Channel pChannel)"""
        return _osgAnimation.Animation_addChannel(self, *args)

    def getChannels(self, *args):
        """
        getChannels(Animation self) -> osgAnimation::ChannelList
        getChannels(Animation self) -> osgAnimation::ChannelList const &
        """
        return _osgAnimation.Animation_getChannels(self, *args)

    def setDuration(self, *args):
        """setDuration(Animation self, double duration)"""
        return _osgAnimation.Animation_setDuration(self, *args)

    def computeDuration(self):
        """computeDuration(Animation self)"""
        return _osgAnimation.Animation_computeDuration(self)

    def getDuration(self):
        """getDuration(Animation self) -> double"""
        return _osgAnimation.Animation_getDuration(self)

    def setWeight(self, *args):
        """setWeight(Animation self, float weight)"""
        return _osgAnimation.Animation_setWeight(self, *args)

    def getWeight(self):
        """getWeight(Animation self) -> float"""
        return _osgAnimation.Animation_getWeight(self)

    def update(self, *args):
        """
        update(Animation self, double time, int priority=0) -> bool
        update(Animation self, double time) -> bool
        """
        return _osgAnimation.Animation_update(self, *args)

    def resetTargets(self):
        """resetTargets(Animation self)"""
        return _osgAnimation.Animation_resetTargets(self)

    def setPlayMode(self, *args):
        """setPlayMode(Animation self, osgAnimation::Animation::PlayMode mode)"""
        return _osgAnimation.Animation_setPlayMode(self, *args)

    def getPlayMode(self):
        """getPlayMode(Animation self) -> osgAnimation::Animation::PlayMode"""
        return _osgAnimation.Animation_getPlayMode(self)

    def setStartTime(self, *args):
        """setStartTime(Animation self, double time)"""
        return _osgAnimation.Animation_setStartTime(self, *args)

    def getStartTime(self):
        """getStartTime(Animation self) -> double"""
        return _osgAnimation.Animation_getStartTime(self)

Animation_swigregister = _osgAnimation.Animation_swigregister
Animation_swigregister(Animation)

OSGANIMATION_INTERPOLATOR = _osgAnimation.OSGANIMATION_INTERPOLATOR
OSGANIMATION_CUBIC_BEZIER = _osgAnimation.OSGANIMATION_CUBIC_BEZIER
OSGANIMATION_EASE_MOTION = _osgAnimation.OSGANIMATION_EASE_MOTION
class OutBounceFunction(_object):
    """Proxy of C++ osgAnimation::OutBounceFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutBounceFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutBounceFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.OutBounceFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::OutBounceFunction self) -> OutBounceFunction"""
        this = _osgAnimation.new_OutBounceFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_OutBounceFunction
    __del__ = lambda self : None;
OutBounceFunction_swigregister = _osgAnimation.OutBounceFunction_swigregister
OutBounceFunction_swigregister(OutBounceFunction)

def OutBounceFunction_getValueAt(*args):
  """OutBounceFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.OutBounceFunction_getValueAt(*args)

class InBounceFunction(_object):
    """Proxy of C++ osgAnimation::InBounceFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InBounceFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InBounceFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InBounceFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InBounceFunction self) -> InBounceFunction"""
        this = _osgAnimation.new_InBounceFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InBounceFunction
    __del__ = lambda self : None;
InBounceFunction_swigregister = _osgAnimation.InBounceFunction_swigregister
InBounceFunction_swigregister(InBounceFunction)

def InBounceFunction_getValueAt(*args):
  """InBounceFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InBounceFunction_getValueAt(*args)

class InOutBounceFunction(_object):
    """Proxy of C++ osgAnimation::InOutBounceFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InOutBounceFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InOutBounceFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InOutBounceFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InOutBounceFunction self) -> InOutBounceFunction"""
        this = _osgAnimation.new_InOutBounceFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InOutBounceFunction
    __del__ = lambda self : None;
InOutBounceFunction_swigregister = _osgAnimation.InOutBounceFunction_swigregister
InOutBounceFunction_swigregister(InOutBounceFunction)

def InOutBounceFunction_getValueAt(*args):
  """InOutBounceFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InOutBounceFunction_getValueAt(*args)

class LinearFunction(_object):
    """Proxy of C++ osgAnimation::LinearFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinearFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.LinearFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::LinearFunction self) -> LinearFunction"""
        this = _osgAnimation.new_LinearFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_LinearFunction
    __del__ = lambda self : None;
LinearFunction_swigregister = _osgAnimation.LinearFunction_swigregister
LinearFunction_swigregister(LinearFunction)

def LinearFunction_getValueAt(*args):
  """LinearFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.LinearFunction_getValueAt(*args)

class OutQuadFunction(_object):
    """Proxy of C++ osgAnimation::OutQuadFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutQuadFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutQuadFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.OutQuadFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::OutQuadFunction self) -> OutQuadFunction"""
        this = _osgAnimation.new_OutQuadFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_OutQuadFunction
    __del__ = lambda self : None;
OutQuadFunction_swigregister = _osgAnimation.OutQuadFunction_swigregister
OutQuadFunction_swigregister(OutQuadFunction)

def OutQuadFunction_getValueAt(*args):
  """OutQuadFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.OutQuadFunction_getValueAt(*args)

class InQuadFunction(_object):
    """Proxy of C++ osgAnimation::InQuadFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InQuadFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InQuadFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InQuadFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InQuadFunction self) -> InQuadFunction"""
        this = _osgAnimation.new_InQuadFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InQuadFunction
    __del__ = lambda self : None;
InQuadFunction_swigregister = _osgAnimation.InQuadFunction_swigregister
InQuadFunction_swigregister(InQuadFunction)

def InQuadFunction_getValueAt(*args):
  """InQuadFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InQuadFunction_getValueAt(*args)

class InOutQuadFunction(_object):
    """Proxy of C++ osgAnimation::InOutQuadFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InOutQuadFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InOutQuadFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InOutQuadFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InOutQuadFunction self) -> InOutQuadFunction"""
        this = _osgAnimation.new_InOutQuadFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InOutQuadFunction
    __del__ = lambda self : None;
InOutQuadFunction_swigregister = _osgAnimation.InOutQuadFunction_swigregister
InOutQuadFunction_swigregister(InOutQuadFunction)

def InOutQuadFunction_getValueAt(*args):
  """InOutQuadFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InOutQuadFunction_getValueAt(*args)

class OutCubicFunction(_object):
    """Proxy of C++ osgAnimation::OutCubicFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutCubicFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutCubicFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.OutCubicFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::OutCubicFunction self) -> OutCubicFunction"""
        this = _osgAnimation.new_OutCubicFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_OutCubicFunction
    __del__ = lambda self : None;
OutCubicFunction_swigregister = _osgAnimation.OutCubicFunction_swigregister
OutCubicFunction_swigregister(OutCubicFunction)

def OutCubicFunction_getValueAt(*args):
  """OutCubicFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.OutCubicFunction_getValueAt(*args)

class InCubicFunction(_object):
    """Proxy of C++ osgAnimation::InCubicFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InCubicFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InCubicFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InCubicFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InCubicFunction self) -> InCubicFunction"""
        this = _osgAnimation.new_InCubicFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InCubicFunction
    __del__ = lambda self : None;
InCubicFunction_swigregister = _osgAnimation.InCubicFunction_swigregister
InCubicFunction_swigregister(InCubicFunction)

def InCubicFunction_getValueAt(*args):
  """InCubicFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InCubicFunction_getValueAt(*args)

class InOutCubicFunction(_object):
    """Proxy of C++ osgAnimation::InOutCubicFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InOutCubicFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InOutCubicFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InOutCubicFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InOutCubicFunction self) -> InOutCubicFunction"""
        this = _osgAnimation.new_InOutCubicFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InOutCubicFunction
    __del__ = lambda self : None;
InOutCubicFunction_swigregister = _osgAnimation.InOutCubicFunction_swigregister
InOutCubicFunction_swigregister(InOutCubicFunction)

def InOutCubicFunction_getValueAt(*args):
  """InOutCubicFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InOutCubicFunction_getValueAt(*args)

class InQuartFunction(_object):
    """Proxy of C++ osgAnimation::InQuartFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InQuartFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InQuartFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InQuartFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InQuartFunction self) -> InQuartFunction"""
        this = _osgAnimation.new_InQuartFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InQuartFunction
    __del__ = lambda self : None;
InQuartFunction_swigregister = _osgAnimation.InQuartFunction_swigregister
InQuartFunction_swigregister(InQuartFunction)

def InQuartFunction_getValueAt(*args):
  """InQuartFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InQuartFunction_getValueAt(*args)

class OutQuartFunction(_object):
    """Proxy of C++ osgAnimation::OutQuartFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutQuartFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutQuartFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.OutQuartFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::OutQuartFunction self) -> OutQuartFunction"""
        this = _osgAnimation.new_OutQuartFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_OutQuartFunction
    __del__ = lambda self : None;
OutQuartFunction_swigregister = _osgAnimation.OutQuartFunction_swigregister
OutQuartFunction_swigregister(OutQuartFunction)

def OutQuartFunction_getValueAt(*args):
  """OutQuartFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.OutQuartFunction_getValueAt(*args)

class InOutQuartFunction(_object):
    """Proxy of C++ osgAnimation::InOutQuartFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InOutQuartFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InOutQuartFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InOutQuartFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InOutQuartFunction self) -> InOutQuartFunction"""
        this = _osgAnimation.new_InOutQuartFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InOutQuartFunction
    __del__ = lambda self : None;
InOutQuartFunction_swigregister = _osgAnimation.InOutQuartFunction_swigregister
InOutQuartFunction_swigregister(InOutQuartFunction)

def InOutQuartFunction_getValueAt(*args):
  """InOutQuartFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InOutQuartFunction_getValueAt(*args)

class OutElasticFunction(_object):
    """Proxy of C++ osgAnimation::OutElasticFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutElasticFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutElasticFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.OutElasticFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::OutElasticFunction self) -> OutElasticFunction"""
        this = _osgAnimation.new_OutElasticFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_OutElasticFunction
    __del__ = lambda self : None;
OutElasticFunction_swigregister = _osgAnimation.OutElasticFunction_swigregister
OutElasticFunction_swigregister(OutElasticFunction)

def OutElasticFunction_getValueAt(*args):
  """OutElasticFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.OutElasticFunction_getValueAt(*args)

class InElasticFunction(_object):
    """Proxy of C++ osgAnimation::InElasticFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InElasticFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InElasticFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InElasticFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InElasticFunction self) -> InElasticFunction"""
        this = _osgAnimation.new_InElasticFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InElasticFunction
    __del__ = lambda self : None;
InElasticFunction_swigregister = _osgAnimation.InElasticFunction_swigregister
InElasticFunction_swigregister(InElasticFunction)

def InElasticFunction_getValueAt(*args):
  """InElasticFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InElasticFunction_getValueAt(*args)

class InOutElasticFunction(_object):
    """Proxy of C++ osgAnimation::InOutElasticFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InOutElasticFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InOutElasticFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InOutElasticFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InOutElasticFunction self) -> InOutElasticFunction"""
        this = _osgAnimation.new_InOutElasticFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InOutElasticFunction
    __del__ = lambda self : None;
InOutElasticFunction_swigregister = _osgAnimation.InOutElasticFunction_swigregister
InOutElasticFunction_swigregister(InOutElasticFunction)

def InOutElasticFunction_getValueAt(*args):
  """InOutElasticFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InOutElasticFunction_getValueAt(*args)

class OutSineFunction(_object):
    """Proxy of C++ osgAnimation::OutSineFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutSineFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutSineFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.OutSineFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::OutSineFunction self) -> OutSineFunction"""
        this = _osgAnimation.new_OutSineFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_OutSineFunction
    __del__ = lambda self : None;
OutSineFunction_swigregister = _osgAnimation.OutSineFunction_swigregister
OutSineFunction_swigregister(OutSineFunction)

def OutSineFunction_getValueAt(*args):
  """OutSineFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.OutSineFunction_getValueAt(*args)

class InSineFunction(_object):
    """Proxy of C++ osgAnimation::InSineFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InSineFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InSineFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InSineFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InSineFunction self) -> InSineFunction"""
        this = _osgAnimation.new_InSineFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InSineFunction
    __del__ = lambda self : None;
InSineFunction_swigregister = _osgAnimation.InSineFunction_swigregister
InSineFunction_swigregister(InSineFunction)

def InSineFunction_getValueAt(*args):
  """InSineFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InSineFunction_getValueAt(*args)

class InOutSineFunction(_object):
    """Proxy of C++ osgAnimation::InOutSineFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InOutSineFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InOutSineFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InOutSineFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InOutSineFunction self) -> InOutSineFunction"""
        this = _osgAnimation.new_InOutSineFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InOutSineFunction
    __del__ = lambda self : None;
InOutSineFunction_swigregister = _osgAnimation.InOutSineFunction_swigregister
InOutSineFunction_swigregister(InOutSineFunction)

def InOutSineFunction_getValueAt(*args):
  """InOutSineFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InOutSineFunction_getValueAt(*args)

class OutBackFunction(_object):
    """Proxy of C++ osgAnimation::OutBackFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutBackFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutBackFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.OutBackFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::OutBackFunction self) -> OutBackFunction"""
        this = _osgAnimation.new_OutBackFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_OutBackFunction
    __del__ = lambda self : None;
OutBackFunction_swigregister = _osgAnimation.OutBackFunction_swigregister
OutBackFunction_swigregister(OutBackFunction)

def OutBackFunction_getValueAt(*args):
  """OutBackFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.OutBackFunction_getValueAt(*args)

class InBackFunction(_object):
    """Proxy of C++ osgAnimation::InBackFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InBackFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InBackFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InBackFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InBackFunction self) -> InBackFunction"""
        this = _osgAnimation.new_InBackFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InBackFunction
    __del__ = lambda self : None;
InBackFunction_swigregister = _osgAnimation.InBackFunction_swigregister
InBackFunction_swigregister(InBackFunction)

def InBackFunction_getValueAt(*args):
  """InBackFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InBackFunction_getValueAt(*args)

class InOutBackFunction(_object):
    """Proxy of C++ osgAnimation::InOutBackFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InOutBackFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InOutBackFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InOutBackFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InOutBackFunction self) -> InOutBackFunction"""
        this = _osgAnimation.new_InOutBackFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InOutBackFunction
    __del__ = lambda self : None;
InOutBackFunction_swigregister = _osgAnimation.InOutBackFunction_swigregister
InOutBackFunction_swigregister(InOutBackFunction)

def InOutBackFunction_getValueAt(*args):
  """InOutBackFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InOutBackFunction_getValueAt(*args)

class OutCircFunction(_object):
    """Proxy of C++ osgAnimation::OutCircFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutCircFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutCircFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.OutCircFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::OutCircFunction self) -> OutCircFunction"""
        this = _osgAnimation.new_OutCircFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_OutCircFunction
    __del__ = lambda self : None;
OutCircFunction_swigregister = _osgAnimation.OutCircFunction_swigregister
OutCircFunction_swigregister(OutCircFunction)

def OutCircFunction_getValueAt(*args):
  """OutCircFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.OutCircFunction_getValueAt(*args)

class InCircFunction(_object):
    """Proxy of C++ osgAnimation::InCircFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InCircFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InCircFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InCircFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InCircFunction self) -> InCircFunction"""
        this = _osgAnimation.new_InCircFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InCircFunction
    __del__ = lambda self : None;
InCircFunction_swigregister = _osgAnimation.InCircFunction_swigregister
InCircFunction_swigregister(InCircFunction)

def InCircFunction_getValueAt(*args):
  """InCircFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InCircFunction_getValueAt(*args)

class InOutCircFunction(_object):
    """Proxy of C++ osgAnimation::InOutCircFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InOutCircFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InOutCircFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InOutCircFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InOutCircFunction self) -> InOutCircFunction"""
        this = _osgAnimation.new_InOutCircFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InOutCircFunction
    __del__ = lambda self : None;
InOutCircFunction_swigregister = _osgAnimation.InOutCircFunction_swigregister
InOutCircFunction_swigregister(InOutCircFunction)

def InOutCircFunction_getValueAt(*args):
  """InOutCircFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InOutCircFunction_getValueAt(*args)

class OutExpoFunction(_object):
    """Proxy of C++ osgAnimation::OutExpoFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutExpoFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutExpoFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.OutExpoFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::OutExpoFunction self) -> OutExpoFunction"""
        this = _osgAnimation.new_OutExpoFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_OutExpoFunction
    __del__ = lambda self : None;
OutExpoFunction_swigregister = _osgAnimation.OutExpoFunction_swigregister
OutExpoFunction_swigregister(OutExpoFunction)

def OutExpoFunction_getValueAt(*args):
  """OutExpoFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.OutExpoFunction_getValueAt(*args)

class InExpoFunction(_object):
    """Proxy of C++ osgAnimation::InExpoFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InExpoFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InExpoFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InExpoFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InExpoFunction self) -> InExpoFunction"""
        this = _osgAnimation.new_InExpoFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InExpoFunction
    __del__ = lambda self : None;
InExpoFunction_swigregister = _osgAnimation.InExpoFunction_swigregister
InExpoFunction_swigregister(InExpoFunction)

def InExpoFunction_getValueAt(*args):
  """InExpoFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InExpoFunction_getValueAt(*args)

class InOutExpoFunction(_object):
    """Proxy of C++ osgAnimation::InOutExpoFunction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InOutExpoFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InOutExpoFunction, name)
    __repr__ = _swig_repr
    def getValueAt(*args):
        """getValueAt(float t, float & result)"""
        return _osgAnimation.InOutExpoFunction_getValueAt(*args)

    if _newclass:getValueAt = staticmethod(getValueAt)
    __swig_getmethods__["getValueAt"] = lambda x: getValueAt
    def __init__(self): 
        """__init__(osgAnimation::InOutExpoFunction self) -> InOutExpoFunction"""
        this = _osgAnimation.new_InOutExpoFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_InOutExpoFunction
    __del__ = lambda self : None;
InOutExpoFunction_swigregister = _osgAnimation.InOutExpoFunction_swigregister
InOutExpoFunction_swigregister(InOutExpoFunction)

def InOutExpoFunction_getValueAt(*args):
  """InOutExpoFunction_getValueAt(float t, float & result)"""
  return _osgAnimation.InOutExpoFunction_getValueAt(*args)

class Motion(osg.Referenced):
    """Proxy of C++ osgAnimation::Motion class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motion, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Motion, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CLAMP = _osgAnimation.Motion_CLAMP
    LOOP = _osgAnimation.Motion_LOOP
    __swig_destroy__ = _osgAnimation.delete_Motion
    __del__ = lambda self : None;
    def reset(self):
        """reset(Motion self)"""
        return _osgAnimation.Motion_reset(self)

    def getTime(self):
        """getTime(Motion self) -> float"""
        return _osgAnimation.Motion_getTime(self)

    def evaluateTime(self, *args):
        """evaluateTime(Motion self, float time) -> float"""
        return _osgAnimation.Motion_evaluateTime(self, *args)

    def update(self, *args):
        """update(Motion self, float dt)"""
        return _osgAnimation.Motion_update(self, *args)

    def setTime(self, *args):
        """setTime(Motion self, float time)"""
        return _osgAnimation.Motion_setTime(self, *args)

    def getValue(self, *args):
        """
        getValue(Motion self, osgAnimation::Motion::value_type & result)
        getValue(Motion self) -> osgAnimation::Motion::value_type
        """
        return _osgAnimation.Motion_getValue(self, *args)

    def getValueAt(self, *args):
        """
        getValueAt(Motion self, float time, osgAnimation::Motion::value_type & result)
        getValueAt(Motion self, float time) -> osgAnimation::Motion::value_type
        """
        return _osgAnimation.Motion_getValueAt(self, *args)

    def getValueInNormalizedRange(self, *args):
        """getValueInNormalizedRange(Motion self, float t, osgAnimation::Motion::value_type & result)"""
        return _osgAnimation.Motion_getValueInNormalizedRange(self, *args)

    def getDuration(self):
        """getDuration(Motion self) -> float"""
        return _osgAnimation.Motion_getDuration(self)

Motion_swigregister = _osgAnimation.Motion_swigregister
Motion_swigregister(Motion)

class CompositeMotion(Motion):
    """Proxy of C++ osgAnimation::CompositeMotion class"""
    __swig_setmethods__ = {}
    for _s in [Motion]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeMotion, name, value)
    __swig_getmethods__ = {}
    for _s in [Motion]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeMotion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_motions"] = _osgAnimation.CompositeMotion__motions_set
    __swig_getmethods__["_motions"] = _osgAnimation.CompositeMotion__motions_get
    if _newclass:_motions = _swig_property(_osgAnimation.CompositeMotion__motions_get, _osgAnimation.CompositeMotion__motions_set)
    def getMotionList(self, *args):
        """
        getMotionList(CompositeMotion self) -> osgAnimation::CompositeMotion::MotionList
        getMotionList(CompositeMotion self) -> osgAnimation::CompositeMotion::MotionList const &
        """
        return _osgAnimation.CompositeMotion_getMotionList(self, *args)

    def __init__(self, *args): 
        """
        __init__(osgAnimation::CompositeMotion self, float startValue=0, float duration=1, float changeValue=1, osgAnimation::Motion::TimeBehaviour tb=CLAMP) -> CompositeMotion
        __init__(osgAnimation::CompositeMotion self, float startValue=0, float duration=1, float changeValue=1) -> CompositeMotion
        __init__(osgAnimation::CompositeMotion self, float startValue=0, float duration=1) -> CompositeMotion
        __init__(osgAnimation::CompositeMotion self, float startValue=0) -> CompositeMotion
        __init__(osgAnimation::CompositeMotion self) -> CompositeMotion
        """
        this = _osgAnimation.new_CompositeMotion(*args)
        try: self.this.append(this)
        except: self.this = this
    def getValueInNormalizedRange(self, *args):
        """getValueInNormalizedRange(CompositeMotion self, float t, osgAnimation::Motion::value_type & result)"""
        return _osgAnimation.CompositeMotion_getValueInNormalizedRange(self, *args)

    __swig_destroy__ = _osgAnimation.delete_CompositeMotion
    __del__ = lambda self : None;
CompositeMotion_swigregister = _osgAnimation.CompositeMotion_swigregister
CompositeMotion_swigregister(CompositeMotion)

OSGANIMATION_SKELETON = _osgAnimation.OSGANIMATION_SKELETON
class Skeleton(osg.MatrixTransform):
    """Proxy of C++ osgAnimation::Skeleton class"""
    __swig_setmethods__ = {}
    for _s in [osg.MatrixTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Skeleton, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.MatrixTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Skeleton, name)
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(Skeleton self) -> Object"""
        return _osgAnimation.Skeleton_cloneType(self)

    def clone(self, *args):
        """clone(Skeleton self, CopyOp copyop) -> Object"""
        return _osgAnimation.Skeleton_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(Skeleton self, Object obj) -> bool"""
        return _osgAnimation.Skeleton_isSameKindAs(self, *args)

    def className(self):
        """className(Skeleton self) -> char const *"""
        return _osgAnimation.Skeleton_className(self)

    def libraryName(self):
        """libraryName(Skeleton self) -> char const *"""
        return _osgAnimation.Skeleton_libraryName(self)

    def accept(self, *args):
        """accept(Skeleton self, NodeVisitor nv)"""
        return _osgAnimation.Skeleton_accept(self, *args)

    def __init__(self, *args): 
        """
        __init__(osgAnimation::Skeleton self) -> Skeleton
        __init__(osgAnimation::Skeleton self, Skeleton arg2, CopyOp arg3) -> Skeleton
        """
        this = _osgAnimation.new_Skeleton(*args)
        try: self.this.append(this)
        except: self.this = this
    def setDefaultUpdateCallback(self):
        """setDefaultUpdateCallback(Skeleton self)"""
        return _osgAnimation.Skeleton_setDefaultUpdateCallback(self)

    __swig_destroy__ = _osgAnimation.delete_Skeleton
    __del__ = lambda self : None;
Skeleton_swigregister = _osgAnimation.Skeleton_swigregister
Skeleton_swigregister(Skeleton)

class VertexIndexWeight(_object):
    """Proxy of C++ std::pair<(int,float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexIndexWeight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VertexIndexWeight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(std::pair<(int,float)> self) -> VertexIndexWeight
        __init__(std::pair<(int,float)> self, int first, float second) -> VertexIndexWeight
        __init__(std::pair<(int,float)> self, VertexIndexWeight p) -> VertexIndexWeight
        """
        this = _osgAnimation.new_VertexIndexWeight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _osgAnimation.VertexIndexWeight_first_set
    __swig_getmethods__["first"] = _osgAnimation.VertexIndexWeight_first_get
    if _newclass:first = _swig_property(_osgAnimation.VertexIndexWeight_first_get, _osgAnimation.VertexIndexWeight_first_set)
    __swig_setmethods__["second"] = _osgAnimation.VertexIndexWeight_second_set
    __swig_getmethods__["second"] = _osgAnimation.VertexIndexWeight_second_get
    if _newclass:second = _swig_property(_osgAnimation.VertexIndexWeight_second_get, _osgAnimation.VertexIndexWeight_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _osgAnimation.delete_VertexIndexWeight
    __del__ = lambda self : None;
VertexIndexWeight_swigregister = _osgAnimation.VertexIndexWeight_swigregister
VertexIndexWeight_swigregister(VertexIndexWeight)

class VertexList(_object):
    """Proxy of C++ std::vector<(VertexIndexWeight)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VertexList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(VertexList self) -> SwigPyIterator"""
        return _osgAnimation.VertexList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(VertexList self) -> bool"""
        return _osgAnimation.VertexList___nonzero__(self)

    def __bool__(self):
        """__bool__(VertexList self) -> bool"""
        return _osgAnimation.VertexList___bool__(self)

    def __len__(self):
        """__len__(VertexList self) -> std::vector< std::pair< int,float > >::size_type"""
        return _osgAnimation.VertexList___len__(self)

    def pop(self):
        """pop(VertexList self) -> VertexIndexWeight"""
        return _osgAnimation.VertexList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(VertexList self, std::vector< std::pair< int,float > >::difference_type i, std::vector< std::pair< int,float > >::difference_type j) -> VertexList"""
        return _osgAnimation.VertexList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(VertexList self, std::vector< std::pair< int,float > >::difference_type i, std::vector< std::pair< int,float > >::difference_type j, 
            VertexList v=std::vector< std::pair< int,float >,std::allocator< std::pair< int,float > > >())
        __setslice__(VertexList self, std::vector< std::pair< int,float > >::difference_type i, std::vector< std::pair< int,float > >::difference_type j)
        """
        return _osgAnimation.VertexList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(VertexList self, std::vector< std::pair< int,float > >::difference_type i, std::vector< std::pair< int,float > >::difference_type j)"""
        return _osgAnimation.VertexList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(VertexList self, std::vector< std::pair< int,float > >::difference_type i)
        __delitem__(VertexList self, PySliceObject * slice)
        """
        return _osgAnimation.VertexList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(VertexList self, PySliceObject * slice) -> VertexList
        __getitem__(VertexList self, std::vector< std::pair< int,float > >::difference_type i) -> VertexIndexWeight
        """
        return _osgAnimation.VertexList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(VertexList self, PySliceObject * slice, VertexList v)
        __setitem__(VertexList self, PySliceObject * slice)
        __setitem__(VertexList self, std::vector< std::pair< int,float > >::difference_type i, VertexIndexWeight x)
        """
        return _osgAnimation.VertexList___setitem__(self, *args)

    def append(self, *args):
        """append(VertexList self, VertexIndexWeight x)"""
        return _osgAnimation.VertexList_append(self, *args)

    def empty(self):
        """empty(VertexList self) -> bool"""
        return _osgAnimation.VertexList_empty(self)

    def size(self):
        """size(VertexList self) -> std::vector< std::pair< int,float > >::size_type"""
        return _osgAnimation.VertexList_size(self)

    def clear(self):
        """clear(VertexList self)"""
        return _osgAnimation.VertexList_clear(self)

    def swap(self, *args):
        """swap(VertexList self, VertexList v)"""
        return _osgAnimation.VertexList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(VertexList self) -> std::vector< std::pair< int,float > >::allocator_type"""
        return _osgAnimation.VertexList_get_allocator(self)

    def begin(self):
        """begin(VertexList self) -> std::vector< std::pair< int,float > >::iterator"""
        return _osgAnimation.VertexList_begin(self)

    def end(self):
        """end(VertexList self) -> std::vector< std::pair< int,float > >::iterator"""
        return _osgAnimation.VertexList_end(self)

    def rbegin(self):
        """rbegin(VertexList self) -> std::vector< std::pair< int,float > >::reverse_iterator"""
        return _osgAnimation.VertexList_rbegin(self)

    def rend(self):
        """rend(VertexList self) -> std::vector< std::pair< int,float > >::reverse_iterator"""
        return _osgAnimation.VertexList_rend(self)

    def pop_back(self):
        """pop_back(VertexList self)"""
        return _osgAnimation.VertexList_pop_back(self)

    def erase(self, *args):
        """
        erase(VertexList self, std::vector< std::pair< int,float > >::iterator pos) -> std::vector< std::pair< int,float > >::iterator
        erase(VertexList self, std::vector< std::pair< int,float > >::iterator first, std::vector< std::pair< int,float > >::iterator last) -> std::vector< std::pair< int,float > >::iterator
        """
        return _osgAnimation.VertexList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(VertexIndexWeight)> self) -> VertexList
        __init__(std::vector<(VertexIndexWeight)> self, VertexList arg2) -> VertexList
        __init__(std::vector<(VertexIndexWeight)> self, std::vector< std::pair< int,float > >::size_type size) -> VertexList
        __init__(std::vector<(VertexIndexWeight)> self, std::vector< std::pair< int,float > >::size_type size, VertexIndexWeight value) -> VertexList
        """
        this = _osgAnimation.new_VertexList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(VertexList self, VertexIndexWeight x)"""
        return _osgAnimation.VertexList_push_back(self, *args)

    def front(self):
        """front(VertexList self) -> VertexIndexWeight"""
        return _osgAnimation.VertexList_front(self)

    def back(self):
        """back(VertexList self) -> VertexIndexWeight"""
        return _osgAnimation.VertexList_back(self)

    def assign(self, *args):
        """assign(VertexList self, std::vector< std::pair< int,float > >::size_type n, VertexIndexWeight x)"""
        return _osgAnimation.VertexList_assign(self, *args)

    def resize(self, *args):
        """
        resize(VertexList self, std::vector< std::pair< int,float > >::size_type new_size)
        resize(VertexList self, std::vector< std::pair< int,float > >::size_type new_size, VertexIndexWeight x)
        """
        return _osgAnimation.VertexList_resize(self, *args)

    def insert(self, *args):
        """
        insert(VertexList self, std::vector< std::pair< int,float > >::iterator pos, VertexIndexWeight x) -> std::vector< std::pair< int,float > >::iterator
        insert(VertexList self, std::vector< std::pair< int,float > >::iterator pos, std::vector< std::pair< int,float > >::size_type n, 
            VertexIndexWeight x)
        """
        return _osgAnimation.VertexList_insert(self, *args)

    def reserve(self, *args):
        """reserve(VertexList self, std::vector< std::pair< int,float > >::size_type n)"""
        return _osgAnimation.VertexList_reserve(self, *args)

    def capacity(self):
        """capacity(VertexList self) -> std::vector< std::pair< int,float > >::size_type"""
        return _osgAnimation.VertexList_capacity(self)

    __swig_destroy__ = _osgAnimation.delete_VertexList
    __del__ = lambda self : None;
VertexList_swigregister = _osgAnimation.VertexList_swigregister
VertexList_swigregister(VertexList)

class mapVertexInfluence(_object):
    """Proxy of C++ std::map<(std::string,osgAnimation::VertexInfluence)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapVertexInfluence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapVertexInfluence, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mapVertexInfluence self) -> SwigPyIterator"""
        return _osgAnimation.mapVertexInfluence_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mapVertexInfluence self) -> bool"""
        return _osgAnimation.mapVertexInfluence___nonzero__(self)

    def __bool__(self):
        """__bool__(mapVertexInfluence self) -> bool"""
        return _osgAnimation.mapVertexInfluence___bool__(self)

    def __len__(self):
        """__len__(mapVertexInfluence self) -> std::map< std::string,osgAnimation::VertexInfluence >::size_type"""
        return _osgAnimation.mapVertexInfluence___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & key) -> VertexInfluence"""
        return _osgAnimation.mapVertexInfluence___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & key)"""
        return _osgAnimation.mapVertexInfluence___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & key) -> bool"""
        return _osgAnimation.mapVertexInfluence_has_key(self, *args)

    def keys(self):
        """keys(mapVertexInfluence self) -> PyObject *"""
        return _osgAnimation.mapVertexInfluence_keys(self)

    def values(self):
        """values(mapVertexInfluence self) -> PyObject *"""
        return _osgAnimation.mapVertexInfluence_values(self)

    def items(self):
        """items(mapVertexInfluence self) -> PyObject *"""
        return _osgAnimation.mapVertexInfluence_items(self)

    def __contains__(self, *args):
        """__contains__(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & key) -> bool"""
        return _osgAnimation.mapVertexInfluence___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(mapVertexInfluence self) -> SwigPyIterator"""
        return _osgAnimation.mapVertexInfluence_key_iterator(self)

    def value_iterator(self):
        """value_iterator(mapVertexInfluence self) -> SwigPyIterator"""
        return _osgAnimation.mapVertexInfluence_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & key)
        __setitem__(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & key, VertexInfluence x)
        """
        return _osgAnimation.mapVertexInfluence___setitem__(self, *args)

    def asdict(self):
        """asdict(mapVertexInfluence self) -> PyObject *"""
        return _osgAnimation.mapVertexInfluence_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,osgAnimation::VertexInfluence)> self, std::less< std::string > const & arg2) -> mapVertexInfluence
        __init__(std::map<(std::string,osgAnimation::VertexInfluence)> self) -> mapVertexInfluence
        __init__(std::map<(std::string,osgAnimation::VertexInfluence)> self, mapVertexInfluence arg2) -> mapVertexInfluence
        """
        this = _osgAnimation.new_mapVertexInfluence(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(mapVertexInfluence self) -> bool"""
        return _osgAnimation.mapVertexInfluence_empty(self)

    def size(self):
        """size(mapVertexInfluence self) -> std::map< std::string,osgAnimation::VertexInfluence >::size_type"""
        return _osgAnimation.mapVertexInfluence_size(self)

    def clear(self):
        """clear(mapVertexInfluence self)"""
        return _osgAnimation.mapVertexInfluence_clear(self)

    def swap(self, *args):
        """swap(mapVertexInfluence self, mapVertexInfluence v)"""
        return _osgAnimation.mapVertexInfluence_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mapVertexInfluence self) -> std::map< std::string,osgAnimation::VertexInfluence >::allocator_type"""
        return _osgAnimation.mapVertexInfluence_get_allocator(self)

    def begin(self):
        """begin(mapVertexInfluence self) -> std::map< std::string,osgAnimation::VertexInfluence >::iterator"""
        return _osgAnimation.mapVertexInfluence_begin(self)

    def end(self):
        """end(mapVertexInfluence self) -> std::map< std::string,osgAnimation::VertexInfluence >::iterator"""
        return _osgAnimation.mapVertexInfluence_end(self)

    def rbegin(self):
        """rbegin(mapVertexInfluence self) -> std::map< std::string,osgAnimation::VertexInfluence >::reverse_iterator"""
        return _osgAnimation.mapVertexInfluence_rbegin(self)

    def rend(self):
        """rend(mapVertexInfluence self) -> std::map< std::string,osgAnimation::VertexInfluence >::reverse_iterator"""
        return _osgAnimation.mapVertexInfluence_rend(self)

    def count(self, *args):
        """count(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & x) -> std::map< std::string,osgAnimation::VertexInfluence >::size_type"""
        return _osgAnimation.mapVertexInfluence_count(self, *args)

    def erase(self, *args):
        """
        erase(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & x) -> std::map< std::string,osgAnimation::VertexInfluence >::size_type
        erase(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::iterator position)
        erase(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::iterator first, std::map< std::string,osgAnimation::VertexInfluence >::iterator last)
        """
        return _osgAnimation.mapVertexInfluence_erase(self, *args)

    def find(self, *args):
        """find(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & x) -> std::map< std::string,osgAnimation::VertexInfluence >::iterator"""
        return _osgAnimation.mapVertexInfluence_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & x) -> std::map< std::string,osgAnimation::VertexInfluence >::iterator"""
        return _osgAnimation.mapVertexInfluence_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(mapVertexInfluence self, std::map< std::string,osgAnimation::VertexInfluence >::key_type const & x) -> std::map< std::string,osgAnimation::VertexInfluence >::iterator"""
        return _osgAnimation.mapVertexInfluence_upper_bound(self, *args)

    __swig_destroy__ = _osgAnimation.delete_mapVertexInfluence
    __del__ = lambda self : None;
mapVertexInfluence_swigregister = _osgAnimation.mapVertexInfluence_swigregister
mapVertexInfluence_swigregister(mapVertexInfluence)

OSGANIMATION_VERTEX_INFLUENCE = _osgAnimation.OSGANIMATION_VERTEX_INFLUENCE
class VertexInfluence(VertexList):
    """Proxy of C++ osgAnimation::VertexInfluence class"""
    __swig_setmethods__ = {}
    for _s in [VertexList]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexInfluence, name, value)
    __swig_getmethods__ = {}
    for _s in [VertexList]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexInfluence, name)
    __repr__ = _swig_repr
    def getName(self):
        """getName(VertexInfluence self) -> std::string const &"""
        return _osgAnimation.VertexInfluence_getName(self)

    def setName(self, *args):
        """setName(VertexInfluence self, std::string const & name)"""
        return _osgAnimation.VertexInfluence_setName(self, *args)

    def __init__(self): 
        """__init__(osgAnimation::VertexInfluence self) -> VertexInfluence"""
        this = _osgAnimation.new_VertexInfluence()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_VertexInfluence
    __del__ = lambda self : None;
VertexInfluence_swigregister = _osgAnimation.VertexInfluence_swigregister
VertexInfluence_swigregister(VertexInfluence)

class VertexInfluenceMap(mapVertexInfluence,osg.Object):
    """Proxy of C++ osgAnimation::VertexInfluenceMap class"""
    __swig_setmethods__ = {}
    for _s in [mapVertexInfluence,osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexInfluenceMap, name, value)
    __swig_getmethods__ = {}
    for _s in [mapVertexInfluence,osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexInfluenceMap, name)
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(VertexInfluenceMap self) -> Object"""
        return _osgAnimation.VertexInfluenceMap_cloneType(self)

    def clone(self, *args):
        """clone(VertexInfluenceMap self, CopyOp copyop) -> Object"""
        return _osgAnimation.VertexInfluenceMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(VertexInfluenceMap self, Object obj) -> bool"""
        return _osgAnimation.VertexInfluenceMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(VertexInfluenceMap self) -> char const *"""
        return _osgAnimation.VertexInfluenceMap_libraryName(self)

    def className(self):
        """className(VertexInfluenceMap self) -> char const *"""
        return _osgAnimation.VertexInfluenceMap_className(self)

    def __init__(self, *args): 
        """
        __init__(osgAnimation::VertexInfluenceMap self) -> VertexInfluenceMap
        __init__(osgAnimation::VertexInfluenceMap self, VertexInfluenceMap arg2, CopyOp arg3) -> VertexInfluenceMap
        """
        this = _osgAnimation.new_VertexInfluenceMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_VertexInfluenceMap
    __del__ = lambda self : None;
VertexInfluenceMap_swigregister = _osgAnimation.VertexInfluenceMap_swigregister
VertexInfluenceMap_swigregister(VertexInfluenceMap)

class VertexInfluenceSet(_object):
    """Proxy of C++ osgAnimation::VertexInfluenceSet class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexInfluenceSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VertexInfluenceSet, name)
    __repr__ = _swig_repr
    def getUniqVertexSetToBoneSetList(self):
        """getUniqVertexSetToBoneSetList(VertexInfluenceSet self) -> osgAnimation::VertexInfluenceSet::UniqVertexSetToBoneSetList const &"""
        return _osgAnimation.VertexInfluenceSet_getUniqVertexSetToBoneSetList(self)

    def addVertexInfluence(self, *args):
        """addVertexInfluence(VertexInfluenceSet self, VertexInfluence v)"""
        return _osgAnimation.VertexInfluenceSet_addVertexInfluence(self, *args)

    def buildVertex2BoneList(self):
        """buildVertex2BoneList(VertexInfluenceSet self)"""
        return _osgAnimation.VertexInfluenceSet_buildVertex2BoneList(self)

    def buildUniqVertexSetToBoneSetList(self):
        """buildUniqVertexSetToBoneSetList(VertexInfluenceSet self)"""
        return _osgAnimation.VertexInfluenceSet_buildUniqVertexSetToBoneSetList(self)

    def clear(self):
        """clear(VertexInfluenceSet self)"""
        return _osgAnimation.VertexInfluenceSet_clear(self)

    def getVertexToBoneList(self):
        """getVertexToBoneList(VertexInfluenceSet self) -> osgAnimation::VertexInfluenceSet::VertexIndexToBoneWeightMap const &"""
        return _osgAnimation.VertexInfluenceSet_getVertexToBoneList(self)

    def __init__(self): 
        """__init__(osgAnimation::VertexInfluenceSet self) -> VertexInfluenceSet"""
        this = _osgAnimation.new_VertexInfluenceSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_VertexInfluenceSet
    __del__ = lambda self : None;
VertexInfluenceSet_swigregister = _osgAnimation.VertexInfluenceSet_swigregister
VertexInfluenceSet_swigregister(VertexInfluenceSet)

class BoneMap(_object):
    """Proxy of C++ std::map<(std::string,osg::ref_ptr<(osgAnimation::Bone)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoneMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoneMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(BoneMap self) -> SwigPyIterator"""
        return _osgAnimation.BoneMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(BoneMap self) -> bool"""
        return _osgAnimation.BoneMap___nonzero__(self)

    def __bool__(self):
        """__bool__(BoneMap self) -> bool"""
        return _osgAnimation.BoneMap___bool__(self)

    def __len__(self):
        """__len__(BoneMap self) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::size_type"""
        return _osgAnimation.BoneMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & key) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::mapped_type const &"""
        return _osgAnimation.BoneMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & key)"""
        return _osgAnimation.BoneMap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & key) -> bool"""
        return _osgAnimation.BoneMap_has_key(self, *args)

    def keys(self):
        """keys(BoneMap self) -> PyObject *"""
        return _osgAnimation.BoneMap_keys(self)

    def values(self):
        """values(BoneMap self) -> PyObject *"""
        return _osgAnimation.BoneMap_values(self)

    def items(self):
        """items(BoneMap self) -> PyObject *"""
        return _osgAnimation.BoneMap_items(self)

    def __contains__(self, *args):
        """__contains__(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & key) -> bool"""
        return _osgAnimation.BoneMap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(BoneMap self) -> SwigPyIterator"""
        return _osgAnimation.BoneMap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(BoneMap self) -> SwigPyIterator"""
        return _osgAnimation.BoneMap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & key)
        __setitem__(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & key, 
            std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::mapped_type const & x)
        """
        return _osgAnimation.BoneMap___setitem__(self, *args)

    def asdict(self):
        """asdict(BoneMap self) -> PyObject *"""
        return _osgAnimation.BoneMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,osg::ref_ptr<(osgAnimation::Bone)>)> self, std::less< std::string > const & arg2) -> BoneMap
        __init__(std::map<(std::string,osg::ref_ptr<(osgAnimation::Bone)>)> self) -> BoneMap
        __init__(std::map<(std::string,osg::ref_ptr<(osgAnimation::Bone)>)> self, BoneMap arg2) -> BoneMap
        """
        this = _osgAnimation.new_BoneMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(BoneMap self) -> bool"""
        return _osgAnimation.BoneMap_empty(self)

    def size(self):
        """size(BoneMap self) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::size_type"""
        return _osgAnimation.BoneMap_size(self)

    def clear(self):
        """clear(BoneMap self)"""
        return _osgAnimation.BoneMap_clear(self)

    def swap(self, *args):
        """swap(BoneMap self, BoneMap v)"""
        return _osgAnimation.BoneMap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(BoneMap self) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::allocator_type"""
        return _osgAnimation.BoneMap_get_allocator(self)

    def begin(self):
        """begin(BoneMap self) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::iterator"""
        return _osgAnimation.BoneMap_begin(self)

    def end(self):
        """end(BoneMap self) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::iterator"""
        return _osgAnimation.BoneMap_end(self)

    def rbegin(self):
        """rbegin(BoneMap self) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::reverse_iterator"""
        return _osgAnimation.BoneMap_rbegin(self)

    def rend(self):
        """rend(BoneMap self) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::reverse_iterator"""
        return _osgAnimation.BoneMap_rend(self)

    def count(self, *args):
        """count(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & x) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::size_type"""
        return _osgAnimation.BoneMap_count(self, *args)

    def erase(self, *args):
        """
        erase(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & x) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::size_type
        erase(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::iterator position)
        erase(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::iterator first, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::iterator last)
        """
        return _osgAnimation.BoneMap_erase(self, *args)

    def find(self, *args):
        """find(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & x) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::iterator"""
        return _osgAnimation.BoneMap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & x) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::iterator"""
        return _osgAnimation.BoneMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(BoneMap self, std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::key_type const & x) -> std::map< std::string,osg::ref_ptr< osgAnimation::Bone > >::iterator"""
        return _osgAnimation.BoneMap_upper_bound(self, *args)

    __swig_destroy__ = _osgAnimation.delete_BoneMap
    __del__ = lambda self : None;
BoneMap_swigregister = _osgAnimation.BoneMap_swigregister
BoneMap_swigregister(BoneMap)

OSGANIMATION_RIGTRANSFORM = _osgAnimation.OSGANIMATION_RIGTRANSFORM
class RigTransform(osg.Referenced):
    """Proxy of C++ osgAnimation::RigTransform class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::RigTransform self) -> RigTransform"""
        this = _osgAnimation.new_RigTransform()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_RigTransform
    __del__ = lambda self : None;
    def __call__(self, *args):
        """__call__(RigTransform self, RigGeometry arg2)"""
        return _osgAnimation.RigTransform___call__(self, *args)

RigTransform_swigregister = _osgAnimation.RigTransform_swigregister
RigTransform_swigregister(RigTransform)

OSGANIMATION_RIG_TRANSFORM_HARDWARE = _osgAnimation.OSGANIMATION_RIG_TRANSFORM_HARDWARE
class RigTransformHardware(RigTransform):
    """Proxy of C++ osgAnimation::RigTransformHardware class"""
    __swig_setmethods__ = {}
    for _s in [RigTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigTransformHardware, name, value)
    __swig_getmethods__ = {}
    for _s in [RigTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigTransformHardware, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::RigTransformHardware self) -> RigTransformHardware"""
        this = _osgAnimation.new_RigTransformHardware()
        try: self.this.append(this)
        except: self.this = this
    def getVertexAttrib(self, *args):
        """getVertexAttrib(RigTransformHardware self, int index) -> Vec4Array"""
        return _osgAnimation.RigTransformHardware_getVertexAttrib(self, *args)

    def getNumVertexAttrib(self):
        """getNumVertexAttrib(RigTransformHardware self) -> int"""
        return _osgAnimation.RigTransformHardware_getNumVertexAttrib(self)

    def getMatrixPaletteUniform(self):
        """getMatrixPaletteUniform(RigTransformHardware self) -> Uniform"""
        return _osgAnimation.RigTransformHardware_getMatrixPaletteUniform(self)

    def computeMatrixPaletteUniform(self, *args):
        """computeMatrixPaletteUniform(RigTransformHardware self, Matrixd transformFromSkeletonToGeometry, Matrixd invTransformFromSkeletonToGeometry)"""
        return _osgAnimation.RigTransformHardware_computeMatrixPaletteUniform(self, *args)

    def getNumBonesPerVertex(self):
        """getNumBonesPerVertex(RigTransformHardware self) -> int"""
        return _osgAnimation.RigTransformHardware_getNumBonesPerVertex(self)

    def getNumVertexes(self):
        """getNumVertexes(RigTransformHardware self) -> int"""
        return _osgAnimation.RigTransformHardware_getNumVertexes(self)

    def createPalette(self, *args):
        """createPalette(RigTransformHardware self, int nbVertexes, BoneMap boneMap, osgAnimation::VertexInfluenceSet::VertexIndexToBoneWeightMap const & vertexIndexToBoneWeightMap) -> bool"""
        return _osgAnimation.RigTransformHardware_createPalette(self, *args)

    def __call__(self, *args):
        """__call__(RigTransformHardware self, RigGeometry arg2)"""
        return _osgAnimation.RigTransformHardware___call__(self, *args)

    def setShader(self, *args):
        """setShader(RigTransformHardware self, Shader arg2)"""
        return _osgAnimation.RigTransformHardware_setShader(self, *args)

    __swig_destroy__ = _osgAnimation.delete_RigTransformHardware
    __del__ = lambda self : None;
RigTransformHardware_swigregister = _osgAnimation.RigTransformHardware_swigregister
RigTransformHardware_swigregister(RigTransformHardware)

OSGANIMATION_RIGTRANSFORM_SOFTWARE = _osgAnimation.OSGANIMATION_RIGTRANSFORM_SOFTWARE
class RigTransformSoftware(RigTransform):
    """Proxy of C++ osgAnimation::RigTransformSoftware class"""
    __swig_setmethods__ = {}
    for _s in [RigTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigTransformSoftware, name, value)
    __swig_getmethods__ = {}
    for _s in [RigTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigTransformSoftware, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::RigTransformSoftware self) -> RigTransformSoftware"""
        this = _osgAnimation.new_RigTransformSoftware()
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """__call__(RigTransformSoftware self, RigGeometry arg2)"""
        return _osgAnimation.RigTransformSoftware___call__(self, *args)

    __swig_destroy__ = _osgAnimation.delete_RigTransformSoftware
    __del__ = lambda self : None;
RigTransformSoftware_swigregister = _osgAnimation.RigTransformSoftware_swigregister
RigTransformSoftware_swigregister(RigTransformSoftware)

class RigGeometry(osg.Geometry):
    """Proxy of C++ osgAnimation::RigGeometry class"""
    __swig_setmethods__ = {}
    for _s in [osg.Geometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Geometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigGeometry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(osgAnimation::RigGeometry self) -> RigGeometry
        __init__(osgAnimation::RigGeometry self, RigGeometry b, CopyOp copyop=SHALLOW_COPY) -> RigGeometry
        __init__(osgAnimation::RigGeometry self, RigGeometry b) -> RigGeometry
        """
        this = _osgAnimation.new_RigGeometry(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(RigGeometry self) -> Object"""
        return _osgAnimation.RigGeometry_cloneType(self)

    def clone(self, *args):
        """clone(RigGeometry self, CopyOp copyop) -> Object"""
        return _osgAnimation.RigGeometry_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(RigGeometry self, Object obj) -> bool"""
        return _osgAnimation.RigGeometry_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(RigGeometry self) -> char const *"""
        return _osgAnimation.RigGeometry_libraryName(self)

    def className(self):
        """className(RigGeometry self) -> char const *"""
        return _osgAnimation.RigGeometry_className(self)

    def setInfluenceMap(self, *args):
        """setInfluenceMap(RigGeometry self, VertexInfluenceMap vertexInfluenceMap)"""
        return _osgAnimation.RigGeometry_setInfluenceMap(self, *args)

    def getInfluenceMap(self, *args):
        """
        getInfluenceMap(RigGeometry self) -> VertexInfluenceMap
        getInfluenceMap(RigGeometry self) -> VertexInfluenceMap
        """
        return _osgAnimation.RigGeometry_getInfluenceMap(self, *args)

    def getSkeleton(self, *args):
        """
        getSkeleton(RigGeometry self) -> Skeleton
        getSkeleton(RigGeometry self) -> Skeleton
        """
        return _osgAnimation.RigGeometry_getSkeleton(self, *args)

    def setSkeleton(self, *args):
        """setSkeleton(RigGeometry self, Skeleton arg2)"""
        return _osgAnimation.RigGeometry_setSkeleton(self, *args)

    def setNeedToComputeMatrix(self, *args):
        """setNeedToComputeMatrix(RigGeometry self, bool state)"""
        return _osgAnimation.RigGeometry_setNeedToComputeMatrix(self, *args)

    def getNeedToComputeMatrix(self):
        """getNeedToComputeMatrix(RigGeometry self) -> bool"""
        return _osgAnimation.RigGeometry_getNeedToComputeMatrix(self)

    def buildVertexInfluenceSet(self):
        """buildVertexInfluenceSet(RigGeometry self)"""
        return _osgAnimation.RigGeometry_buildVertexInfluenceSet(self)

    def getVertexInfluenceSet(self):
        """getVertexInfluenceSet(RigGeometry self) -> VertexInfluenceSet"""
        return _osgAnimation.RigGeometry_getVertexInfluenceSet(self)

    def computeMatrixFromRootSkeleton(self):
        """computeMatrixFromRootSkeleton(RigGeometry self)"""
        return _osgAnimation.RigGeometry_computeMatrixFromRootSkeleton(self)

    def drawImplementation(self, *args):
        """drawImplementation(RigGeometry self, RenderInfo renderInfo)"""
        return _osgAnimation.RigGeometry_drawImplementation(self, *args)

    def update(self):
        """update(RigGeometry self)"""
        return _osgAnimation.RigGeometry_update(self)

    def getMatrixFromSkeletonToGeometry(self):
        """getMatrixFromSkeletonToGeometry(RigGeometry self) -> Matrixd"""
        return _osgAnimation.RigGeometry_getMatrixFromSkeletonToGeometry(self)

    def getInvMatrixFromSkeletonToGeometry(self):
        """getInvMatrixFromSkeletonToGeometry(RigGeometry self) -> Matrixd"""
        return _osgAnimation.RigGeometry_getInvMatrixFromSkeletonToGeometry(self)

    def getSourceGeometry(self, *args):
        """
        getSourceGeometry(RigGeometry self) -> Geometry
        getSourceGeometry(RigGeometry self) -> Geometry
        """
        return _osgAnimation.RigGeometry_getSourceGeometry(self, *args)

    def setSourceGeometry(self, *args):
        """setSourceGeometry(RigGeometry self, Geometry geometry)"""
        return _osgAnimation.RigGeometry_setSourceGeometry(self, *args)

    def copyFrom(self, *args):
        """copyFrom(RigGeometry self, Geometry _from)"""
        return _osgAnimation.RigGeometry_copyFrom(self, *args)

    __swig_destroy__ = _osgAnimation.delete_RigGeometry
    __del__ = lambda self : None;
RigGeometry_swigregister = _osgAnimation.RigGeometry_swigregister
RigGeometry_swigregister(RigGeometry)

class LinkVisitor(osg.NodeVisitor):
    """Proxy of C++ osgAnimation::LinkVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinkVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinkVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::LinkVisitor self) -> LinkVisitor"""
        this = _osgAnimation.new_LinkVisitor()
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(LinkVisitor self) -> char const *"""
        return _osgAnimation.LinkVisitor_libraryName(self)

    def className(self):
        """className(LinkVisitor self) -> char const *"""
        return _osgAnimation.LinkVisitor_className(self)

    def apply(self, *args):
        """
        apply(LinkVisitor self, Node node)
        apply(LinkVisitor self, Geode node)
        """
        return _osgAnimation.LinkVisitor_apply(self, *args)

    def getAnimationList(self):
        """getAnimationList(LinkVisitor self) -> osgAnimation::AnimationList &"""
        return _osgAnimation.LinkVisitor_getAnimationList(self)

    def reset(self):
        """reset(LinkVisitor self)"""
        return _osgAnimation.LinkVisitor_reset(self)

    def getNbLinkedTarget(self):
        """getNbLinkedTarget(LinkVisitor self) -> unsigned int"""
        return _osgAnimation.LinkVisitor_getNbLinkedTarget(self)

    __swig_destroy__ = _osgAnimation.delete_LinkVisitor
    __del__ = lambda self : None;
LinkVisitor_swigregister = _osgAnimation.LinkVisitor_swigregister
LinkVisitor_swigregister(LinkVisitor)

OSGANIMATION_ANIMATION_MANAGER_BASE = _osgAnimation.OSGANIMATION_ANIMATION_MANAGER_BASE
class AnimationManagerBase(osg.NodeCallback):
    """Proxy of C++ osgAnimation::AnimationManagerBase class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationManagerBase, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationManagerBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgAnimation.delete_AnimationManagerBase
    __del__ = lambda self : None;
    def buildTargetReference(self):
        """buildTargetReference(AnimationManagerBase self)"""
        return _osgAnimation.AnimationManagerBase_buildTargetReference(self)

    def registerAnimation(self, *args):
        """registerAnimation(AnimationManagerBase self, Animation arg2)"""
        return _osgAnimation.AnimationManagerBase_registerAnimation(self, *args)

    def unregisterAnimation(self, *args):
        """unregisterAnimation(AnimationManagerBase self, Animation arg2)"""
        return _osgAnimation.AnimationManagerBase_unregisterAnimation(self, *args)

    def link(self, *args):
        """link(AnimationManagerBase self, Node subgraph)"""
        return _osgAnimation.AnimationManagerBase_link(self, *args)

    def update(self, *args):
        """update(AnimationManagerBase self, double t)"""
        return _osgAnimation.AnimationManagerBase_update(self, *args)

    def needToLink(self):
        """needToLink(AnimationManagerBase self) -> bool"""
        return _osgAnimation.AnimationManagerBase_needToLink(self)

    def getAnimationList(self):
        """getAnimationList(AnimationManagerBase self) -> osgAnimation::AnimationList const &"""
        return _osgAnimation.AnimationManagerBase_getAnimationList(self)

    def __call__(self, *args):
        """__call__(AnimationManagerBase self, Node node, NodeVisitor nv)"""
        return _osgAnimation.AnimationManagerBase___call__(self, *args)

    def clearTargets(self):
        """clearTargets(AnimationManagerBase self)"""
        return _osgAnimation.AnimationManagerBase_clearTargets(self)

    def getOrCreateLinkVisitor(self):
        """getOrCreateLinkVisitor(AnimationManagerBase self) -> LinkVisitor"""
        return _osgAnimation.AnimationManagerBase_getOrCreateLinkVisitor(self)

    def setLinkVisitor(self, *args):
        """setLinkVisitor(AnimationManagerBase self, LinkVisitor arg2)"""
        return _osgAnimation.AnimationManagerBase_setLinkVisitor(self, *args)

    def setAutomaticLink(self, *args):
        """setAutomaticLink(AnimationManagerBase self, bool arg2)"""
        return _osgAnimation.AnimationManagerBase_setAutomaticLink(self, *args)

    def getAutomaticLink(self):
        """getAutomaticLink(AnimationManagerBase self) -> bool"""
        return _osgAnimation.AnimationManagerBase_getAutomaticLink(self)

    def isAutomaticLink(self):
        """isAutomaticLink(AnimationManagerBase self) -> bool"""
        return _osgAnimation.AnimationManagerBase_isAutomaticLink(self)

    def dirty(self):
        """dirty(AnimationManagerBase self)"""
        return _osgAnimation.AnimationManagerBase_dirty(self)

AnimationManagerBase_swigregister = _osgAnimation.AnimationManagerBase_swigregister
AnimationManagerBase_swigregister(AnimationManagerBase)

class BasicAnimationManager(AnimationManagerBase):
    """Proxy of C++ osgAnimation::BasicAnimationManager class"""
    __swig_setmethods__ = {}
    for _s in [AnimationManagerBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicAnimationManager, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimationManagerBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicAnimationManager, name)
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(BasicAnimationManager self) -> Object"""
        return _osgAnimation.BasicAnimationManager_cloneType(self)

    def clone(self, *args):
        """clone(BasicAnimationManager self, CopyOp copyop) -> Object"""
        return _osgAnimation.BasicAnimationManager_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(BasicAnimationManager self, Object obj) -> bool"""
        return _osgAnimation.BasicAnimationManager_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(BasicAnimationManager self) -> char const *"""
        return _osgAnimation.BasicAnimationManager_libraryName(self)

    def className(self):
        """className(BasicAnimationManager self) -> char const *"""
        return _osgAnimation.BasicAnimationManager_className(self)

    def __init__(self, *args): 
        """
        __init__(osgAnimation::BasicAnimationManager self) -> BasicAnimationManager
        __init__(osgAnimation::BasicAnimationManager self, AnimationManagerBase b, CopyOp copyop=SHALLOW_COPY) -> BasicAnimationManager
        __init__(osgAnimation::BasicAnimationManager self, AnimationManagerBase b) -> BasicAnimationManager
        """
        this = _osgAnimation.new_BasicAnimationManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_BasicAnimationManager
    __del__ = lambda self : None;
    def update(self, *args):
        """update(BasicAnimationManager self, double time)"""
        return _osgAnimation.BasicAnimationManager_update(self, *args)

    def playAnimation(self, *args):
        """
        playAnimation(BasicAnimationManager self, Animation pAnimation, int priority=0, float weight=1.0)
        playAnimation(BasicAnimationManager self, Animation pAnimation, int priority=0)
        playAnimation(BasicAnimationManager self, Animation pAnimation)
        """
        return _osgAnimation.BasicAnimationManager_playAnimation(self, *args)

    def stopAnimation(self, *args):
        """stopAnimation(BasicAnimationManager self, Animation pAnimation) -> bool"""
        return _osgAnimation.BasicAnimationManager_stopAnimation(self, *args)

    def findAnimation(self, *args):
        """findAnimation(BasicAnimationManager self, Animation pAnimation) -> bool"""
        return _osgAnimation.BasicAnimationManager_findAnimation(self, *args)

    def isPlaying(self, *args):
        """
        isPlaying(BasicAnimationManager self, Animation pAnimation) -> bool
        isPlaying(BasicAnimationManager self, std::string const & animationName) -> bool
        """
        return _osgAnimation.BasicAnimationManager_isPlaying(self, *args)

    def stopAll(self):
        """stopAll(BasicAnimationManager self)"""
        return _osgAnimation.BasicAnimationManager_stopAll(self)

BasicAnimationManager_swigregister = _osgAnimation.BasicAnimationManager_swigregister
BasicAnimationManager_swigregister(BasicAnimationManager)

class vectorQuatKeyframe(_object):
    """Proxy of C++ std::vector<(QuatKeyframe)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorQuatKeyframe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorQuatKeyframe, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorQuatKeyframe self) -> SwigPyIterator"""
        return _osgAnimation.vectorQuatKeyframe_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorQuatKeyframe self) -> bool"""
        return _osgAnimation.vectorQuatKeyframe___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorQuatKeyframe self) -> bool"""
        return _osgAnimation.vectorQuatKeyframe___bool__(self)

    def __len__(self):
        """__len__(vectorQuatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type"""
        return _osgAnimation.vectorQuatKeyframe___len__(self)

    def pop(self):
        """pop(vectorQuatKeyframe self) -> QuatKeyframe"""
        return _osgAnimation.vectorQuatKeyframe_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type j) -> vectorQuatKeyframe"""
        return _osgAnimation.vectorQuatKeyframe___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type j, 
            vectorQuatKeyframe v=std::vector< osgAnimation::TemplateKeyframe< osg::Quat >,std::allocator< osgAnimation::TemplateKeyframe< osg::Quat > > >())
        __setslice__(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type j)
        """
        return _osgAnimation.vectorQuatKeyframe___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type j)"""
        return _osgAnimation.vectorQuatKeyframe___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type i)
        __delitem__(vectorQuatKeyframe self, PySliceObject * slice)
        """
        return _osgAnimation.vectorQuatKeyframe___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorQuatKeyframe self, PySliceObject * slice) -> vectorQuatKeyframe
        __getitem__(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type i) -> QuatKeyframe
        """
        return _osgAnimation.vectorQuatKeyframe___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorQuatKeyframe self, PySliceObject * slice, vectorQuatKeyframe v)
        __setitem__(vectorQuatKeyframe self, PySliceObject * slice)
        __setitem__(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::difference_type i, QuatKeyframe x)
        """
        return _osgAnimation.vectorQuatKeyframe___setitem__(self, *args)

    def append(self, *args):
        """append(vectorQuatKeyframe self, QuatKeyframe x)"""
        return _osgAnimation.vectorQuatKeyframe_append(self, *args)

    def empty(self):
        """empty(vectorQuatKeyframe self) -> bool"""
        return _osgAnimation.vectorQuatKeyframe_empty(self)

    def size(self):
        """size(vectorQuatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type"""
        return _osgAnimation.vectorQuatKeyframe_size(self)

    def clear(self):
        """clear(vectorQuatKeyframe self)"""
        return _osgAnimation.vectorQuatKeyframe_clear(self)

    def swap(self, *args):
        """swap(vectorQuatKeyframe self, vectorQuatKeyframe v)"""
        return _osgAnimation.vectorQuatKeyframe_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorQuatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::allocator_type"""
        return _osgAnimation.vectorQuatKeyframe_get_allocator(self)

    def begin(self):
        """begin(vectorQuatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator"""
        return _osgAnimation.vectorQuatKeyframe_begin(self)

    def end(self):
        """end(vectorQuatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator"""
        return _osgAnimation.vectorQuatKeyframe_end(self)

    def rbegin(self):
        """rbegin(vectorQuatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::reverse_iterator"""
        return _osgAnimation.vectorQuatKeyframe_rbegin(self)

    def rend(self):
        """rend(vectorQuatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::reverse_iterator"""
        return _osgAnimation.vectorQuatKeyframe_rend(self)

    def pop_back(self):
        """pop_back(vectorQuatKeyframe self)"""
        return _osgAnimation.vectorQuatKeyframe_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator pos) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator
        erase(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator first, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator last) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator
        """
        return _osgAnimation.vectorQuatKeyframe_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(QuatKeyframe)> self) -> vectorQuatKeyframe
        __init__(std::vector<(QuatKeyframe)> self, vectorQuatKeyframe arg2) -> vectorQuatKeyframe
        __init__(std::vector<(QuatKeyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type size) -> vectorQuatKeyframe
        __init__(std::vector<(QuatKeyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type size, QuatKeyframe value) -> vectorQuatKeyframe
        """
        this = _osgAnimation.new_vectorQuatKeyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorQuatKeyframe self, QuatKeyframe x)"""
        return _osgAnimation.vectorQuatKeyframe_push_back(self, *args)

    def front(self):
        """front(vectorQuatKeyframe self) -> QuatKeyframe"""
        return _osgAnimation.vectorQuatKeyframe_front(self)

    def back(self):
        """back(vectorQuatKeyframe self) -> QuatKeyframe"""
        return _osgAnimation.vectorQuatKeyframe_back(self)

    def assign(self, *args):
        """assign(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type n, QuatKeyframe x)"""
        return _osgAnimation.vectorQuatKeyframe_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type new_size)
        resize(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type new_size, QuatKeyframe x)
        """
        return _osgAnimation.vectorQuatKeyframe_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator pos, QuatKeyframe x) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator
        insert(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::iterator pos, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type n, 
            QuatKeyframe x)
        """
        return _osgAnimation.vectorQuatKeyframe_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorQuatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type n)"""
        return _osgAnimation.vectorQuatKeyframe_reserve(self, *args)

    def capacity(self):
        """capacity(vectorQuatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Quat > >::size_type"""
        return _osgAnimation.vectorQuatKeyframe_capacity(self)

    __swig_destroy__ = _osgAnimation.delete_vectorQuatKeyframe
    __del__ = lambda self : None;
vectorQuatKeyframe_swigregister = _osgAnimation.vectorQuatKeyframe_swigregister
vectorQuatKeyframe_swigregister(vectorQuatKeyframe)

class QuatInterpolator(_object):
    """Proxy of C++ osgAnimation::TemplateInterpolatorBase<(osg::Quat,osg::Quat)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuatInterpolator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuatInterpolator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_lastKeyAccess"] = _osgAnimation.QuatInterpolator__lastKeyAccess_set
    __swig_getmethods__["_lastKeyAccess"] = _osgAnimation.QuatInterpolator__lastKeyAccess_get
    if _newclass:_lastKeyAccess = _swig_property(_osgAnimation.QuatInterpolator__lastKeyAccess_get, _osgAnimation.QuatInterpolator__lastKeyAccess_set)
    def __init__(self): 
        """__init__(osgAnimation::TemplateInterpolatorBase<(osg::Quat,osg::Quat)> self) -> QuatInterpolator"""
        this = _osgAnimation.new_QuatInterpolator()
        try: self.this.append(this)
        except: self.this = this
    def reset(self):
        """reset(QuatInterpolator self)"""
        return _osgAnimation.QuatInterpolator_reset(self)

    def getKeyIndexFromTime(self, *args):
        """getKeyIndexFromTime(QuatInterpolator self, QuatKeyframeContainer keys, double time) -> int"""
        return _osgAnimation.QuatInterpolator_getKeyIndexFromTime(self, *args)

    __swig_destroy__ = _osgAnimation.delete_QuatInterpolator
    __del__ = lambda self : None;
QuatInterpolator_swigregister = _osgAnimation.QuatInterpolator_swigregister
QuatInterpolator_swigregister(QuatInterpolator)

class QuatKeyframe(Keyframe):
    """Proxy of C++ osgAnimation::TemplateKeyframe<(osg::Quat)> class"""
    __swig_setmethods__ = {}
    for _s in [Keyframe]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuatKeyframe, name, value)
    __swig_getmethods__ = {}
    for _s in [Keyframe]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuatKeyframe, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _osgAnimation.delete_QuatKeyframe
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(osgAnimation::TemplateKeyframe<(osg::Quat)> self) -> QuatKeyframe
        __init__(osgAnimation::TemplateKeyframe<(osg::Quat)> self, double time, Quat value) -> QuatKeyframe
        """
        this = _osgAnimation.new_QuatKeyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args):
        """setValue(QuatKeyframe self, Quat value)"""
        return _osgAnimation.QuatKeyframe_setValue(self, *args)

    def getValue(self):
        """getValue(QuatKeyframe self) -> Quat"""
        return _osgAnimation.QuatKeyframe_getValue(self)

QuatKeyframe_swigregister = _osgAnimation.QuatKeyframe_swigregister
QuatKeyframe_swigregister(QuatKeyframe)

class QuatKeyframeContainer(vectorQuatKeyframe,KeyframeContainer):
    """Proxy of C++ osgAnimation::TemplateKeyframeContainer<(osg::Quat)> class"""
    __swig_setmethods__ = {}
    for _s in [vectorQuatKeyframe,KeyframeContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuatKeyframeContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [vectorQuatKeyframe,KeyframeContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuatKeyframeContainer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateKeyframeContainer<(osg::Quat)> self) -> QuatKeyframeContainer"""
        this = _osgAnimation.new_QuatKeyframeContainer()
        try: self.this.append(this)
        except: self.this = this
    def size(self):
        """size(QuatKeyframeContainer self) -> unsigned int"""
        return _osgAnimation.QuatKeyframeContainer_size(self)

    __swig_destroy__ = _osgAnimation.delete_QuatKeyframeContainer
    __del__ = lambda self : None;
QuatKeyframeContainer_swigregister = _osgAnimation.QuatKeyframeContainer_swigregister
QuatKeyframeContainer_swigregister(QuatKeyframeContainer)

class QuatSphericalLinearInterpolator(QuatInterpolator):
    """Proxy of C++ osgAnimation::TemplateSphericalLinearInterpolator<(osg::Quat,osg::Quat)> class"""
    __swig_setmethods__ = {}
    for _s in [QuatInterpolator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuatSphericalLinearInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [QuatInterpolator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuatSphericalLinearInterpolator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateSphericalLinearInterpolator<(osg::Quat,osg::Quat)> self) -> QuatSphericalLinearInterpolator"""
        this = _osgAnimation.new_QuatSphericalLinearInterpolator()
        try: self.this.append(this)
        except: self.this = this
    def getValue(self, *args):
        """getValue(QuatSphericalLinearInterpolator self, QuatKeyframeContainer keyframes, double time, Quat result)"""
        return _osgAnimation.QuatSphericalLinearInterpolator_getValue(self, *args)

    __swig_destroy__ = _osgAnimation.delete_QuatSphericalLinearInterpolator
    __del__ = lambda self : None;
QuatSphericalLinearInterpolator_swigregister = _osgAnimation.QuatSphericalLinearInterpolator_swigregister
QuatSphericalLinearInterpolator_swigregister(QuatSphericalLinearInterpolator)

class QuatSphericalLinearSampler(Sampler):
    """Proxy of C++ osgAnimation::TemplateSampler<(QuatSphericalLinearInterpolator)> class"""
    __swig_setmethods__ = {}
    for _s in [Sampler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuatSphericalLinearSampler, name, value)
    __swig_getmethods__ = {}
    for _s in [Sampler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuatSphericalLinearSampler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateSampler<(QuatSphericalLinearInterpolator)> self) -> QuatSphericalLinearSampler"""
        this = _osgAnimation.new_QuatSphericalLinearSampler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_QuatSphericalLinearSampler
    __del__ = lambda self : None;
    def getValueAt(self, *args):
        """getValueAt(QuatSphericalLinearSampler self, double time, Quat result)"""
        return _osgAnimation.QuatSphericalLinearSampler_getValueAt(self, *args)

    def setKeyframeContainer(self, *args):
        """setKeyframeContainer(QuatSphericalLinearSampler self, QuatKeyframeContainer kf)"""
        return _osgAnimation.QuatSphericalLinearSampler_setKeyframeContainer(self, *args)

    def getKeyframeContainer(self, *args):
        """
        getKeyframeContainer(QuatSphericalLinearSampler self) -> KeyframeContainer
        getKeyframeContainer(QuatSphericalLinearSampler self) -> KeyframeContainer
        """
        return _osgAnimation.QuatSphericalLinearSampler_getKeyframeContainer(self, *args)

    def getKeyframeContainerTyped(self, *args):
        """
        getKeyframeContainerTyped(QuatSphericalLinearSampler self) -> QuatKeyframeContainer
        getKeyframeContainerTyped(QuatSphericalLinearSampler self) -> QuatKeyframeContainer
        """
        return _osgAnimation.QuatSphericalLinearSampler_getKeyframeContainerTyped(self, *args)

    def getOrCreateKeyframeContainer(self):
        """getOrCreateKeyframeContainer(QuatSphericalLinearSampler self) -> QuatKeyframeContainer"""
        return _osgAnimation.QuatSphericalLinearSampler_getOrCreateKeyframeContainer(self)

    def getStartTime(self):
        """getStartTime(QuatSphericalLinearSampler self) -> double"""
        return _osgAnimation.QuatSphericalLinearSampler_getStartTime(self)

    def getEndTime(self):
        """getEndTime(QuatSphericalLinearSampler self) -> double"""
        return _osgAnimation.QuatSphericalLinearSampler_getEndTime(self)

QuatSphericalLinearSampler_swigregister = _osgAnimation.QuatSphericalLinearSampler_swigregister
QuatSphericalLinearSampler_swigregister(QuatSphericalLinearSampler)

class QuatSphericalLinearChannel(Channel):
    """Proxy of C++ osgAnimation::TemplateChannel<(QuatSphericalLinearSampler)> class"""
    __swig_setmethods__ = {}
    for _s in [Channel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuatSphericalLinearChannel, name, value)
    __swig_getmethods__ = {}
    for _s in [Channel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuatSphericalLinearChannel, name)
    __repr__ = _swig_repr
    def clone(self):
        """clone(QuatSphericalLinearChannel self) -> Channel"""
        return _osgAnimation.QuatSphericalLinearChannel_clone(self)

    def __init__(self, *args): 
        """
        __init__(osgAnimation::TemplateChannel<(QuatSphericalLinearSampler)> self, QuatSphericalLinearChannel channel) -> QuatSphericalLinearChannel
        __init__(osgAnimation::TemplateChannel<(QuatSphericalLinearSampler)> self, QuatSphericalLinearSampler s=None, osgAnimation::TemplateChannel< osgAnimation::TemplateSampler< osgAnimation::TemplateSphericalLinearInterpolator< osg::Quat,osg::Quat > > >::TargetType * target=None) -> QuatSphericalLinearChannel
        __init__(osgAnimation::TemplateChannel<(QuatSphericalLinearSampler)> self, QuatSphericalLinearSampler s=None) -> QuatSphericalLinearChannel
        __init__(osgAnimation::TemplateChannel<(QuatSphericalLinearSampler)> self) -> QuatSphericalLinearChannel
        """
        this = _osgAnimation.new_QuatSphericalLinearChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def createKeyframeContainerFromTargetValue(self):
        """createKeyframeContainerFromTargetValue(QuatSphericalLinearChannel self) -> bool"""
        return _osgAnimation.QuatSphericalLinearChannel_createKeyframeContainerFromTargetValue(self)

    __swig_destroy__ = _osgAnimation.delete_QuatSphericalLinearChannel
    __del__ = lambda self : None;
    def update(self, *args):
        """update(QuatSphericalLinearChannel self, double time, float weight, int priority)"""
        return _osgAnimation.QuatSphericalLinearChannel_update(self, *args)

    def reset(self):
        """reset(QuatSphericalLinearChannel self)"""
        return _osgAnimation.QuatSphericalLinearChannel_reset(self)

    def getTarget(self):
        """getTarget(QuatSphericalLinearChannel self) -> Target"""
        return _osgAnimation.QuatSphericalLinearChannel_getTarget(self)

    def getOrCreateSampler(self):
        """getOrCreateSampler(QuatSphericalLinearChannel self) -> QuatSphericalLinearSampler"""
        return _osgAnimation.QuatSphericalLinearChannel_getOrCreateSampler(self)

    def getSampler(self, *args):
        """
        getSampler(QuatSphericalLinearChannel self) -> Sampler
        getSampler(QuatSphericalLinearChannel self) -> Sampler
        """
        return _osgAnimation.QuatSphericalLinearChannel_getSampler(self, *args)

    def getSamplerTyped(self, *args):
        """
        getSamplerTyped(QuatSphericalLinearChannel self) -> QuatSphericalLinearSampler
        getSamplerTyped(QuatSphericalLinearChannel self) -> QuatSphericalLinearSampler
        """
        return _osgAnimation.QuatSphericalLinearChannel_getSamplerTyped(self, *args)

    def setSampler(self, *args):
        """setSampler(QuatSphericalLinearChannel self, QuatSphericalLinearSampler sampler)"""
        return _osgAnimation.QuatSphericalLinearChannel_setSampler(self, *args)

    def getTargetTyped(self, *args):
        """
        getTargetTyped(QuatSphericalLinearChannel self) -> osgAnimation::TemplateChannel< osgAnimation::TemplateSampler< osgAnimation::TemplateSphericalLinearInterpolator< osg::Quat,osg::Quat > > >::TargetType
        getTargetTyped(QuatSphericalLinearChannel self) -> osgAnimation::TemplateChannel< osgAnimation::TemplateSampler< osgAnimation::TemplateSphericalLinearInterpolator< osg::Quat,osg::Quat > > >::TargetType const *
        """
        return _osgAnimation.QuatSphericalLinearChannel_getTargetTyped(self, *args)

    def setTarget(self, *args):
        """
        setTarget(QuatSphericalLinearChannel self, Target target) -> bool
        setTarget(QuatSphericalLinearChannel self, osgAnimation::TemplateChannel< osgAnimation::TemplateSampler< osgAnimation::TemplateSphericalLinearInterpolator< osg::Quat,osg::Quat > > >::TargetType * target)
        """
        return _osgAnimation.QuatSphericalLinearChannel_setTarget(self, *args)

    def getStartTime(self):
        """getStartTime(QuatSphericalLinearChannel self) -> double"""
        return _osgAnimation.QuatSphericalLinearChannel_getStartTime(self)

    def getEndTime(self):
        """getEndTime(QuatSphericalLinearChannel self) -> double"""
        return _osgAnimation.QuatSphericalLinearChannel_getEndTime(self)

QuatSphericalLinearChannel_swigregister = _osgAnimation.QuatSphericalLinearChannel_swigregister
QuatSphericalLinearChannel_swigregister(QuatSphericalLinearChannel)

class vectorFloatKeyframe(_object):
    """Proxy of C++ std::vector<(FloatKeyframe)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorFloatKeyframe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorFloatKeyframe, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorFloatKeyframe self) -> SwigPyIterator"""
        return _osgAnimation.vectorFloatKeyframe_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorFloatKeyframe self) -> bool"""
        return _osgAnimation.vectorFloatKeyframe___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorFloatKeyframe self) -> bool"""
        return _osgAnimation.vectorFloatKeyframe___bool__(self)

    def __len__(self):
        """__len__(vectorFloatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< float > >::size_type"""
        return _osgAnimation.vectorFloatKeyframe___len__(self)

    def pop(self):
        """pop(vectorFloatKeyframe self) -> FloatKeyframe"""
        return _osgAnimation.vectorFloatKeyframe_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type j) -> vectorFloatKeyframe"""
        return _osgAnimation.vectorFloatKeyframe___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type j, 
            vectorFloatKeyframe v=std::vector< osgAnimation::TemplateKeyframe< float >,std::allocator< osgAnimation::TemplateKeyframe< float > > >())
        __setslice__(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type j)
        """
        return _osgAnimation.vectorFloatKeyframe___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type j)"""
        return _osgAnimation.vectorFloatKeyframe___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type i)
        __delitem__(vectorFloatKeyframe self, PySliceObject * slice)
        """
        return _osgAnimation.vectorFloatKeyframe___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorFloatKeyframe self, PySliceObject * slice) -> vectorFloatKeyframe
        __getitem__(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type i) -> FloatKeyframe
        """
        return _osgAnimation.vectorFloatKeyframe___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorFloatKeyframe self, PySliceObject * slice, vectorFloatKeyframe v)
        __setitem__(vectorFloatKeyframe self, PySliceObject * slice)
        __setitem__(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::difference_type i, FloatKeyframe x)
        """
        return _osgAnimation.vectorFloatKeyframe___setitem__(self, *args)

    def append(self, *args):
        """append(vectorFloatKeyframe self, FloatKeyframe x)"""
        return _osgAnimation.vectorFloatKeyframe_append(self, *args)

    def empty(self):
        """empty(vectorFloatKeyframe self) -> bool"""
        return _osgAnimation.vectorFloatKeyframe_empty(self)

    def size(self):
        """size(vectorFloatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< float > >::size_type"""
        return _osgAnimation.vectorFloatKeyframe_size(self)

    def clear(self):
        """clear(vectorFloatKeyframe self)"""
        return _osgAnimation.vectorFloatKeyframe_clear(self)

    def swap(self, *args):
        """swap(vectorFloatKeyframe self, vectorFloatKeyframe v)"""
        return _osgAnimation.vectorFloatKeyframe_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorFloatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< float > >::allocator_type"""
        return _osgAnimation.vectorFloatKeyframe_get_allocator(self)

    def begin(self):
        """begin(vectorFloatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< float > >::iterator"""
        return _osgAnimation.vectorFloatKeyframe_begin(self)

    def end(self):
        """end(vectorFloatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< float > >::iterator"""
        return _osgAnimation.vectorFloatKeyframe_end(self)

    def rbegin(self):
        """rbegin(vectorFloatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< float > >::reverse_iterator"""
        return _osgAnimation.vectorFloatKeyframe_rbegin(self)

    def rend(self):
        """rend(vectorFloatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< float > >::reverse_iterator"""
        return _osgAnimation.vectorFloatKeyframe_rend(self)

    def pop_back(self):
        """pop_back(vectorFloatKeyframe self)"""
        return _osgAnimation.vectorFloatKeyframe_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::iterator pos) -> std::vector< osgAnimation::TemplateKeyframe< float > >::iterator
        erase(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::iterator first, std::vector< osgAnimation::TemplateKeyframe< float > >::iterator last) -> std::vector< osgAnimation::TemplateKeyframe< float > >::iterator
        """
        return _osgAnimation.vectorFloatKeyframe_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(FloatKeyframe)> self) -> vectorFloatKeyframe
        __init__(std::vector<(FloatKeyframe)> self, vectorFloatKeyframe arg2) -> vectorFloatKeyframe
        __init__(std::vector<(FloatKeyframe)> self, std::vector< osgAnimation::TemplateKeyframe< float > >::size_type size) -> vectorFloatKeyframe
        __init__(std::vector<(FloatKeyframe)> self, std::vector< osgAnimation::TemplateKeyframe< float > >::size_type size, FloatKeyframe value) -> vectorFloatKeyframe
        """
        this = _osgAnimation.new_vectorFloatKeyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorFloatKeyframe self, FloatKeyframe x)"""
        return _osgAnimation.vectorFloatKeyframe_push_back(self, *args)

    def front(self):
        """front(vectorFloatKeyframe self) -> FloatKeyframe"""
        return _osgAnimation.vectorFloatKeyframe_front(self)

    def back(self):
        """back(vectorFloatKeyframe self) -> FloatKeyframe"""
        return _osgAnimation.vectorFloatKeyframe_back(self)

    def assign(self, *args):
        """assign(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::size_type n, FloatKeyframe x)"""
        return _osgAnimation.vectorFloatKeyframe_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::size_type new_size)
        resize(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::size_type new_size, FloatKeyframe x)
        """
        return _osgAnimation.vectorFloatKeyframe_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::iterator pos, FloatKeyframe x) -> std::vector< osgAnimation::TemplateKeyframe< float > >::iterator
        insert(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::iterator pos, std::vector< osgAnimation::TemplateKeyframe< float > >::size_type n, 
            FloatKeyframe x)
        """
        return _osgAnimation.vectorFloatKeyframe_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorFloatKeyframe self, std::vector< osgAnimation::TemplateKeyframe< float > >::size_type n)"""
        return _osgAnimation.vectorFloatKeyframe_reserve(self, *args)

    def capacity(self):
        """capacity(vectorFloatKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< float > >::size_type"""
        return _osgAnimation.vectorFloatKeyframe_capacity(self)

    __swig_destroy__ = _osgAnimation.delete_vectorFloatKeyframe
    __del__ = lambda self : None;
vectorFloatKeyframe_swigregister = _osgAnimation.vectorFloatKeyframe_swigregister
vectorFloatKeyframe_swigregister(vectorFloatKeyframe)

class FloatKeyframe(Keyframe):
    """Proxy of C++ osgAnimation::TemplateKeyframe<(float)> class"""
    __swig_setmethods__ = {}
    for _s in [Keyframe]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatKeyframe, name, value)
    __swig_getmethods__ = {}
    for _s in [Keyframe]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatKeyframe, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _osgAnimation.delete_FloatKeyframe
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(osgAnimation::TemplateKeyframe<(float)> self) -> FloatKeyframe
        __init__(osgAnimation::TemplateKeyframe<(float)> self, double time, float const & value) -> FloatKeyframe
        """
        this = _osgAnimation.new_FloatKeyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args):
        """setValue(FloatKeyframe self, float const & value)"""
        return _osgAnimation.FloatKeyframe_setValue(self, *args)

    def getValue(self):
        """getValue(FloatKeyframe self) -> float const &"""
        return _osgAnimation.FloatKeyframe_getValue(self)

FloatKeyframe_swigregister = _osgAnimation.FloatKeyframe_swigregister
FloatKeyframe_swigregister(FloatKeyframe)

class FloatKeyframeContainer(vectorFloatKeyframe,KeyframeContainer):
    """Proxy of C++ osgAnimation::TemplateKeyframeContainer<(float)> class"""
    __swig_setmethods__ = {}
    for _s in [vectorFloatKeyframe,KeyframeContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatKeyframeContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [vectorFloatKeyframe,KeyframeContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatKeyframeContainer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateKeyframeContainer<(float)> self) -> FloatKeyframeContainer"""
        this = _osgAnimation.new_FloatKeyframeContainer()
        try: self.this.append(this)
        except: self.this = this
    def size(self):
        """size(FloatKeyframeContainer self) -> unsigned int"""
        return _osgAnimation.FloatKeyframeContainer_size(self)

    __swig_destroy__ = _osgAnimation.delete_FloatKeyframeContainer
    __del__ = lambda self : None;
FloatKeyframeContainer_swigregister = _osgAnimation.FloatKeyframeContainer_swigregister
FloatKeyframeContainer_swigregister(FloatKeyframeContainer)

class vectorVec2Keyframe(_object):
    """Proxy of C++ std::vector<(Vec2Keyframe)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec2Keyframe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec2Keyframe, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorVec2Keyframe self) -> SwigPyIterator"""
        return _osgAnimation.vectorVec2Keyframe_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorVec2Keyframe self) -> bool"""
        return _osgAnimation.vectorVec2Keyframe___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorVec2Keyframe self) -> bool"""
        return _osgAnimation.vectorVec2Keyframe___bool__(self)

    def __len__(self):
        """__len__(vectorVec2Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type"""
        return _osgAnimation.vectorVec2Keyframe___len__(self)

    def pop(self):
        """pop(vectorVec2Keyframe self) -> Vec2Keyframe"""
        return _osgAnimation.vectorVec2Keyframe_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type j) -> vectorVec2Keyframe"""
        return _osgAnimation.vectorVec2Keyframe___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type j, 
            vectorVec2Keyframe v=std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f >,std::allocator< osgAnimation::TemplateKeyframe< osg::Vec2f > > >())
        __setslice__(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type j)
        """
        return _osgAnimation.vectorVec2Keyframe___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type j)"""
        return _osgAnimation.vectorVec2Keyframe___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type i)
        __delitem__(vectorVec2Keyframe self, PySliceObject * slice)
        """
        return _osgAnimation.vectorVec2Keyframe___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorVec2Keyframe self, PySliceObject * slice) -> vectorVec2Keyframe
        __getitem__(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type i) -> Vec2Keyframe
        """
        return _osgAnimation.vectorVec2Keyframe___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorVec2Keyframe self, PySliceObject * slice, vectorVec2Keyframe v)
        __setitem__(vectorVec2Keyframe self, PySliceObject * slice)
        __setitem__(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::difference_type i, Vec2Keyframe x)
        """
        return _osgAnimation.vectorVec2Keyframe___setitem__(self, *args)

    def append(self, *args):
        """append(vectorVec2Keyframe self, Vec2Keyframe x)"""
        return _osgAnimation.vectorVec2Keyframe_append(self, *args)

    def empty(self):
        """empty(vectorVec2Keyframe self) -> bool"""
        return _osgAnimation.vectorVec2Keyframe_empty(self)

    def size(self):
        """size(vectorVec2Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type"""
        return _osgAnimation.vectorVec2Keyframe_size(self)

    def clear(self):
        """clear(vectorVec2Keyframe self)"""
        return _osgAnimation.vectorVec2Keyframe_clear(self)

    def swap(self, *args):
        """swap(vectorVec2Keyframe self, vectorVec2Keyframe v)"""
        return _osgAnimation.vectorVec2Keyframe_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorVec2Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::allocator_type"""
        return _osgAnimation.vectorVec2Keyframe_get_allocator(self)

    def begin(self):
        """begin(vectorVec2Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator"""
        return _osgAnimation.vectorVec2Keyframe_begin(self)

    def end(self):
        """end(vectorVec2Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator"""
        return _osgAnimation.vectorVec2Keyframe_end(self)

    def rbegin(self):
        """rbegin(vectorVec2Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::reverse_iterator"""
        return _osgAnimation.vectorVec2Keyframe_rbegin(self)

    def rend(self):
        """rend(vectorVec2Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::reverse_iterator"""
        return _osgAnimation.vectorVec2Keyframe_rend(self)

    def pop_back(self):
        """pop_back(vectorVec2Keyframe self)"""
        return _osgAnimation.vectorVec2Keyframe_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator pos) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator
        erase(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator first, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator last) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator
        """
        return _osgAnimation.vectorVec2Keyframe_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(Vec2Keyframe)> self) -> vectorVec2Keyframe
        __init__(std::vector<(Vec2Keyframe)> self, vectorVec2Keyframe arg2) -> vectorVec2Keyframe
        __init__(std::vector<(Vec2Keyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type size) -> vectorVec2Keyframe
        __init__(std::vector<(Vec2Keyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type size, Vec2Keyframe value) -> vectorVec2Keyframe
        """
        this = _osgAnimation.new_vectorVec2Keyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorVec2Keyframe self, Vec2Keyframe x)"""
        return _osgAnimation.vectorVec2Keyframe_push_back(self, *args)

    def front(self):
        """front(vectorVec2Keyframe self) -> Vec2Keyframe"""
        return _osgAnimation.vectorVec2Keyframe_front(self)

    def back(self):
        """back(vectorVec2Keyframe self) -> Vec2Keyframe"""
        return _osgAnimation.vectorVec2Keyframe_back(self)

    def assign(self, *args):
        """assign(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type n, Vec2Keyframe x)"""
        return _osgAnimation.vectorVec2Keyframe_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type new_size)
        resize(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type new_size, 
            Vec2Keyframe x)
        """
        return _osgAnimation.vectorVec2Keyframe_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator pos, Vec2Keyframe x) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator
        insert(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::iterator pos, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type n, 
            Vec2Keyframe x)
        """
        return _osgAnimation.vectorVec2Keyframe_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorVec2Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type n)"""
        return _osgAnimation.vectorVec2Keyframe_reserve(self, *args)

    def capacity(self):
        """capacity(vectorVec2Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec2f > >::size_type"""
        return _osgAnimation.vectorVec2Keyframe_capacity(self)

    __swig_destroy__ = _osgAnimation.delete_vectorVec2Keyframe
    __del__ = lambda self : None;
vectorVec2Keyframe_swigregister = _osgAnimation.vectorVec2Keyframe_swigregister
vectorVec2Keyframe_swigregister(vectorVec2Keyframe)

class Vec2Keyframe(Keyframe):
    """Proxy of C++ osgAnimation::TemplateKeyframe<(osg::Vec2f)> class"""
    __swig_setmethods__ = {}
    for _s in [Keyframe]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2Keyframe, name, value)
    __swig_getmethods__ = {}
    for _s in [Keyframe]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2Keyframe, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _osgAnimation.delete_Vec2Keyframe
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(osgAnimation::TemplateKeyframe<(osg::Vec2f)> self) -> Vec2Keyframe
        __init__(osgAnimation::TemplateKeyframe<(osg::Vec2f)> self, double time, Vec2f value) -> Vec2Keyframe
        """
        this = _osgAnimation.new_Vec2Keyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args):
        """setValue(Vec2Keyframe self, Vec2f value)"""
        return _osgAnimation.Vec2Keyframe_setValue(self, *args)

    def getValue(self):
        """getValue(Vec2Keyframe self) -> Vec2f"""
        return _osgAnimation.Vec2Keyframe_getValue(self)

Vec2Keyframe_swigregister = _osgAnimation.Vec2Keyframe_swigregister
Vec2Keyframe_swigregister(Vec2Keyframe)

class Vec2KeyframeContainer(vectorVec2Keyframe,KeyframeContainer):
    """Proxy of C++ osgAnimation::TemplateKeyframeContainer<(osg::Vec2f)> class"""
    __swig_setmethods__ = {}
    for _s in [vectorVec2Keyframe,KeyframeContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2KeyframeContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [vectorVec2Keyframe,KeyframeContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2KeyframeContainer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateKeyframeContainer<(osg::Vec2f)> self) -> Vec2KeyframeContainer"""
        this = _osgAnimation.new_Vec2KeyframeContainer()
        try: self.this.append(this)
        except: self.this = this
    def size(self):
        """size(Vec2KeyframeContainer self) -> unsigned int"""
        return _osgAnimation.Vec2KeyframeContainer_size(self)

    __swig_destroy__ = _osgAnimation.delete_Vec2KeyframeContainer
    __del__ = lambda self : None;
Vec2KeyframeContainer_swigregister = _osgAnimation.Vec2KeyframeContainer_swigregister
Vec2KeyframeContainer_swigregister(Vec2KeyframeContainer)

class Vec2LinearSampler(Sampler):
    """Proxy of C++ osgAnimation::TemplateSampler<(osgAnimation::Vec2LinearInterpolator)> class"""
    __swig_setmethods__ = {}
    for _s in [Sampler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2LinearSampler, name, value)
    __swig_getmethods__ = {}
    for _s in [Sampler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2LinearSampler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateSampler<(osgAnimation::Vec2LinearInterpolator)> self) -> Vec2LinearSampler"""
        this = _osgAnimation.new_Vec2LinearSampler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_Vec2LinearSampler
    __del__ = lambda self : None;
    def getValueAt(self, *args):
        """getValueAt(Vec2LinearSampler self, double time, osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec2f,osg::Vec2f > >::UsingType & result)"""
        return _osgAnimation.Vec2LinearSampler_getValueAt(self, *args)

    def setKeyframeContainer(self, *args):
        """setKeyframeContainer(Vec2LinearSampler self, osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec2f,osg::Vec2f > >::KeyframeContainerType * kf)"""
        return _osgAnimation.Vec2LinearSampler_setKeyframeContainer(self, *args)

    def getKeyframeContainer(self, *args):
        """
        getKeyframeContainer(Vec2LinearSampler self) -> KeyframeContainer
        getKeyframeContainer(Vec2LinearSampler self) -> KeyframeContainer
        """
        return _osgAnimation.Vec2LinearSampler_getKeyframeContainer(self, *args)

    def getKeyframeContainerTyped(self, *args):
        """
        getKeyframeContainerTyped(Vec2LinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec2f,osg::Vec2f > >::KeyframeContainerType
        getKeyframeContainerTyped(Vec2LinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec2f,osg::Vec2f > >::KeyframeContainerType const *
        """
        return _osgAnimation.Vec2LinearSampler_getKeyframeContainerTyped(self, *args)

    def getOrCreateKeyframeContainer(self):
        """getOrCreateKeyframeContainer(Vec2LinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec2f,osg::Vec2f > >::KeyframeContainerType *"""
        return _osgAnimation.Vec2LinearSampler_getOrCreateKeyframeContainer(self)

    def getStartTime(self):
        """getStartTime(Vec2LinearSampler self) -> double"""
        return _osgAnimation.Vec2LinearSampler_getStartTime(self)

    def getEndTime(self):
        """getEndTime(Vec2LinearSampler self) -> double"""
        return _osgAnimation.Vec2LinearSampler_getEndTime(self)

Vec2LinearSampler_swigregister = _osgAnimation.Vec2LinearSampler_swigregister
Vec2LinearSampler_swigregister(Vec2LinearSampler)

class vectorVec3Keyframe(_object):
    """Proxy of C++ std::vector<(Vec3Keyframe)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec3Keyframe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec3Keyframe, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorVec3Keyframe self) -> SwigPyIterator"""
        return _osgAnimation.vectorVec3Keyframe_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorVec3Keyframe self) -> bool"""
        return _osgAnimation.vectorVec3Keyframe___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorVec3Keyframe self) -> bool"""
        return _osgAnimation.vectorVec3Keyframe___bool__(self)

    def __len__(self):
        """__len__(vectorVec3Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type"""
        return _osgAnimation.vectorVec3Keyframe___len__(self)

    def pop(self):
        """pop(vectorVec3Keyframe self) -> Vec3Keyframe"""
        return _osgAnimation.vectorVec3Keyframe_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type j) -> vectorVec3Keyframe"""
        return _osgAnimation.vectorVec3Keyframe___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type j, 
            vectorVec3Keyframe v=std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f >,std::allocator< osgAnimation::TemplateKeyframe< osg::Vec3f > > >())
        __setslice__(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type j)
        """
        return _osgAnimation.vectorVec3Keyframe___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type j)"""
        return _osgAnimation.vectorVec3Keyframe___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type i)
        __delitem__(vectorVec3Keyframe self, PySliceObject * slice)
        """
        return _osgAnimation.vectorVec3Keyframe___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorVec3Keyframe self, PySliceObject * slice) -> vectorVec3Keyframe
        __getitem__(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type i) -> Vec3Keyframe
        """
        return _osgAnimation.vectorVec3Keyframe___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorVec3Keyframe self, PySliceObject * slice, vectorVec3Keyframe v)
        __setitem__(vectorVec3Keyframe self, PySliceObject * slice)
        __setitem__(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::difference_type i, Vec3Keyframe x)
        """
        return _osgAnimation.vectorVec3Keyframe___setitem__(self, *args)

    def append(self, *args):
        """append(vectorVec3Keyframe self, Vec3Keyframe x)"""
        return _osgAnimation.vectorVec3Keyframe_append(self, *args)

    def empty(self):
        """empty(vectorVec3Keyframe self) -> bool"""
        return _osgAnimation.vectorVec3Keyframe_empty(self)

    def size(self):
        """size(vectorVec3Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type"""
        return _osgAnimation.vectorVec3Keyframe_size(self)

    def clear(self):
        """clear(vectorVec3Keyframe self)"""
        return _osgAnimation.vectorVec3Keyframe_clear(self)

    def swap(self, *args):
        """swap(vectorVec3Keyframe self, vectorVec3Keyframe v)"""
        return _osgAnimation.vectorVec3Keyframe_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorVec3Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::allocator_type"""
        return _osgAnimation.vectorVec3Keyframe_get_allocator(self)

    def begin(self):
        """begin(vectorVec3Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator"""
        return _osgAnimation.vectorVec3Keyframe_begin(self)

    def end(self):
        """end(vectorVec3Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator"""
        return _osgAnimation.vectorVec3Keyframe_end(self)

    def rbegin(self):
        """rbegin(vectorVec3Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::reverse_iterator"""
        return _osgAnimation.vectorVec3Keyframe_rbegin(self)

    def rend(self):
        """rend(vectorVec3Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::reverse_iterator"""
        return _osgAnimation.vectorVec3Keyframe_rend(self)

    def pop_back(self):
        """pop_back(vectorVec3Keyframe self)"""
        return _osgAnimation.vectorVec3Keyframe_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator pos) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator
        erase(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator first, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator last) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator
        """
        return _osgAnimation.vectorVec3Keyframe_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(Vec3Keyframe)> self) -> vectorVec3Keyframe
        __init__(std::vector<(Vec3Keyframe)> self, vectorVec3Keyframe arg2) -> vectorVec3Keyframe
        __init__(std::vector<(Vec3Keyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type size) -> vectorVec3Keyframe
        __init__(std::vector<(Vec3Keyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type size, Vec3Keyframe value) -> vectorVec3Keyframe
        """
        this = _osgAnimation.new_vectorVec3Keyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorVec3Keyframe self, Vec3Keyframe x)"""
        return _osgAnimation.vectorVec3Keyframe_push_back(self, *args)

    def front(self):
        """front(vectorVec3Keyframe self) -> Vec3Keyframe"""
        return _osgAnimation.vectorVec3Keyframe_front(self)

    def back(self):
        """back(vectorVec3Keyframe self) -> Vec3Keyframe"""
        return _osgAnimation.vectorVec3Keyframe_back(self)

    def assign(self, *args):
        """assign(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type n, Vec3Keyframe x)"""
        return _osgAnimation.vectorVec3Keyframe_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type new_size)
        resize(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type new_size, 
            Vec3Keyframe x)
        """
        return _osgAnimation.vectorVec3Keyframe_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator pos, Vec3Keyframe x) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator
        insert(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::iterator pos, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type n, 
            Vec3Keyframe x)
        """
        return _osgAnimation.vectorVec3Keyframe_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorVec3Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type n)"""
        return _osgAnimation.vectorVec3Keyframe_reserve(self, *args)

    def capacity(self):
        """capacity(vectorVec3Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec3f > >::size_type"""
        return _osgAnimation.vectorVec3Keyframe_capacity(self)

    __swig_destroy__ = _osgAnimation.delete_vectorVec3Keyframe
    __del__ = lambda self : None;
vectorVec3Keyframe_swigregister = _osgAnimation.vectorVec3Keyframe_swigregister
vectorVec3Keyframe_swigregister(vectorVec3Keyframe)

class Vec3Keyframe(Keyframe):
    """Proxy of C++ osgAnimation::TemplateKeyframe<(osg::Vec3f)> class"""
    __swig_setmethods__ = {}
    for _s in [Keyframe]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3Keyframe, name, value)
    __swig_getmethods__ = {}
    for _s in [Keyframe]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3Keyframe, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _osgAnimation.delete_Vec3Keyframe
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(osgAnimation::TemplateKeyframe<(osg::Vec3f)> self) -> Vec3Keyframe
        __init__(osgAnimation::TemplateKeyframe<(osg::Vec3f)> self, double time, Vec3f value) -> Vec3Keyframe
        """
        this = _osgAnimation.new_Vec3Keyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args):
        """setValue(Vec3Keyframe self, Vec3f value)"""
        return _osgAnimation.Vec3Keyframe_setValue(self, *args)

    def getValue(self):
        """getValue(Vec3Keyframe self) -> Vec3f"""
        return _osgAnimation.Vec3Keyframe_getValue(self)

Vec3Keyframe_swigregister = _osgAnimation.Vec3Keyframe_swigregister
Vec3Keyframe_swigregister(Vec3Keyframe)

class Vec3KeyframeContainer(vectorVec3Keyframe,KeyframeContainer):
    """Proxy of C++ osgAnimation::TemplateKeyframeContainer<(osg::Vec3f)> class"""
    __swig_setmethods__ = {}
    for _s in [vectorVec3Keyframe,KeyframeContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3KeyframeContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [vectorVec3Keyframe,KeyframeContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3KeyframeContainer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateKeyframeContainer<(osg::Vec3f)> self) -> Vec3KeyframeContainer"""
        this = _osgAnimation.new_Vec3KeyframeContainer()
        try: self.this.append(this)
        except: self.this = this
    def size(self):
        """size(Vec3KeyframeContainer self) -> unsigned int"""
        return _osgAnimation.Vec3KeyframeContainer_size(self)

    __swig_destroy__ = _osgAnimation.delete_Vec3KeyframeContainer
    __del__ = lambda self : None;
Vec3KeyframeContainer_swigregister = _osgAnimation.Vec3KeyframeContainer_swigregister
Vec3KeyframeContainer_swigregister(Vec3KeyframeContainer)

class Vec3LinearSampler(Sampler):
    """Proxy of C++ osgAnimation::TemplateSampler<(osgAnimation::Vec3LinearInterpolator)> class"""
    __swig_setmethods__ = {}
    for _s in [Sampler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3LinearSampler, name, value)
    __swig_getmethods__ = {}
    for _s in [Sampler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3LinearSampler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateSampler<(osgAnimation::Vec3LinearInterpolator)> self) -> Vec3LinearSampler"""
        this = _osgAnimation.new_Vec3LinearSampler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_Vec3LinearSampler
    __del__ = lambda self : None;
    def getValueAt(self, *args):
        """getValueAt(Vec3LinearSampler self, double time, osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec3f,osg::Vec3f > >::UsingType & result)"""
        return _osgAnimation.Vec3LinearSampler_getValueAt(self, *args)

    def setKeyframeContainer(self, *args):
        """setKeyframeContainer(Vec3LinearSampler self, osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec3f,osg::Vec3f > >::KeyframeContainerType * kf)"""
        return _osgAnimation.Vec3LinearSampler_setKeyframeContainer(self, *args)

    def getKeyframeContainer(self, *args):
        """
        getKeyframeContainer(Vec3LinearSampler self) -> KeyframeContainer
        getKeyframeContainer(Vec3LinearSampler self) -> KeyframeContainer
        """
        return _osgAnimation.Vec3LinearSampler_getKeyframeContainer(self, *args)

    def getKeyframeContainerTyped(self, *args):
        """
        getKeyframeContainerTyped(Vec3LinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec3f,osg::Vec3f > >::KeyframeContainerType
        getKeyframeContainerTyped(Vec3LinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec3f,osg::Vec3f > >::KeyframeContainerType const *
        """
        return _osgAnimation.Vec3LinearSampler_getKeyframeContainerTyped(self, *args)

    def getOrCreateKeyframeContainer(self):
        """getOrCreateKeyframeContainer(Vec3LinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec3f,osg::Vec3f > >::KeyframeContainerType *"""
        return _osgAnimation.Vec3LinearSampler_getOrCreateKeyframeContainer(self)

    def getStartTime(self):
        """getStartTime(Vec3LinearSampler self) -> double"""
        return _osgAnimation.Vec3LinearSampler_getStartTime(self)

    def getEndTime(self):
        """getEndTime(Vec3LinearSampler self) -> double"""
        return _osgAnimation.Vec3LinearSampler_getEndTime(self)

Vec3LinearSampler_swigregister = _osgAnimation.Vec3LinearSampler_swigregister
Vec3LinearSampler_swigregister(Vec3LinearSampler)

class vectorVec4Keyframe(_object):
    """Proxy of C++ std::vector<(Vec4Keyframe)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec4Keyframe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec4Keyframe, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorVec4Keyframe self) -> SwigPyIterator"""
        return _osgAnimation.vectorVec4Keyframe_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorVec4Keyframe self) -> bool"""
        return _osgAnimation.vectorVec4Keyframe___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorVec4Keyframe self) -> bool"""
        return _osgAnimation.vectorVec4Keyframe___bool__(self)

    def __len__(self):
        """__len__(vectorVec4Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type"""
        return _osgAnimation.vectorVec4Keyframe___len__(self)

    def pop(self):
        """pop(vectorVec4Keyframe self) -> Vec4Keyframe"""
        return _osgAnimation.vectorVec4Keyframe_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type j) -> vectorVec4Keyframe"""
        return _osgAnimation.vectorVec4Keyframe___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type j, 
            vectorVec4Keyframe v=std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f >,std::allocator< osgAnimation::TemplateKeyframe< osg::Vec4f > > >())
        __setslice__(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type j)
        """
        return _osgAnimation.vectorVec4Keyframe___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type i, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type j)"""
        return _osgAnimation.vectorVec4Keyframe___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type i)
        __delitem__(vectorVec4Keyframe self, PySliceObject * slice)
        """
        return _osgAnimation.vectorVec4Keyframe___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorVec4Keyframe self, PySliceObject * slice) -> vectorVec4Keyframe
        __getitem__(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type i) -> Vec4Keyframe
        """
        return _osgAnimation.vectorVec4Keyframe___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorVec4Keyframe self, PySliceObject * slice, vectorVec4Keyframe v)
        __setitem__(vectorVec4Keyframe self, PySliceObject * slice)
        __setitem__(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::difference_type i, Vec4Keyframe x)
        """
        return _osgAnimation.vectorVec4Keyframe___setitem__(self, *args)

    def append(self, *args):
        """append(vectorVec4Keyframe self, Vec4Keyframe x)"""
        return _osgAnimation.vectorVec4Keyframe_append(self, *args)

    def empty(self):
        """empty(vectorVec4Keyframe self) -> bool"""
        return _osgAnimation.vectorVec4Keyframe_empty(self)

    def size(self):
        """size(vectorVec4Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type"""
        return _osgAnimation.vectorVec4Keyframe_size(self)

    def clear(self):
        """clear(vectorVec4Keyframe self)"""
        return _osgAnimation.vectorVec4Keyframe_clear(self)

    def swap(self, *args):
        """swap(vectorVec4Keyframe self, vectorVec4Keyframe v)"""
        return _osgAnimation.vectorVec4Keyframe_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorVec4Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::allocator_type"""
        return _osgAnimation.vectorVec4Keyframe_get_allocator(self)

    def begin(self):
        """begin(vectorVec4Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator"""
        return _osgAnimation.vectorVec4Keyframe_begin(self)

    def end(self):
        """end(vectorVec4Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator"""
        return _osgAnimation.vectorVec4Keyframe_end(self)

    def rbegin(self):
        """rbegin(vectorVec4Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::reverse_iterator"""
        return _osgAnimation.vectorVec4Keyframe_rbegin(self)

    def rend(self):
        """rend(vectorVec4Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::reverse_iterator"""
        return _osgAnimation.vectorVec4Keyframe_rend(self)

    def pop_back(self):
        """pop_back(vectorVec4Keyframe self)"""
        return _osgAnimation.vectorVec4Keyframe_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator pos) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator
        erase(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator first, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator last) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator
        """
        return _osgAnimation.vectorVec4Keyframe_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(Vec4Keyframe)> self) -> vectorVec4Keyframe
        __init__(std::vector<(Vec4Keyframe)> self, vectorVec4Keyframe arg2) -> vectorVec4Keyframe
        __init__(std::vector<(Vec4Keyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type size) -> vectorVec4Keyframe
        __init__(std::vector<(Vec4Keyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type size, Vec4Keyframe value) -> vectorVec4Keyframe
        """
        this = _osgAnimation.new_vectorVec4Keyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorVec4Keyframe self, Vec4Keyframe x)"""
        return _osgAnimation.vectorVec4Keyframe_push_back(self, *args)

    def front(self):
        """front(vectorVec4Keyframe self) -> Vec4Keyframe"""
        return _osgAnimation.vectorVec4Keyframe_front(self)

    def back(self):
        """back(vectorVec4Keyframe self) -> Vec4Keyframe"""
        return _osgAnimation.vectorVec4Keyframe_back(self)

    def assign(self, *args):
        """assign(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type n, Vec4Keyframe x)"""
        return _osgAnimation.vectorVec4Keyframe_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type new_size)
        resize(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type new_size, 
            Vec4Keyframe x)
        """
        return _osgAnimation.vectorVec4Keyframe_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator pos, Vec4Keyframe x) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator
        insert(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::iterator pos, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type n, 
            Vec4Keyframe x)
        """
        return _osgAnimation.vectorVec4Keyframe_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorVec4Keyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type n)"""
        return _osgAnimation.vectorVec4Keyframe_reserve(self, *args)

    def capacity(self):
        """capacity(vectorVec4Keyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Vec4f > >::size_type"""
        return _osgAnimation.vectorVec4Keyframe_capacity(self)

    __swig_destroy__ = _osgAnimation.delete_vectorVec4Keyframe
    __del__ = lambda self : None;
vectorVec4Keyframe_swigregister = _osgAnimation.vectorVec4Keyframe_swigregister
vectorVec4Keyframe_swigregister(vectorVec4Keyframe)

class Vec4Keyframe(Keyframe):
    """Proxy of C++ osgAnimation::TemplateKeyframe<(osg::Vec4f)> class"""
    __swig_setmethods__ = {}
    for _s in [Keyframe]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4Keyframe, name, value)
    __swig_getmethods__ = {}
    for _s in [Keyframe]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4Keyframe, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _osgAnimation.delete_Vec4Keyframe
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(osgAnimation::TemplateKeyframe<(osg::Vec4f)> self) -> Vec4Keyframe
        __init__(osgAnimation::TemplateKeyframe<(osg::Vec4f)> self, double time, Vec4f value) -> Vec4Keyframe
        """
        this = _osgAnimation.new_Vec4Keyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args):
        """setValue(Vec4Keyframe self, Vec4f value)"""
        return _osgAnimation.Vec4Keyframe_setValue(self, *args)

    def getValue(self):
        """getValue(Vec4Keyframe self) -> Vec4f"""
        return _osgAnimation.Vec4Keyframe_getValue(self)

Vec4Keyframe_swigregister = _osgAnimation.Vec4Keyframe_swigregister
Vec4Keyframe_swigregister(Vec4Keyframe)

class Vec4KeyframeContainer(vectorVec4Keyframe,KeyframeContainer):
    """Proxy of C++ osgAnimation::TemplateKeyframeContainer<(osg::Vec4f)> class"""
    __swig_setmethods__ = {}
    for _s in [vectorVec4Keyframe,KeyframeContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4KeyframeContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [vectorVec4Keyframe,KeyframeContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4KeyframeContainer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateKeyframeContainer<(osg::Vec4f)> self) -> Vec4KeyframeContainer"""
        this = _osgAnimation.new_Vec4KeyframeContainer()
        try: self.this.append(this)
        except: self.this = this
    def size(self):
        """size(Vec4KeyframeContainer self) -> unsigned int"""
        return _osgAnimation.Vec4KeyframeContainer_size(self)

    __swig_destroy__ = _osgAnimation.delete_Vec4KeyframeContainer
    __del__ = lambda self : None;
Vec4KeyframeContainer_swigregister = _osgAnimation.Vec4KeyframeContainer_swigregister
Vec4KeyframeContainer_swigregister(Vec4KeyframeContainer)

class Vec4LinearSampler(Sampler):
    """Proxy of C++ osgAnimation::TemplateSampler<(osgAnimation::Vec4LinearInterpolator)> class"""
    __swig_setmethods__ = {}
    for _s in [Sampler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4LinearSampler, name, value)
    __swig_getmethods__ = {}
    for _s in [Sampler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4LinearSampler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateSampler<(osgAnimation::Vec4LinearInterpolator)> self) -> Vec4LinearSampler"""
        this = _osgAnimation.new_Vec4LinearSampler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_Vec4LinearSampler
    __del__ = lambda self : None;
    def getValueAt(self, *args):
        """getValueAt(Vec4LinearSampler self, double time, osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec4f,osg::Vec4f > >::UsingType & result)"""
        return _osgAnimation.Vec4LinearSampler_getValueAt(self, *args)

    def setKeyframeContainer(self, *args):
        """setKeyframeContainer(Vec4LinearSampler self, osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec4f,osg::Vec4f > >::KeyframeContainerType * kf)"""
        return _osgAnimation.Vec4LinearSampler_setKeyframeContainer(self, *args)

    def getKeyframeContainer(self, *args):
        """
        getKeyframeContainer(Vec4LinearSampler self) -> KeyframeContainer
        getKeyframeContainer(Vec4LinearSampler self) -> KeyframeContainer
        """
        return _osgAnimation.Vec4LinearSampler_getKeyframeContainer(self, *args)

    def getKeyframeContainerTyped(self, *args):
        """
        getKeyframeContainerTyped(Vec4LinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec4f,osg::Vec4f > >::KeyframeContainerType
        getKeyframeContainerTyped(Vec4LinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec4f,osg::Vec4f > >::KeyframeContainerType const *
        """
        return _osgAnimation.Vec4LinearSampler_getKeyframeContainerTyped(self, *args)

    def getOrCreateKeyframeContainer(self):
        """getOrCreateKeyframeContainer(Vec4LinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Vec4f,osg::Vec4f > >::KeyframeContainerType *"""
        return _osgAnimation.Vec4LinearSampler_getOrCreateKeyframeContainer(self)

    def getStartTime(self):
        """getStartTime(Vec4LinearSampler self) -> double"""
        return _osgAnimation.Vec4LinearSampler_getStartTime(self)

    def getEndTime(self):
        """getEndTime(Vec4LinearSampler self) -> double"""
        return _osgAnimation.Vec4LinearSampler_getEndTime(self)

Vec4LinearSampler_swigregister = _osgAnimation.Vec4LinearSampler_swigregister
Vec4LinearSampler_swigregister(Vec4LinearSampler)

class vectorMatrixKeyframe(_object):
    """Proxy of C++ std::vector<(MatrixKeyframe)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorMatrixKeyframe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorMatrixKeyframe, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorMatrixKeyframe self) -> SwigPyIterator"""
        return _osgAnimation.vectorMatrixKeyframe_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorMatrixKeyframe self) -> bool"""
        return _osgAnimation.vectorMatrixKeyframe___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorMatrixKeyframe self) -> bool"""
        return _osgAnimation.vectorMatrixKeyframe___bool__(self)

    def __len__(self):
        """__len__(vectorMatrixKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type"""
        return _osgAnimation.vectorMatrixKeyframe___len__(self)

    def pop(self):
        """pop(vectorMatrixKeyframe self) -> MatrixKeyframe"""
        return _osgAnimation.vectorMatrixKeyframe_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type i, 
            std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type j) -> vectorMatrixKeyframe
        """
        return _osgAnimation.vectorMatrixKeyframe___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type i, 
            std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type j, 
            vectorMatrixKeyframe v=std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf >,std::allocator< osgAnimation::TemplateKeyframe< osg::Matrixf > > >())
        __setslice__(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type i, 
            std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type j)
        """
        return _osgAnimation.vectorMatrixKeyframe___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type i, 
            std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type j)
        """
        return _osgAnimation.vectorMatrixKeyframe___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type i)
        __delitem__(vectorMatrixKeyframe self, PySliceObject * slice)
        """
        return _osgAnimation.vectorMatrixKeyframe___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorMatrixKeyframe self, PySliceObject * slice) -> vectorMatrixKeyframe
        __getitem__(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type i) -> MatrixKeyframe
        """
        return _osgAnimation.vectorMatrixKeyframe___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorMatrixKeyframe self, PySliceObject * slice, vectorMatrixKeyframe v)
        __setitem__(vectorMatrixKeyframe self, PySliceObject * slice)
        __setitem__(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::difference_type i, 
            MatrixKeyframe x)
        """
        return _osgAnimation.vectorMatrixKeyframe___setitem__(self, *args)

    def append(self, *args):
        """append(vectorMatrixKeyframe self, MatrixKeyframe x)"""
        return _osgAnimation.vectorMatrixKeyframe_append(self, *args)

    def empty(self):
        """empty(vectorMatrixKeyframe self) -> bool"""
        return _osgAnimation.vectorMatrixKeyframe_empty(self)

    def size(self):
        """size(vectorMatrixKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type"""
        return _osgAnimation.vectorMatrixKeyframe_size(self)

    def clear(self):
        """clear(vectorMatrixKeyframe self)"""
        return _osgAnimation.vectorMatrixKeyframe_clear(self)

    def swap(self, *args):
        """swap(vectorMatrixKeyframe self, vectorMatrixKeyframe v)"""
        return _osgAnimation.vectorMatrixKeyframe_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorMatrixKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::allocator_type"""
        return _osgAnimation.vectorMatrixKeyframe_get_allocator(self)

    def begin(self):
        """begin(vectorMatrixKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator"""
        return _osgAnimation.vectorMatrixKeyframe_begin(self)

    def end(self):
        """end(vectorMatrixKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator"""
        return _osgAnimation.vectorMatrixKeyframe_end(self)

    def rbegin(self):
        """rbegin(vectorMatrixKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::reverse_iterator"""
        return _osgAnimation.vectorMatrixKeyframe_rbegin(self)

    def rend(self):
        """rend(vectorMatrixKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::reverse_iterator"""
        return _osgAnimation.vectorMatrixKeyframe_rend(self)

    def pop_back(self):
        """pop_back(vectorMatrixKeyframe self)"""
        return _osgAnimation.vectorMatrixKeyframe_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator pos) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator
        erase(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator first, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator last) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator
        """
        return _osgAnimation.vectorMatrixKeyframe_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(MatrixKeyframe)> self) -> vectorMatrixKeyframe
        __init__(std::vector<(MatrixKeyframe)> self, vectorMatrixKeyframe arg2) -> vectorMatrixKeyframe
        __init__(std::vector<(MatrixKeyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type size) -> vectorMatrixKeyframe
        __init__(std::vector<(MatrixKeyframe)> self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type size, MatrixKeyframe value) -> vectorMatrixKeyframe
        """
        this = _osgAnimation.new_vectorMatrixKeyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorMatrixKeyframe self, MatrixKeyframe x)"""
        return _osgAnimation.vectorMatrixKeyframe_push_back(self, *args)

    def front(self):
        """front(vectorMatrixKeyframe self) -> MatrixKeyframe"""
        return _osgAnimation.vectorMatrixKeyframe_front(self)

    def back(self):
        """back(vectorMatrixKeyframe self) -> MatrixKeyframe"""
        return _osgAnimation.vectorMatrixKeyframe_back(self)

    def assign(self, *args):
        """assign(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type n, MatrixKeyframe x)"""
        return _osgAnimation.vectorMatrixKeyframe_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type new_size)
        resize(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type new_size, 
            MatrixKeyframe x)
        """
        return _osgAnimation.vectorMatrixKeyframe_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator pos, MatrixKeyframe x) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator
        insert(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::iterator pos, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type n, 
            MatrixKeyframe x)
        """
        return _osgAnimation.vectorMatrixKeyframe_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorMatrixKeyframe self, std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type n)"""
        return _osgAnimation.vectorMatrixKeyframe_reserve(self, *args)

    def capacity(self):
        """capacity(vectorMatrixKeyframe self) -> std::vector< osgAnimation::TemplateKeyframe< osg::Matrixf > >::size_type"""
        return _osgAnimation.vectorMatrixKeyframe_capacity(self)

    __swig_destroy__ = _osgAnimation.delete_vectorMatrixKeyframe
    __del__ = lambda self : None;
vectorMatrixKeyframe_swigregister = _osgAnimation.vectorMatrixKeyframe_swigregister
vectorMatrixKeyframe_swigregister(vectorMatrixKeyframe)

class MatrixKeyframe(Keyframe):
    """Proxy of C++ osgAnimation::TemplateKeyframe<(osg::Matrixf)> class"""
    __swig_setmethods__ = {}
    for _s in [Keyframe]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixKeyframe, name, value)
    __swig_getmethods__ = {}
    for _s in [Keyframe]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixKeyframe, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _osgAnimation.delete_MatrixKeyframe
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(osgAnimation::TemplateKeyframe<(osg::Matrixf)> self) -> MatrixKeyframe
        __init__(osgAnimation::TemplateKeyframe<(osg::Matrixf)> self, double time, Matrixf value) -> MatrixKeyframe
        """
        this = _osgAnimation.new_MatrixKeyframe(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args):
        """setValue(MatrixKeyframe self, Matrixf value)"""
        return _osgAnimation.MatrixKeyframe_setValue(self, *args)

    def getValue(self):
        """getValue(MatrixKeyframe self) -> Matrixf"""
        return _osgAnimation.MatrixKeyframe_getValue(self)

MatrixKeyframe_swigregister = _osgAnimation.MatrixKeyframe_swigregister
MatrixKeyframe_swigregister(MatrixKeyframe)

class MatrixKeyframeContainer(vectorMatrixKeyframe,KeyframeContainer):
    """Proxy of C++ osgAnimation::TemplateKeyframeContainer<(osg::Matrixf)> class"""
    __swig_setmethods__ = {}
    for _s in [vectorMatrixKeyframe,KeyframeContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixKeyframeContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [vectorMatrixKeyframe,KeyframeContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixKeyframeContainer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateKeyframeContainer<(osg::Matrixf)> self) -> MatrixKeyframeContainer"""
        this = _osgAnimation.new_MatrixKeyframeContainer()
        try: self.this.append(this)
        except: self.this = this
    def size(self):
        """size(MatrixKeyframeContainer self) -> unsigned int"""
        return _osgAnimation.MatrixKeyframeContainer_size(self)

    __swig_destroy__ = _osgAnimation.delete_MatrixKeyframeContainer
    __del__ = lambda self : None;
MatrixKeyframeContainer_swigregister = _osgAnimation.MatrixKeyframeContainer_swigregister
MatrixKeyframeContainer_swigregister(MatrixKeyframeContainer)

class MatrixLinearSampler(Sampler):
    """Proxy of C++ osgAnimation::TemplateSampler<(osgAnimation::MatrixLinearInterpolator)> class"""
    __swig_setmethods__ = {}
    for _s in [Sampler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixLinearSampler, name, value)
    __swig_getmethods__ = {}
    for _s in [Sampler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixLinearSampler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(osgAnimation::TemplateSampler<(osgAnimation::MatrixLinearInterpolator)> self) -> MatrixLinearSampler"""
        this = _osgAnimation.new_MatrixLinearSampler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgAnimation.delete_MatrixLinearSampler
    __del__ = lambda self : None;
    def getValueAt(self, *args):
        """getValueAt(MatrixLinearSampler self, double time, osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Matrixf,osg::Matrixf > >::UsingType & result)"""
        return _osgAnimation.MatrixLinearSampler_getValueAt(self, *args)

    def setKeyframeContainer(self, *args):
        """setKeyframeContainer(MatrixLinearSampler self, osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Matrixf,osg::Matrixf > >::KeyframeContainerType * kf)"""
        return _osgAnimation.MatrixLinearSampler_setKeyframeContainer(self, *args)

    def getKeyframeContainer(self, *args):
        """
        getKeyframeContainer(MatrixLinearSampler self) -> KeyframeContainer
        getKeyframeContainer(MatrixLinearSampler self) -> KeyframeContainer
        """
        return _osgAnimation.MatrixLinearSampler_getKeyframeContainer(self, *args)

    def getKeyframeContainerTyped(self, *args):
        """
        getKeyframeContainerTyped(MatrixLinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Matrixf,osg::Matrixf > >::KeyframeContainerType
        getKeyframeContainerTyped(MatrixLinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Matrixf,osg::Matrixf > >::KeyframeContainerType const *
        """
        return _osgAnimation.MatrixLinearSampler_getKeyframeContainerTyped(self, *args)

    def getOrCreateKeyframeContainer(self):
        """getOrCreateKeyframeContainer(MatrixLinearSampler self) -> osgAnimation::TemplateSampler< osgAnimation::TemplateLinearInterpolator< osg::Matrixf,osg::Matrixf > >::KeyframeContainerType *"""
        return _osgAnimation.MatrixLinearSampler_getOrCreateKeyframeContainer(self)

    def getStartTime(self):
        """getStartTime(MatrixLinearSampler self) -> double"""
        return _osgAnimation.MatrixLinearSampler_getStartTime(self)

    def getEndTime(self):
        """getEndTime(MatrixLinearSampler self) -> double"""
        return _osgAnimation.MatrixLinearSampler_getEndTime(self)

MatrixLinearSampler_swigregister = _osgAnimation.MatrixLinearSampler_swigregister
MatrixLinearSampler_swigregister(MatrixLinearSampler)

# This file is compatible with both classic and new-style classes.


